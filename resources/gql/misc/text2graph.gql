 MATCH (:Actor{name:'Tom Hanks'})-[:ACTED_IN]->(:Movie)<-[:DIRECTED]-(directors:Director) RETURN COUNT(directors) AS NumberOfDirectorsWorkedWithTomHanks
 MATCH (:Article{`abstract`:'  Generalizing the construction of the Maslov class for a Lagrangian embedding in a symplectic vector space, we prove that it is possible to give a consistent definition of this class for any Lagrangian submanifold of a Calabi-Yau manifold. Moreover, we prove that this class can be represented by the contraction of the Kaehler form associated to the Calabi-Yau metric, with the mean curvature vector field of the Lagrangian embedding. Finally, we suggest a possible generalization of the Maslov class for Lagrangian submanifolds of any symplectic manifold, via the mean curvature representation. '})-[]->() RETURN `path`
 MATCH (:Article{article_id:'1008'})-[]->() RETURN `path`
 MATCH (:Article{article_id:'1013'})-[]->() RETURN `path`
 MATCH (:Article{title:'Free Field Construction for the ABF Models in Regime II'})-[]->() RETURN `path`
 MATCH (:Author{author_id:'788db042978edbbfc654927e23ac21d1'})-[]->() RETURN `path`
 MATCH (:Author{last_name:'Keller'})-[]->() RETURN `path`
 MATCH (:Categories{category_id:'775271e2a118257e7308fe4c21c9d0b4'})-[]->() RETURN `path`
 MATCH (:Categories{specifications:'nlin.SI'})-[]->() RETURN `path`
 MATCH (:Customer)-[p:PURCHASED]->(a:Article)-[:VARIANT_OF]->(pr:`Product`{productTypeName:'Jacket'}) RETURN pr.prodName, COUNT(p) AS purchaseCount ORDER BY purchaseCount DESC LIMIT 1
 MATCH (:DOI{doi_id:'ee4af8f04acefe1036a78a4436691f55'})-[]->() RETURN `path`
 MATCH (:DOI{name:'10.1007/s00220-004-1078-7'})-[]->() RETURN `path`
 MATCH (:Journal{journal_id:'99571eecaa5c5d622bb0d1f855752d5f'})-[]->() RETURN `path`
 MATCH (:Journal{journal_id:'fce69ad0112a3426c57a0582a2b8620f'})-[]->() RETURN `path`
 MATCH (:Journal{name:'Geom. Topol'})-[]->() RETURN `path`
 MATCH (:Keyword{key_id:'468e440686a5984c9dbaefb5ac25d127'})-[]->() RETURN `path`
 MATCH (:Keyword{key_id:'5d6533e2a77e3daabc184ee8f2441597'})-[]->() RETURN `path`
 MATCH (:Keyword{key_id:'6ded85146e3dbfb1bb866831b8948f5b'})-[]->() RETURN `path`
 MATCH (:Order)-[o:ORDERS]->(:`Product`) RETURN avg(o.discount) AS averageDiscount
 MATCH (:Order)-[o:ORDERS]->(p:`Product`) RETURN p.productName AS productName, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 5
 MATCH (:Order)-[o:ORDERS]->(p:`Product`) RETURN p.productName, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 3
 MATCH (:Order)-[o:ORDERS]->(p:`Product`) RETURN p.productName, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 5
 MATCH (:Order)-[o:ORDERS]->(p:`Product`)-[:PART_OF]->(c:Category) RETURN c.categoryName AS categoryName, sum(o.quantity) AS totalQuantity NEXT RETURN categoryName, max(totalQuantity) AS maxTotalQuantity
 MATCH (:Person)-[r:REVIEWED]->(:Movie) RETURN max(r.rating) AS highest_rating
 MATCH (:Person)-[r:REVIEWED]->(m:Movie) RETURN m.title AS movie, AVG(r.rating) AS average_rating ORDER BY average_rating ASC LIMIT 5
 MATCH (:Person)-[r:REVIEWED]->(m:Movie) RETURN m.title AS movie, r.rating AS rating ORDER BY rating DESC LIMIT 1
 MATCH (:Person)-[r:REVIEWED]->(m:Movie) WHERE r.rating > 90 RETURN avg(m.votes) AS average_votes NEXT RETURN average_votes
 MATCH (:Person)-[r:REVIEWED]->(m:Movie) WHERE r.rating > 95 RETURN size(r.summary) AS words NEXT RETURN avg(words) AS average_word_count
 MATCH (:Person)-[review:REVIEWED]->(:Movie) RETURN max(review.rating) AS highestRating NEXT RETURN highestRating
 MATCH (:Question)-[:TAGGED]->(tag:Tag) RETURN DISTINCT tag.name
 MATCH (:Report{report_no:'JNMP 4/2002 (Letter)'})-[]->() RETURN `path`
 MATCH (:Report{report_no:'none provided'})-[]->() RETURN `path`
 MATCH (:Report{report_no:'PAM-780'})-[]->() RETURN `path`
 MATCH (:Report{report_no:'Swansea preprint 99-14'})-[]->() RETURN `path`
 MATCH (:Topic{cluster:'8'})-[]->() RETURN `path`
 MATCH (:Topic{cluster:'9'})-[]->() RETURN `path`
 MATCH (:Topic{label:'Dynamical Systems_10'})-[]->() RETURN `path`
 MATCH (:UpdateDate{update_date:'2014-01-15'})-[]->() RETURN `path`
 MATCH (:UpdateDate{update_date:'2014-11-11'})-[]->() RETURN `path`
 MATCH (:User)-[r:CREATED]->(p:Post) WHERE r.`timestamp` = 3 RETURN COUNT(p) AS `count`
 MATCH (:User)-[r:RATED]->(m:Movie) RETURN m.title AS title, AVG(r.rating) AS avgRating ORDER BY avgRating ASC LIMIT 5
 MATCH (:User)-[r:RETWEETS]->(t:Tweet) RETURN t.id AS TweetID, COUNT(r) AS RetweetCount ORDER BY RetweetCount DESC LIMIT 3
 MATCH ()-[:ORDERS]->(p:`Product`) WHERE p.unitsOnOrder > 100 RETURN avg(p.reorderLevel)
 MATCH ()-[r:same_name_as]->() RETURN DISTINCT r.sourceID
 MATCH ()-[r]-() RETURN r, type(r) ORDER BY id(r) DESC LIMIT 3
 MATCH ()-[T1:singer_in_concert]-(T2:concert) RETURN T2.concert_name AS concert_name, count(T2.concert_id) AS `count`, T2.theme AS theme NEXT RETURN concert_name, theme, `count`
 MATCH ()-[T1:singer_in_concert]-(T2:concert) RETURN T2.concert_Name AS concert_Name, T2.Theme AS Theme, count(T2.concert_ID) AS `count` NEXT RETURN concert_Name, Theme, `count`
 MATCH ()-[T1:singer_in_concert]-(T2:singer) RETURN count(T2.Singer_ID) AS `count`, T2.Name AS Name NEXT RETURN Name, `count`
 MATCH ()-[T1:singer_in_concert]-(T2:singer) RETURN T2.name AS name, count(T2.singer_id) AS `count` NEXT RETURN name, `count`
 MATCH ()-[T1:singer_in_concert]-(T2:singer)-[]-(T3:concert) WHERE T3.`year` = 2014 RETURN T2.name
 MATCH ()-[T1:singer_in_concert]-(T2:singer)-[]-(T3:concert) WHERE T3.`Year` = 2014 RETURN T2.Name
 MATCH (a:Actor) RETURN a.`Duration` ORDER BY a.age DESC LIMIT 1
 MATCH (a:Actor) RETURN a.`Duration` ORDER BY a.Age DESC LIMIT 1
 MATCH (a:Actor) RETURN a.Character ORDER BY a.age DESC
 MATCH (a:Actor) RETURN a.Character, a.`Duration`
 MATCH (a:Actor) RETURN a.Name ORDER BY a.Name ASC
 MATCH (a:Actor) RETURN count(a)
 MATCH (a:Actor) WHERE a.age <> 20 RETURN a.Name
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) RETURN a, collect(m.countries) AS countries NEXT RETURN a.name AS actorName
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) RETURN a, collect(m.countries) AS countries NEXT RETURN a.name, countries
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) RETURN a, count(m.languages) AS numLanguages NEXT RETURN a.name, numLanguages ORDER BY numLanguages DESC LIMIT 3
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) RETURN a.name, count(m) AS movies_count ORDER BY movies_count DESC LIMIT 3
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) RETURN m.title AS Movie, count(a) AS NumberOfActors ORDER BY NumberOfActors DESC LIMIT 1
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE a.bornIn = 'France' RETURN m.title LIMIT 3
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE a.bornIn = 'USA' RETURN a, count(m) AS numMovies NEXT RETURN a.name, a.bornIn, numMovies ORDER BY numMovies DESC LIMIT 5
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.budget < 50000000 RETURN a LIMIT 5
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.budget < 50000000 RETURN a.name LIMIT 10
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.budget < 50000000 RETURN a.name LIMIT 5
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.budget < 50000000 RETURN DISTINCT a.name
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.budget > 50000000 RETURN a.name AS actorName, m.title AS movieTitle, m.budget AS movieBudget LIMIT 3
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.released = '1995-12-25' RETURN a, count(m) AS movieCount ORDER BY movieCount DESC LIMIT 5 NEXT RETURN a.name AS actorName, movieCount
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.revenue > 500000000 RETURN a.name LIMIT 3
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) WHERE m.runtime > 180 RETURN a, count(m) AS movieCount ORDER BY movieCount DESC NEXT RETURN a.name AS actorName, movieCount LIMIT 1
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre) RETURN a, count(g) AS genreCount ORDER BY genreCount DESC LIMIT 3 NEXT RETURN a.name, genreCount
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre) RETURN a, count(g) AS genreCount ORDER BY genreCount DESC LIMIT 5 NEXT RETURN a.name AS actor, genreCount AS numberOfGenres
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre{name:'Adventure'}) RETURN a, count(m) AS movieCount ORDER BY movieCount DESC LIMIT 5 NEXT RETURN a.name AS actor, movieCount
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre{name:'Adventure'}) RETURN a, count(m) AS movies_count ORDER BY movies_count DESC LIMIT 5 NEXT RETURN a.name, movies_count
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre{name:'Comedy'}) RETURN DISTINCT a.name
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie{title:'GoldenEye'}) RETURN a.name
 MATCH (a:Actor)-[:ACTED_IN]->(m:Movie{title:'GoldenEye'}) RETURN COUNT(a) AS numberOfActors
 MATCH (a:Actor)-[:ACTED_IN]->(m1:Movie)-[:IN_GENRE]->(g1:Genre{name:'Action'}) RETURN a, COUNT(m1) AS movieCount ORDER BY movieCount DESC LIMIT 3 NEXT RETURN a.name AS actorName, movieCount
 MATCH (a:Actor)-[:DIRECTED]->(m:Movie) RETURN m.title AS MovieTitle, m.released AS ReleaseDate ORDER BY m.imdbRating DESC LIMIT 3
 MATCH (a:Actor)-[r:ACTED_IN]->(m:Movie) RETURN a, count(r) AS roles ORDER BY roles DESC LIMIT 3 NEXT RETURN a.name AS actorName, roles
 MATCH (a:Actor)-[r:ACTED_IN]->(m:Movie) WHERE m.`year` < 1980 RETURN a, count(r) AS numRoles ORDER BY numRoles DESC LIMIT 5 NEXT RETURN a.name AS actor, numRoles
 MATCH (a:Actor{name:'Tom Cruise'})-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre{name:'War'}) RETURN m.title AS MovieTitle, m.`year` AS ReleaseYear, m.imdbRating AS IMDbRating
 MATCH (a:Actor{name:'Tom Hanks'})-[:ACTED_IN]->(m:Movie{`year`:1994}) RETURN m.title
 MATCH (a:Address) RETURN a.address, a.lastEditTimestamp ORDER BY a.lastEditTimestamp DESC LIMIT 5
 MATCH (a:Address) RETURN a.city ORDER BY a.city
 MATCH (a:Address) RETURN DISTINCT a.countries LIMIT 5
 MATCH (a:Address) WHERE a.jurisdiction_description = 'Samoa' RETURN DISTINCT a NEXT MATCH (e:Entity)-[:registered_address]->(a) RETURN count(e)
 MATCH (a:Address) WHERE a.sourceID = 'Bahamas Leaks' RETURN a.address
 MATCH (a:Address) WHERE a.zip_postcode = '197' RETURN count(a)
 MATCH (a:Address)-[:IS_LISTED_IN]->(d:Document) WHERE d.document_id = 4 RETURN a.address_details
 MATCH (a:Address)<-[:registered_address]-(e:Entity) RETURN a, COUNT(e) AS entityCount NEXT RETURN a.address AS Address, entityCount
 MATCH (a:Address{address:'ORION HOUSE SERVICES (HK) LIMITED ROOM 1401; 14/F.'})-[:registered_address]-(e:Entity) RETURN e
 MATCH (a:Address{address:'ORION HOUSE SERVICES (HK) LIMITED ROOM 1401; 14/F.'})-[:similar]->(similarAddress:Address) RETURN similarAddress
 MATCH (a:Address{address:'ORION HOUSE SERVICES (HK) LIMITED ROOM 1401; 14/F.'})<-[:registered_address]-(e:Entity) RETURN e
 MATCH (a:Address{countries:'Samoa'})-[r]-() RETURN DISTINCT r.link AS link NEXT RETURN link LIMIT 3
 MATCH (a:Address{icij_id:'F969D23B2EDF91CAEBE119A675B61AAB'}) RETURN a.address
 MATCH (a:Adult) RETURN a.title ORDER BY a.popularity DESC LIMIT 1
 MATCH (a:Adult) RETURN a.title, a.average_vote ORDER BY a.average_vote DESC LIMIT 5
 MATCH (a:Adult) RETURN a.title, a.popularity ORDER BY a.popularity DESC LIMIT 5
 MATCH (a:Adult) RETURN a.title, a.poster_path ORDER BY a.popularity DESC LIMIT 3
 MATCH (a:Adult) WHERE a.budget < 50000 RETURN a.title LIMIT 3
 MATCH (a:Adult) WHERE a.runtime > 60 RETURN a ORDER BY a.id LIMIT 3
 MATCH (a:Adult)-[:IN_GENRE]->(g:Genre{name:'Horror'}) RETURN a.title
 MATCH (a:Adult)-[:ORIGINAL_LANGUAGE]->(l:Language) RETURN l.name AS Language, count(a) AS NumberOfAdultFilms ORDER BY NumberOfAdultFilms DESC LIMIT 3
 MATCH (a:Adult)-[:PRODUCED_BY]->(pc:ProductionCompany) WHERE c.name <> 'United States of America' RETURN a.title AS AdultFilmTitle, pc.name AS ProductionCompany, c.name AS Country
 MATCH (a:Adult)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN c.name AS country, COUNT(a) AS numberOfAdultFilms ORDER BY numberOfAdultFilms DESC LIMIT 5
 MATCH (a:Adult)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN c.name, count(a) AS adultFilmCount ORDER BY adultFilmCount DESC LIMIT 3
 MATCH (a:Adult)-[:SPOKEN_IN_LANGUAGE]->(l:Language) RETURN l.name AS language, COUNT(a) AS film_count ORDER BY film_count DESC LIMIT 3 NEXT RETURN language, film_count
 MATCH (a:Adult{tagline:'Humiliation. Rape. Murder. You know the drill.'}) RETURN a LIMIT 3
 MATCH (a:Airport) WHERE a.Country <> 'Iceland' RETURN a.name
 MATCH (a:AllDocument)-[r]->{1,}(b:RefDocumentType) WHERE a.Document_Name = 'How to read a book' RETURN b.Document_Type_Name
 MATCH (a:Answer) RETURN a ORDER BY a.uuid ASC LIMIT 3
 MATCH (a:Answer) RETURN a, a.score AS score ORDER BY score DESC LIMIT 1 NEXT RETURN a.body_markdown
 MATCH (a:Answer) RETURN a.link ORDER BY a.score LIMIT 1
 MATCH (a:Answer) RETURN avg(a.score)
 MATCH (a:Answer) WHERE a.score < 0 RETURN a.link, a.title, a.body_markdown, a.score, a.uuid
 MATCH (a:Answer)-[:ANSWERED]->(:Question) RETURN a ORDER BY a.score DESC LIMIT 5
 MATCH (a:Answer)-[:ANSWERED]->(q:Question) RETURN q, a.score AS score ORDER BY score DESC LIMIT 3 NEXT RETURN q.title AS QuestionTitle
 MATCH (a:Answer)-[:ANSWERED]->(q:Question) WHERE a.is_accepted = false RETURN a LIMIT 3
 MATCH (a:Answer{score:6}) RETURN a.link
 MATCH (a:Answer{uuid:69273049}) RETURN a.body_markdown
 MATCH (a:Application) RETURN a.name AS application, a.pid AS pid ORDER BY pid DESC LIMIT 3
 MATCH (a:Application) RETURN max(a.pid) AS max_pid
 MATCH (a:Appointment) RETURN count(a)
 MATCH (a:Article) RETURN a ORDER BY a.sentiment DESC LIMIT 5
 MATCH (a:Article) RETURN a.id, a.`date` ORDER BY a.`date` ASC LIMIT 1
 MATCH (a:Article) RETURN a.title, a.sentiment ORDER BY a.sentiment DESC LIMIT 5
 MATCH (a:Article) WHERE a.sentiment > 0.8 RETURN a ORDER BY a.sentiment DESC LIMIT 5
 MATCH (a:Article)-[:FROM_DEPARTMENT]->(d:Department{departmentNo:1774}) RETURN d.departmentName
 MATCH (a:Article)-[:MENTIONS]->(o:Organization) RETURN o, max(a.`date`) AS maxDate ORDER BY maxDate DESC LIMIT 5 NEXT RETURN o.name AS organization, maxDate AS latestMentionDate
 MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.`date` = 2019 RETURN DISTINCT o.name
 MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment < 0 RETURN o, avg(a.sentiment) AS avgSentiment ORDER BY avgSentiment LIMIT 3 NEXT RETURN o.name AS organization, avgSentiment
 MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment < 0 RETURN o, min(o.revenue) AS minRevenue NEXT RETURN o.name AS Organization, minRevenue ORDER BY minRevenue ASC LIMIT 1
 MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment < 0 RETURN o.name
 MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment < 0.5 RETURN o LIMIT 3
 MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment > 0.8 RETURN DISTINCT o
 MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment > 0.8 RETURN DISTINCT o.name
 MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE a.sentiment > 0.8 RETURN o.name AS OrganizationName
 MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE o.nbrEmployees > 50 RETURN a LIMIT 3
 MATCH (a:Article)-[:MENTIONS]->(o:Organization) WHERE o.revenue < 5000000 RETURN a.title, a.summary, a.`date` LIMIT 3
 MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(c:Country{name:'Belgium'}) WHERE a.sentiment > 0.5 RETURN DISTINCT o
 MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(:City{name:'Seattle'}) RETURN a.title AS article, a.siteName AS site, a.`date` AS published ORDER BY a.`date` DESC LIMIT 3
 MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City) RETURN c, avg(a.sentiment) AS avgSentiment ORDER BY avgSentiment DESC LIMIT 1 NEXT RETURN c.name
 MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(c:City{name:'Seattle'}) RETURN a.id AS ArticleID, a.title AS ArticleTitle, a.`date` AS ArticleDate
 MATCH (a:Article)-[:MENTIONS]->(o:Organization)-[:IN_CITY]->(ci:City) WHERE a.sentiment < 0.5 RETURN DISTINCT o.name
 MATCH (a:Article)-[:MENTIONS]->(o:Organization{isPublic:true}) RETURN a.title AS article, o.name AS organization ORDER BY a.`date` DESC LIMIT 3
 MATCH (a:Article)-[:MENTIONS]->(o:Organization{name:'New Energy Group'}) RETURN a
 MATCH (a:Article)-[:VARIANT_OF]->(p:`Product`) WHERE a.prodName = 'Benny Shorts' RETURN p.productTypeName
 MATCH (a:Article)-[:VARIANT_OF]->(p:`Product`) WHERE a.prodName = 'COZY WRAP TOP LS' RETURN p.productCode
 MATCH (a:Article)-[:VARIANT_OF]->(p:`Product`) WHERE a.prodName = 'Nora T-shirt' RETURN DISTINCT p.productCode
 MATCH (a:Article)-[:VARIANT_OF]->(p:`Product`) WHERE a.prodName = 'Skinny R.W Chic' RETURN p.productTypeName
 MATCH (a:Article)-[:VARIANT_OF]->(p:`Product`) WHERE a.prodName = 'Wrappy speed dress' RETURN p.productTypeName, p.productGroupName
 MATCH (a:Article)-[:VARIANT_OF]->(p:`Product`{productGroupName:'Women'}) RETURN COUNT(a) AS numberOfItemsForWomen
 MATCH (a:Article)-[]-{1,}(n)-[]-{1,}(b:Keyword) RETURN labels(n)
 MATCH (a:Article)-[]->{3,3}(n) WHERE a.article_id = '1063' RETURN properties(n) AS props
 MATCH (a:Article)-[]->{3,3}(n) WHERE a.article_id = '1069' RETURN properties(n) AS props
 MATCH (a:Article)-[]->{3,3}(n) WHERE a.title = 'Summation and transformation formulas for elliptic hypergeometric series' RETURN properties(n) AS props
 MATCH (a:Article{`abstract`:'  A famous result of Hausdorff states that a sphere with countably many points removed can be partitioned into three pieces A,B,C such that A is congruent to B (i.e., there is an isometry of the sphere which sends A to B), B is congruent to C, and A is congruent to (B union C); this result was the precursor of the Banach-Tarski paradox. Later, R. Robinson characterized the systems of congruences like this which could be realized by partitions of the (entire) sphere with rotations witnessing the congruences. The pieces involved were nonmeasurable. In the present paper, we consider the problem of which systems of congruences can be satisfied using open subsets of the sphere (or related spaces); of course, these open sets cannot form a partition of the sphere, but they can be required to cover 'most of' the sphere in the sense that their union is dense. Various versions of the problem arise, depending on whether one uses all isometries of the sphere or restricts oneself to a free group of rotations (the latter version generalizes to many other suitable spaces), or whether one omits the requirement that the open sets have dense union, and so on. While some cases of these problems are solved by simple geometrical dissections, others involve complicated iterative constructions and/or results from the theory of free groups. Many interesting questions remain open. '})-[r]->(n) RETURN properties(n), r
 MATCH (a:Article{`abstract`:'  Determining contributions by sub-portfolios or single exposures to portfolio-wide economic capital for credit risk is an important risk measurement task. Often economic capital is measured as Value-at-Risk (VaR) of the portfolio loss distribution. For many of the credit portfolio risk models used in practice, the VaR contributions then have to be estimated from Monte Carlo samples. In the context of a partly continuous loss distribution (i.e. continuous except for a positive point mass on zero), we investigate how to combine kernel estimation methods with importance sampling to achieve more efficient (i.e. less volatile) estimation of VaR contributions. '})-[:HAS_CATEGORY]->(c:Categories)-[r]->(n) RETURN n
 MATCH (a:Article{`abstract`:'  Generalizing the construction of the Maslov class for a Lagrangian embedding in a symplectic vector space, we prove that it is possible to give a consistent definition of this class for any Lagrangian submanifold of a Calabi-Yau manifold. Moreover, we prove that this class can be represented by the contraction of the Kaehler form associated to the Calabi-Yau metric, with the mean curvature vector field of the Lagrangian embedding. Finally, we suggest a possible generalization of the Maslov class for Lagrangian submanifolds of any symplectic manifold, via the mean curvature representation. '})-[:HAS_DOI]->(c:DOI)-[r]->(n) RETURN n
 MATCH (a:Article{`abstract`:'  Generalizing the construction of the Maslov class for a Lagrangian embedding in a symplectic vector space, we prove that it is possible to give a consistent definition of this class for any Lagrangian submanifold of a Calabi-Yau manifold. Moreover, we prove that this class can be represented by the contraction of the Kaehler form associated to the Calabi-Yau metric, with the mean curvature vector field of the Lagrangian embedding. Finally, we suggest a possible generalization of the Maslov class for Lagrangian submanifolds of any symplectic manifold, via the mean curvature representation. '})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:Article{`abstract`:'  I associate to a global field K a Lax-Phillips scattering which has the property of causality if and only if the Riemann Hypothesis holds for all the abelian L-functions of K. As a Hilbert space closure problem this provides an adelic variation on a theme initiated by Nyman and Beurling. The adelic aspects are related to previous work by Tate, Iwasawa and Connes. '})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Article{`abstract`:'  I associate to a global field K a Lax-Phillips scattering which has the property of causality if and only if the Riemann Hypothesis holds for all the abelian L-functions of K. As a Hilbert space closure problem this provides an adelic variation on a theme initiated by Nyman and Beurling. The adelic aspects are related to previous work by Tate, Iwasawa and Connes. '})-[r]->(n) RETURN properties(n), r
 MATCH (a:Article{`abstract`:'  In this article we study the interface generated by the collision between two cristals growing layer by layer on a one-dimensional substrate through random decomposition of particles. We relate this interface with the notion of beta-path in an equivalent directed polymer model and, by using asymptotics results from Baik and Rains (2000) and some hydrodynamic tools introduced by Cator and Groeenenboon (2005), we derive a law of large numbers for such a path and obtain some bounds for its fluctuations. '})-[:HAS_KEY]->(c:Keyword)-[r]->(n) RETURN n
 MATCH (a:Article{`abstract`:'  Let F be a local net of von Neumann algebras in four spacetime dimensions satisfying certain natural structural assumptions. We prove that if F has trivial superselection structure then every covariant, Haag-dual subsystem B is the fixed point net under a compact group action on one component in a suitable tensor product decomposition of F. Then we discuss some application of our result, including free field models and certain theories with at most countably many sectors. '})-[:PUBLISHED_IN{meta:'217'}]->(c:Journal)-[r]->(n) RETURN n
 MATCH (a:Article{`abstract`:'  Local asymptotic minimax risk bounds in a locally asymptotically mixture of normal family of distributions have been investigated under asymmetric loss functions and the asymptotic distribution of the optimal estimator that attains the bound has been obtained. '})-[:HAS_CATEGORY]->(c:Categories)-[r]->(n) RETURN n
 MATCH (a:Article{`abstract`:'  Using matrix inversion and determinant evaluation techniques we prove several summation and transformation formulas for terminating, balanced, very-well-poised, elliptic hypergeometric series. '})-[:PUBLISHED_IN{`year`:'2002'}]->(c:Journal)-[r]->(n) RETURN n
 MATCH (a:Article{`abstract`:'  Using matrix inversion and determinant evaluation techniques we prove several summation and transformation formulas for terminating, balanced, very-well-poised, elliptic hypergeometric series. '})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Article{`abstract`:'  We extend a result of to Esnault-Levine-Viehweg concerning the Chow groups of hypersurfaces in projective space to those in weighted projective spaces. '})-[:WRITTEN_BY]->(c:Author)-[r]->(n) RETURN n
 MATCH (a:Article{`abstract`:'  We extend a result of to Esnault-Levine-Viehweg concerning the Chow groups of hypersurfaces in projective space to those in weighted projective spaces. '})-[]->{1,}(d:Report{report_id:'c3c968646b7780fada2a98b2a5a61746'}) RETURN count(p)
 MATCH (a:Article{`abstract`:'  We present a new, more elementary proof of the Freedman-Teichner result that the geometric classification techniques (surgery, s-cobordism, and pseudoisotopy) hold for topological 4-manifolds with groups of subexponential growth. In an appendix Freedman and Teichner give a correction to their original proof, and reformulate the growth estimates in terms of coarse geometry. '})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Article{article_id:'1008'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:Article{article_id:'1009'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:Article{article_id:'1010'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Article{article_id:'1013'})-[]->{1,}(d:Categories{specifications:'math.AT'}) RETURN count(p)
 MATCH (a:Article{article_id:'1013'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:Article{article_id:'1013'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Article{article_id:'1013'})-[r]->(n) RETURN properties(n), r
 MATCH (a:Article{article_id:'1015'})-[:HAS_DOI]->(c:DOI)-[r]->(n) RETURN n
 MATCH (a:Article{article_id:'1048'})-[:PUBLISHED_IN{`year`:'2004'}]->(c:Journal)-[r]->(n) RETURN n
 MATCH (a:Article{article_id:'1048'})-[:PUBLISHED_IN{pages:'527-551'}]->(c:Journal)-[r]->(n) RETURN n
 MATCH (a:Article{article_id:'1048'})-[]->{1,}(d:Author{first_name:'Amnon'})-[]->{1,}(n) RETURN n
 MATCH (a:Article{article_id:'1048'})-[]->{1,}(d:Keyword{name:'tree (optimality criteria: minimum mean-squared error)  alternative keyword suggestions: - multiscale superpopulation models - independent innovations trees - water-'}) RETURN count(p)
 MATCH (a:Article{article_id:'1056'})-[]->{1,}(d:Journal{journal_id:'f6582df4742923aacfc6e67638bd4bf6'}) RETURN count(p)
 MATCH (a:Article{article_id:'1069'})-[:HAS_DOI]->(c:DOI)-[r]->(n) RETURN n
 MATCH (a:Article{article_id:'1069'})-[]->{1,}(d:DOI{name:'10.1007/PL00005532'})-[]->{1,}(n) RETURN n
 MATCH (a:Article{article_id:'1069'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Article{article_id:'1071'})-[]->{1,}(d:Report{report_no:'SPbU-IP-00-03'}) RETURN count(p)
 MATCH (a:Article{article_id:'1071'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Article{article_id:'2204'})-[:PUBLISHED_IN{meta:'217'}]->(c:Journal)-[r]->(n) RETURN n
 MATCH (a:Article{article_id:'3082'})-[:PUBLISHED_IN{pages:'45-96'}]->(c:Journal)-[r]->(n) RETURN n
 MATCH (a:Article{article_id:'4129'})-[:PUBLISHED_IN]->(c:Journal)-[r]->(n) RETURN n
 MATCH (a:Article{article_id:'602665'})-[:HAS_KEY]->(c:Keyword)-[r]->(n) RETURN n
 MATCH (a:Article{articleId:663010006}) RETURN a.colourGroupName
 MATCH (a:Article{articleId:667379003})-[:VARIANT_OF]->(p:`Product`) RETURN p.productTypeName
 MATCH (a:Article{author:'David Correa'})-[:MENTIONS]->(o:Organization) RETURN DISTINCT o.name
 MATCH (a:Article{author:'David Correa'})-[:MENTIONS]->(o:Organization) RETURN o.name
 MATCH (a:Article{comments:'16 pages To be published in Journal of Geometry and Physics'})-[r]->(n) RETURN n, TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Article{comments:'18 pages, latex2e with amsfonts. Final version, accepted for   publication'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:Article{comments:'19 pages, AMSLatex, references added'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:Article{comments:'20 pages'})-[]->{1,}(d:DOI{doi_id:'673313cb2dcde5d215a7e7ec2788f676'}) RETURN count(p)
 MATCH (a:Article{comments:'21 pages, AMS-LaTeX'})-[:PUBLISHED_IN{pages:'479-502'}]->(c:Journal)-[r]->(n) RETURN n
 MATCH (a:Article{comments:'22 pages, LaTeX'})-[:PUBLISHED_IN{pages:'537-560'}]->(c:Journal)-[r]->(n) RETURN n
 MATCH (a:Article{comments:'22 pages, to appear in Topology. http://jdc.math.uwo.ca Lots of minor   revisions. This version should closely match the published version'})-[]->{1,}(d:Categories{category_id:'eea477d68b70c3a05be12567240033ef'})-[]->{1,}(n) RETURN n
 MATCH (a:Article{comments:'26 pages, revised, to appear in Advances in Cryptology -- Asiacrypt   2005'})-[:HAS_CATEGORY]->(c:Categories)-[r]->(n) RETURN n
 MATCH (a:Article{comments:'26 pages, revised, to appear in Advances in Cryptology -- Asiacrypt   2005'})-[:HAS_KEY]->(c:Keyword)-[r]->(n) RETURN n
 MATCH (a:Article{comments:'44 pages'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Article{comments:'latex, 38 pages, typos corrected'})-[:PUBLISHED_IN{pages:'521-554'}]->(c:Journal)-[r]->(n) RETURN n
 MATCH (a:Article{comments:'LaTeX2e, 36 pages ; Some misprints are corrected'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Article{comments:'LaTeX2e, 36 pages ; Some misprints are corrected'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:Article{comments:'LaTeX2e, 36 pages ; Some misprints are corrected'})-[r]->(n) RETURN properties(n), r
 MATCH (a:Article{comments:'no comments'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Article{comments:'Only one change to previous version: ref. [62] misnumbering was fixed   on request to the cited author'})-[:PUBLISHED_IN]->(c:Journal)-[r]->(n) RETURN n
 MATCH (a:Article{comments:'Published by Geometry and Topology at   http://www.maths.warwick.ac.uk/gt/GTVol4/paper14.abs.html'})-[:HAS_DOI]->(c:DOI)-[r]->(n) RETURN n
 MATCH (a:Article{comments:'Published by Geometry and Topology at   http://www.maths.warwick.ac.uk/gt/GTVol4/paper14.abs.html'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Article{id:'ART166907382137'}) RETURN a.`date`
 MATCH (a:Article{id:'ART166907382137'}) RETURN a.author
 MATCH (a:Article{prodName:'1p Short Socks'})-[:FROM_DEPARTMENT]->(d:Department) RETURN d
 MATCH (a:Article{prodName:'Duo'}) RETURN a.colourGroupCode
 MATCH (a:Article{prodName:'Esmeralda Fluff'}) RETURN a.colourGroupCode
 MATCH (a:Article{prodName:'IRIS JKT w pile'})-[:VARIANT_OF]->(p:`Product`) RETURN p.detailDesc
 MATCH (a:Article{prodName:'KEVIN sweatpants'})-[:FROM_DEPARTMENT]->(d:Department)<-[:FROM_DEPARTMENT]-(other:Article)-[:VARIANT_OF]->(p:`Product`) RETURN DISTINCT p
 MATCH (a:Article{prodName:'Magnolia dress'})-[:VARIANT_OF]->(p:`Product`) RETURN p.garmentGroupNo
 MATCH (a:Article{prodName:'PQ Micaela Waistbelt'})-[:VARIANT_OF]->(p:`Product`) RETURN p.productTypeName
 MATCH (a:Article{prodName:'Queen Sweater'})-[:VARIANT_OF]->(p:`Product`) RETURN p.garmentGroupName
 MATCH (a:Article{prodName:'Spice Girl 3 p Hipster'})-[:VARIANT_OF]->(p:`Product`) RETURN p.productTypeName
 MATCH (a:Article{prodName:'Tina dress'}) RETURN a.graphicalAppearanceNo, a.graphicalAppearanceName
 MATCH (a:Article{prodName:'Tulum Tie Brief'}) RETURN a.colourGroupName
 MATCH (a:Article{siteName:'MrWeb'})-[:MENTIONS]->(o:Organization) RETURN o.name AS OrganizationName LIMIT 3
 MATCH (a:Article{title:'A New Cohomology Theory for Orbifold'})-[:PUBLISHED_IN{pages:'1-31'}]->(c:Journal)-[r]->(n) RETURN n
 MATCH (a:Article{title:'An adelic causality problem related to abelian L-functions'})-[]->{1,}(d:Categories{specifications:'math.IT'}) RETURN count(p)
 MATCH (a:Article{title:'An adelic causality problem related to abelian L-functions'})-[r]->(n) RETURN properties(n), r
 MATCH (a:Article{title:'Capital allocation for credit portfolios with kernel estimators'})-[:HAS_CATEGORY]->(c:Categories)-[r]->(n) RETURN n
 MATCH (a:Article{title:'Chow groups of weighted hypersurfaces'})-[]->{1,}(d:DOI{name:'10.1142/S0219061301000077'}) RETURN count(p)
 MATCH (a:Article{title:'Chow groups of weighted hypersurfaces'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Article{title:'Computing the Top Betti Numbers of Semi-algebraic Sets Defined by   Quadratic Inequalities in Polynomial Time'})-[:HAS_CATEGORY]->(c:Categories)-[r]->(n) RETURN n
 MATCH (a:Article{title:'Failure of Brown representability in derived categories'})-[]->{1,}(d:Keyword{name:'exponentially growing'})-[]->{1,}(n) RETURN n
 MATCH (a:Article{title:'Failure of Brown representability in derived categories'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Article{title:'Free Field Construction for the ABF Models in Regime II'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:Article{title:'Free Field Construction for the ABF Models in Regime II'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Article{title:'Funds for Consumer Behavior Specialist Infinite An'})-[:MENTIONS]->(o:Organization) RETURN o LIMIT 3
 MATCH (a:Article{title:'Geometrical Tools for Quantum Euclidean Spaces'})-[:PUBLISHED_IN{meta:'217'}]->(c:Journal)-[r]->(n) RETURN n
  MATCH (a:Article{title:'Log mirror symmetry and local mirror symmetry'})-[:PUBLISHED_IN{`year`:'2001'}]->(c:Journal)-[r]->(n) RETURN n
 MATCH (a:Article{title:'Log mirror symmetry and local mirror symmetry'})-[:PUBLISHED_IN{meta:'220'}]->(c:Journal)-[r]->(n) RETURN n
 MATCH (a:Article{title:'Maslov class and minimality in Calabi-Yau manifolds'})-[]->{1,}(d:Author{last_name:'Dunajski'})-[]->{1,}(n) RETURN n
 MATCH (a:Article{title:'Maslov class and minimality in Calabi-Yau manifolds'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Article{title:'Maslov class and minimality in Calabi-Yau manifolds'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Article{title:'Modeling Credit Risk with Partial Information'})-[:HAS_CATEGORY]->(c:Categories)-[r]->(n) RETURN n
 MATCH (a:Article{title:'Notes for a Quantum Index Theorem'})-[:PUBLISHED_IN]->(c:Journal)-[r]->(n) RETURN n
 MATCH (a:Article{title:'Notes for a Quantum Index Theorem'})-[:PUBLISHED_IN{pages:'45-96'}]->(c:Journal)-[r]->(n) RETURN n
 MATCH (a:Article{title:'Open sets satisfying systems of congruences'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:Article{title:'Open sets satisfying systems of congruences'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Article{title:'Quantum Affine (Super)Algebras $U_q(A_{1}^{(1)})$ and $U_q(C(2)^{(2)})$'})-[:PUBLISHED_IN{meta:'220'}]->(c:Journal)-[r]->(n) RETURN n
 MATCH (a:Article{title:'Rational points on compactifications of semi-simple algebraic groups'})-[:HAS_KEY]->(c:Keyword)-[r]->(n) RETURN n
 MATCH (a:Article{title:'Subexponential groups in 4-manifold topology'})-[]->{1,}(d:DOI{doi_id:'46c2037fac5c38acd01bee5dde73c8e0'})-[]->{1,}(n) RETURN n
 MATCH (a:Article{title:'Subexponential groups in 4-manifold topology'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Article{title:'Summation and transformation formulas for elliptic hypergeometric series'})-[:HAS_DOI]->(c:DOI)-[r]->(n) RETURN n
 MATCH (a:Article{title:'Summation and transformation formulas for elliptic hypergeometric series'})-[:PUBLISHED_IN{`year`:'2002'}]->(c:Journal)-[r]->(n) RETURN n
 MATCH (a:Article{title:'Summation and transformation formulas for elliptic hypergeometric series'})-[:WRITTEN_BY]->(c:Author)-[r]->(n) RETURN n
 MATCH (a:Article{title:'The Gervais-Neveu-Felder equation for the Jordanian quasi-Hopf   U_{h;y}(sl(2)) algebra'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Article{title:'The Gervais-Neveu-Felder equation for the Jordanian quasi-Hopf   U_{h;y}(sl(2)) algebra'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Artifact)-[r:INCLUDED_IN]->(e:Exhibit) RETURN a.name ORDER BY r.date_added LIMIT 1
 MATCH (a:AssessmentNote) RETURN a.date_of_notes
 MATCH (a:AttributeDefinition) WHERE a.attribute_name = 'Green' RETURN a.attribute_data_type
 MATCH (a:AttributeDefinition{attribute_name:'Green'}) RETURN a.attribute_data_type
 MATCH (a:Author) RETURN a.fname ORDER BY a.fname
 MATCH (a:Author) RETURN a.fname, a.lname ORDER BY a.lname
 MATCH (a:Author) RETURN a.lname ORDER BY a.lname
 MATCH (a:Author) WHERE a.lname = 'Ueno' RETURN a.fname
 MATCH (a:author)-[:author_write_paper]->(p:paper)-[:paper_in_domain]->(d:domain{name:'Computer Vision'}) MATCH (a)-[:author_write_paper]->(p)<-[:author_write_paper]-(coauthor:author) RETURN a, p NEXT RETURN a.name AS AuthorName, CoAuthorCount ORDER BY CoAuthorCount DESC LIMIT 1
 MATCH (a:Author)-[:WROTE]->(b:Book) WHERE b.isbn = '1234567890' RETURN a AS author
 MATCH (a:Author)-[]-{1,}(n)-[]-{1,}(b:Article) RETURN labels(n)
 MATCH (a:Author)-[]->{3,3}(n) WHERE a.author_id = 'a7193c11b0713ccfbb34c90cf18d3e5f' RETURN properties(n) AS props
 MATCH (a:Author)-[]->{3,3}(n) WHERE a.first_name = 'Randall' RETURN properties(n) AS props
 MATCH (a:Author)-[]->{3,3}(n) WHERE a.last_name = 'Dunajski' RETURN properties(n) AS props
 MATCH (a:Author{affiliation:'Nice - Sophia Antipolis'})-[]->{1,}(d:Journal{name:'Topology'})-[]->{1,}(n) RETURN n
 MATCH (a:Author{affiliation:'Nice - Sophia Antipolis'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:Author{affiliation:'Nice - Sophia Antipolis'})-[r]->(n) RETURN properties(n), r
 MATCH (a:Author{affiliation:'Ohio State University'})-[]->{1,}(d:Topic{label:'Topology_5'})-[]->{1,}(n) RETURN n
 MATCH (a:Author{affiliation:'unspecified'})-[]->{1,}(d:Article{article_id:'1010'}) RETURN count(p)
 MATCH (a:Author{affiliation:'unspecified'})-[]->{1,}(d:Categories{category_id:'eea477d68b70c3a05be12567240033ef'}) RETURN count(p)
 MATCH (a:Author{affiliation:'unspecified'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:Author{affiliation:'unspecified'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Author{author_id:'1184638302ce384c7549eeead253af2d'})-[]->{1,}(d:Report{report_id:'45009bf7f2e3f4f275de6d92deab7b27'}) RETURN count(p)
 MATCH (a:Author{author_id:'13c7b3c4f69c510e94c671c881522bac'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Author{author_id:'700c655b31f9b9275ba10a9875c15332'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:Author{author_id:'788db042978edbbfc654927e23ac21d1'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:Author{author_id:'788db042978edbbfc654927e23ac21d1'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Author{author_id:'976d319b0a2961b44db9ef9e43ea5039'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Author{author_id:'a7193c11b0713ccfbb34c90cf18d3e5f'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Author{author_id:'a7193c11b0713ccfbb34c90cf18d3e5f'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Author{author_id:'a95ff40457bf3cae9c6852c6a14937fa'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:Author{author_id:'a95ff40457bf3cae9c6852c6a14937fa'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Author{author_id:'a95ff40457bf3cae9c6852c6a14937fa'})-[r]->(n) RETURN n, TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Author{author_id:'a95ff40457bf3cae9c6852c6a14937fa'})-[r]->(n) RETURN properties(n), r
 MATCH (a:Author{author_id:'befdd60b44b9cd4d5ffc084ce31d92d4'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Author{author_id:'f6bcab8e721fbec0f293fee49d73c9c4'})-[]->{1,}(d:DOI{doi_id:'abce5ed79c520bdb8fd79a61a852648d'}) RETURN count(p)
 MATCH (a:Author{author_id:'f6bcab8e721fbec0f293fee49d73c9c4'})-[]->{1,}(d:Keyword{name:'exponentially growing'}) RETURN count(p)
 MATCH (a:Author{author_id:'f6bcab8e721fbec0f293fee49d73c9c4'})-[]->{1,}(d:UpdateDate{update_date:'2014-11-11'}) RETURN count(p)
 MATCH (a:Author{author_id:'f6bcab8e721fbec0f293fee49d73c9c4'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Author{author_id:'f6bcab8e721fbec0f293fee49d73c9c4'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Author{author_id:'fd6fcf9374c7e5fd0377800da5e8f846'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Author{first_name:'A.'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:Author{first_name:'A.'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Author{first_name:'A.'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Author{first_name:'Alexander'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Author{first_name:'Amnon'})-[]->{1,}(d:DOI{name:'10.1016/S0764-4442(00)00217-2'}) RETURN count(p)
 MATCH (a:Author{first_name:'Amnon'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Author{first_name:'Bernhard'})-[]->{1,}(d:Categories{category_id:'4b7053a7def1fb0250a0e83ebd2f9a7b'}) RETURN count(p)
 MATCH (a:Author{first_name:'Bernhard'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:Author{first_name:'Bernhard'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:Author{first_name:'Bernhard'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Author{first_name:'J. Daniel'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Author{first_name:'J. Daniel'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Author{first_name:'Jean-Francois'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Author{first_name:'Maciej'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Author{first_name:'Marco'})-[]->{1,}(d:Article{`abstract`:'  I associate to a global field K a Lax-Phillips scattering which has the property of causality if and only if the Riemann Hypothesis holds for all the abelian L-functions of K. As a Hilbert space closure problem this provides an adelic variation on a theme initiated by Nyman and Beurling. The adelic aspects are related to previous work by Tate, Iwasawa and Connes. '}) RETURN count(p)
 MATCH (a:Author{first_name:'Marco'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:Author{first_name:'R.'})-[]->{1,}(d:Keyword{name:'logarithms'})-[]->{1,}(n) RETURN n
 MATCH (a:Author{first_name:'Randall'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Author{first_name:'Randall'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Author{first_name:'S. O.'})-[r]->(n) RETURN n, TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Author{fname:'Amal'}) RETURN a.lname
 MATCH (a:Author{last_name:'Burnol'})-[]->{1,}(d:DOI{name:'10.1007/s00365-002-0501-6'})-[]->{1,}(n) RETURN n
 MATCH (a:Author{last_name:'Burnol'})-[]->{1,}(d:Journal{journal_id:'ebe5bed51965553359ee9f13db0293e1'})-[]->{1,}(n) RETURN n
 MATCH (a:Author{last_name:'Burnol'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Author{last_name:'Christensen'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:Author{last_name:'Dougherty'})-[r]->(n) RETURN n, TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Author{last_name:'Dunajski'})-[]->{1,}(d:Categories{category_id:'088fbf884bd7c6533956a45531b362b7'})-[]->{1,}(n) RETURN n
 MATCH (a:Author{last_name:'Dunajski'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:Author{last_name:'Dunajski'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Author{last_name:'Dunajski'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Author{last_name:'Dunajski'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Author{last_name:'Dunajski'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Author{last_name:'Dunajski'})-[r]->(n) RETURN n, TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Author{last_name:'Leoni'})-[]->{1,}(d:Author{first_name:'Randall'})-[]->{1,}(n) RETURN n
 MATCH (a:Author{last_name:'Leoni'})-[]->{1,}(d:Topic{cluster:'6'}) RETURN count(p)
 MATCH (a:Author{last_name:'Mason'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:Author{last_name:'Mason'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:Author{last_name:'Polishchuk'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Author{last_name:'Polishchuk'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Author{last_name:'Warnaar'})-[]->{1,}(d:Report{report_no:'SFB 478 Geometrische Stukturen in der Mathematik, Muenster; Preprint   No. 73'}) RETURN count(p)
 MATCH (a:Author{last_name:'Warnaar'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Author{last_name:'Warnaar'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Author{name:'Jane Smith'})-[:WROTE]->(b:Book) RETURN b.publicationYear AS publicationYear
 MATCH (a:Authorhip) RETURN count(a.authID)
 MATCH (a:Authorhip)-[:WRITES]->(p:Paper) WHERE i.name = 'Google' RETURN DISTINCT p.title
 MATCH (a:Categories)-[]-{1,}(n)-[]-{1,}(b:DOI) RETURN labels(n)
 MATCH (a:Categories)-[]-{1,}(n)-[]-{1,}(b:Topic) RETURN labels(n)
 MATCH (a:Categories)-[]->{3,3}(n) WHERE a.specifications = 'q-fin.RM' RETURN properties(n) AS props
 MATCH (a:Categories{category_id:'088fbf884bd7c6533956a45531b362b7'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Categories{category_id:'088fbf884bd7c6533956a45531b362b7'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Categories{category_id:'4b7053a7def1fb0250a0e83ebd2f9a7b'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Categories{category_id:'4b7053a7def1fb0250a0e83ebd2f9a7b'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Categories{category_id:'775271e2a118257e7308fe4c21c9d0b4'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Categories{category_id:'978aee6db23fc939cec71ac05eb15b7a'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Categories{category_id:'978aee6db23fc939cec71ac05eb15b7a'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Categories{category_id:'994d468c3f0dd780baf58c6d7f205afd'})-[]->{1,}(d:Author{affiliation:'Ohio State University'})-[]->{1,}(n) RETURN n
 MATCH (a:Categories{category_id:'994d468c3f0dd780baf58c6d7f205afd'})-[]->{1,}(d:Categories{specifications:'math.AT'})-[]->{1,}(n) RETURN n
 MATCH (a:Categories{category_id:'b1d13c8b6874949821d038a8a71379d1'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Categories{category_id:'b1d13c8b6874949821d038a8a71379d1'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Categories{category_id:'cb7bf6a30b0381c15264305ad7677b30'})-[]->{1,}(d:Author{first_name:'Marco'})-[]->{1,}(n) RETURN n
 MATCH (a:Categories{category_id:'cb7bf6a30b0381c15264305ad7677b30'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Categories{category_id:'cb7bf6a30b0381c15264305ad7677b30'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:Categories{category_id:'cb7bf6a30b0381c15264305ad7677b30'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Categories{category_id:'eea477d68b70c3a05be12567240033ef'})-[]->{1,}(d:Author{first_name:'S. O.'})-[]->{1,}(n) RETURN n
 MATCH (a:Categories{category_id:'eea477d68b70c3a05be12567240033ef'})-[r]->(n) RETURN n, TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Categories{category_id:'f2012d79fe17f02edc7542435cc04510'})-[]->{1,}(d:Article{title:'Chow groups of weighted hypersurfaces'})-[]->{1,}(n) RETURN n
 MATCH (a:Categories{specifications:'cond-mat.soft'})-[]->{1,}(d:Journal{journal_id:'d3b321ed42589ea798c241aa7de23d2d'}) RETURN count(p)
 MATCH (a:Categories{specifications:'cond-mat.soft'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Categories{specifications:'cs.CC'})-[]->{1,}(d:Article{article_id:'1010'}) RETURN count(p)
 MATCH (a:Categories{specifications:'cs.CC'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Categories{specifications:'cs.CC'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Categories{specifications:'cs.CC'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Categories{specifications:'cs.NI'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Categories{specifications:'math.AT'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Categories{specifications:'math.CA'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Categories{specifications:'math.DS'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Categories{specifications:'math.GT'})-[]->{1,}(d:Topic{label:'Linear Algebra_1'})-[]->{1,}(n) RETURN n
 MATCH (a:Categories{specifications:'math.GT'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Categories{specifications:'math.IT'})-[]->{1,}(d:Keyword{name:'super-exponential growth'})-[]->{1,}(n) RETURN n
 MATCH (a:Categories{specifications:'nlin.SI'})-[]->{1,}(d:DOI{doi_id:'fe8768ee88f2d27ed51861639e63a4ff'})-[]->{1,}(n) RETURN n
 MATCH (a:Categories{specifications:'nlin.SI'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:Categories{specifications:'q-fin.RM'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Categories{specifications:'q-fin.RM'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:DOI)-[]-{1,}(n)-[]-{1,}(b:Author) RETURN labels(n)
 MATCH (a:DOI)-[]-{1,}(n)-[]-{1,}(b:DOI) RETURN labels(n)
 MATCH (a:DOI)-[]->{3,3}(n) WHERE a.doi_id = 'ee4af8f04acefe1036a78a4436691f55' RETURN properties(n) AS props
 MATCH (a:DOI)-[]->{3,3}(n) WHERE a.name = '10.1007/PL00005532' RETURN properties(n) AS props
 MATCH (a:DOI)-[]->{3,3}(n) WHERE a.name = '10.1016/S0764-4442(00)00217-2' RETURN properties(n) AS props
 MATCH (a:DOI)-[]->{3,3}(n) WHERE a.name = '10.1142/S0219061301000107' RETURN properties(n) AS props
 MATCH (a:DOI{doi_id:'01c710839626aa78f11824682bccef1b'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:DOI{doi_id:'0ef3b1eb742dfb0bc64bdfab8ed422f1'})-[]->{1,}(d:Article{comments:'23 pages, 1 figure'}) RETURN count(p)
 MATCH (a:DOI{doi_id:'3cee0a24d271bd40a0fb03d70f70dcc7'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:DOI{doi_id:'46c2037fac5c38acd01bee5dde73c8e0'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:DOI{doi_id:'563c3ceee67bbf5fc29c764b86a8c8ca'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:DOI{doi_id:'563c3ceee67bbf5fc29c764b86a8c8ca'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:DOI{doi_id:'563c3ceee67bbf5fc29c764b86a8c8ca'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:DOI{doi_id:'57aa19619324dcd39039c52e67002af3'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:DOI{doi_id:'673313cb2dcde5d215a7e7ec2788f676'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:DOI{doi_id:'6ecd77a291d325cb3e01160880d88c69'})-[]->{1,}(d:UpdateDate{update_date:'2017-07-11'}) RETURN count(p)
 MATCH (a:DOI{doi_id:'abce5ed79c520bdb8fd79a61a852648d'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:DOI{doi_id:'ee4af8f04acefe1036a78a4436691f55'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:DOI{doi_id:'f2f5ea4787de1e16c51c306e07bb740c'})-[]->{1,}(d:Journal{journal_id:'d3b321ed42589ea798c241aa7de23d2d'}) RETURN count(p)
 MATCH (a:DOI{doi_id:'f2f5ea4787de1e16c51c306e07bb740c'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:DOI{doi_id:'f2f5ea4787de1e16c51c306e07bb740c'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:DOI{doi_id:'fe8768ee88f2d27ed51861639e63a4ff'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:DOI{name:'10.1006/jnth.2000.2616'})-[r]->(n) RETURN properties(n), r
 MATCH (a:DOI{name:'10.1007/PL00005532'})-[]->{1,}(d:DOI{name:'10.1016/S0040-9383(00)00015-X'}) RETURN count(p)
 MATCH (a:DOI{name:'10.1007/PL00005532'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:DOI{name:'10.1007/s00220-004-1078-7'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:DOI{name:'10.1007/s00365-002-0501-6'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:DOI{name:'10.1007/s00365-002-0501-6'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:DOI{name:'10.1007/s00365-002-0501-6'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:DOI{name:'10.1016/S0040-9383(00)00015-X'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:DOI{name:'10.1016/S0764-4442(00)00217-2'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:DOI{name:'10.1016/S0764-4442(00)00217-2'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:DOI{name:'10.1023/A:1004807104626'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:DOI{name:'10.1088/0305-4470/33/25/304'})-[]->{1,}(d:Categories{category_id:'b1d13c8b6874949821d038a8a71379d1'})-[]->{1,}(n) RETURN n
 MATCH (a:DOI{name:'10.1088/0305-4470/33/25/304'})-[r]->(n) RETURN properties(n), r
 MATCH (a:DOI{name:'10.1142/S0219061301000077'})-[]->{1,}(d:Keyword{name:'log-balanced'})-[]->{1,}(n) RETURN n
 MATCH (a:DOI{name:'10.1142/S0219061301000107'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:Journal)-[]->{3,3}(n) WHERE a.journal_id = 'e7b0a9b48142710ab6e87f136f6b7606' RETURN properties(n) AS props
 MATCH (a:Journal)-[]->{3,3}(n) WHERE a.journal_id = 'ebe5bed51965553359ee9f13db0293e1' RETURN properties(n) AS props
 MATCH (a:Journal{journal_id:'6dc95119d8a737d9ffc7fe367159849b'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Journal{journal_id:'904b65f98bb6823aaf3f72721984560a'})-[]->{1,}(d:Author{last_name:'Chakrabarti'}) RETURN count(p)
 MATCH (a:Journal{journal_id:'904b65f98bb6823aaf3f72721984560a'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Journal{journal_id:'99571eecaa5c5d622bb0d1f855752d5f'})-[r]->(n) RETURN properties(n), r
 MATCH (a:Journal{journal_id:'d3b321ed42589ea798c241aa7de23d2d'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Journal{journal_id:'d41d8cd98f00b204e9800998ecf8427e'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Journal{journal_id:'e7b0a9b48142710ab6e87f136f6b7606'})-[]->{1,}(d:Categories{specifications:'cs.CC'})-[]->{1,}(n) RETURN n
 MATCH (a:Journal{journal_id:'e7b0a9b48142710ab6e87f136f6b7606'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Journal{journal_id:'ebe5bed51965553359ee9f13db0293e1'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Journal{journal_id:'ebe5bed51965553359ee9f13db0293e1'})-[r]->(n) RETURN n, TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Journal{journal_id:'f6582df4742923aacfc6e67638bd4bf6'})-[]->{1,}(d:Article{article_id:'1052'})-[]->{1,}(n) RETURN n
 MATCH (a:Journal{journal_id:'f6582df4742923aacfc6e67638bd4bf6'})-[]->{1,}(d:Keyword{name:'gain'}) RETURN count(p)
 MATCH (a:Journal{journal_id:'f6582df4742923aacfc6e67638bd4bf6'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Journal{journal_id:'f663b7749e96288af8628ca3cdb4f021'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:Journal{journal_id:'f663b7749e96288af8628ca3cdb4f021'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:Journal{journal_id:'f762cb2c3b5bd7f0b3941598cfce8f15'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Journal{name:'Commun.Math.Phys'})-[]->{1,}(d:Keyword{key_id:'d2d74b47b149d8090871a2f33e80809b'})-[]->{1,}(n) RETURN n
 MATCH (a:Journal{name:'Commun.Math.Phys'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Journal{name:'Commun.Math.Phys'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Journal{name:'Constructive Approximation'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Journal{name:'Geom. Topol'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Journal{name:'J. Number Theory'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Journal{name:'J.Diff.Eq'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:Journal{name:'J.Diff.Eq'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Journal{name:'J.Statist.Phys'})-[]->{1,}(d:DOI{name:'10.2140/gt.2000.4.407'})-[]->{1,}(n) RETURN n
 MATCH (a:Journal{name:'Journal of Mathematical Logic'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Journal{name:'Journal of Mathematical Logic'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Journal{name:'Math. Ann'})-[]->{1,}(d:Report{report_id:'3fa3ec8100d88908b00d139dacdedb6a'}) RETURN count(p)
 MATCH (a:Journal{name:'Math. Nachr'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Journal{name:'Math. Nachr'})-[r]->(n) RETURN n, TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Journal{name:'Math. Nachr'})-[r]->(n) RETURN properties(n), r
 MATCH (a:Journal{name:'Topology'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Keyword)-[]->{3,3}(n) WHERE a.key_id = '0e45607b74a52b79f39c242abf265272' RETURN properties(n) AS props
 MATCH (a:Keyword)-[]->{3,3}(n) WHERE a.key_id = '1af2a68bafbcdcb0f3329c5793163154' RETURN properties(n) AS props
 MATCH (a:Keyword)-[]->{3,3}(n) WHERE a.key_id = '4969a8e0646cdb8842726781e7637625' RETURN properties(n) AS props
 MATCH (a:Keyword)-[]->{3,3}(n) WHERE a.name = 'super-exponential growth' RETURN properties(n) AS props
 MATCH (a:Keyword{key_id:'0e45607b74a52b79f39c242abf265272'})-[]->{1,}(d:Author{first_name:'Jean-Francois'})-[]->{1,}(n) RETURN n
 MATCH (a:Keyword{key_id:'0e45607b74a52b79f39c242abf265272'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:Keyword{key_id:'0e45607b74a52b79f39c242abf265272'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Keyword{key_id:'0e45607b74a52b79f39c242abf265272'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:Keyword{key_id:'0e45607b74a52b79f39c242abf265272'})-[r]->(n) RETURN n, TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Keyword{key_id:'1af2a68bafbcdcb0f3329c5793163154'})-[:HAS_TOPIC]->(c:Topic)-[r]->(n) RETURN n
 MATCH (a:Keyword{key_id:'1af2a68bafbcdcb0f3329c5793163154'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Keyword{key_id:'4969a8e0646cdb8842726781e7637625'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Keyword{key_id:'5d6533e2a77e3daabc184ee8f2441597'})-[]->{1,}(d:Journal{name:'Math. Ann'}) RETURN count(p)
 MATCH (a:Keyword{key_id:'5d6533e2a77e3daabc184ee8f2441597'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:Keyword{key_id:'5d6533e2a77e3daabc184ee8f2441597'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Keyword{key_id:'5d6533e2a77e3daabc184ee8f2441597'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Keyword{key_id:'6ded85146e3dbfb1bb866831b8948f5b'})-[]->{1,}(d:Journal{journal_id:'6dc95119d8a737d9ffc7fe367159849b'}) RETURN count(p)
 MATCH (a:Keyword{key_id:'6ded85146e3dbfb1bb866831b8948f5b'})-[]->{1,}(d:Topic{label:'Mathematics_6'}) RETURN count(p)
 MATCH (a:Keyword{key_id:'6ded85146e3dbfb1bb866831b8948f5b'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:Keyword{key_id:'72e4f3fc2930bd3a0a7730a664d069d6'})-[:HAS_TOPIC]->(c:Topic)-[r]->(n) RETURN n
 MATCH (a:Keyword{key_id:'72e4f3fc2930bd3a0a7730a664d069d6'})-[]->{1,}(d:Author{author_id:'befdd60b44b9cd4d5ffc084ce31d92d4'})-[]->{1,}(n) RETURN n
 MATCH (a:Keyword{key_id:'72e4f3fc2930bd3a0a7730a664d069d6'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Keyword{key_id:'c807a6943bac079cc85fda45518ea7f4'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:Keyword{key_id:'c807a6943bac079cc85fda45518ea7f4'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Keyword{key_id:'c807a6943bac079cc85fda45518ea7f4'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Keyword{key_id:'c95a6da6fb331984f198feec0b0bb1a5'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Keyword{key_id:'c95a6da6fb331984f198feec0b0bb1a5'})-[r]->(n) RETURN n, TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Keyword{key_id:'d2d74b47b149d8090871a2f33e80809b'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Keyword{key_id:'d2d74b47b149d8090871a2f33e80809b'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:Keyword{key_id:'d2d74b47b149d8090871a2f33e80809b'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Keyword{key_id:'d8ed805e2dd529e548ead28198edd980'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Keyword{key_id:'d8ed805e2dd529e548ead28198edd980'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Keyword{name:'discrete log problem'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:Keyword{name:'discrete log problem'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Keyword{name:'gain'})-[r]->(n) RETURN n, TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Keyword{name:'gain'})-[r]->(n) RETURN properties(n), r
 MATCH (a:Keyword{name:'layer-by-layer growth'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Keyword{name:'logarithmic barrier penalty'})-[]->{1,}(d:Topic{cluster:'8'})-[]->{1,}(n) RETURN n
 MATCH (a:Keyword{name:'logarithms'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Keyword{name:'super-exponential growth'})-[]->{1,}(d:UpdateDate{update_date:'2007-05-23'}) RETURN count(p)
 MATCH (a:Keyword{name:'super-exponential growth'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Keyword{name:'super-population viewpoint'})-[]->{1,}(d:Article{title:'An adelic causality problem related to abelian L-functions'}) RETURN count(p)
 MATCH (a:Keyword{name:'tree (optimality criteria: minimum mean-squared error)  alternative keyword suggestions: - multiscale superpopulation models - independent innovations trees - water-'})-[]->{1,}(d:Article{article_id:'1063'})-[]->{1,}(n) RETURN n
 MATCH (a:Keyword{name:'tree (optimality criteria: minimum mean-squared error)  alternative keyword suggestions: - multiscale superpopulation models - independent innovations trees - water-'})-[]->{1,}(d:Categories{specifications:'cs.NI'}) RETURN count(p)
 MATCH (a:Keyword{name:'uncountably many different asymptotic growth rates'})-[r]->(n) RETURN properties(n), r
 MATCH (a:Report)-[]->{3,3}(n) WHERE a.report_id = '45009bf7f2e3f4f275de6d92deab7b27' RETURN properties(n) AS props
 MATCH (a:Report)-[]->{3,3}(n) WHERE a.report_no = 'SPbU-IP-00-03' RETURN properties(n) AS props
 MATCH (a:Report{report_id:'42a4c65c8ac88e75fed4b8e25a71dc9a'})-[]->{1,}(d:Author{first_name:'Randall'}) RETURN count(p)
 MATCH (a:Report{report_id:'45009bf7f2e3f4f275de6d92deab7b27'})-[]->{1,}(d:Report{report_no:'JNMP 4/2002 (Letter)'}) RETURN count(p)
 MATCH (a:Report{report_id:'5049b80a2935f95cc95cf14dbfb8c610'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Report{report_id:'9301481d98615f874763a17d18e2dc92'})-[]->{1,}(d:Categories{category_id:'b1d13c8b6874949821d038a8a71379d1'}) RETURN count(p)
 MATCH (a:Report{report_id:'c3c968646b7780fada2a98b2a5a61746'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:Report{report_id:'d4a4409b7e8a77f4894c998a04162257'})-[]->{1,}(d:Topic{label:'Mathematics_6'}) RETURN count(p)
 MATCH (a:Report{report_id:'d4a4409b7e8a77f4894c998a04162257'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Report{report_id:'dd0a54fea06e7b7a384741aac9313d65'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:Report{report_id:'dd0a54fea06e7b7a384741aac9313d65'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Report{report_no:'Dip. Matematica e Applicazioni, Napoli 99-52; LMU-TPW 99-17;   MPI-PhT/99-45'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:Report{report_no:'Dip. Matematica e Applicazioni, Napoli 99-52; LMU-TPW 99-17;   MPI-PhT/99-45'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Report{report_no:'G&T migration 2000-1'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:Report{report_no:'G&T migration 2000-1'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Report{report_no:'HU-IAS/K-8, DPSU-99-8, RIMS-1266'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:Report{report_no:'HU-IAS/K-8, DPSU-99-8, RIMS-1266'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Report{report_no:'HU-IAS/K-8, DPSU-99-8, RIMS-1266'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Report{report_no:'ITF-99-42'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:Report{report_no:'JNMP 4/2002 (Letter)'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Report{report_no:'PAM-780'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:Report{report_no:'PAM-780'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Report{report_no:'SFB 478 Geometrische Stukturen in der Mathematik, Muenster; Preprint   No. 73'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:Report{report_no:'SFB 478 Geometrische Stukturen in der Mathematik, Muenster; Preprint   No. 73'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:Report{report_no:'SISSA: 39/99/FM/GEO'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Report{report_no:'SISSA: 39/99/FM/GEO'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Report{report_no:'SISSA: 39/99/FM/GEO'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Report{report_no:'SISSA: 39/99/FM/GEO'})-[r]->(n) RETURN n, TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Report{report_no:'SPbU-IP-00-03'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Report{report_no:'SPbU-IP-00-03'})-[r]->(n) RETURN n, TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Report{report_no:'Swansea preprint 99-14'})-[r]->(n) RETURN n, TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Student_Address) RETURN max(a.monthly_rental), min(a.monthly_rental)
 MATCH (a:Topic)-[]->{3,3}(n) WHERE a.cluster = '5' RETURN properties(n) AS props
 MATCH (a:Topic)-[]->{3,3}(n) WHERE a.cluster = '9' RETURN properties(n) AS props
 MATCH (a:Topic)-[]->{3,3}(n) WHERE a.description = 'Collection of terms related to polynomials, including their coefficients, bases, preservation, trends, and orthogonalities, as well as concepts such as Grobner bases, resultants, and Verblunsky coefficients, with applications in various fields such as reliability, physics, and algebraic geometry.' RETURN properties(n) AS props
 MATCH (a:Topic)-[]->{3,3}(n) WHERE a.label = 'Spectral Theory_2' RETURN properties(n) AS props
 MATCH (a:Topic{cluster:'10'})-[]->{1,}(d:Author{last_name:'Burnol'}) RETURN count(p)
 MATCH (a:Topic{cluster:'10'})-[]->{1,}(d:Journal{name:'J.Diff.Eq'}) RETURN count(p)
 MATCH (a:Topic{cluster:'10'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Topic{cluster:'10'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Topic{cluster:'11'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Topic{cluster:'11'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Topic{cluster:'11'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Topic{cluster:'11'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Topic{cluster:'11'})-[r]->(n) RETURN n, TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Topic{cluster:'2'})-[]->{1,}(d:DOI{name:'10.1007/PL00005532'}) RETURN count(p)
 MATCH (a:Topic{cluster:'3'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Topic{cluster:'3'})-[r]->(n) RETURN n, TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Topic{cluster:'4'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Topic{cluster:'4'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Topic{cluster:'5'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Topic{cluster:'6'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Topic{cluster:'6'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Topic{cluster:'8'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:Topic{cluster:'8'})-[r]->(n) RETURN n, TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Topic{cluster:'9'})-[]->{1,}(d:Article{comments:'23 pages, 1 figure'})-[]->{1,}(n) RETURN n
 MATCH (a:Topic{cluster:'9'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:Topic{cluster:'9'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Topic{cluster:'9'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:Topic{description:'Collection of techniques and methods for studying the limiting behavior of functions, sequences, and series as certain parameters approach infinity or other special values. Includes concepts such as asymptotic expansions, asymptotic normality, scaling behavior, and Jost asymptotics. Emphasizes the study of asymptotic properties, asymptotic solutions, and asymptotic optimality. Also encompasses topics like approximate normality, asymptotic equivalents, asymptotic expansion of risk difference, and asymptotic relations. May involve the use of O(m log(m B)) notation to describe'})-[]->{1,}(d:DOI{doi_id:'fe8768ee88f2d27ed51861639e63a4ff'})-[]->{1,}(n) RETURN n
 MATCH (a:Topic{description:'Collection of terms related to polynomials, including their coefficients, bases, preservation, trends, and orthogonalities, as well as concepts such as Grobner bases, resultants, and Verblunsky coefficients, with applications in various fields such as reliability, physics, and algebraic geometry.'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:Topic{description:'Collection of terms related to polynomials, including their coefficients, bases, preservation, trends, and orthogonalities, as well as concepts such as Grobner bases, resultants, and Verblunsky coefficients, with applications in various fields such as reliability, physics, and algebraic geometry.'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:Topic{description:'Collection of terms related to polynomials, including their coefficients, bases, preservation, trends, and orthogonalities, as well as concepts such as Grobner bases, resultants, and Verblunsky coefficients, with applications in various fields such as reliability, physics, and algebraic geometry.'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Topic{description:'Encompasses techniques for reconstructing images from blurred or incomplete data using regularizers, sparsity, and phase retrieval algorithms, with applications in compressive sensing, neural networks, and optical imaging. Focuses on understanding small-time behavior, limiting transitions, and phase transitions in signal processing and optics, as well as the role of status-dependent behavior and spiking neurons in neural networks. Emphasizes the importance of regularization, penalization, and lasso techniques in image reconstruction and phase retrieval'})-[]->{1,}(d:Keyword{name:'super-exponential growth'}) RETURN count(p)
 MATCH (a:Topic{description:'Encompasses techniques for reconstructing images from blurred or incomplete data using regularizers, sparsity, and phase retrieval algorithms, with applications in compressive sensing, neural networks, and optical imaging. Focuses on understanding small-time behavior, limiting transitions, and phase transitions in signal processing and optics, as well as the role of status-dependent behavior and spiking neurons in neural networks. Emphasizes the importance of regularization, penalization, and lasso techniques in image reconstruction and phase retrieval'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:Topic{description:'Encompasses techniques for reconstructing images from blurred or incomplete data using regularizers, sparsity, and phase retrieval algorithms, with applications in compressive sensing, neural networks, and optical imaging. Focuses on understanding small-time behavior, limiting transitions, and phase transitions in signal processing and optics, as well as the role of status-dependent behavior and spiking neurons in neural networks. Emphasizes the importance of regularization, penalization, and lasso techniques in image reconstruction and phase retrieval'})-[r]->(n) RETURN properties(n), r
 MATCH (a:Topic{description:'Focusing on techniques and concepts related to transformations, solutions, and properties of linear equations and matrices, including Jordan normal form, eigenvalues, eigenvectors, diagonalization, and eigenformulations.'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Topic{description:'Geometry, focusing on the study of hyperbolic spaces, structures, and manifolds, including their properties, relations, and applications in various fields such as topology, dynamics, and analysis.'})-[]->{1,}(d:Categories{category_id:'eea477d68b70c3a05be12567240033ef'}) RETURN count(p)
 MATCH (a:Topic{description:'Geometry, focusing on the study of hyperbolic spaces, structures, and manifolds, including their properties, relations, and applications in various fields such as topology, dynamics, and analysis.'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Topic{description:'Studies eigenvalues and eigenvectors of operators, analyzing how structures behave under various conditions in mathematics and physics.'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:Topic{description:'Study of mathematical objects based on their properties, including types ADE, LYM-type, Lie type, PEL type, and finite type invariance, as well as characteristics such as chirality, hereditary properties, and integrable KdV type hierarchies. Topics also include alternative characterizations, preservation properties, qualitative properties, and reviews of properties. Distinctions between characteristic 0 and characteristic >0 are explored. The focus is on understanding the mathematical structure and behavior of these objects rather than practical applications.'})-[]->{1,}(d:Journal{name:'Geom. Topol'})-[]->{1,}(n) RETURN n
 MATCH (a:Topic{description:'The study of geometric shapes and their properties, focusing on the structure and behavior of spaces rather than their physical characteristics.'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:Topic{description:'The study of geometric structures on smooth manifolds equipped with Riemannian metrics, focusing on properties such as curvature, foliations, and laminations. Emphasis is placed on understanding the behavior of geodesics, lengths, and curvature constraints in various settings, including constant mean curvature, negative curvature, and bounded holomorphic bisectional curvature. Topics include prescribed Gauss curvature, quasi-constant holomorphic sectional curvatures, and taut foliations.'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:Topic{description:'The study of how populations grow, decline, and evolve over time, with a focus on understanding the underlying mechanisms and patterns that govern these processes. Key concepts include discrete log problems, logarithmic barriers, intermediate and super-exponential growth, layer-by-layer growth, and population dynamics from a superpopulation viewpoint. Topics also include population genetics, selection, and the role of logarithms in various contexts such as gain, log-balanced, log-price, and log resolution. Additionally, there is interest in understanding the relationship'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Topic{description:'The study of how populations grow, decline, and evolve over time, with a focus on understanding the underlying mechanisms and patterns that govern these processes. Key concepts include discrete log problems, logarithmic barriers, intermediate and super-exponential growth, layer-by-layer growth, and population dynamics from a superpopulation viewpoint. Topics also include population genetics, selection, and the role of logarithms in various contexts such as gain, log-balanced, log-price, and log resolution. Additionally, there is interest in understanding the relationship'})-[r]->(n) RETURN n, TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Topic{description:'The study of how systems change over time, focusing on the existence, stability, and structure of fixed points and equilibria.'})-[]->{1,}(d:DOI{name:'10.1007/s00220-004-1078-7'})-[]->{1,}(n) RETURN n
 MATCH (a:Topic{label:'Category theory_3'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:Topic{label:'Category theory_3'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:Topic{label:'Dynamical Systems_10'})-[]->{1,}(d:Keyword{key_id:'5d6533e2a77e3daabc184ee8f2441597'})-[]->{1,}(n) RETURN n
 MATCH (a:Topic{label:'Dynamical Systems_10'})-[r]->(n) RETURN properties(n), r
 MATCH (a:Topic{label:'Geometry_7'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:Topic{label:'Geometry_7'})-[r]->() RETURN COUNT(r) AS rels, TYPE(r)
 MATCH (a:Topic{label:'Mathematical Analysis_8'})-[]->{1,}(d:Report{report_no:'SFB 478 Geometrische Stukturen in der Mathematik, Muenster; Preprint   No. 73'}) RETURN count(p)
 MATCH (a:Topic{label:'Mathematics_9'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:Topic{label:'Spectral Theory_2'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:Topic{label:'Topology_5'})-[]->{1,}(d:Journal{journal_id:'fce69ad0112a3426c57a0582a2b8620f'})-[]->{1,}(n) RETURN n
 MATCH (a:Topic{label:'Topology_5'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:Topic{label:'Topology_5'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:UpdateDate{update_date:'2007-05-23'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a:UpdateDate{update_date:'2007-05-23'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:UpdateDate{update_date:'2008-01-29'})-[]->{1,}(d:Journal{name:'Journal of Mathematical Logic'})-[]->{1,}(n) RETURN n
 MATCH (a:UpdateDate{update_date:'2008-01-29'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:UpdateDate{update_date:'2008-01-29'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:UpdateDate{update_date:'2008-01-29'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:UpdateDate{update_date:'2009-10-31'})-[r]->(n) RETURN properties(n), r
 MATCH (a:UpdateDate{update_date:'2010-06-18'})-[]->{1,}(n) RETURN DISTINCT properties(n) AS Properties
 MATCH (a:UpdateDate{update_date:'2010-06-18'})-[r]->(n) RETURN properties(n), r
 MATCH (a:UpdateDate{update_date:'2014-01-15'})-[]->{1,}(d:Article{title:'Solutions to congruences using sets with the property of Baire'})-[]->{1,}(n) RETURN n
 MATCH (a:UpdateDate{update_date:'2014-01-15'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:UpdateDate{update_date:'2014-11-11'})-[]->{2,2}(n) RETURN DISTINCT properties(n) AS props
 MATCH (a:UpdateDate{update_date:'2014-11-11'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:UpdateDate{update_date:'2015-06-26'})-[r]->(n) RETURN n, COLLECT(r) AS Types NEXT RETURN COUNT(n)
 MATCH (a:UpdateDate{update_date:'2016-11-23'})-[]->{1,}(n) RETURN p, nodes(p) ORDER BY LENGTH(p) DESC LIMIT 1
 MATCH (a:UpdateDate{update_date:'2017-07-11'})-[]->{1,}(d:Article{article_id:'1052'})-[]->{1,}(n) RETURN n
 MATCH (a:UpdateDate{update_date:'2017-07-11'})-[]->{1,}(d:Author{first_name:'Marco'}) RETURN count(p)
 MATCH (a:UpdateDate{update_date:'2018-11-28'})-[]->{3,3}(n) RETURN labels(n) AS FarNodes
 MATCH (a:UpdateDate{update_date:'2018-11-28'})-[r]->(n) RETURN labels(n) AS Interim, labels(m) AS Target
 MATCH (a:UpdateDate{update_date:'2021-02-09'})-[r]->() RETURN TYPE(r) AS Relations, COUNT(r) AS Counts
 MATCH (a:UpdateDate{update_date:'2021-02-09'})-[r]->(n) RETURN AVG(n) AS AvgProps
 MATCH (a1:Article{articleId:856300001})-[r:CUSTOMERS_ALSO_LIKE]-(a2:Article{articleId:812683015}) RETURN r
 MATCH (accenture:Organization{name:'Accenture'})-[:HAS_SUBSIDIARY]->(subsidiary:Organization) RETURN subsidiary.name
 MATCH (accenture:Organization{name:'Accenture'})-[:HAS_SUBSIDIARY]->(subsidiary:Organization) RETURN subsidiary.name LIMIT 3
 MATCH (actor:Actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre) WHERE g.name = 'Comedy' MATCH (actor)-[:ACTED_IN]->(m:Movie)-[:IN_GENRE]->(g:Genre) WHERE g.name = 'Drama' RETURN DISTINCT actor NEXT RETURN actorName
 MATCH (actor:Actor)-[:ACTED_IN]->(movie:Movie) RETURN actor, count(movie) AS movieCount ORDER BY movieCount DESC NEXT RETURN actor.name, movieCount LIMIT 1
 MATCH (actor:Person)-[:ACTED_IN]->(:Movie) MATCH (follower:Person)-[:FOLLOWS]->(actor) RETURN actor, COUNT(follower) AS followerCount NEXT RETURN actor.name AS actorName, followerCount ORDER BY followerCount DESC LIMIT 3
 MATCH (actor:Person)-[:ACTED_IN]->(m:Movie) MATCH (actor)-[:ACTED_IN]->(m)<-[:DIRECTED]-(director:Person) RETURN actor, count(m) AS moviesActed ORDER BY moviesActed DESC LIMIT 1 NEXT RETURN director.name AS directorName, moviesDirected
 MATCH (addresses:Addresses) WHERE addresses.city = 'Port Chelsea' RETURN addresses.zip_postcode
 MATCH (aff:affiliation{name:'Stanford University'})<-[:author_in_affiliation]-(a:author)-[:author_write_paper]->(p:paper)-[:paper_in_domain]->(:domain{name:'Parallel Computing'}) RETURN COUNT(p.name)
 MATCH (alice:User{name:'Alice'})-[:FRIENDS_WITH]->(friend:User) RETURN friend.name AS name
 MATCH (animationGenre:Genre{name:'Animation'})<-[:IN_GENRE]-(animationMovie:Movie)<-[:CAST_FOR]-(animationActor:Person) MATCH (nonAnimationGenre:Genre)<-[:IN_GENRE]-(nonAnimationMovie:Movie)<-[:CAST_FOR]-(nonAnimationActor:Person) WHERE nonAnimationGenre.name <> 'Animation' RETURN COLLECT(animationActor) AS animationActors NEXT RETURN actor.name
 MATCH (app:Application)-[:DEPENDS_ON]->(serv:Service{name:'java'}) RETURN app.name, app.pid ORDER BY app.pid DESC LIMIT 5
 MATCH (app:Application{name:'crm'})-[:DEPENDS_ON]->(dependency) RETURN dependency.name AS dependency_name
 MATCH (app:Application{name:'crm'})-[:LISTENS]->(port:Port) RETURN port.port AS Port
 MATCH (app:Application{name:'logstash'})-[:DEPENDS_ON]->(dependency) RETURN dependency.name AS DependencyName
 MATCH (app:Application{name:'logstash'})-[:DEPENDS_ON]->(service:Service) RETURN service NEXT MATCH (process:Process)-[:DEPENDS_ON]->(service) RETURN DISTINCT process.name
 MATCH (app:Application{name:'logstash'})<-[:RUNS]-(machine:Machine)<-[:HOLDS]-(rack:Rack) RETURN DISTINCT rack.name AS rack_name
 MATCH (app:Application{name:'webapp'})-[:LISTENS]->(port:Port) RETURN port.port
 MATCH (app:Application{name:'webapp'})-[:RUNS]->(machine:Machine)-[:TYPE]->(type:Type) RETURN sum(type.ram)
 MATCH (app:Application{name:'webserver'})-[:LISTENS]->(port:Port) RETURN COUNT(port.port) AS numberOfPorts
 MATCH (article:Article)-[:MENTIONS]->(mentionedOrg:Organization) WHERE article.sentiment > 0.8 RETURN DISTINCT mentionedOrg NEXT MATCH (mentionedOrg)<-[:HAS_COMPETITOR]-(org:Organization)-[:HAS_SUPPLIER]->(mentionedOrg) RETURN DISTINCT org.name
 MATCH (b:Article)-[r]->(n) WHERE b.comments = '21 pages, AMS-LaTeX' RETURN properties(b) AS Article_props, properties(n) AS props
 MATCH (b:Article)-[r]->(n) WHERE b.comments = '22 pages, to appear in Topology. http://jdc.math.uwo.ca Lots of minor   revisions. This version should closely match the published version' RETURN properties(b) AS Article_props, properties(n) AS props
 MATCH (b:Article)-[r]->(n) WHERE b.comments = 'Published by Geometry and Topology at   http://www.maths.warwick.ac.uk/gt/GTVol4/paper14.abs.html' RETURN properties(b) AS Article_props, properties(n) AS props
 MATCH (b:Article)-[r]->(n) WHERE b.title = 'Chow groups of weighted hypersurfaces' RETURN properties(b) AS Article_props, properties(n) AS props
 MATCH (b:Article)-[r]->(n) WHERE b.title = 'Open sets satisfying systems of congruences' RETURN properties(b) AS Article_props, properties(n) AS props
 MATCH (b:Article)-[r]->(n) WHERE b.title = 'Solutions to congruences using sets with the property of Baire' RETURN properties(b) AS Article_props, properties(n) AS props
 MATCH (b:Author)-[r]->(n) WHERE b.first_name = 'Amnon' RETURN properties(b) AS Author_props, properties(n) AS props
 MATCH (b:Author)-[r]->(n) WHERE b.last_name = 'Warnaar' RETURN properties(b) AS Author_props, properties(n) AS props
 MATCH (b:BehaviorIncident) RETURN count(b.incident_type_code)
 MATCH (b:BehaviorIncident) WHERE b.incident_type_code = 'NOISE' RETURN b.date_incident_start, b.date_incident_end
 MATCH (b:Book) RETURN b.Title ORDER BY b.Issues ASC
 MATCH (b:Book) RETURN b.Title, b.Issues
 MATCH (b:Book) RETURN b.Writer ORDER BY b.Writer ASC
 MATCH (b:Book) WHERE b.Writer <> 'Elaine Lee' RETURN b.Title
 MATCH (b:BookClub) RETURN b.`Year`, b.Book_Title, b.Publisher ORDER BY b.`Year` DESC
 MATCH (b:BookClub) RETURN b.Publisher AS publisher, count(b) AS `count` ORDER BY `count` DESC NEXT RETURN publisher LIMIT 1
 MATCH (b:BookClub) RETURN b.Publisher AS publisher, count(b) AS cnt ORDER BY cnt DESC LIMIT 1 NEXT RETURN publisher
 MATCH (b:BookClub) RETURN count(b)
 MATCH (b:BookClub) RETURN DISTINCT b.Publisher
 MATCH (b:BookClub) WHERE b.`Year` > 1989 RETURN b.Book_Title, b.Author_or_Editor
 MATCH (b:Branch) RETURN b.Name ORDER BY b.Membership_amount DESC LIMIT 3
 MATCH (b:Branch) RETURN b.Name, b.Address_road, b.City ORDER BY b.Open_year
 MATCH (b:Browser) RETURN b.id, b.name, b.market_share
 MATCH (b:Browser) RETURN b.name ORDER BY b.market_share DESC
 MATCH (b:Browser) WHERE b.market_share >= 5 RETURN COUNT(b)
 MATCH (b:Browser)-[:USES]->(w:WebClientAccelerator) WHERE b.market_share > 15 RETURN DISTINCT w.name
 MATCH (b:Browser{name:'Safari'}) RETURN b.id, b.market_share
 MATCH (b:Building) RETURN b.name ORDER BY b.Height DESC
 MATCH (b:Building) RETURN b.Stories ORDER BY b.Height DESC LIMIT 1
 MATCH (b:Building) WHERE b.Status = 'on-hold' RETURN b.name ORDER BY b.Stories ASC
 MATCH (b:Building)<-[:LOCATED_IN]-(c:Company) RETURN b.name, collect(c.name) AS companiesInBuilding
 MATCH (b:Building)<-[:LOCATED_IN]-(c:Company) RETURN c.name, collect(b.name) AS officeLocations
 MATCH (b:Business) RETURN b.state AS state, count(b) AS businessCount ORDER BY businessCount DESC NEXT RETURN state, businessCount LIMIT 3
 MATCH (b:Business) RETURN count(b)
 MATCH (b:Business) WHERE b.city = 'San Mateo' RETURN b.name
 MATCH (b:Business) WHERE b.location > 46.87 RETURN b.name
 MATCH (b:Business) WHERE b.state = 'MT' RETURN b.address
 MATCH (b:Business)-[:IN_CATEGORY]->(:Category) WHERE b.city = 'Burlingame' RETURN b.address AS businessAddress, r.text AS reviewText, u.name AS userName
 MATCH (b:Business)-[:IN_CATEGORY]->(:Category) WHERE b.city = 'Burlingame' RETURN b.name AS businessName, r.text AS reviewText, r.stars AS reviewStars, r.`date` AS reviewDate
 MATCH (b:Business)-[:IN_CATEGORY]->(:Category) WHERE b.city = 'Burlingame' RETURN DISTINCT b.name
 MATCH (b:Business)-[:IN_CATEGORY]->(:Category) WHERE b.city = 'Burlingame' RETURN DISTINCT b.name LIMIT 3
 MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) RETURN b, COUNT(c) AS categoryCount NEXT RETURN b.name AS businessName, categoryCount
 MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) RETURN c.name AS CategoryName, COUNT(b) AS NumberOfBusinesses ORDER BY NumberOfBusinesses DESC LIMIT 5 NEXT RETURN CategoryName, NumberOfBusinesses
 MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) RETURN c.name, count(b) AS num_businesses ORDER BY num_businesses DESC LIMIT 3
 MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) WHERE b.address = '723 California Dr' RETURN b.name AS businessName, c.name AS categoryName
 MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) WHERE b.name = 'KettleHouse Brewing Co.' RETURN b, c
 MATCH (b:Business)-[:IN_CATEGORY]->(c:Category) WHERE c.name = 'Beer' RETURN b NEXT MATCH (b)-[:IN_CATEGORY]->(c2:Category) WHERE c2.name = 'Coffee' RETURN b
 MATCH (b:Business)-[:IN_CATEGORY]->(c:Category)<-[:IN_CATEGORY]-(b2:Business) MATCH (review:Review)-[:REVIEWS]->(b2) RETURN c, size(review.text) AS numberOfWords NEXT RETURN c.name AS category, averageWordCount
 MATCH (b:Business)-[:IN_CATEGORY]->(c:Category{name:'Beer'}) RETURN b.name LIMIT 3
 MATCH (b:Business)-[:IN_CATEGORY]->(c:Category{name:'Breweries'}) WHERE b.city = 'Missoula' MATCH (r:Review)-[:REVIEWS]->(b) RETURN b.name AS BusinessName, r.text AS ReviewText
 MATCH (b:Business)-[:IN_CATEGORY]->(c:Category{name:'Coffee'}) WHERE b.state = 'CA' MATCH (r:Review)-[:REVIEWS]->(b) RETURN b.name, b.address, r.stars
 MATCH (b:Business)-[:REVIEWS]-(r:Review) RETURN b, avg(r.stars) AS averageRating NEXT RETURN b.name AS businessName, averageRating
 MATCH (b:Business)-[:REVIEWS]-(r:Review) WHERE b.city <> 'Missoula' RETURN count(r) AS totalReviews NEXT RETURN totalReviews
 MATCH (b:Business)-[:REVIEWS]->(r:Review) RETURN b, count(r) AS reviewsCount ORDER BY reviewsCount DESC LIMIT 3 NEXT RETURN b.name AS BusinessName, b.address AS Address
 MATCH (b:Business)<-[:REVIEWS]-(r:Review) RETURN b, avg(r.stars) AS averageRating NEXT RETURN city, businessCount ORDER BY businessCount DESC LIMIT 1
 MATCH (b:Business)<-[:REVIEWS]-(r:Review) RETURN b, COUNT(r) AS reviewCount ORDER BY reviewCount DESC LIMIT 1 NEXT RETURN b.name AS businessName, reviewCount
 MATCH (b:Business)<-[:REVIEWS]-(r:Review) RETURN b, count(r) AS reviewsCount NEXT RETURN b.name
 MATCH (b:Business)<-[:REVIEWS]-(r:Review) RETURN b, r ORDER BY r.`date` ASC LIMIT 1 NEXT RETURN b.name AS businessName, b.address AS businessAddress
 MATCH (b:Business)<-[:REVIEWS]-(r:Review) RETURN b, r ORDER BY r.stars ASC LIMIT 1 NEXT RETURN r.text AS reviewText
 MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE r.`date` = 2016 RETURN b, avg(r.stars) AS average_rating ORDER BY average_rating DESC NEXT RETURN b.name, average_rating LIMIT 3
 MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE r.stars < 4.0 RETURN COUNT(b) AS numberOfBusinesses
 MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE r.stars = 5.0 RETURN b
 MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE r.stars >= 3.5 RETURN DISTINCT b.name, b.address, b.city, b.state
 MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE r.stars >= 4 MATCH (b)<-[:REVIEWS]-(r2:Review) WHERE r2.stars <= 3 RETURN b, count(r) AS positiveReviews NEXT RETURN b.name AS businessName, positiveReviews, negativeReviews ORDER BY positiveReviews DESC, negativeReviews DESC
 MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE r.stars >= 4.0 RETURN DISTINCT b.name AS businessName
 MATCH (b:Business)<-[:REVIEWS]-(r:Review) WHERE r.text > 100 RETURN DISTINCT b.name
 MATCH (b:Business)<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN b, count(u) AS userCount NEXT RETURN b LIMIT 3
 MATCH (b:Business)<-[:REVIEWS]-(review:Review) RETURN b, count(review) AS reviewCount NEXT RETURN b.name AS businessName, reviewCount ORDER BY reviewCount DESC
 MATCH (b:Business)<-[:REVIEWS]-(review:Review) RETURN b, count(review) AS reviewCount NEXT RETURN b.name AS businessName, reviewCount ORDER BY reviewCount DESC LIMIT 1
 MATCH (b:Business{address:'1151 W Broadway St'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN u.name
 MATCH (b:Business{address:'200 W Pine St'})<-[:REVIEWS]-(r:Review) RETURN r ORDER BY r.stars DESC LIMIT 3
 MATCH (b:Business{address:'200 W Pine St'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN u.name
 MATCH (b:Business{address:'301 E Main St'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN COUNT(u) AS numberOfUsers
 MATCH (b:Business{address:'313 N 1st St W'})<-[:REVIEWS]-(r:Review) RETURN r.text, r.stars ORDER BY r.stars DESC LIMIT 3
 MATCH (b:Business{address:'716 N San Mateo Dr'}) RETURN b.name LIMIT 3
 MATCH (b:Business{address:'723 California Dr'})-[:REVIEWS]-(r:Review) RETURN b.name, b.businessId
 MATCH (b:Business{businessId:'b7'}) RETURN b.name
 MATCH (b:Business{city:'Missoula'})-[:IN_CATEGORY]->(c:Category) RETURN c, count(b) AS businessCount ORDER BY businessCount DESC NEXT RETURN c.name AS category, businessCount LIMIT 1
 MATCH (b:Business{city:'Missoula'})<-[:REVIEWS]-(r:Review) RETURN avg(r.stars) AS average_rating
 MATCH (b:Business{city:'Missoula'})<-[:REVIEWS]-(r:Review{stars:5.0}) RETURN b, count(r) AS reviewCount, collect(r.text) AS reviewTexts ORDER BY reviewCount DESC LIMIT 1 NEXT RETURN b.name AS businessName, reviewTexts
 MATCH (b:Business{city:'San Mateo'}) RETURN b LIMIT 3
 MATCH (b:Business{city:'San Mateo'})-[:REVIEWS]-(r:Review) WHERE r.`date` = 9 RETURN count(b) AS NumberOfBusinessesReviewedInSeptember
 MATCH (b:Business{city:'San Mateo'})<-[:REVIEWS]-(r:Review) RETURN b, avg(r.stars) AS avgRating, collect(r) AS reviews ORDER BY avgRating DESC LIMIT 1 NEXT RETURN b.name AS businessName, avgRating, reviews
 MATCH (b:Business{name:'Ducky's Car Wash'})-[:IN_CATEGORY]->(c:Category) MATCH (b)<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN c.name AS Category, r AS Review, u.name AS User
 MATCH (b:Business{name:'Ducky's Car Wash'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN u.name
 MATCH (b:Business{name:'KettleHouse Brewing Co.'})<-[:REVIEWS]-(r:Review) RETURN count(r) AS NumberOfReviews
 MATCH (b:Business{name:'KettleHouse Brewing Co.'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN COUNT(u.userId) AS numberOfUsers
 MATCH (b:Business{name:'KettleHouse Brewing Co.'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN count(u) AS NumberOfUsers
 MATCH (b:Business{name:'Market on Front'})<-[:REVIEWS]-(r:Review) RETURN r.text AS review, r.`date` AS `date`, r.stars AS stars
 MATCH (b:Business{name:'Missoula Public Library'}) MATCH (b)<-[:REVIEWS]-(r:Review) RETURN r ORDER BY r.stars ASC NEXT RETURN r.`date` LIMIT 1
 MATCH (b:Business{name:'Missoula Public Library'})-[:IN_CATEGORY]->(c:Category) RETURN c.name AS category
 MATCH (b:Business{name:'Missoula Public Library'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN count(u) AS NumberOfUsers
 MATCH (b:Business{name:'Missoula Public Library'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN COUNT(u) AS numberOfUsers
 MATCH (b:Business{name:'Neo4j'})-[:REVIEWS]-(r:Review) RETURN count(r) AS NumberOfReviews
 MATCH (b:Business{name:'Neo4j'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN u.name LIMIT 3
  MATCH (b:Business{name:'Zootown Brew'})-[:IN_CATEGORY]->(c:Category)<-[:IN_CATEGORY]-(otherBusiness:Business{state:b.state}) MATCH (review:Review)-[:REVIEWS]->(otherBusiness) RETURN review.text, review.`date`, review.stars, otherBusiness.name
 MATCH (b:Business{name:'Zootown Brew'})<-[:REVIEWS]-(r:Review)<-[:WROTE]-(u:User) RETURN u.name AS userName
 MATCH (b:Business{state:'MT'}) RETURN b LIMIT 3
 MATCH (b:Business{state:'MT'}) RETURN b.name LIMIT 3
 MATCH (b:Business{state:'MT'})-[:REVIEWS]->(r:Review) WHERE r.`date` = 2016 RETURN b.name, b.address, collect(r.reviewId) AS reviewIds
 MATCH (b:Categories)-[r]->(n) WHERE b.category_id = '088fbf884bd7c6533956a45531b362b7' RETURN properties(b) AS Categories_props, properties(n) AS props
 MATCH (b:Categories)-[r]->(n) WHERE b.specifications = 'alg-geom' RETURN properties(b) AS Categories_props, properties(n) AS props
 MATCH (b:Categories)-[r]->(n) WHERE b.specifications = 'cs.CC' RETURN properties(b) AS Categories_props, properties(n) AS props
 MATCH (b:Categories)-[r]->(n) WHERE b.specifications = 'math.AT' RETURN properties(b) AS Categories_props, properties(n) AS props
 MATCH (b:Categories)-[r]->(n) WHERE b.specifications = 'q-fin.PR' RETURN properties(b) AS Categories_props, properties(n) AS props
 MATCH (b:Character{name:'Benerro'}) MATCH (b)-[]-(c:Character) WHERE c.degree < 5 RETURN DISTINCT c.name
 MATCH (b:DOI)-[r]->(n) WHERE b.doi_id = '01c710839626aa78f11824682bccef1b' RETURN properties(b) AS DOI_props, properties(n) AS props
 MATCH (b:DOI)-[r]->(n) WHERE b.doi_id = '46c2037fac5c38acd01bee5dde73c8e0' RETURN properties(b) AS DOI_props, properties(n) AS props
 MATCH (b:DOI)-[r]->(n) WHERE b.doi_id = '563c3ceee67bbf5fc29c764b86a8c8ca' RETURN properties(b) AS DOI_props, properties(n) AS props
 MATCH (b:DOI)-[r]->(n) WHERE b.doi_id = '57aa19619324dcd39039c52e67002af3' RETURN properties(b) AS DOI_props, properties(n) AS props
 MATCH (b:DOI)-[r]->(n) WHERE b.name = '10.1007/PL00005532' RETURN properties(b) AS DOI_props, properties(n) AS props
 MATCH (b:DOI)-[r]->(n) WHERE b.name = '10.1142/S0219061301000107' RETURN properties(b) AS DOI_props, properties(n) AS props
 MATCH (b:Journal)-[r]->(n) WHERE b.journal_id = '6dc95119d8a737d9ffc7fe367159849b' RETURN properties(b) AS Journal_props, properties(n) AS props
 MATCH (b:Journal)-[r]->(n) WHERE b.journal_id = 'd3b321ed42589ea798c241aa7de23d2d' RETURN properties(b) AS Journal_props, properties(n) AS props
 MATCH (b:Journal)-[r]->(n) WHERE b.journal_id = 'd41d8cd98f00b204e9800998ecf8427e' RETURN properties(b) AS Journal_props, properties(n) AS props
 MATCH (b:Journal)-[r]->(n) WHERE b.name = 'J.Diff.Eq' RETURN properties(b) AS Journal_props, properties(n) AS props
 MATCH (b:Keyword)-[r]->(n) WHERE b.key_id = '0e45607b74a52b79f39c242abf265272' RETURN properties(b) AS Keyword_props, properties(n) AS props
 MATCH (b:Keyword)-[r]->(n) WHERE b.key_id = '72e4f3fc2930bd3a0a7730a664d069d6' RETURN properties(b) AS Keyword_props, properties(n) AS props
 MATCH (b:Keyword)-[r]->(n) WHERE b.name = 'super-exponential growth' RETURN properties(b) AS Keyword_props, properties(n) AS props
 MATCH (b:Keyword)-[r]->(n) WHERE b.name = 'super-population viewpoint' RETURN properties(b) AS Keyword_props, properties(n) AS props
 MATCH (b:Report)-[r]->(n) WHERE b.report_id = '45009bf7f2e3f4f275de6d92deab7b27' RETURN properties(b) AS Report_props, properties(n) AS props
 MATCH (b:Report)-[r]->(n) WHERE b.report_no = 'SISSA: 39/99/FM/GEO' RETURN properties(b) AS Report_props, properties(n) AS props
 MATCH (b:Topic)-[r]->(n) WHERE b.cluster = '7' RETURN properties(b) AS Topic_props, properties(n) AS props
 MATCH (b:Topic)-[r]->(n) WHERE b.description = 'Encompasses techniques for reconstructing images from blurred or incomplete data using regularizers, sparsity, and phase retrieval algorithms, with applications in compressive sensing, neural networks, and optical imaging. Focuses on understanding small-time behavior, limiting transitions, and phase transitions in signal processing and optics, as well as the role of status-dependent behavior and spiking neurons in neural networks. Emphasizes the importance of regularization, penalization, and lasso techniques in image reconstruction and phase retrieval' RETURN properties(b) AS Topic_props, properties(n) AS props
 MATCH (b:Topic)-[r]->(n) WHERE b.description = 'The study of geometric structures on smooth manifolds equipped with Riemannian metrics, focusing on properties such as curvature, foliations, and laminations. Emphasis is placed on understanding the behavior of geodesics, lengths, and curvature constraints in various settings, including constant mean curvature, negative curvature, and bounded holomorphic bisectional curvature. Topics include prescribed Gauss curvature, quasi-constant holomorphic sectional curvatures, and taut foliations.' RETURN properties(b) AS Topic_props, properties(n) AS props
 MATCH (b:Topic)-[r]->(n) WHERE b.label = 'Dynamical Systems_10' RETURN properties(b) AS Topic_props, properties(n) AS props
 MATCH (b:Topic)-[r]->(n) WHERE b.label = 'Geometry_7' RETURN properties(b) AS Topic_props, properties(n) AS props
 MATCH (b:UpdateDate)-[r]->(n) WHERE b.update_date = '2009-10-31' RETURN properties(b) AS UpdateDate_props, properties(n) AS props
 MATCH (b:UpdateDate)-[r]->(n) WHERE b.update_date = '2010-06-18' RETURN properties(b) AS UpdateDate_props, properties(n) AS props
 MATCH (bt:Character{name:'Brynden-Tully'}) RETURN bt NEXT MATCH (bt)-[:INTERACTS]->{1,5}(other) RETURN other.name, other.centrality ORDER BY other.centrality ASC
 MATCH (buyer:Organization)-[:HAS_SUPPLIER]->(supplier:Organization) MATCH (buyer)-[:IN_CITY]->(city:City)-[:IN_CITY]-(supplier) RETURN DISTINCT buyer.name
 MATCH (c:Article)<-[r]-(n) WHERE c.`abstract` = '  We extend a result of to Esnault-Levine-Viehweg concerning the Chow groups of hypersurfaces in projective space to those in weighted projective spaces. ' RETURN properties(n) AS props, r
 MATCH (c:Article)<-[r]-(n) WHERE c.comments = 'Latex, 9 pages, no figures' RETURN properties(n) AS props, r
 MATCH (c:Article)<-[r]-(n) WHERE c.title = 'Open sets satisfying systems of congruences' RETURN properties(n) AS props, r
 MATCH (c:Author)<-[r]-(n) WHERE c.author_id = '788db042978edbbfc654927e23ac21d1' RETURN properties(n) AS props, r
 MATCH (c:Author)<-[r]-(n) WHERE c.author_id = 'a95ff40457bf3cae9c6852c6a14937fa' RETURN properties(n) AS props, r
 MATCH (c:Author)<-[r]-(n) WHERE c.author_id = 'd83c43e5b1cf398c4e549843f497694b' RETURN properties(n) AS props, r
 MATCH (c:Author)<-[r]-(n) WHERE c.first_name = 'Jean-Francois' RETURN properties(n) AS props, r
 MATCH (c:Author)<-[r]-(n) WHERE c.last_name = 'Burnol' RETURN properties(n) AS props, r
 MATCH (c:Author)<-[r]-(n) WHERE c.last_name = 'Dunajski' RETURN properties(n) AS props, r
 MATCH (c:Author)<-[r]-(n) WHERE c.last_name = 'Mason' RETURN properties(n) AS props, r
 MATCH (c:Author)<-[r1]-(n)-[r2]->(d:Keyword) RETURN labels(n)
 MATCH (c:Campus) WHERE c.`Year` < 1800 RETURN c.Campus
 MATCH (c:Campus) WHERE c.`Year` = 1958 RETURN c.Campus
 MATCH (c:Campus) WHERE c.County = 'Los Angeles' RETURN c.Campus
 MATCH (c:Campus) WHERE c.County = 'Los Angeles' RETURN count(c)
 MATCH (c:Campus)<-[:TEACHES]-(f:Faculty) WHERE f.`Year` = 2002 RETURN f.Faculty ORDER BY f.Faculty DESC LIMIT 1
 MATCH (c:Campus)<-[:TEACHES]-(f:Faculty) WHERE f.`Year` = 2003 RETURN c.Campus ORDER BY f.Faculty DESC LIMIT 1
 MATCH (c:Candidate) RETURN c.Poll_Source ORDER BY c.Oppose_rate DESC LIMIT 1
 MATCH (c:Candidate) RETURN c.Support_rate ORDER BY c.Support_rate DESC LIMIT 3
 MATCH (c:Candidate) RETURN c.Support_rate, c.Consider_rate, c.Oppose_rate ORDER BY c.Unsure_rate
 MATCH (c:Catalog)<-[:CONTAINS]-(cs:CatalogStructure) WHERE cs.catalog_level_number > 5 RETURN c.catalog_name, c.date_of_publication
 MATCH (c:CatalogContent) RETURN c.catalog_entry_name ORDER BY c.height DESC LIMIT 1
 MATCH (c:CatalogContent) WHERE c.next_entry_id > 8 RETURN c.catalog_entry_name
 MATCH (c:Categories)<-[r1]-(n)-[r2]->(d:Keyword) RETURN labels(n)
 MATCH (c:Categories)<-[r1]-(n)-[r2]->(d:Report) RETURN labels(n)
 MATCH (c:Category) RETURN c.categoryName, c.description LIMIT 3
 MATCH (c:Category) WHERE c.categoryName = 'Dairy Products' MATCH (c)<-[:PART_OF]-(p:`Product`) RETURN p LIMIT 3 NEXT RETURN p.productName, p.unitsInStock
 MATCH (c:Category)<-[:PART_OF]-(p:`Product`) WHERE p.unitsOnOrder > 0 RETURN c.categoryName, COUNT(p) AS productCount ORDER BY productCount ASC LIMIT 1
 MATCH (c:Category{categoryName:'Beverages'})<-[:PART_OF]-(p:`Product`)<-[:SUPPLIES]-(s:Supplier) RETURN DISTINCT s.companyName LIMIT 3
 MATCH (c:Category{categoryName:'Dairy Products'})-[:PART_OF]->(p:`Product`) RETURN avg(p.unitsOnOrder) AS averageQuantity NEXT RETURN averageQuantity
 MATCH (c:Category{categoryName:'Seafood'})<-[:PART_OF]-(p:`Product`) RETURN c, sum(p.unitsInStock) AS totalRevenue NEXT RETURN totalRevenue
 MATCH (c:Category{categoryName:'Seafood'})<-[:PART_OF]-(p:`Product`) RETURN MIN(p.reorderLevel) AS minReorderLevel
 MATCH (c:Category{categoryName:'Seafood'})<-[:PART_OF]-(p:`Product`)<-[:ORDERS]-(o:Order) RETURN p.productName, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 5
 MATCH (c:Character) MATCH (c)-[i1:INTERACTS1]->(other1) MATCH (c)-[i2:INTERACTS2]->(other2) RETURN c, sum(i1.weight) AS weight1, sum(i2.weight) AS weight2 NEXT RETURN c.name AS character, weight1 AS totalWeight ORDER BY totalWeight DESC LIMIT 5
 MATCH (c:Character) RETURN avg(c.centrality)
 MATCH (c:Character) RETURN c, embedding NEXT RETURN DISTINCT c.name
 MATCH (c:Character) RETURN c.name AS character_name, c.community ORDER BY c.community DESC LIMIT 5
 MATCH (c:Character) RETURN c.name AS character, c.book1PageRank AS pageRank ORDER BY pageRank DESC LIMIT 5
 MATCH (c:Character) RETURN c.name, c.book1BetweennessCentrality ORDER BY c.book1BetweennessCentrality DESC LIMIT 1
 MATCH (c:Character) RETURN c.name, c.book1BetweennessCentrality ORDER BY c.book1BetweennessCentrality DESC LIMIT 3
 MATCH (c:Character) RETURN c.name, c.book1PageRank ORDER BY c.book1PageRank ASC LIMIT 3
 MATCH (c:Character) RETURN c.name, c.book1PageRank ORDER BY c.book1PageRank DESC LIMIT 3
 MATCH (c:Character) RETURN c.name, c.book45PageRank ORDER BY c.book45PageRank DESC LIMIT 3
 MATCH (c:Character) RETURN c.name, c.centrality ORDER BY c.centrality ASC LIMIT 3
 MATCH (c:Character) RETURN c.name, c.centrality ORDER BY c.centrality DESC LIMIT 3
 MATCH (c:Character) RETURN c.name, c.pagerank ORDER BY c.pagerank DESC LIMIT 3
 MATCH (c:Character) RETURN c.name, c.pagerank ORDER BY c.pagerank LIMIT 1
 MATCH (c:Character) RETURN max(c.degree) AS max_degree, c.book1BetweennessCentrality ORDER BY max_degree DESC LIMIT 1
 MATCH (c:Character) RETURN min(c.book1BetweennessCentrality) AS min_centrality
 MATCH (c:Character) WHERE c.book1BetweennessCentrality = 0.0 RETURN c.name
 MATCH (c:Character) WHERE c.book1BetweennessCentrality = 0.0 RETURN c.name LIMIT 3
 MATCH (c:Character) WHERE c.book1BetweennessCentrality > 1000 RETURN c.name AS character
 MATCH (c:Character) WHERE c.book1BetweennessCentrality > 1000 RETURN c.name, c.book1BetweennessCentrality
 MATCH (c:Character) WHERE c.book1PageRank < 0.4 RETURN c
 MATCH (c:Character) WHERE c.book1PageRank = 0.15 RETURN c
 MATCH (c:Character) WHERE c.book1PageRank > 0.5 RETURN c.name, c.degree ORDER BY c.degree DESC LIMIT 3
 MATCH (c:Character) WHERE c.book1PageRank > 5 RETURN c
 MATCH (c:Character) WHERE c.book45PageRank < 0.7 RETURN c LIMIT 3
 MATCH (c:Character) WHERE c.book45PageRank < 1 RETURN c.name AS character
 MATCH (c:Character) WHERE c.centrality < 0.1 RETURN c.name
 MATCH (c:Character) WHERE c.centrality = 0 RETURN c.name
 MATCH (c:Character) WHERE c.centrality = 1.0 RETURN c.name
 MATCH (c:Character) WHERE c.centrality > 0.5 RETURN c
 MATCH (c:Character) WHERE c.community = 579 MATCH (c)-[r:INTERACTS]->() RETURN avg(r.weight) AS average_weight NEXT RETURN average_weight
 MATCH (c:Character) WHERE c.community = 579 RETURN c
 MATCH (c:Character) WHERE c.community = 579 RETURN max(c.book1BetweennessCentrality)
 MATCH (c:Character) WHERE c.community = 584 RETURN avg(c.louvain)
 MATCH (c:Character) WHERE c.community = 795 RETURN c.name
 MATCH (c:Character) WHERE c.community = 795 RETURN c.name ORDER BY c.pagerank DESC LIMIT 5
 MATCH (c:Character) WHERE c.community > 700 RETURN count(c)
 MATCH (c:Character) WHERE c.degree < 10 RETURN c.name
 MATCH (c:Character) WHERE c.degree = 0 RETURN c.name
 MATCH (c:Character) WHERE c.degree = 0.0 RETURN count(c)
 MATCH (c:Character) WHERE c.degree = 300.0 RETURN c.name
 MATCH (c:Character) WHERE c.degree > 0 RETURN c.name, c.book1PageRank ORDER BY c.book1PageRank LIMIT 5
 MATCH (c:Character) WHERE c.degree > 100 RETURN c
 MATCH (c:Character) WHERE c.degree > 100 RETURN c.name LIMIT 3
 MATCH (c:Character) WHERE c.degree > 100 RETURN count(c)
 MATCH (c:Character) WHERE c.pagerank = 0.15000000000000002 RETURN c.name
 MATCH (c:Character)-[:INTERACTS]->(theon:Character{name:'Theon-Greyjoy'}) RETURN DISTINCT c.name AS CharacterName
 MATCH (c:Character)-[:INTERACTS2]->(c2:Character) WHERE c.louvain > 3 RETURN DISTINCT c.name
 MATCH (c:Character)-[:INTERACTS45]->(target:Character{name:'Walder-Rivers'}) RETURN c.name LIMIT 3
 MATCH (c:Character)-[i:INTERACTS3]->(other:Character) RETURN c.name AS character, sum(i.weight) AS total_interactions ORDER BY total_interactions DESC LIMIT 5
 MATCH (c:Character)-[i:INTERACTS3]->(other:Character) RETURN c.name, min(i.weight) AS minWeight ORDER BY minWeight LIMIT 5
 MATCH (c:Character)-[r:INTERACTS]->(:Character) RETURN c.name, SUM(r.weight) AS totalInteractions ORDER BY totalInteractions DESC LIMIT 1
 MATCH (c:Character)-[r:INTERACTS1]->(:Character) RETURN c.name, sum(r.weight) AS totalWeight ORDER BY totalWeight DESC LIMIT 3
 MATCH (c:Character)-[r:INTERACTS1]->(:Character) WHERE r.weight > 250 RETURN c
 MATCH (c:Character)-[r:INTERACTS1]->() WHERE c.community = 579 RETURN max(r.weight) AS maxWeight
 MATCH (c:Character)-[r:INTERACTS1{weight:291,book:1}]->(:Character) RETURN c LIMIT 3
 MATCH (c:Character)-[r:INTERACTS2]->(:Character) WHERE r.weight < 20 RETURN c
 MATCH (c:Character)-[r:INTERACTS2]->(:Character) WHERE r.weight > 50 RETURN c
 MATCH (c:Character)-[r:INTERACTS3]->(:Character) WHERE r.weight > 90 RETURN c
 MATCH (c:Character)-[r:INTERACTS3]->(c2:Character) RETURN c.name AS character, r.weight AS weight ORDER BY r.weight ASC LIMIT 5
 MATCH (c:Character)-[r1:INTERACTS1]->(c1:Character) MATCH (c)-[r2:INTERACTS2]->(c2:Character) RETURN c, SUM(r1.weight) AS totalWeight NEXT RETURN c.name AS characterName, totalWeight ORDER BY totalWeight DESC LIMIT 5
 MATCH (c:Character{community:579}) RETURN avg(c.degree) AS average_degree
 MATCH (c:Character{community:712}) RETURN c.degree AS `degrees` NEXT RETURN min(`degrees`)
 MATCH (c:Character{name:'Aegon-V-Targaryen'}) RETURN c.community
 MATCH (c:Character{name:'Aemon-Targaryen-(Dragonknight)'})-[r:INTERACTS]-(other) RETURN other.name AS character_name
 MATCH (c:Character{name:'Cersei-Lannister'})-[:INTERACTS45{book:45}]-(other) RETURN other.name AS character_name
 MATCH (c:Character{name:'Cersei-Lannister'})-[:INTERACTS45{book:45}]->(other:Character) RETURN other ORDER BY other.book45PageRank DESC LIMIT 3 NEXT RETURN other.name AS character_name
 MATCH (c:Character{name:'Jaime-Lannister'}) RETURN c.fastrf_embedding
 MATCH (c:Character{name:'Jaime-Lannister'})-[:INTERACTS3]->(other:Character) RETURN other.name
 MATCH (c:Character{name:'Ryman-Frey'}) RETURN c.centrality
 MATCH (c:Character{name:'Walder-Rivers'}) RETURN c.community
 MATCH (c:CirculationHistory) RETURN c.document_id, count(c.employee_id) AS employee_count ORDER BY c.document_id
 MATCH (c:City) RETURN c.Official_Name ORDER BY c.Population DESC
 MATCH (c:City) RETURN c.Official_Name, c.Status ORDER BY c.Population DESC LIMIT 1
 MATCH (c:City) RETURN c.Status, avg(c.Population)
 MATCH (c:City) RETURN COUNT(c.Status)
 MATCH (c:City) WHERE c.Population > 1000 MATCH (fc:Farm_competition)-[:TAKES_PLACE_IN]->(c) RETURN fc.Theme
 MATCH (c:City) WHERE c.Population > 1000 RETURN c NEXT MATCH (fc:Farm_competition)-[:TAKES_PLACE_IN]->(c) RETURN fc.Theme
 MATCH (c:City) WHERE c.Status <> 'Village' RETURN c.Census_Ranking
 MATCH (c:City)-[:IN_COUNTRY]->(co:Country{name:'United States of America'}) RETURN c.name LIMIT 3
 MATCH (c:City)-[:IN_COUNTRY]->(country:Country) RETURN country, count(c) AS cityCount NEXT RETURN country LIMIT 3
 MATCH (c:City)<-[:IN_CITY]-(o:Organization) RETURN c, COUNT(o) AS orgCount NEXT MATCH (c)-[:IN_COUNTRY]->(country:Country) RETURN country.name AS Country, COUNT(c) AS CityCount
 MATCH (c:City)<-[:IN_CITY]-(o:Organization) RETURN c, count(o) AS orgCount NEXT RETURN c.name AS city, orgCount
 MATCH (c:City)<-[:IN_CITY]-(o:Organization) RETURN c, count(o) AS orgCount ORDER BY orgCount DESC LIMIT 5 NEXT RETURN c.name AS city, orgCount
 MATCH (c:City)<-[:IN_CITY]-(o:Organization) WHERE o.revenue > 5e8 RETURN c.name AS city
 MATCH (c:City)<-[:TAKES_PLACE_IN]-(fc:Farm_competition) RETURN c, COUNT(fc) AS `count` NEXT RETURN c.Official_Name
 MATCH (c:City)<-[:TAKES_PLACE_IN]-(fc:Farm_competition) RETURN c, count(fc) AS counter ORDER BY counter DESC LIMIT 1 NEXT RETURN c.Status
 MATCH (c:City)<-[:TAKES_PLACE_IN]-(fc:Farm_competition) RETURN c, count(fc) AS Farm_competition_count NEXT RETURN c.Official_Name
 MATCH (c:Collection) WHERE c.name = 'Toy Story Collection' MATCH (c)<-[:IN_COLLECTION]-(m:Movie) RETURN avg(m.revenue) AS averageRevenue NEXT RETURN averageRevenue
 MATCH (c:Comment) WHERE c.score > 1 RETURN c.body_markdown
 MATCH (c:Comment) WHERE c.uuid = 122427099 RETURN c.score
 MATCH (c:Comment)-[:COMMENTED_ON]->(q:Question) WHERE c.score > 2 RETURN DISTINCT q
 MATCH (c:Comment)-[:COMMENTED_ON]->(q:Question) WHERE q.view_count > 100 RETURN c ORDER BY c.score DESC LIMIT 5
 MATCH (c:Company) RETURN c.Company, c.Headquarters ORDER BY c.Market_Value DESC
 MATCH (c:Company) RETURN c.Company, c.Rank ORDER BY c.Sales_billion DESC
 MATCH (c:Company) RETURN c.Headquarters ORDER BY c.Sales_in_Billion DESC LIMIT 1
 MATCH (c:Company) RETURN c.Headquarters, c.Industry
 MATCH (c:Company) RETURN c.Headquarters, count(c)
 MATCH (c:Company) RETURN c.Headquarters, COUNT(c)
 MATCH (c:Company) RETURN c.Industry AS Industry, count(c) AS `count` NEXT RETURN Industry ORDER BY `count` DESC
 MATCH (c:Company) RETURN c.Industry AS industry, COUNT(c) AS `count` ORDER BY `count` DESC NEXT RETURN industry LIMIT 1
 MATCH (c:Company) RETURN c.Industry AS Industry, COUNT(c) AS `count` ORDER BY `count` DESC NEXT RETURN Industry LIMIT 1
 MATCH (c:Company) RETURN c.name ORDER BY c.Market_Value_billion DESC
 MATCH (c:Company) RETURN c.Name ORDER BY c.Sales_in_Billion ASC
 MATCH (c:Company) RETURN c.name, c.Assets_billion ORDER BY c.name ASC
 MATCH (c:Company) RETURN count(c.Industry)
 MATCH (c:Company) RETURN COUNT(c.Industry)
 MATCH (c:Company) RETURN count(c)
 MATCH (c:Company) RETURN DISTINCT c.Main_Industry
 MATCH (c:Company) RETURN max(c.Market_Value_in_Billion), min(c.Market_Value_in_Billion)
 MATCH (c:Company) RETURN min(c.Market_Value), max(c.Market_Value), avg(c.Market_Value)
 MATCH (c:Company) WHERE c.Headquarters <> 'USA' RETURN c.Main_Industry, c.Company
 MATCH (c:Company) WHERE c.Headquarters <> 'USA' RETURN c.name
 MATCH (c:Company) WHERE c.Headquarters = 'USA' RETURN count(c)
 MATCH (c:Company) WHERE c.Industry <> 'Banking' RETURN max(c.Sales_billion), min(c.Sales_billion)
 MATCH (c:Company) WHERE c.Main_Industry = 'Banking' RETURN c.Rank, c.Company, c.Market_Value ORDER BY c.Sales_billion, c.Profits_billion
 MATCH (c:Company) WHERE c.Sales_in_Billion > 200 RETURN c.Name ORDER BY c.Sales_in_Billion, c.Profits_in_Billion DESC
 MATCH (c:Company)-[:LOCATED_IN]->(b:Building) RETURN b.Stories ORDER BY b.Height DESC LIMIT 1
 MATCH (c:Company)-[:OWNS]->(g:GasStation) RETURN g.Location, g.Representative_Name ORDER BY c.Assets_billion DESC LIMIT 3
 MATCH (c:Company)-[:OWNS]->(g:GasStation) WHERE c.Market_Value > 100 RETURN g.Location
 MATCH (c:Company)-[:OWNS]->(gs:GasStation) WHERE c.Company = 'ExxonMobil' RETURN gs.Manager_Name AS manager_name
 MATCH (c:Company)-[:OWNS]->(gs:GasStation) WHERE c.Market_Value > 100 RETURN gs.Location
 MATCH (c:Company)-[sc:OWNS]->(gs:GasStation) WHERE c.Company = 'ExxonMobil' RETURN gs.Manager_Name
 MATCH (c:conference) RETURN count(c) AS countConference
 MATCH (c:Country)<-[:COUNTRY]-(e:Entity)-[:ORIGINATOR]->(f:Filing) RETURN c.name AS Country, count(f) AS NumberOfFilings ORDER BY NumberOfFilings DESC LIMIT 5
 MATCH (c:Country)<-[:COUNTRY]-(e:Entity)<-[:BENEFITS]-(f:Filing) RETURN c.name AS country, COUNT(e) AS beneficiary_bank_count ORDER BY beneficiary_bank_count DESC LIMIT 3 NEXT RETURN country, beneficiary_bank_count
 MATCH (c:Country)<-[:COUNTRY]-(e:Entity)<-[:ORIGINATOR]-(f:Filing) RETURN c.name AS country, COUNT(e.id) AS originator_count ORDER BY originator_count DESC LIMIT 3 NEXT RETURN country, originator_count
 MATCH (c:Country)<-[:IN_COUNTRY]-(city:City)<-[:IN_CITY]-(o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory{name:'Electronic Products Manufacturers'}) RETURN c.name AS country, count(o) AS num_orgs ORDER BY num_orgs DESC LIMIT 3
 MATCH (c:Country{name:'China'})<-[:COUNTRY]-(e:Entity)-[:FILED]->(f:Filing) RETURN SUM(f.amount) AS total_amount
 MATCH (c:Country{name:'China'})<-[:COUNTRY]-(e:Entity)<-[:BENEFITS]-(f:Filing) RETURN f
 MATCH (c:Country{name:'China'})<-[:COUNTRY]-(e:Entity)<-[:CONCERNS]-(f:Filing) RETURN f ORDER BY f.amount DESC LIMIT 5
 MATCH (c:Country{name:'Singapore'})<-[:COUNTRY]-(e:Entity)-[:FILED]->(f:Filing) RETURN min(f.amount) AS minAmount NEXT RETURN minAmount
 MATCH (c:Country{name:'United States of America'}) MATCH (o:Organization)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(c) RETURN o ORDER BY o.revenue DESC LIMIT 3 NEXT RETURN o.name
 MATCH (c:Country{name:'United States of America'})<-[:IN_COUNTRY]-(ci:City)<-[:IN_CITY]-(o:Organization) RETURN sum(o.revenue) AS totalRevenue NEXT RETURN totalRevenue
 MATCH (c:Country{tld:'US'}) MATCH (e:Entity)-[:COUNTRY]->(c) MATCH (e)-[:FILED]->(f:Filing) RETURN count(f) AS totalFilings
 MATCH (c:Course) RETURN c.CName ORDER BY c.Credits
 MATCH (c:Course) RETURN count(c)
 MATCH (c:Course) RETURN COUNT(c)
 MATCH (c:Course) WHERE c.Credits = 1 RETURN c.CName
 MATCH (c:Course) WHERE c.Credits > 2 RETURN count(c)
 MATCH (c:Course) WHERE c.Days = 'MTW' RETURN c.CName
 MATCH (c:Course{Credits:1}) RETURN c.CName
 MATCH (c:Course{Days:'MTW'}) RETURN c.CName
 MATCH (c:Customer) WHERE c.country = 'Germany' RETURN c.companyName
 MATCH (c:Customer) WHERE c.region = 'NULL' RETURN c.contactName AS customerName, c.companyName AS companyName
 MATCH (c:Customer)-[:PURCHASED]->(o:Order) RETURN c, count(o) AS orderCount NEXT MATCH (c)-[:PURCHASED]->(:Order)-[:ORDERS]->(p:`Product`) RETURN avg(p.unitPrice) AS averageUnitPrice
 MATCH (c:Customer)-[:PURCHASED]->(o:Order) RETURN c, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 3 NEXT RETURN c.companyName AS customerName, orderCount
 MATCH (c:Customer)-[:PURCHASED]->(o:Order) RETURN c, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 5 NEXT RETURN c.companyName AS customerName, orderCount
 MATCH (c:Customer)-[:PURCHASED]->(o:Order) RETURN c, size(o.orderID) AS orderCount NEXT RETURN c.customerID, c.contactName
 MATCH (c:Customer)-[:PURCHASED]->(o:Order) RETURN c.companyName, count(o) AS NumberOfOrders ORDER BY NumberOfOrders DESC LIMIT 3
 MATCH (c:Customer)-[:PURCHASED]->(o:Order) WHERE o.shipCountry = 'France' RETURN c LIMIT 3
 MATCH (c:Customer)-[:PURCHASED]->(o:Order) WHERE o.shipCountry = 'France' RETURN c.customerID, c.companyName, c.contactName LIMIT 3
 MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:`Product`) RETURN c, COUNT(p.productID) AS distinctProducts ORDER BY distinctProducts DESC LIMIT 3 NEXT RETURN c.companyName AS customerName, distinctProducts
 MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:`Product`) WHERE c.country = 'Austria' RETURN avg(o.unitPrice) AS averagePrice NEXT RETURN averagePrice
 MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:`Product`) WHERE o.shipCountry = 'France' RETURN DISTINCT c.companyName AS CustomerName, c.contactName AS ContactName, c.contactTitle AS ContactTitle, c.city AS City, c.country AS Country
 MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:`Product`) WHERE p.discontinued = false MATCH (c)-[:PURCHASED]->(o)-[:ORDERS]->(p) RETURN c, COUNT(p) AS productCount NEXT RETURN c.companyName AS customerName, c.contactName AS contactName, c.customerID AS customerID LIMIT 3
 MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:`Product`)-[:PART_OF]->(cat:Category) RETURN c, COUNT(cat.categoryID) AS diversity ORDER BY diversity DESC LIMIT 3 NEXT RETURN c.companyName, diversity
 MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:`Product`)-[:PART_OF]->(cat:Category{categoryName:'Seafood'}) RETURN c, count(p) AS products_ordered ORDER BY products_ordered DESC LIMIT 3 NEXT RETURN c.companyName, products_ordered
 MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:`Product`)-[:PART_OF]->(cat:Category{categoryName:'Seafood'}) RETURN c, SUM(o.quantity) AS totalProducts ORDER BY totalProducts DESC LIMIT 3 NEXT RETURN c.companyName AS customerName, totalProducts
 MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[oi:ORDERS]->(p:`Product`) WHERE c.country = 'USA' RETURN avg(oi.unitPrice) AS avgPrice NEXT RETURN avgPrice
 MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:`Product`) RETURN c.companyName AS customer, SUM(r.quantity) AS totalQuantity ORDER BY totalQuantity DESC LIMIT 3
 MATCH (c:Customer)-[:PURCHASED]->(o:Order)-[r:ORDERS]->(p:`Product`) WHERE r.discount = '0' RETURN c, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 5 NEXT RETURN c.customerID, c.companyName, orderCount
 MATCH (c:Customer{companyName:'Ernst Handel'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:`Product`) RETURN avg(p.unitPrice) AS averageUnitPrice NEXT RETURN averageUnitPrice
 MATCH (c:Customer{companyName:'Lonesome Pine Restaurant'}) RETURN c.city
 MATCH (c:Customer{country:'USA'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:`Product`) RETURN p.productName, count(o) AS ordersCount ORDER BY ordersCount DESC LIMIT 5
 MATCH (c:Customer{customerID:'VINET'})-[:PURCHASED]->(o:Order)-[:ORDERS]->(p:`Product`) RETURN p.productName
 MATCH (c:DOI)<-[r]-(n) WHERE c.doi_id = '563c3ceee67bbf5fc29c764b86a8c8ca' RETURN properties(n) AS props, r
 MATCH (c:DOI)<-[r]-(n) WHERE c.name = '10.1006/jnth.2000.2616' RETURN properties(n) AS props, r
 MATCH (c:DOI)<-[r]-(n) WHERE c.name = '10.1142/S0219061301000077' RETURN properties(n) AS props, r
 MATCH (c:Journal)<-[r]-(n) WHERE c.journal_id = '6dc95119d8a737d9ffc7fe367159849b' RETURN properties(n) AS props, r
 MATCH (c:Journal)<-[r]-(n) WHERE c.journal_id = '79942321e19994e38ad2e372af21c893' RETURN properties(n) AS props, r
 MATCH (c:Journal)<-[r]-(n) WHERE c.journal_id = 'd3b321ed42589ea798c241aa7de23d2d' RETURN properties(n) AS props, r
 MATCH (c:Journal)<-[r]-(n) WHERE c.name = 'Math. Ann' RETURN properties(n) AS props, r
 MATCH (c:Keyword)<-[r]-(n) WHERE c.key_id = '6ded85146e3dbfb1bb866831b8948f5b' RETURN properties(n) AS props, r
 MATCH (c:Keyword)<-[r]-(n) WHERE c.key_id = '72e4f3fc2930bd3a0a7730a664d069d6' RETURN properties(n) AS props, r
 MATCH (c:Keyword)<-[r]-(n) WHERE c.name = 'discrete log problem' RETURN properties(n) AS props, r
 MATCH (c:Keyword)<-[r]-(n) WHERE c.name = 'log-balanced' RETURN properties(n) AS props, r
 MATCH (c:Keyword)<-[r]-(n) WHERE c.name = 'uncountably many different asymptotic growth rates' RETURN properties(n) AS props, r
 MATCH (c:Keyword)<-[r1]-(n)-[r2]->(d:Categories) RETURN labels(n)
 MATCH (c:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)-[:IN_GENRE]->(g:Genre{name:'Drama'}) RETURN c.name AS company, count(m) AS movie_count ORDER BY movie_count DESC LIMIT 3
 MATCH (c:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language) RETURN c, count(l) AS numLangs NEXT RETURN c.name LIMIT 3
 MATCH (c:RefCalendar) RETURN count(c) AS `count`
 MATCH (c:Report)<-[r]-(n) WHERE c.report_id = '5049b80a2935f95cc95cf14dbfb8c610' RETURN properties(n) AS props, r
 MATCH (c:Report)<-[r]-(n) WHERE c.report_id = 'f07a9f85a94d20f473a1bf9b432c05f8' RETURN properties(n) AS props, r
 MATCH (c:Report)<-[r]-(n) WHERE c.report_no = 'SPbU-IP-00-03' RETURN properties(n) AS props, r
 MATCH (c:Topic)<-[r]-(n) WHERE c.description = 'Collection of techniques and methods for studying the limiting behavior of functions, sequences, and series as certain parameters approach infinity or other special values. Includes concepts such as asymptotic expansions, asymptotic normality, scaling behavior, and Jost asymptotics. Emphasizes the study of asymptotic properties, asymptotic solutions, and asymptotic optimality. Also encompasses topics like approximate normality, asymptotic equivalents, asymptotic expansion of risk difference, and asymptotic relations. May involve the use of O(m log(m B)) notation to describe' RETURN properties(n) AS props, r
 MATCH (c:Topic)<-[r]-(n) WHERE c.description = 'Encompasses techniques for reconstructing images from blurred or incomplete data using regularizers, sparsity, and phase retrieval algorithms, with applications in compressive sensing, neural networks, and optical imaging. Focuses on understanding small-time behavior, limiting transitions, and phase transitions in signal processing and optics, as well as the role of status-dependent behavior and spiking neurons in neural networks. Emphasizes the importance of regularization, penalization, and lasso techniques in image reconstruction and phase retrieval' RETURN properties(n) AS props, r
 MATCH (c:Topic)<-[r]-(n) WHERE c.description = 'The study of how populations grow, decline, and evolve over time, with a focus on understanding the underlying mechanisms and patterns that govern these processes. Key concepts include discrete log problems, logarithmic barriers, intermediate and super-exponential growth, layer-by-layer growth, and population dynamics from a superpopulation viewpoint. Topics also include population genetics, selection, and the role of logarithms in various contexts such as gain, log-balanced, log-price, and log resolution. Additionally, there is interest in understanding the relationship' RETURN properties(n) AS props, r
 MATCH (c:Topic)<-[r]-(n) WHERE c.label = 'Topology_5' RETURN properties(n) AS props, r
 MATCH (c:Topic)<-[r1]-(n)-[r2]->(d:Article) RETURN labels(n)
 MATCH (c:Topic)<-[r1]-(n)-[r2]->(d:Topic) RETURN labels(n)
 MATCH (c:UpdateDate)<-[r]-(n) WHERE c.update_date = '2015-06-26' RETURN properties(n) AS props, r
 MATCH (c:UpdateDate)<-[r1]-(n)-[r2]->(d:Journal) RETURN labels(n)
 MATCH (c:UpdateDate)<-[r1]-(n)-[r2]->(d:Report) RETURN labels(n)
 MATCH (c1:Character) WHERE c1.community = 759 MATCH (c1)-[:INTERACTS1]-(c2:Character) RETURN c2 ORDER BY c2.book1PageRank LIMIT 1 NEXT RETURN c2.name
 MATCH (c1:Character)-[:INTERACTS45]->(c2:Character)-[:INTERACTS45]->(c3:Character) RETURN c1.name, c2.name, c3.name LIMIT 3
 MATCH (c1:Character)-[i:INTERACTS2]->(c2:Character) RETURN c1.name, c2.name, i.weight AS weight ORDER BY i.weight DESC LIMIT 3
 MATCH (c1:Character)-[i:INTERACTS45]->(c2:Character) RETURN c1.name, c2.name, i.weight AS weight ORDER BY i.weight DESC LIMIT 3
 MATCH (c1:Character)-[i:INTERACTS45]->(c2:Character) WHERE i.weight > 50 RETURN c1.name AS character1, c2.name AS character2, i.weight AS weight
 MATCH (c1:Character)-[i:INTERACTS45]->(c2:Character) WHERE i.weight > 90 RETURN c1.name AS character1, c2.name AS character2, i.weight AS weight
 MATCH (c1:Character)-[r:INTERACTS]->(c2:Character) RETURN c1.name, c2.name, r.weight ORDER BY r.weight DESC LIMIT 5
 MATCH (c1:Character)-[r:INTERACTS]->(c2:Character) WHERE r.weight = 334 RETURN c1.name AS Character1, c2.name AS Character2
 MATCH (c1:Character)-[r:INTERACTS]->(c2:Character) WHERE r.weight > 200 RETURN c1.name, r, c2.name
 MATCH (c1:Character)-[r:INTERACTS1]->(c2:Character) RETURN c1.name AS Character, r.weight AS Weight ORDER BY r.weight DESC LIMIT 3
 MATCH (c1:Character)-[r:INTERACTS1]->(c2:Character) WHERE r.weight > 150 RETURN c1.name AS character1, c2.name AS character2, r.weight AS weight
 MATCH (c1:Character)-[r:INTERACTS1]->(c2:Character) WHERE r.weight > 200 RETURN c1.name AS Character1, c2.name AS Character2, r.weight AS Weight
 MATCH (c1:Character)-[r:INTERACTS1]->(c2:Character) WHERE r.weight > 200 RETURN c1.name, c2.name, r.weight
 MATCH (c1:Character)-[r:INTERACTS1{weight:291}]->(c2:Character) RETURN c1.name AS Character1, c2.name AS Character2
 MATCH (c1:Character)-[r:INTERACTS1{weight:291}]->(c2:Character) RETURN c1.name, c2.name LIMIT 3
 MATCH (c1:Character)-[r:INTERACTS2]->(c2:Character) RETURN c1, c2, r.weight AS weight ORDER BY r.weight DESC LIMIT 1
 MATCH (c1:Character)-[r:INTERACTS2]->(c2:Character) WHERE r.weight < 20 RETURN c1.name AS character1, c2.name AS character2, r.weight AS weight
 MATCH (c1:Character)-[r:INTERACTS2]->(c2:Character) WHERE r.weight > 50 RETURN c1.name AS Character1, c2.name AS Character2, r.weight AS Weight
 MATCH (c1:Character)-[r:INTERACTS2{weight:92}]->(c2:Character) RETURN c1.name AS Character1, c2.name AS Character2
 MATCH (c1:Character)-[r:INTERACTS3]->(c2:Character) WHERE c1.book1BetweennessCentrality > 400 RETURN min(r.weight)
 MATCH (c1:Character)-[r:INTERACTS3]->(c2:Character) WHERE r.weight = 95 RETURN c1.name AS Character1, c2.name AS Character2
 MATCH (campus:Campus) WHERE campus.County = 'Los Angeles' RETURN campus.Campus
 MATCH (campus:Campus) WHERE campus.Location = 'Chico' RETURN campus.Campus
 MATCH (Candidate:Candidate) RETURN Candidate.Support_rate ORDER BY Candidate.Support_rate DESC LIMIT 3
 MATCH (Candidate:Candidate) RETURN count(Candidate.People_ID) AS `count` NEXT RETURN `count`
 MATCH (Candidate:Candidate) RETURN max(Candidate.Support_rate), min(Candidate.Consider_rate), min(Candidate.Oppose_rate)
 MATCH (cartoon:Cartoon) RETURN cartoon.Title ORDER BY cartoon.Title
 MATCH (catelyn:Character{name:'Catelyn-Stark'})-[:INTERACTS]->(catelyn_interaction) MATCH (cersei:Character{name:'Cersei-Lannister'})-[:INTERACTS]->(cersei_interaction) RETURN catelyn, count(catelyn_interaction) AS catelyn_interactions NEXT MATCH (catelyn)-[:INTERACTS]->(common_interaction)<-[:INTERACTS]-(cersei) RETURN DISTINCT common_interaction.name
 MATCH (cc:CatalogContent) RETURN cc.catalog_entry_name ORDER BY cc.capacity ASC LIMIT 1
 MATCH (cc:CatalogContent) RETURN cc.catalog_entry_name ORDER BY cc.price_in_dollars DESC LIMIT 1
 MATCH (cc:CatalogContent) RETURN count(cc)
 MATCH (cc:CatalogContent) WHERE cc.next_entry_id > 8 RETURN cc.catalog_entry_name
 MATCH (cc:CatalogContent) WHERE cc.price_in_dollars > 700 RETURN cc.catalog_entry_name, cc.capacity
 MATCH (ceo:Person)<-[:HAS_CEO]-(org:Organization) WHERE org.isPublic = true RETURN ceo NEXT MATCH (ceo)-[:HAS_CHILD]->(child:Person) RETURN child.name AS ChildName, ceo.name AS CEOName LIMIT 3
 MATCH (ceo:Person)<-[:HAS_CEO]-(org:Organization{isPublic:true}) RETURN ceo.name AS CEO, org.name AS Organization, child.name AS Child
 MATCH (ceo:Person)<-[:HAS_CEO]-(org:Organization{isPublic:true})-[:HAS_SUBSIDIARY]->{0,3}(:Organization) RETURN child.name LIMIT 3
 MATCH (ceo:Person{name:'Julie Spellman Sweet'})<-[:HAS_CEO]-(org:Organization)<-[:MENTIONS]-(article:Article) RETURN article.title, article.`date`, article.summary ORDER BY article.`date` DESC LIMIT 3
 MATCH (ceo:Person{name:'Julie Spellman Sweet'})<-[:HAS_CEO]-(org:Organization)<-[:MENTIONS]-(article:Article) WHERE article.sentiment < 0.5 RETURN article.title, article.`date`, article.sentiment ORDER BY article.`date` DESC LIMIT 3
 MATCH (ceo:Person{name:'Julie Spellman Sweet'})<-[:HAS_CEO]-(org:Organization)<-[:MENTIONS]-(article:Article) WHERE article.sentiment > 0.75 RETURN article.title, article.`date`, article.sentiment ORDER BY article.`date` DESC LIMIT 3
 MATCH (cersei:Character{name:'Cersei-Lannister'})-[:INTERACTS1]->(other:Character) RETURN other.name, other.book1PageRank ORDER BY other.book1PageRank DESC
 MATCH (child:Person)-[:FOLLOWS]->(parent:Person) RETURN child.name AS ChildName, parent.name AS ParentName
 MATCH (City:City) RETURN City.Official_Name, City.Status ORDER BY City.Population DESC LIMIT 1
 MATCH (city:City{name:'Seattle'})<-[:IN_CITY]-(org:Organization)<-[:MENTIONS]-(article:Article) RETURN article ORDER BY article.`date` ASC LIMIT 5 NEXT RETURN article.author
 MATCH (company:ProductionCompany{name:'Pixar Animation Studios'})-[:PRODUCED_BY]-(movie:Movie) RETURN movie.title, movie.average_vote ORDER BY movie.average_vote DESC LIMIT 5
 MATCH (conductor:conductor) RETURN conductor.Name ORDER BY conductor.Year_of_Work DESC LIMIT 1
 MATCH (country:Country)<-[:IN_COUNTRY]-(city:City) RETURN country.name AS country, count(city) AS numCities ORDER BY numCities DESC LIMIT 3
 MATCH (courses:Courses) WHERE courses.course_name = 'math' RETURN courses.course_description
 MATCH (d:AllDocument) WHERE d.Document_Name = 'Marry CV' RETURN d.Date_Stored
 MATCH (d:AllDocument{Document_Name:'Marry CV'}) RETURN d.Date_Stored
 MATCH (d:Department) RETURN d.Name AS name, count(d.DepartmentID) AS `count` ORDER BY `count` DESC NEXT RETURN name LIMIT 1
 MATCH (d:Department) WHERE d.Building = 'Mergenthaler' RETURN d.DName
 MATCH (d:Department) WHERE d.Division = 'AS' RETURN count(d)
 MATCH (d:Department) WHERE d.Room = '268' RETURN d.DPhone
 MATCH (d:Department{Room:'268'}) RETURN d.DPhone
 MATCH (d:Detention) RETURN d.detention_summary
 MATCH (d:Detention) RETURN DISTINCT d.detention_type_code
 MATCH (d:Director) RETURN DISTINCT d.name
 MATCH (d:Director) WHERE d.bornIn = 'USA' RETURN d.name, d.born, d.died, d.url, d.imdbId, d.tmdbId
 MATCH (d:Director)-[:DIRECTED]->(m:Movie) RETURN d, collect(m.languages) AS languages NEXT RETURN d.name, languages ORDER BY size(languages) DESC LIMIT 3
 MATCH (d:Director)-[:DIRECTED]->(m:Movie) RETURN d, COUNT(country) AS countryCount NEXT RETURN d.name AS directorName, countryCount ORDER BY countryCount DESC LIMIT 3
 MATCH (d:Director)-[:DIRECTED]->(m:Movie) RETURN d, count(m.countries) AS numCountries NEXT RETURN d.name, numCountries ORDER BY numCountries DESC LIMIT 5
 MATCH (d:Director)-[:DIRECTED]->(m:Movie) RETURN d, m.`year` AS `year`, count(m) AS movies_count ORDER BY movies_count DESC NEXT RETURN d.name, `year`, movies_count LIMIT 3
 MATCH (d:Director)-[:DIRECTED]->(m:Movie) RETURN d, size(m.countries) AS numCountries ORDER BY numCountries DESC LIMIT 3 NEXT RETURN d.name AS director, numCountries AS numberOfCountries
 MATCH (d:Director)-[:DIRECTED]->(m:Movie) RETURN d.name AS director, count(m) AS moviesDirected ORDER BY moviesDirected DESC LIMIT 3
 MATCH (d:Director)-[:DIRECTED]->(m:Movie) RETURN m, count(d) AS numDirectors ORDER BY numDirectors DESC NEXT RETURN m.title, numDirectors LIMIT 5
 MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE d.bornIn = 'Burchard, Nebraska, USA' RETURN SUM(m.revenue) AS totalRevenue
 MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE d.bornIn = 'France' RETURN m.title AS MovieTitle, m.`year` AS ReleaseYear ORDER BY m.`year` LIMIT 3
 MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE m.imdbRating < 4.0 RETURN DISTINCT d.name ORDER BY d.name LIMIT 3
 MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE m.imdbRating >= 6 RETURN d, count(m) AS moviesCount ORDER BY moviesCount DESC LIMIT 5 NEXT RETURN d.name, moviesCount
 MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE m.imdbRating >= 9 RETURN DISTINCT d.name LIMIT 5
 MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE m.runtime < 90 RETURN d, count(m) AS moviesDirected ORDER BY moviesDirected DESC LIMIT 5 NEXT RETURN d.name, moviesDirected
 MATCH (d:Director)-[:DIRECTED]->(m:Movie) WHERE m.runtime > 180 RETURN d, COUNT(m) AS movieCount ORDER BY movieCount DESC LIMIT 3 NEXT RETURN d.name AS directorName, movieCount
 MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre) RETURN d, count(g) AS genreCount NEXT RETURN d.name AS Director, genreCount ORDER BY genreCount DESC LIMIT 3
 MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre) RETURN d, count(g) AS num_genres NEXT RETURN d.name AS director, num_genres ORDER BY num_genres DESC LIMIT 3
 MATCH (d:Director)-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre{name:'Sci-Fi'}) RETURN d
 MATCH (d:Director)-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(a:Actor) RETURN d, count(a) AS actors_count ORDER BY actors_count DESC NEXT RETURN d.name, actors_count LIMIT 3
 MATCH (d:Director)-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(a:Actor) RETURN d, count(a) AS numActors ORDER BY numActors DESC LIMIT 3 NEXT RETURN d.name AS director, numActors
 MATCH (d:Director)-[:DIRECTED]->(m:Movie{title:'Avatar'}) RETURN d.name AS director_name
 MATCH (d:Director{bornIn:'Burchard, Nebraska, USA'})-[:DIRECTED]->(m:Movie) RETURN m.title AS MovieName
 MATCH (d:Director{bornIn:'USA'})-[:DIRECTED]->(m:Movie) RETURN m ORDER BY m.imdbRating ASC LIMIT 1 NEXT RETURN m.title
 MATCH (d:Director{bornIn:'USA'})-[:DIRECTED]->(m:Movie) RETURN m.title LIMIT 5
 MATCH (d:Director{name:'Anthony Stacchi'})-[:DIRECTED]->(m:Movie) RETURN m LIMIT 3
 MATCH (d:Director{name:'Harold Lloyd'})-[:DIRECTED]->(m:Movie) MATCH (a:Actor)-[:ACTED_IN]->(m) RETURN DISTINCT a.name
 MATCH (d:Director{name:'Harold Lloyd'})-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre) RETURN g.name LIMIT 3
 MATCH (d:Director{name:'Steven Spielberg'})-[:DIRECTED]->(m:Movie)-[:IN_GENRE]->(g:Genre) RETURN g.name AS Genre, count(m) AS MoviesCount ORDER BY MoviesCount DESC LIMIT 3
 MATCH (d:District) RETURN d.District_name ORDER BY d.City_Area ASC LIMIT 1
 MATCH (d:District) RETURN d.District_name ORDER BY d.City_Area DESC
 MATCH (d:District) RETURN d.District_name ORDER BY d.City_Population DESC LIMIT 1
 MATCH (d:Doctor)-[:GAVE_DIAGNOSIS]->(di:Diagnosis)-[:OF_TYPE]->(dt:DiagnosisType) WHERE dt.description = 'High Blood Pressure' RETURN d.name
 MATCH (d:Doctor)-[:GAVE_PRESCRIPTION]->(:Prescription)-[:OF_MEDICATION]->(:Medication)<-[:HAS_PRESCRIPTION]-(p:Patient) RETURN d, COUNT(p) AS numPatients NEXT RETURN d
 MATCH (d:Doctor)<-[:HAS_DOCTOR]-(p:Patient)-[:HAD_SURGERY]->(:Surgery) WHERE d.name = 'Dr. Williams' RETURN count(p) AS totalPatients
 MATCH (d:Doctor{name:'Dr. Johnson'})<-[:HAS_DOCTOR]-(p:Patient)-[:HAS_APPOINTMENT]->(:Appointment) MATCH (p)-[:HAS_DIAGNOSIS]->(:Diagnosis)-[:OF_TYPE]->(:DiagnosisType{description:'Migraine'}) RETURN DISTINCT p NEXT RETURN p.name AS patient
 MATCH (d:Document) RETURN d.document_id, d.receipt_date
 MATCH (d:Document) WHERE d.document_id = 2 RETURN d.document_type_code
 MATCH (d:Document) WHERE d.document_status_code = 'done' RETURN COUNT(d)
 MATCH (d:Document{document_id:3}) RETURN d.receipt_date
 MATCH (d:DocumentLocation) RETURN d.Location_Code, d.Date_in_Location_From, d.Date_in_Locaton_To
 MATCH (d:DocumentsToBeDestroyed) RETURN DISTINCT d.Destroyed_by_Employee_ID
 MATCH (d:DocumentsToBeDestroyed) RETURN DISTINCT d.Destruction_Authorised_by_Employee_ID
 MATCH (d:domain) RETURN d.name
 MATCH (d:domain{name:'Robotics'})<-[:paper_in_domain]-(p:paper) MATCH (p)<-[:paper_cite_paper]-(citing) RETURN p.name AS PaperTitle, COUNT(citing) AS CitationCount ORDER BY CitationCount DESC LIMIT 1
 MATCH (d:domain{name:'Robotics'})<-[:paper_in_domain]-(p:paper)-[:paper_in_venue]->(c:conference)<-[:author_in_affiliation]-(a:author)-[:author_in_affiliation]->(aff:affiliation{name:'Tsinghua University'}) RETURN c.name, COUNT(p) AS num_papers ORDER BY num_papers DESC
 MATCH (d:Person)-[:DIRECTED]->(m:Movie) RETURN d, min(m.votes) AS minVotes ORDER BY minVotes LIMIT 3 NEXT RETURN d.name AS director
 MATCH (d:Person)-[:DIRECTED]->(m:Movie) WHERE m.released > 2005 RETURN d, count(m) AS num_movies ORDER BY num_movies DESC LIMIT 3 NEXT RETURN d.name AS director, num_movies
 MATCH (d:Person{name:'Steven Spielberg'})-[:CREW_FOR{job:'Director'}]->(m:Movie) RETURN avg(m.runtime) AS average_runtime NEXT RETURN average_runtime
 MATCH (d:RefDocumentStatu{document_status_code:'working'}) RETURN d.document_status_description
 MATCH (d:RefDocumentType) RETURN d.document_type_code
 MATCH (david:User{name:'David'})-[:FOLLOWS]->(user:User) RETURN user.name AS name
 MATCH (dc:DataCenter)-[:CONTAINS]->(egress:Egress) RETURN count(egress)
 MATCH (dc:DataCenter)-[:CONTAINS]->(egress:Egress) RETURN egress.name
 MATCH (dc:DataCenter)-[:CONTAINS]->(er:Egress)-[:ROUTES]->(interface:Interface) RETURN er, size(interface) AS numInterfaces NEXT RETURN avg(numInterfaces) AS averageInterfacesPerEgress
 MATCH (dc:DataCenter)-[:CONTAINS]->(r:Router) RETURN dc, count(r.name) AS routerCount NEXT RETURN dc.name AS DataCenter, routerCount ORDER BY routerCount DESC LIMIT 1
 MATCH (dc:DataCenter)-[:CONTAINS]->(r:Router) RETURN dc.name AS DataCenterName, dc.location AS Location, r.name AS RouterName
 MATCH (dc:DataCenter)-[:CONTAINS]->(rack:Rack{zone:3})-[:HOLDS]->(machine:Machine)-[:TYPE]->(type:Type) RETURN rack.name AS rackName, machine.name AS machineName, type.name AS typeName ORDER BY rack.name, machine.name LIMIT 5
 MATCH (dc:DataCenter)-[:CONTAINS]->(rack:Rack{zone:4})-[:HOLDS]->(machine:Machine)-[:RUNS]->(app:Application) RETURN app.name, COUNT(app) AS app_count ORDER BY app_count DESC LIMIT 3
 MATCH (dc:DataCenter{location:'Iceland, Rekjavik'}) RETURN dc.name
 MATCH (dc:DataCenter{name:'DC1'})-[:CONTAINS]->(:Rack)-[:HOLDS]->(:Machine)-[:TYPE]->(t:Type) RETURN MAX(t.ram) AS maxRamCapacity
 MATCH (dc:DataCenter{name:'DC1'})-[:CONTAINS]->(:Rack)-[:HOLDS]->(m:Machine)-[:RUNS]->(s:Service) MATCH (m)-[:TYPE]->(t:Type) RETURN s.name AS serviceName, t.ram AS ramUsage ORDER BY t.ram DESC LIMIT 3
 MATCH (dc:DataCenter{name:'DC1'})-[:CONTAINS]->(e:Egress) RETURN e.name AS EgressRouter
 MATCH (dc:DataCenter{name:'DC1'})-[:CONTAINS]->(r:Rack{zone:3})-[:HOLDS]->(m:Machine)-[:RUNS]->(app:Application) RETURN DISTINCT app.name AS ApplicationType
 MATCH (dc:DataCenter{name:'DC1'})-[:CONTAINS]->(r:Rack{zone:4})-[:HOLDS]->(s:Switch) RETURN count(r) AS numberOfRacksWithSwitches
 MATCH (dc:DataCenter{name:'DC1'})-[:CONTAINS]->(r:Router{zone:1}) RETURN r.name
 MATCH (dc:DataCenter{name:'DC1'})-[:CONTAINS]->(r:Router{zone:1}) RETURN r.name ORDER BY r.name LIMIT 3
 MATCH (dc:DataCenter{name:'DC1'})-[:CONTAINS]->(rack:Rack)-[:HOLDS]->(machine:Machine) MATCH (machine)-[:TYPE]->(type:Type{type:'xs'}) MATCH (machine)-[:RUNS]->(app:Application) RETURN app.name
 MATCH (dc:DataCenter{name:'DC1'})-[:CONTAINS]->(rack:Rack)-[:HOLDS]->(switch:Switch) RETURN DISTINCT rack.name LIMIT 3
 MATCH (dc:DataCenter{name:'DC1'})-[:CONTAINS]->(rack:Rack{rack:10})-[:HOLDS]->(machine:Machine) RETURN count(machine) AS numberOfMachines
 MATCH (dc:DataCenter{name:'DC1'})-[:CONTAINS]->(rack:Rack{rack:9})-[:HOLDS]->(machine:Machine) RETURN machine.name
 MATCH (dc:DataCenter{name:'DC1'})-[:CONTAINS]->(router:Router) RETURN router.name
 MATCH (dd:DocumentDraft{document_id:7}) RETURN dd.draft_details
 MATCH (deis:Organization{name:'Deis'})-[:IN_CITY]->(deisCity:City) MATCH (otherOrg:Organization)-[:IN_CITY]->(deisCity) MATCH (supplierOrg:Organization)-[:HAS_SUPPLIER]->(otherOrg) RETURN DISTINCT supplierOrg.name
 MATCH (director:Person)-[:CREW_FOR{job:'Director'}]->(movie:Movie) MATCH (director)-[:CAST_FOR]->(acted_movie:Movie) RETURN DISTINCT movie.title AS DirectedMovies
 MATCH (director:Person)-[:DIRECTED]->(movie:Movie) WHERE movie.released > 2000 RETURN director, count(movie) AS movieCount, collect(movie.title) AS movies ORDER BY movieCount DESC LIMIT 1 NEXT RETURN director.name AS directorName, movies
 MATCH (director:Person{name:'Nancy Meyers'})-[:DIRECTED]->(movie:Movie) RETURN movie ORDER BY movie.released LIMIT 3 NEXT MATCH (actor:Person)-[actedIn:ACTED_IN]->(movie) RETURN movie.title AS MovieTitle, actor.name AS ActorName, actedIn.roles AS Roles
 MATCH (dl:DocumentLocation) RETURN dl.Location_Code, dl.Date_in_Location_From, dl.Date_in_Locaton_To
 MATCH (documents:Documents) WHERE documents.Document_Name = 'Robbin CV' RETURN documents.Document_ID, documents.Template_ID, documents.Document_Description
 MATCH (dogs:Dogs) RETURN max(dogs.age)
 MATCH (dt:RefDocumentType) WHERE dt.document_type_code = 'Paper' RETURN dt.document_type_description
 MATCH (dt:RefDocumentType) WHERE dt.Document_Type_Name = 'Paper' RETURN dt.Document_Type_Code
 MATCH (e:Editor) RETURN COUNT(e)
 MATCH (e:Editor) RETURN e.Age, COUNT(e) ORDER BY e.Age
 MATCH (e:Editor) RETURN e.Name ORDER BY e.Age ASC
 MATCH (e:Editor) RETURN e.Name ORDER BY e.Age LIMIT 1
 MATCH (e:Editor) RETURN e.Name, e.Age
 MATCH (e:Editor) WHERE e.Age > 25 RETURN e.Name
 MATCH (e:Egress{name:'DC1-RE'})-[:ROUTES]->(i:Interface) RETURN i LIMIT 3
 MATCH (e:Employee) RETURN COUNT(e)
 MATCH (e:Employee) RETURN e.name AS employee_name
 MATCH (e:Employee) RETURN e.Role_Code AS role, count(e) AS `count` ORDER BY `count` LIMIT 1 NEXT RETURN role
 MATCH (e:Employee) WHERE e.Employee_Name = 'Armani' RETURN e.Employee_Name, e.Role_Code, e.Date_of_Birth
 MATCH (e:Employee) WHERE e.Employee_Name = 'Ebba' RETURN e.Employee_ID
 MATCH (e:Employee)-[:HAS_BENEFIT]->(b:Benefit) WHERE b.type = 'Health Insurance' RETURN e.name
 MATCH (e:Employee{Employee_Name:'Ebba'})-[:ASSIGNS]->(r:Role) RETURN r.Role_Name, r.Role_Description
 MATCH (e:Employee{employee_name:'Koby'})-[:None]->(r:Role) RETURN r.role_description
 MATCH (e:Employee{Role_Code:'HR'}) RETURN e.Employee_Name
 MATCH (e:EnrolledIn) WHERE e.Grade = 'B' RETURN count(e.StuID)
 MATCH (e:EnrolledIn) WHERE e.Grade = 'B' RETURN COUNT(e.StuID)
 MATCH (e:Entity) RETURN e ORDER BY e.incorporation_date ASC NEXT RETURN e.original_name LIMIT 1
 MATCH (e:Entity) WHERE e.inactivation_date = '18-FEB-2013' RETURN e.name AS entity_name, e.service_provider AS service_provider
 MATCH (e:Entity) WHERE e.incorporation_date = '23-MAR-2006' RETURN e.name AS entity_name, e.incorporation_date AS incorporation_date
 MATCH (e:Entity) WHERE e.jurisdiction = 'SAM' RETURN e.name AS entity_name
 MATCH (e:Entity) WHERE e.jurisdiction = 'SAM' RETURN e.name AS entity_name, e.company_type AS company_type
 MATCH (e:Entity) WHERE e.jurisdiction = 'SAM' RETURN e.name AS entity_name, e.jurisdiction_description AS jurisdiction_description
 MATCH (e:Entity) WHERE e.jurisdiction_description = 'Samoa' MATCH (e)-[:same_name_as]->(other) RETURN DISTINCT e.name
 MATCH (e:Entity) WHERE e.jurisdiction_description = 'Samoa' RETURN e.country_codes
 MATCH (e:Entity) WHERE e.lastEditTimestamp = '1638311020926' RETURN e
 MATCH (e:Entity) WHERE e.lastEditTimestamp = '1638311020926' RETURN e.name, e.node_id, e.countries, e.ibcRUC, e.valid_until, e.country_codes, e.service_provider, e.address, e.inactivation_date, e.struck_off_date, e.status, e.jurisdiction_description, e.incorporation_date, e.original_name, e.jurisdiction, e.internal_id, e.sourceID, e.former_name, e.company_type, e.tax_stat_description, e.note, e.dorm_date, e.type, e.closed_date, e.company_number, e.comments, e.entity_number
 MATCH (e:Entity) WHERE e.sourceID = 'Bahamas Leaks' RETURN e
 MATCH (e:Entity) WHERE e.status = 'Defaulted' RETURN e LIMIT 5
 MATCH (e:Entity) WHERE e.struck_off_date < '2010' RETURN e NEXT MATCH (e)-[r]->() RETURN DISTINCT r.sourceID MATCH (e:Entity) WHERE e.struck_off_date < '2010' RETURN e NEXT MATCH (e)<-[r]-() RETURN DISTINCT r.sourceID
 MATCH (e:Entity) WHERE e.struck_off_date = '15-FEB-2013' RETURN e.name AS entity_name, e.struck_off_date AS struck_off_date
 MATCH (e:Entity)-[:CONCERNS]->(f:Filing) RETURN e.name, count(f) AS filings_count ORDER BY filings_count DESC LIMIT 5
 MATCH (e:Entity)-[:COUNTRY]->(c:Country) RETURN e, count(c) AS connections ORDER BY connections DESC LIMIT 5
 MATCH (e:Entity)-[:COUNTRY]->(c:Country) WHERE c.code = 'CHN' RETURN e NEXT MATCH (e)-[:FILED]->(f:Filing) RETURN avg(f.amount)
 MATCH (e:Entity)-[:FILED]->(f:Filing) RETURN e, count(f) AS filings_count ORDER BY filings_count DESC LIMIT 3 NEXT RETURN e.name AS BankName, filings_count
 MATCH (e:Entity)-[:FILED]->(f:Filing) RETURN e, count(f) AS filingsCount NEXT MATCH (e)-[:COUNTRY]->(c:Country) RETURN c.name, count(e) AS entityCount ORDER BY entityCount DESC LIMIT 3
 MATCH (e:Entity)-[:FILED]->(f:Filing) RETURN e, count(f) AS numberOfFilings NEXT RETURN e.name AS entityName, numberOfFilings ORDER BY numberOfFilings DESC
 MATCH (e:Entity)-[:FILED]->(f:Filing) WHERE e.country = 'CHN' RETURN f.amount AS Amount ORDER BY f.amount DESC LIMIT 3
 MATCH (e:Entity)-[:FILED]->(f:Filing) WHERE f.amount > 1000000 RETURN e.name LIMIT 3
 MATCH (e:Entity)-[:FILED]->(f:Filing) WHERE f.beneficiary_bank = 'Barclays Bank Plc' RETURN e, COUNT(f) AS num_filings ORDER BY num_filings DESC LIMIT 3 NEXT RETURN e.name AS entity_name, num_filings
 MATCH (e:Entity)-[:FILED]->(f:Filing) WHERE f.beneficiary_bank_country = 'United States' RETURN e, count(f) AS filingsCount ORDER BY filingsCount DESC LIMIT 5 NEXT RETURN e.name, filingsCount
 MATCH (e:Entity)-[:FILED]->(f:Filing) WHERE f.beneficiary_bank_country = 'United States' RETURN e, count(f) AS filingsCount ORDER BY filingsCount DESC NEXT RETURN e, filingsCount
 MATCH (e:Entity)-[:FILED]->(f:Filing) WHERE f.originator_bank_country = 'United Kingdom' RETURN e.name AS entity, COUNT(f) AS filings_count ORDER BY filings_count DESC LIMIT 1
 MATCH (e:Entity)-[:FILED]->(f:Filing)-[:BENEFITS]->(:Entity)-[:COUNTRY]->(c:Country{name:'United Kingdom'}) RETURN e, COUNT(f) AS transaction_count ORDER BY transaction_count DESC LIMIT 5 NEXT RETURN e.name AS entity_name, transaction_count
 MATCH (e:Entity)-[:FILED]->(f:Filing)-[:BENEFITS]->(b:Entity) WHERE b.country = 'China' RETURN e, count(f) AS transactions ORDER BY transactions DESC LIMIT 3 NEXT RETURN e
 MATCH (e:Entity)-[:FILED]->(f:Filing)-[:CONCERNS]->(b:Entity)-[:COUNTRY]->(c:Country{name:'Australia'}) RETURN e, COUNT(f) AS num_filings ORDER BY num_filings DESC LIMIT 3 NEXT RETURN e.name AS entity_name, num_filings
 MATCH (e:Entity)-[:FILED]->(f:Filing{originator_bank_country:'Singapore'}) RETURN DISTINCT e.name AS EntityName
 MATCH (e:Entity)-[:officer_of]->(o:Officer) WHERE e.status = 'Active' RETURN e, count(o) AS officerCount NEXT RETURN e, officerCount
 MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing) RETURN e, count(f) AS filingsCount ORDER BY filingsCount DESC LIMIT 3 NEXT MATCH (e)-[:COUNTRY]->(c:Country) RETURN c.name AS CountryName, count(e) AS NumberOfEntities ORDER BY NumberOfEntities DESC
 MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing) RETURN e, count(f) AS filingsCount ORDER BY filingsCount DESC LIMIT 5 NEXT RETURN e, filingsCount
 MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing) RETURN e, f.amount ORDER BY f.amount DESC LIMIT 1
 MATCH (e:Entity)-[:ORIGINATOR]->(f:Filing) WHERE e.country = 'CHN' RETURN e, count(f) AS filings_count ORDER BY filings_count DESC LIMIT 3
 MATCH (e:Entity)-[:registered_address]->(a:Address) WHERE a.countries = 'Hong Kong' RETURN e LIMIT 5
 MATCH (e:Entity)-[:registered_address]->(a:Address) WHERE a.countries = 'Hong Kong' RETURN e.name AS entity_name, a.address AS address
 MATCH (e:Entity)-[:registered_address]->(a:Address) WHERE a.countries = 'Hong Kong' RETURN e.name AS entity_name, a.address AS entity_address LIMIT 5
 MATCH (e:Entity)-[:registered_address]->(a:Address) WHERE e.countries = 'Hong Kong' RETURN e.name, a.address
 MATCH (e:Entity)-[:same_as]->(:Entity) MATCH (e)-[:registered_address]->(:Address) RETURN DISTINCT e.name
 MATCH (e:Entity)-[]->(o:Officer)-[:officer_of]->(other:Other) RETURN DISTINCT e.jurisdiction
 MATCH (e:Entity)-[r:officer_of]->(o:Officer) WHERE r.start_date <= '1999' RETURN e, r, o
 MATCH (e:Entity)<-[:BENEFITS]-(f:Filing) RETURN e, SUM(f.amount) AS total_received ORDER BY total_received DESC LIMIT 5 NEXT RETURN e.name AS entity_name, total_received
 MATCH (e:Entity)<-[:officer_of]-(o:Officer) WHERE o.country_codes = 'WSM' MATCH (e)-[:registered_address]->(a:Address) WHERE a.country_codes = 'WSM' RETURN DISTINCT e
 MATCH (e:Entity{country_codes:'HKG'}) RETURN e
 MATCH (e:Entity{country_codes:'HKG'}) RETURN e.name, e.incorporation_date
 MATCH (e:Entity{internal_id:'1000896'}) RETURN e.address
 MATCH (e:Entity{internal_id:'1000914'}) RETURN e.jurisdiction_description
 MATCH (e:Entity{internal_id:'1001263'}) RETURN e.struck_off_date
 MATCH (e:Entity{jurisdiction:'SAM'}) RETURN DISTINCT e.service_provider
 MATCH (e:Entity{name:'HOTFOCUS CO., LTD.'}) RETURN e.countries
 MATCH (e:Entity{name:'TIANSHENG INDUSTRY AND TRADING CO., LTD.'}) RETURN e.internal_id
 MATCH (e:Entity{name:'TIANSHENG INDUSTRY AND TRADING CO., LTD.'})-[:officer_of]->(o:Officer) RETURN o
 MATCH (e:Entity{service_provider:'Mossack Fonseca'}) MATCH (e)-[:registered_address]->(a:Address{countries:'Samoa'}) RETURN e.name
 MATCH (e:Entity{type:'FOREIGN FORMED CORPORATION'}) RETURN e
 MATCH (e:Event) RETURN count(e)
 MATCH (e:Event) RETURN e.Name ORDER BY e.`Year` DESC
 MATCH (e:Event) RETURN e.Name ORDER BY e.`Year` DESC LIMIT 1
 MATCH (e:Other{type:'FOREIGN FORMED CORPORATION'}) RETURN e.name AS entity_name, e.incorporation_date AS incorporation_date, e.jurisdiction AS jurisdiction, e.jurisdiction_description AS jurisdiction_description
 MATCH (e1:Entity)-[:same_name_as]->(e2:Entity) RETURN e1.name AS EntityName1, e2.name AS EntityName2
 MATCH (e1:Entity{name:'Deutsche Bank AG'}) MATCH (e1)-[:COUNTRY]->(c:Country) MATCH (c)<-[:COUNTRY]-(e2:Entity) MATCH (e2)-[:ORIGINATOR]->(f:Filing) RETURN avg(f.amount) AS averageAmount NEXT RETURN averageAmount
 MATCH (earliestTweet:Tweet) RETURN earliestTweet ORDER BY earliestTweet.created_at ASC LIMIT 1
 MATCH (egress:Egress)-[:ROUTES]->(interface:Interface) RETURN interface.ip
 MATCH (egress:Egress{name:'DC1-RE'})-[:ROUTES]->(interface:Interface) RETURN interface
 MATCH (employee:employee) RETURN employee.Name ORDER BY employee.Age
 MATCH (entity:Entity)-[:registered_address]->(address:Address) WHERE address.countries = 'Hong Kong' RETURN count(entity) AS numberOfEntities
 MATCH (entity1:Entity{service_provider:'Mossack Fonseca'})-[:registered_address]->(address:Address) MATCH (address)<-[:registered_address]-(entity2:Entity) RETURN DISTINCT entity2 NEXT RETURN count(entity2)
 MATCH (f:Faculty) WHERE f.`Year` = 2002 RETURN SUM(f.Faculty)
 MATCH (f:Faculty) WHERE f.`Year` = 2002 RETURN sum(f.Faculty) AS total
 MATCH (f:Faculty) WHERE f.Building = 'Barton' RETURN f.Lname ORDER BY f.Lname
 MATCH (f:Faculty) WHERE f.Rank = 'Professor' RETURN f.Fname ORDER BY f.Fname
 MATCH (f:Farm) RETURN f.Total_Horses ORDER BY f.Total_Horses ASC
 MATCH (f:Farm) RETURN max(f.Cows), min(f.Cows)
 MATCH (f:Farm) WHERE f.Total_Horses > 5000 RETURN avg(f.Working_Horses)
 MATCH (f:Filing) RETURN DISTINCT f.originator_iso
 MATCH (f:Filing) RETURN f ORDER BY f.amount ASC LIMIT 1 NEXT MATCH (e:Entity)-[:FILED]->(f) RETURN e
 MATCH (f:Filing) RETURN f ORDER BY f.amount ASC LIMIT 1 NEXT MATCH (f)-[:BENEFITS]->(b:Entity) RETURN b.name
 MATCH (f:Filing) RETURN f ORDER BY f.amount ASC LIMIT 3
 MATCH (f:Filing) RETURN f ORDER BY f.begin LIMIT 3
 MATCH (f:Filing) RETURN f.beneficiary_iso AS iso_code, COUNT(f) AS `count` NEXT RETURN iso_code ORDER BY `count` DESC LIMIT 3
 MATCH (f:Filing) RETURN f.filer_org_name AS filer_org_name, avg(f.`number`) AS average_number ORDER BY average_number DESC LIMIT 3 NEXT RETURN filer_org_name, average_number
 MATCH (f:Filing) WHERE f.amount = 1000000 RETURN f ORDER BY f.amount DESC LIMIT 3
 MATCH (f:Filing) WHERE f.amount > 100000 RETURN f ORDER BY f.begin ASC LIMIT 3
 MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'Singapore' RETURN f ORDER BY f.amount ASC LIMIT 3
 MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'Singapore' RETURN f ORDER BY f.amount DESC LIMIT 3
 MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'United Kingdom' RETURN f
 MATCH (f:Filing) WHERE f.beneficiary_bank_country = 'United States' RETURN f
 MATCH (f:Filing) WHERE f.beneficiary_bank_id = 'azizi-bank-kabul-afghanistan-afg' RETURN DISTINCT f.originator_bank_id
 MATCH (f:Filing) WHERE f.beneficiary_lat > 50 MATCH (f)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country) RETURN DISTINCT c.name LIMIT 3
 MATCH (f:Filing) WHERE f.originator_bank = 'Deutsche Bank AG' RETURN max(f.`number`) AS max_number NEXT RETURN max_number
 MATCH (f:Filing) WHERE f.originator_iso = 'SGP' MATCH (f)-[:BENEFITS]->(be:Entity)-[:COUNTRY]->(bc:Country) RETURN bc.name AS beneficiary_country, count(f) AS filing_count ORDER BY filing_count DESC NEXT RETURN beneficiary_country, filing_count LIMIT 5
 MATCH (f:Filing) WHERE f.originator_lng <= 10 RETURN DISTINCT f NEXT RETURN count(f) AS totalFilings
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity) RETURN e, count(f) AS numberOfFilings NEXT RETURN e.name AS entityName, numberOfFilings ORDER BY numberOfFilings DESC
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity) RETURN e.name AS Beneficiary, sum(f.amount) AS TotalAmountReceived ORDER BY TotalAmountReceived DESC LIMIT 5
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.amount < 100 RETURN e, count(f) AS benefitCount ORDER BY benefitCount DESC NEXT RETURN e.name, benefitCount LIMIT 3
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.amount > 1000000 RETURN e, count(f) AS filingCount NEXT RETURN e.name AS entityName, filingCount ORDER BY filingCount DESC LIMIT 3
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.amount > 500000 RETURN e.name AS EntityName, e.location AS Location ORDER BY f.amount DESC LIMIT 3
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.amount > 50000000 RETURN e.name AS beneficiary_entity LIMIT 3
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.beneficiary_bank_country = 'United Kingdom' RETURN DISTINCT e.name
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.beneficiary_bank_country = 'United Kingdom' RETURN e, count(f) AS filingsCount ORDER BY filingsCount DESC LIMIT 5 NEXT RETURN e, filingsCount
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.beneficiary_bank_country = 'United Kingdom' RETURN e, COUNT(f) AS num_filings ORDER BY num_filings DESC LIMIT 5 NEXT RETURN e.name AS entity_name, num_filings
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.originator_bank = 'CIMB Bank Berhad' RETURN DISTINCT e
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.originator_bank = 'CIMB Bank Berhad' RETURN e LIMIT 3
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.originator_bank = 'The Bank of New York Mellon Corp.' RETURN e LIMIT 3
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.originator_bank_country = 'Angola' RETURN e.name AS beneficiary
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity) WHERE f.originator_bank_country = 'United Arab Emirates' RETURN e.name LIMIT 3
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country) RETURN c, sum(f.amount) AS totalAmount ORDER BY totalAmount DESC NEXT RETURN c.name AS countryName, totalAmount LIMIT 10
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country) RETURN c.name AS Country, sum(f.amount) AS TotalAmountTransferred ORDER BY TotalAmountTransferred DESC LIMIT 3
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country) WHERE c.name = 'Singapore' RETURN f ORDER BY f.amount ASC LIMIT 3
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country) WHERE f.amount < 500000 RETURN c, count(f) AS num_filings ORDER BY num_filings DESC LIMIT 5 NEXT RETURN c.name AS country_name, num_filings
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country) WHERE f.begin = 2013 RETURN c.name AS Country, count(f) AS Filings ORDER BY Filings DESC LIMIT 3
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country{name:'United Kingdom'}) RETURN e.name AS BeneficiaryBank LIMIT 3
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity)-[:COUNTRY]->(c:Country{name:'United States'}) WHERE f.amount < 500000 RETURN count(f) AS NumberOfFilings
 MATCH (f:Filing)-[:BENEFITS]->(e:Entity{name:'Barclays Bank Plc'}) RETURN f.id AS FilingID, f.amount AS Amount ORDER BY f.amount DESC LIMIT 5
 MATCH (f:Filing)-[:CONCERNS]->(e:Entity) WHERE f.amount > 1000000 RETURN e LIMIT 3
 MATCH (f:Filing)-[:CONCERNS]->(e:Entity) WHERE f.amount > 750000 RETURN e.name AS concerned_entity, f.amount AS filing_amount
 MATCH (f:Filing)-[:CONCERNS]->(e:Entity)-[:COUNTRY]->(c:Country{code:'CHN'}) RETURN f
 MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) RETURN e.name AS originator_bank, SUM(f.amount) AS total_amount ORDER BY total_amount DESC LIMIT 3 NEXT RETURN originator_bank, total_amount
 MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) RETURN f, COUNT(e) AS entityCount ORDER BY entityCount DESC LIMIT 3 NEXT RETURN f.sar_id AS filing_id, entityCount
 MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE e.country = 'CHN' RETURN avg(f.amount) AS average_amount NEXT RETURN average_amount
 MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE f.beneficiary_bank = 'Barclays Bank Plc' RETURN e.name ORDER BY f.begin LIMIT 3
 MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE f.beneficiary_bank_country = 'United Kingdom' RETURN e, count(f) AS filingsCount NEXT RETURN e, filingsCount ORDER BY filingsCount DESC
 MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE f.originator_bank = 'Barclays Bank Plc' RETURN e, count(f) AS filingsCount ORDER BY filingsCount DESC LIMIT 3 NEXT RETURN e.name, filingsCount
 MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE f.originator_bank_country = 'Singapore' RETURN e
 MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity) WHERE f.originator_bank_country = 'United Kingdom' RETURN e, count(f) AS filingsCount ORDER BY filingsCount DESC LIMIT 3 NEXT RETURN e
 MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country) RETURN c, count(e) AS originator_count ORDER BY originator_count DESC LIMIT 3 NEXT RETURN c.name AS country_name, originator_count
 MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country) RETURN c.code AS country_code, sum(f.amount) AS total_amount ORDER BY total_amount DESC NEXT RETURN country_code, total_amount LIMIT 5
 MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country) RETURN c.name AS country, COUNT(e.id) AS originator_count ORDER BY originator_count DESC LIMIT 3 NEXT RETURN country, originator_count
 MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country) RETURN c.name AS CountryName, SUM(f.amount) AS TotalAmount NEXT RETURN CountryName, TotalAmount ORDER BY TotalAmount DESC LIMIT 5
 MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country{name:'Australia'}) RETURN f ORDER BY f.amount DESC LIMIT 5
 MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country{name:'Singapore'}) RETURN f ORDER BY f.amount DESC LIMIT 5
 MATCH (f:Filing)-[:ORIGINATOR]->(e:Entity)<-[:BENEFITS]-(f) RETURN f.sar_id
 MATCH (f:Filing)-[:ORIGINATOR]->(o:Entity) RETURN o.name AS originator_bank, sum(f.amount) AS total_amount ORDER BY total_amount DESC LIMIT 10 NEXT RETURN originator_bank, total_amount
 MATCH (f:Filing{sar_id:'3297'})-[:BENEFITS]->(e:Entity) RETURN e.name
 MATCH (f:Filing{sar_id:'3297'})-[:ORIGINATOR]->(e:Entity)-[:COUNTRY]->(c:Country) RETURN c.code
 MATCH (f:Flight) RETURN f.Pilot AS pilot, COUNT(f) AS `count` ORDER BY `count` DESC LIMIT 1 NEXT RETURN pilot
 MATCH (f:Flight) RETURN f.Vehicle_Flight_number, f.`Date`, f.Pilot ORDER BY f.Altitude ASC
 MATCH (f:Flight)-[:LANDS_AT]->(a:Airport) WHERE f.Pilot = 'Thompson' RETURN avg(f.Velocity)
 MATCH (fc:Farm_competition) RETURN fc.Theme ORDER BY fc.`Year` ASC
 MATCH (fc:Farm_competition) WHERE fc.Theme <> 'Aliens' RETURN fc.Hosts
 MATCH (fc:Farm_competition)-[:TAKES_PLACE_IN]->(c:City) RETURN fc.`Year`, c.Official_Name
 MATCH (firstQuestion:Question)-[:TAGGED]->(:Tag{name:'graphql'}) MATCH (lastQuestion:Question)-[:TAGGED]->(:Tag{name:'apollo'}) RETURN firstQuestion ORDER BY firstQuestion.createdAt ASC LIMIT 1 NEXT RETURN duration.between(firstQuestion.createdAt) AS timeDifference
 MATCH (g:GasStation) WHERE g.Open_Year > 2000 RETURN g.Manager_Name AS manager_name, count(g) AS num_stations ORDER BY num_stations DESC LIMIT 1 NEXT RETURN manager_name
 MATCH (g:Genre)<-[:IN_GENRE]-(m:Movie)<-[r:RATED]-(u:User) RETURN g, m, count(u) AS userCount NEXT RETURN g.name AS genre ORDER BY userCount DESC LIMIT 3
 MATCH (g:Genre{name:'Adventure'}) MATCH (g)<-[:IN_GENRE]-(m:Movie) RETURN avg(m.imdbRating) AS averageRating NEXT RETURN averageRating
 MATCH (g:Genre{name:'Adventure'}) MATCH (g)<-[:IN_GENRE]-(m:Movie) RETURN g NEXT RETURN totalRevenue
 MATCH (g:Genre{name:'Adventure'})<-[:IN_GENRE]-(m:Movie) RETURN avg(m.imdbRating) AS avgRating NEXT RETURN avgRating
 MATCH (g:Genre{name:'Animation'})<-[:IN_GENRE]-(m:Movie)<-[:CAST_FOR]-(a:Person) RETURN DISTINCT a.name
 MATCH (g:Genre{name:'Children'})<-[:IN_GENRE]-(m:Movie) RETURN avg(m.imdbRating) AS average_rating NEXT RETURN average_rating
 MATCH (g:Genre{name:'Drama'})<-[:IN_GENRE]-(m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany) RETURN pc, COUNT(m) AS movie_count ORDER BY movie_count DESC LIMIT 3 NEXT RETURN pc.name AS production_company, movie_count
 MATCH (g:Genre{name:'Science Fiction'})<-[:IN_GENRE]-(m:Movie) RETURN avg(m.budget) AS averageBudget NEXT RETURN averageBudget
 MATCH (g:Gymnast) RETURN avg(g.Horizontal_Bar_Points)
 MATCH (g:Gymnast) RETURN count(g)
 MATCH (g:Gymnast) RETURN g.Total_Points AS Total_Points ORDER BY Total_Points DESC
 MATCH (g:Gymnast) RETURN g.Total_Points ORDER BY g.Floor_Exercise_Points DESC
 MATCH (g:Gymnast) RETURN g.Total_Points ORDER BY g.Total_Points DESC
 MATCH (gc:Gradeconversion) RETURN max(gc.gradepoint), min(gc.gradepoint)
 MATCH (gc:Gradeconversion) RETURN MAX(gc.gradepoint), MIN(gc.gradepoint)
 MATCH (gs:GasStation) WHERE gs.Open_Year > 2000 RETURN gs.Manager_Name AS manager_name, COUNT(gs) AS `count` ORDER BY `count` DESC NEXT RETURN manager_name LIMIT 1
 MATCH (h:Hashtag{name:'education'})<-[:TAGS]-(t:Tweet) RETURN t ORDER BY t.favorites DESC LIMIT 5
 MATCH (highschooler:Highschooler) RETURN highschooler.grade
 MATCH (highschooler:Highschooler) RETURN highschooler.grade ORDER BY highschooler.grade DESC LIMIT 1
 MATCH (i:IndustryCategory)<-[:HAS_CATEGORY]-(o:Organization) RETURN i, count(o) AS orgCount NEXT RETURN i.name AS IndustryCategoryName
 MATCH (i:Interface)-[:EXPOSES]->(p:Port{port:443}) RETURN i.ip
 MATCH (i:Intermediary) RETURN DISTINCT i.countries AS Countries
 MATCH (i:Intermediary)-[:intermediary_of]->(e:Entity) RETURN i, COUNT(e) AS entityCount NEXT RETURN i.name AS intermediaryName
 MATCH (i:Intermediary)-[:intermediary_of]->(e:Entity) WHERE i.status = 'ACTIVE' RETURN DISTINCT e.country_codes
 MATCH (i:Intermediary{name:'LOYAL PORT LIMITED'})-[:intermediary_of]->(e:Entity) RETURN e.jurisdiction_description AS targetJurisdiction NEXT MATCH (o:Officer)-[:officer_of]->(e2:Entity{jurisdiction_description:targetJurisdiction}) RETURN DISTINCT o.name
 MATCH (i:Intermediary{name:'MICHAEL PAPAGEORGE, MR.'}) RETURN i.sourceID
 MATCH (i:Intermediary{name:'MICHAEL PAPAGEORGE, MR.'})-[:intermediary_of]->(e:Entity) RETURN e.name AS entity_name, e.status AS entity_status
 MATCH (i:Intermediary{status:'ACTIVE'}) RETURN i
 MATCH (i:Intermediary{status:'SUSPENDED'})-[:intermediary_of]->(e:Entity{countries:'Hong Kong'}) RETURN e.name
 MATCH (ic:IndustryCategory)<-[:HAS_CATEGORY]-(o:Organization) RETURN ic, avg(o.nbrEmployees) AS avgEmployees NEXT RETURN ic.name AS industryCategoryName, avgEmployees ORDER BY avgEmployees DESC LIMIT 1
 MATCH (ic:IndustryCategory)<-[:HAS_CATEGORY]-(o:Organization) RETURN ic, count(o) AS orgCount NEXT RETURN ic.name AS industry, orgCount ORDER BY orgCount DESC LIMIT 3
 MATCH (interface:Interface)-[:EXPOSES]->(port:Port) RETURN `path`
 MATCH (investor:Organization)-[:HAS_INVESTOR]->(company:Organization)-[:HAS_CEO]->(ceo:Person) RETURN ceo.name AS ceoName, company.name AS companyName, investor.name AS investorName LIMIT 3
 MATCH (investor:Organization)-[:HAS_INVESTOR]->(investee:Organization) RETURN investor, COUNT(investee) AS investeeCount NEXT RETURN investor.name AS InvestorName, investeeCount ORDER BY investeeCount DESC LIMIT 3
 MATCH (j:Job) RETURN j.location, COUNT(j) AS job_count
 MATCH (j:Journal) RETURN DISTINCT j.Theme
 MATCH (j:Journal)-[:EDited_BY]->(e:Editor) RETURN e.Name, j.Theme
 MATCH (j:Journal)-[r:EDited_BY]->(e:Editor) RETURN e.Name, e.Age, j.Theme ORDER BY j.Theme ASC
 MATCH (jaime:Character{name:'Jaime-Lannister'})-[:INTERACTS45]->(other) RETURN other.name
 MATCH (kr:Organization{name:'Knowledge Rules'})-[:IN_CITY]->(krCity:City) MATCH (otherOrg:Organization)-[:IN_CITY]->(krCity) RETURN krCity NEXT MATCH (otherOrg)<-[:MENTIONS]-(article:Article) RETURN avg(article.sentiment)
 MATCH (l:`List`) RETURN count(l)
 MATCH (l:`List`) RETURN DISTINCT l.Classroom, l.Grade
 MATCH (l:`List`) WHERE l.Classroom = 103 RETURN DISTINCT l.Grade
 MATCH (l:`List`) WHERE l.Classroom = 108 RETURN l.FirstName
 MATCH (l:`List`) WHERE l.Classroom = 111 RETURN l.LastName
 MATCH (l:`List`) WHERE l.Grade = 4 RETURN DISTINCT l.Classroom
 MATCH (l:`List`) WHERE l.Grade = 5 RETURN DISTINCT l.Classroom
 MATCH (l:Language)<-[:ORIGINAL_LANGUAGE]-(m:Movie) RETURN l, count(m) AS movieCount NEXT RETURN l.id, l.name ORDER BY movieCount DESC LIMIT 3
 MATCH (l:Language)<-[:ORIGINAL_LANGUAGE]-(m:Movie) RETURN l, count(m) AS movieCount NEXT RETURN l.name AS language ORDER BY movieCount DESC LIMIT 3
 MATCH (l:RefLocation) RETURN DISTINCT l.Location_Code
 MATCH (l:RefLocation)<-[:CONTAINS]-(d:DocumentLocation) RETURN l.Location_Code AS location_code, count(d) AS cnt NEXT RETURN location_code
 MATCH (library:Business{name:'Missoula Public Library'})-[:IN_CATEGORY]->(category:Category) MATCH (business:Business)-[:IN_CATEGORY]->(category) MATCH (business)<-[:REVIEWS]-(review:Review) MATCH (review)<-[:WROTE]-(user:User) RETURN DISTINCT user.name
 MATCH (List:`List`) RETURN DISTINCT `List`.FirstName, `List`.LastName
 MATCH (m:Machine)-[:RUNS]->(a:Application) RETURN a, count(m) AS instances ORDER BY instances DESC LIMIT 3 NEXT RETURN a.name, instances
 MATCH (m:Machine)-[:RUNS]->(a:Application) RETURN m, count(a) AS numApps NEXT RETURN avg(numApps)
 MATCH (m:Machine)-[:RUNS]->(os:OS) WHERE os.startTime > 1605733619064 RETURN m.name ORDER BY os.startTime LIMIT 3
 MATCH (m:Machine)-[:RUNS]->(p:Process) WHERE p.startTime > 1606500000000 RETURN DISTINCT m.name
 MATCH (m:Machine)-[:RUNS]->(s:Service)-[:LISTENS]->(p:Port{port:80}) RETURN m.name AS machine_name
 MATCH (m:Machine)-[:TYPE]->(t:Type) RETURN t.type AS MachineType, t.cpu AS CPUPower ORDER BY t.cpu DESC LIMIT 5
 MATCH (m:Machine{name:'DC1-RCK-1-1-M-1'})-[:RUNS]->(a:Application) RETURN a.name
 MATCH (m:Machine{name:'DC1-RCK-1-1-M-1'})-[:RUNS]->(p:Process) RETURN p.name, p.startTime, p.pid ORDER BY p.startTime DESC LIMIT 5
 MATCH (m:Machine{name:'DC1-RCK-4-9-M-103'})-[:RUNS]->(a:Application) RETURN a.name
 MATCH (m:Machine{name:'DC1-RCK-4-9-M-103'})-[:RUNS]->(s:Service) RETURN s LIMIT 3
 MATCH (m:Member) RETURN COUNT(m.Level)
 MATCH (m:Member) RETURN count(m), m.Address
 MATCH (m:Member) RETURN m.Card_Number, m.Name, m.Hometown ORDER BY m.Level DESC
 MATCH (m:Member) RETURN m.Time_of_purchase, m.Age, m.Address ORDER BY m.Time_of_purchase
 MATCH (m:Member) WHERE m.Address <> 'Hartford' RETURN count(m)
 MATCH (m:Member) WHERE m.Membership_card = 'Black' RETURN count(m)
 MATCH (m:Movie) MATCH (highestRated:Movie{imdbRating:maxRating}) RETURN max(m.imdbRating) AS maxRating NEXT MATCH (movie:Movie{`year`:releaseYear}) RETURN movie.title
 MATCH (m:Movie) MATCH (m)-[:ORIGINAL_LANGUAGE]->(l:Language) RETURN l, count(m) AS movieCount ORDER BY movieCount DESC NEXT RETURN l.name AS language, movieCount LIMIT 1
 MATCH (m:Movie) MATCH (p:Person)-[:DIRECTED]->(m) RETURN m, avg(m.votes) AS average_votes NEXT RETURN p.name AS director_name, avg(average_votes) AS average_movie_votes LIMIT 3
 MATCH (m:Movie) RETURN avg(m.imdbRating) AS averageRating NEXT RETURN averageRating
 MATCH (m:Movie) RETURN country, count(m) AS movieCount ORDER BY movieCount DESC LIMIT 5 NEXT RETURN country, movieCount
 MATCH (m:Movie) RETURN country, COUNT(m) AS movieCount ORDER BY movieCount DESC NEXT RETURN country, movieCount LIMIT 1
 MATCH (m:Movie) RETURN date(m.release_date) AS releaseYear, count(m) AS movieCount NEXT RETURN releaseYear, movieCount ORDER BY releaseYear
 MATCH (m:Movie) RETURN m
 MATCH (m:Movie) RETURN m ORDER BY m.`year` ASC LIMIT 3
 MATCH (m:Movie) RETURN m ORDER BY m.imdbRating ASC LIMIT 1 NEXT MATCH (movie:Movie{`year`:lowestRatedYear}) RETURN movie.title
 MATCH (m:Movie) RETURN m ORDER BY m.released DESC LIMIT 5
 MATCH (m:Movie) RETURN m ORDER BY m.revenue DESC LIMIT 3 NEXT RETURN m.title, m.revenue
 MATCH (m:Movie) RETURN m, apoc.text.levenshteinDistance(m.original_title) AS title_difference ORDER BY title_difference ASC LIMIT 3 NEXT RETURN m.title AS final_title, m.original_title AS original_title, title_difference
 MATCH (m:Movie) RETURN m, duration.inDays(m.release_date) AS days_since_release NEXT RETURN m.title, m.release_date, days_since_release ORDER BY days_since_release DESC LIMIT 3
 MATCH (m:Movie) RETURN m, size(m.countries) AS countryCount ORDER BY countryCount DESC LIMIT 5 NEXT RETURN m.title AS title, countryCount
 MATCH (m:Movie) RETURN m, size(m.languages) AS num_languages ORDER BY num_languages DESC NEXT RETURN m.title, num_languages LIMIT 1
 MATCH (m:Movie) RETURN m.released AS releaseYear, count(m) AS movieCount ORDER BY movieCount DESC NEXT RETURN releaseYear, movieCount LIMIT 1
 MATCH (m:Movie) RETURN m.title AS Movie, m.votes AS Votes ORDER BY m.votes DESC LIMIT 1
 MATCH (m:Movie) RETURN m.title AS title, m.released AS release_year, m.votes AS votes ORDER BY m.votes ASC LIMIT 5
 MATCH (m:Movie) RETURN m.title AS title, size(m.countries) AS countryCount ORDER BY countryCount DESC LIMIT 5
 MATCH (m:Movie) RETURN m.title AS title, size(m.languages) AS numLanguages ORDER BY numLanguages DESC LIMIT 5
 MATCH (m:Movie) RETURN m.Title, m.`Year`, m.Director ORDER BY m.Budget_million
 MATCH (m:Movie) RETURN m.title, m.budget ORDER BY m.budget DESC LIMIT 5
 MATCH (m:Movie) RETURN m.title, m.imdbVotes ORDER BY m.imdbVotes DESC LIMIT 3
 MATCH (m:Movie) RETURN m.title, m.imdbVotes ORDER BY m.imdbVotes DESC LIMIT 5
 MATCH (m:Movie) RETURN m.title, m.languages, size(m.languages) AS language_count ORDER BY language_count DESC LIMIT 3
 MATCH (m:Movie) RETURN m.title, m.languages, size(m.languages) AS num_languages ORDER BY num_languages DESC LIMIT 5
 MATCH (m:Movie) RETURN m.title, m.overview, size(m.overview) AS word_count ORDER BY word_count DESC LIMIT 3
 MATCH (m:Movie) RETURN m.title, m.popularity ORDER BY m.popularity DESC LIMIT 3
 MATCH (m:Movie) RETURN m.title, m.release_date ORDER BY m.release_date LIMIT 3
 MATCH (m:Movie) RETURN m.title, m.released ORDER BY m.released ASC LIMIT 3
 MATCH (m:Movie) RETURN m.title, m.released ORDER BY m.released DESC LIMIT 3
 MATCH (m:Movie) RETURN m.title, m.released ORDER BY m.released LIMIT 3
 MATCH (m:Movie) RETURN m.title, m.released ORDER BY m.released LIMIT 5
 MATCH (m:Movie) RETURN m.title, m.revenue ORDER BY m.revenue DESC LIMIT 1
 MATCH (m:Movie) RETURN m.title, m.runtime ORDER BY m.runtime ASC LIMIT 3
 MATCH (m:Movie) RETURN m.title, m.runtime ORDER BY m.runtime ASC LIMIT 5
 MATCH (m:Movie) RETURN m.title, m.vote_count ORDER BY m.vote_count DESC LIMIT 3
 MATCH (m:Movie) RETURN m.title, m.votes ORDER BY m.votes ASC LIMIT 3
 MATCH (m:Movie) RETURN m.title, m.votes ORDER BY m.votes DESC LIMIT 1
 MATCH (m:Movie) RETURN m.title, m.votes ORDER BY m.votes DESC LIMIT 5
 MATCH (m:Movie) RETURN m.title, m.votes ORDER BY m.votes LIMIT 3
 MATCH (m:Movie) RETURN m.title, size(m.title) AS length ORDER BY length DESC LIMIT 1
 MATCH (m:Movie) RETURN max(m.revenue) AS maxRevenue, collect(m) AS movie NEXT MATCH (highestRevenueMovie)<-[:DIRECTED]-(d:Director) RETURN d.name
 MATCH (m:Movie) WHERE m.`Year` < 2000 RETURN avg(m.Budget_million), max(m.Budget_million), min(m.Budget_million)
 MATCH (m:Movie) WHERE m.`year` < 2000 RETURN avg(m.budget) AS averageBudget NEXT RETURN averageBudget
 MATCH (m:Movie) WHERE m.`year` < 2000 RETURN m.title AS title, m.budget AS budget ORDER BY m.budget DESC LIMIT 5
 MATCH (m:Movie) WHERE m.`year` < 2000 RETURN m.title AS title, m.imdbVotes AS votes ORDER BY m.imdbVotes DESC LIMIT 5
 MATCH (m:Movie) WHERE m.`Year` <= 2000 RETURN m.Title, m.Director ORDER BY m.Gross_worldwide DESC LIMIT 1
 MATCH (m:Movie) WHERE m.`year` = 1995 RETURN m.title
 MATCH (m:Movie) WHERE m.`year` = 2000 RETURN avg(m.runtime) AS average_runtime
 MATCH (m:Movie) WHERE m.`year` = 2014 RETURN m.title AS title, m.revenue AS revenue ORDER BY m.revenue DESC LIMIT 5
 MATCH (m:Movie) WHERE m.`year` > 2010 RETURN m.title, m.released ORDER BY m.released LIMIT 3
 MATCH (m:Movie) WHERE m.`year` >= 2001 RETURN sum(m.revenue) AS totalRevenue
 MATCH (m:Movie) WHERE m.`year` >= 2012 RETURN m.title, m.`year`, m.imdbVotes ORDER BY m.imdbVotes DESC LIMIT 3
 MATCH (m:Movie) WHERE m.average_vote < 5 RETURN m.title, m.average_vote ORDER BY m.average_vote ASC LIMIT 3
 MATCH (m:Movie) WHERE m.average_vote = 7.7 RETURN m.title
 MATCH (m:Movie) WHERE m.average_vote > 8.0 RETURN m.title, m.average_vote ORDER BY m.average_vote DESC LIMIT 5
 MATCH (m:Movie) WHERE m.budget = 30000000 RETURN m.title LIMIT 3
 MATCH (m:Movie) WHERE m.budget = 50000000 RETURN m.title LIMIT 3
 MATCH (m:Movie) WHERE m.budget > 100000000 MATCH (p:Person)-[:CAST_FOR]->(m) RETURN DISTINCT p.name
 MATCH (m:Movie) WHERE m.budget > 100000000 RETURN count(m)
 MATCH (m:Movie) WHERE m.budget > 100000000 RETURN country, count(m) AS movieCount ORDER BY movieCount DESC NEXT RETURN country, movieCount LIMIT 1
 MATCH (m:Movie) WHERE m.budget > 100000000 RETURN m ORDER BY m.budget DESC LIMIT 5
 MATCH (m:Movie) WHERE m.budget > 100000000 RETURN m.title ORDER BY m.imdbRating DESC LIMIT 5
 MATCH (m:Movie) WHERE m.budget > 100000000 RETURN m.title, m.budget ORDER BY m.budget DESC LIMIT 3
 MATCH (m:Movie) WHERE m.budget > 50000000 RETURN m.title, m.budget
 MATCH (m:Movie) WHERE m.countries = 1 RETURN m.title, m.imdbRating ORDER BY m.imdbRating DESC LIMIT 5
 MATCH (m:Movie) WHERE m.countries > 5 RETURN m LIMIT 3
 MATCH (m:Movie) WHERE m.imdbRating > 6.0 RETURN m.title, m.runtime, m.imdbRating ORDER BY m.runtime ASC LIMIT 5
 MATCH (m:Movie) WHERE m.imdbRating > 7.0 RETURN m.title, m.budget, m.imdbRating ORDER BY m.budget ASC LIMIT 5
 MATCH (m:Movie) WHERE m.languages > 1 RETURN m.title, m.languages LIMIT 5
 MATCH (m:Movie) WHERE m.popularity > 15 RETURN m.title, m.popularity
 MATCH (m:Movie) WHERE m.popularity > 20 RETURN m ORDER BY m.popularity DESC LIMIT 5
 MATCH (m:Movie) WHERE m.release_date = 0 RETURN m.title
 MATCH (m:Movie) WHERE m.release_date = 12 RETURN m.title
 MATCH (m:Movie) WHERE m.release_date = 1990 RETURN count(m)
 MATCH (m:Movie) WHERE m.release_date > 2010 RETURN m
 MATCH (m:Movie) WHERE m.released < 1980 RETURN m ORDER BY m.released DESC LIMIT 3
 MATCH (m:Movie) WHERE m.released = 2008 RETURN m.title, m.released ORDER BY m.title LIMIT 3
 MATCH (m:Movie) WHERE m.released >= '2010' RETURN m.title, m.budget ORDER BY m.budget DESC LIMIT 5
 MATCH (m:Movie) WHERE m.released >= '2011' RETURN m.title, m.revenue ORDER BY m.revenue DESC LIMIT 5
 MATCH (m:Movie) WHERE m.revenue < 1000 RETURN m.title, m.revenue ORDER BY m.released LIMIT 3
 MATCH (m:Movie) WHERE m.revenue = 0 RETURN m.title
 MATCH (m:Movie) WHERE m.revenue > 3 RETURN m.title, m.revenue, m.budget ORDER BY m.revenue DESC LIMIT 3
 MATCH (m:Movie) WHERE m.revenue > 500000000 RETURN m
 MATCH (m:Movie) WHERE m.runtime < 90 RETURN avg(m.imdbRating) AS averageImdbRating
 MATCH (m:Movie) WHERE m.runtime > 120 RETURN avg(m.budget) AS average_budget NEXT RETURN average_budget
 MATCH (m:Movie) WHERE m.runtime > 120 RETURN m.title, m.runtime
 MATCH (m:Movie) WHERE m.runtime > 150 MATCH (p:Person)-[:CAST_FOR]->(m) RETURN DISTINCT p.name LIMIT 3
 MATCH (m:Movie) WHERE m.runtime > 180 RETURN m.title AS MovieTitle, m.runtime AS Runtime
 MATCH (m:Movie) WHERE m.status = 'Released' RETURN m.title, m.budget ORDER BY m.budget DESC LIMIT 3
 MATCH (m:Movie) WHERE m.status = 'Released' RETURN m.title, m.revenue ORDER BY m.revenue ASC LIMIT 5
 MATCH (m:Movie) WHERE m.tagline = 'What price would you put on your health?' RETURN m ORDER BY m.average_vote DESC LIMIT 3
 MATCH (m:Movie) WHERE m.vote_count > 1000 RETURN m.title, m.vote_count ORDER BY m.vote_count DESC LIMIT 5
 MATCH (m:Movie) WHERE m.vote_count > 5000 RETURN m.title AS title, m.vote_count AS vote_count
 MATCH (m:Movie) WHERE m.votes < 100 RETURN m.title ORDER BY m.votes LIMIT 3
 MATCH (m:Movie) WHERE m.votes > 100 RETURN m.title
 MATCH (m:Movie) WHERE m.votes > 2000 RETURN m.title, m.votes
 MATCH (m:Movie)-[:DIRECTED]-(d:Director) WHERE m.imdbRating > 8.0 RETURN DISTINCT d.name
 MATCH (m:Movie)-[:DIRECTED]-(p:Person) WHERE m.votes > 1000 RETURN p.name AS Director, m.title AS MovieTitle
 MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword) RETURN m, COUNT(k) AS keyword_count ORDER BY keyword_count DESC LIMIT 1 NEXT RETURN m.title AS movie_title, keyword_count
 MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword) RETURN m, count(k) AS keyword_count ORDER BY keyword_count DESC LIMIT 5 NEXT RETURN m.title AS MovieTitle, keyword_count
 MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword) RETURN m.title AS movie, count(k) AS keywordCount ORDER BY keywordCount DESC LIMIT 3
 MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword) RETURN m.title, count(k) AS keyword_count ORDER BY keyword_count DESC LIMIT 3
 MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword{name:'adventure'}) WHERE m.popularity > 15 RETURN m
 MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword{name:'adventure'}) WHERE m.status = 'Released' RETURN m LIMIT 3
 MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword{name:'based on novel'}) RETURN m.title AS MovieTitle LIMIT 3
 MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword{name:'explosive'}) RETURN m.title
 MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword{name:'jealousy'}) RETURN m.title AS MovieTitle
 MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword{name:'jealousy'}) RETURN m.title AS MovieTitle LIMIT 3
 MATCH (m:Movie)-[:HAS_KEYWORD]->(k:Keyword{name:'space'}) WHERE m.status = 'Released' RETURN m ORDER BY m.popularity DESC LIMIT 5
 MATCH (m:Movie)-[:IN_COLLECTION]->(:Collection) RETURN m.title, m.revenue ORDER BY m.revenue DESC LIMIT 3
 MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection) RETURN m, count(c) AS num_collections NEXT RETURN m.title AS MovieTitle, num_collections ORDER BY num_collections DESC LIMIT 5
 MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection{backdrop_path:'/9FBwqcd9IRruEDUrTdcaafOMKUq.jpg'}) RETURN m.title
 MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection{name:'Toy Story Collection'}) RETURN m ORDER BY m.release_date DESC LIMIT 5
 MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection{name:'Toy Story Collection'}) RETURN m ORDER BY m.release_date LIMIT 3
 MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection{name:'Toy Story Collection'}) RETURN m.title AS MovieTitle
 MATCH (m:Movie)-[:IN_COLLECTION]->(c:Collection{name:'Toy Story Collection'}) WHERE m.runtime > 80 RETURN m.title, m.runtime ORDER BY m.runtime DESC LIMIT 5
 MATCH (m:Movie)-[:IN_GENRE]->(:Genre{name:'Comedy'}) MATCH (a:Actor)-[:ACTED_IN]->(m)<-[r:RATED]-(:User) RETURN m NEXT RETURN a.name AS actor_name, average_rating LIMIT 1
 MATCH (m:Movie)-[:IN_GENRE]->(:Genre{name:'Comedy'}) RETURN m.title, m.popularity ORDER BY m.popularity DESC LIMIT 3
 MATCH (m:Movie)-[:IN_GENRE]->(:Genre{name:'Drama'}) WHERE m.budget < 10000000 RETURN m.title LIMIT 3
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN g, avg(m.revenue) AS avg_revenue ORDER BY avg_revenue ASC LIMIT 3 NEXT RETURN g.name AS genre, avg_revenue
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN g, count(m) AS movie_count ORDER BY movie_count DESC LIMIT 5 NEXT RETURN g.name AS genre, movie_count
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN g, count(m) AS movieCount NEXT RETURN g.name AS Genre, movieCount ORDER BY movieCount DESC LIMIT 3
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN g, count(m) AS movieCount ORDER BY movieCount DESC NEXT RETURN g.name AS genre, movieCount
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN g.name AS genreName, avg(m.runtime) AS averageRuntime NEXT RETURN genreName, averageRuntime
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN m, count(g) AS genreCount ORDER BY genreCount DESC LIMIT 3 NEXT RETURN m.title AS movie, genreCount AS numberOfGenres
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN m, count(g) AS genreCount ORDER BY genreCount DESC LIMIT 5 NEXT RETURN m.title AS movieTitle, genreCount
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN m, COUNT(g) AS genreCount ORDER BY genreCount DESC LIMIT 5 NEXT RETURN m.title AS MovieTitle, genreCount
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN m, size(g) AS genreCount NEXT RETURN m.title
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) RETURN m.title AS movieTitle, m.released AS releaseDate, collect(g.name) AS genres ORDER BY m.released DESC LIMIT 5
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE g.name = 'Horror' RETURN avg(m.runtime) AS average_runtime
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE g.name = 'Music' RETURN m.title
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.budget > 100000000 RETURN DISTINCT g.name AS genre_name
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.budget > 200000000 RETURN g.name AS genre, COUNT(m) AS movie_count ORDER BY movie_count DESC LIMIT 5
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.imdbRating < 5 RETURN g, avg(m.imdbRating) AS avgRating ORDER BY avgRating ASC NEXT RETURN g.name, avgRating LIMIT 3
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.imdbRating > 8.0 RETURN g.name AS genre, COUNT(m) AS movieCount ORDER BY movieCount DESC LIMIT 3
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.popularity > 20 RETURN g.name AS genre ORDER BY m.popularity DESC LIMIT 3
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.revenue > 100000000 RETURN g.name, count(m) AS movie_count ORDER BY movie_count DESC LIMIT 3
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.runtime < 80 RETURN g.name AS Genre
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre) WHERE m.runtime > 120 RETURN g.name AS Genre, count(m) AS MovieCount ORDER BY MovieCount DESC
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre{name:'Action'}) RETURN m ORDER BY m.revenue DESC LIMIT 1 NEXT RETURN m.title
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre{name:'Animation'}) RETURN avg(m.runtime) AS averageRuntime NEXT RETURN averageRuntime
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre{name:'Animation'}) RETURN avg(m.vote_count) AS average_vote_count NEXT RETURN average_vote_count
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre{name:'Animation'}) RETURN m ORDER BY m.revenue DESC LIMIT 3 NEXT RETURN m
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre{name:'Animation'}) WHERE m.status = 'Released' RETURN m
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre{name:'Comedy'}) MATCH (m)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN c, count(m) AS movie_count ORDER BY movie_count DESC NEXT RETURN c.name AS country_name, movie_count LIMIT 1
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre{name:'Drama'}) WHERE m.runtime > 120 RETURN m.title, m.runtime
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre{name:'Fantasy'}) MATCH (p:Person)-[:CAST_FOR]->(m) RETURN DISTINCT p.name
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre{name:'Sci-Fi'}) RETURN m.title AS title, m.imdbRating AS rating ORDER BY m.imdbRating DESC LIMIT 5
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre{name:'Science Fiction'}) RETURN avg(m.budget)
 MATCH (m:Movie)-[:IN_GENRE]->(g:Genre{name:'Science Fiction'}) RETURN m.title, m.popularity ORDER BY m.popularity DESC LIMIT 5
 MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language) RETURN l.name AS language, COUNT(m) AS movie_count ORDER BY movie_count DESC LIMIT 5 NEXT RETURN language, movie_count
 MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language) RETURN m.title, l.name LIMIT 10
 MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language) RETURN m.title, l.name LIMIT 5
 MATCH (m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language) WHERE l.id <> 'en' RETURN m.title AS MovieTitle, l.name AS OriginalLanguage
 MATCH (m:Movie)-[:PRODUCED_BY]->(c:ProductionCompany{name:'Pixar Animation Studios'}) RETURN m.title
 MATCH (m:Movie)-[:PRODUCED_BY]->(c:ProductionCompany{name:'Pixar Animation Studios'}) WHERE m.runtime < 100 RETURN m.title LIMIT 3
 MATCH (m:Movie)-[:PRODUCED_BY]->(c:ProductionCompany{name:'Pixar Animation Studios'}) WHERE m.runtime > 90 RETURN m.title, m.runtime ORDER BY m.popularity DESC LIMIT 3
 MATCH (m:Movie)-[:PRODUCED_BY]->(c:ProductionCompany{name:'Universal Pictures'}) RETURN m.title, m.popularity ORDER BY m.popularity DESC LIMIT 5
 MATCH (m:Movie)-[:PRODUCED_BY]->(p:ProductionCompany) RETURN p.name AS productionCompanyName, count(m) AS numMovies ORDER BY numMovies DESC NEXT RETURN productionCompanyName, numMovies LIMIT 1
 MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany) RETURN m, count(pc) AS production_company_count NEXT RETURN m.title AS movie_title, production_company_count
 MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany) RETURN pc, avg(m.revenue) AS avg_revenue ORDER BY avg_revenue DESC LIMIT 3 NEXT RETURN pc.name, avg_revenue
 MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany) WHERE m.runtime < 80 RETURN pc, count(m) AS movies_count ORDER BY movies_count DESC LIMIT 3 NEXT RETURN pc.name, movies_count
 MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany) WHERE m.runtime > 150 RETURN pc, count(m) AS movies_count ORDER BY movies_count DESC LIMIT 5 NEXT RETURN pc.name, movies_count
 MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany{name:'Pixar Animation Studios'}) MATCH (m)-[:ORIGINAL_LANGUAGE]->(l:Language) RETURN l.name, count(m) AS movie_count ORDER BY movie_count DESC LIMIT 3
 MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany{name:'Pixar Animation Studios'}) RETURN m
 MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany{name:'Pixar Animation Studios'}) WHERE m.budget > 50000000 RETURN m.title LIMIT 3
 MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany{name:'Pixar Animation Studios'}) WHERE m.budget > 50000000 RETURN m.title ORDER BY m.release_date LIMIT 3
 MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany{name:'Pixar Animation Studios'}) WHERE m.runtime < 100 RETURN m.title, m.runtime ORDER BY m.runtime LIMIT 3
 MATCH (m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany{name:'Universal Pictures'}) RETURN m ORDER BY m.average_vote DESC LIMIT 5
 MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN c.name AS Country, count(m) AS NumberOfMovies ORDER BY NumberOfMovies DESC LIMIT 5
 MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN m, count(c) AS countries_count NEXT RETURN m ORDER BY m.popularity DESC LIMIT 3
 MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN m, count(c) AS num_countries NEXT RETURN m.title AS MovieTitle, num_countries
 MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN m, count(c) AS numCountries NEXT RETURN m.title AS movie, numCountries ORDER BY numCountries DESC LIMIT 3
 MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country) WHERE m.average_vote > 8.0 RETURN c, count(m) AS movieCount ORDER BY movieCount DESC NEXT RETURN c.name AS countryName, movieCount
 MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country) WHERE m.runtime > 120 RETURN c.name AS country, COUNT(m) AS movie_count ORDER BY movie_count DESC LIMIT 3
 MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country{name:'France'}) RETURN m.title LIMIT 5
 MATCH (m:Movie)-[:PRODUCED_IN_COUNTRY]->(c:Country{name:'United States of America'}) WHERE m.revenue > 50000000 RETURN m LIMIT 5
 MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) RETURN m, count(l) AS language_count ORDER BY language_count DESC LIMIT 3 NEXT RETURN m.title AS movie_title, language_count
 MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) RETURN m, COUNT(l) AS language_count ORDER BY language_count DESC LIMIT 3 NEXT RETURN m.title AS MovieTitle, language_count AS NumberOfLanguages
 MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) RETURN m, count(l) AS languageCount ORDER BY languageCount DESC LIMIT 5 NEXT RETURN m.title AS movie, languageCount AS spokenLanguages
 MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) RETURN m.title AS movie, collect(l.name) AS languages, size(l.name) AS numLanguages ORDER BY numLanguages DESC LIMIT 3
 MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) WHERE m.average_vote < 4 RETURN l.name, count(m) AS movie_count ORDER BY movie_count DESC LIMIT 3
 MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) WHERE m.status = 'In Production' RETURN l.name, count(m) AS movie_count ORDER BY movie_count DESC LIMIT 3
 MATCH (m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language{name:'Spanish'}) RETURN m.original_title AS OriginalTitle
 MATCH (m:Movie)-[r:HAS_KEYWORD]->(k:Keyword) RETURN m.title AS movie, count(r) AS num_keywords ORDER BY num_keywords DESC LIMIT 10
 MATCH (m:Movie)<-[:ACTED_IN]-(a:Actor) RETURN m, COUNT(a) AS actorCount ORDER BY actorCount DESC LIMIT 3 NEXT RETURN m.title AS movieTitle, actorCount
 MATCH (m:Movie)<-[:ACTED_IN]-(a:Actor) RETURN m, COUNT(a) AS actorCount ORDER BY actorCount DESC LIMIT 3 NEXT RETURN m.title AS MovieTitle, actorCount
 MATCH (m:Movie)<-[:ACTED_IN]-(p:Person) RETURN m, count(p) AS actorCount NEXT RETURN m.title AS MovieTitle, actorCount
 MATCH (m:Movie)<-[:ACTED_IN]-(p:Person) RETURN m, count(p) AS actorCount ORDER BY actorCount DESC LIMIT 3 NEXT MATCH (m)<-[r:ACTED_IN]-(p) RETURN m.title AS movieTitle, p.name AS actorName, r.roles AS roles
 MATCH (m:Movie)<-[:ACTED_IN]-(p:Person) RETURN m, count(p) AS actorCount ORDER BY actorCount DESC LIMIT 3 NEXT RETURN m.title AS movieTitle, actorCount
 MATCH (m:Movie)<-[:CAST_FOR]-(p:Person) RETURN m, COUNT(p) AS cast_count ORDER BY cast_count DESC LIMIT 3 NEXT RETURN m.title AS movie_title, cast_count
 MATCH (m:Movie)<-[:CREW_FOR]-(crew:Person) RETURN m, count(crew) AS crewCount ORDER BY crewCount DESC LIMIT 3 NEXT RETURN m.title AS movieTitle
 MATCH (m:Movie)<-[:DIRECTED]-(d:Director) WHERE m.budget > 200000000 RETURN d, avg(m.imdbRating) AS averageRating NEXT RETURN d.name AS directorName, averageRating ORDER BY averageRating DESC LIMIT 1
 MATCH (m:Movie)<-[:DIRECTED]-(d:Director) WHERE m.imdbRating > 8.0 RETURN DISTINCT d.name AS director
 MATCH (m:Movie)<-[:RATED]-(u:User) RETURN m, COUNT(u) AS rating_count NEXT RETURN m.title AS movie_title LIMIT 3
 MATCH (m:Movie)<-[:RATED]-(u:User) RETURN m, COUNT(u) AS ratingCount NEXT RETURN m.title AS movieTitle LIMIT 5
 MATCH (m:Movie)<-[:RATED]-(u:User) RETURN m, COUNT(u) AS ratingCount NEXT RETURN m.title AS movieTitle, m.movieId AS movieId
 MATCH (m:Movie)<-[:RATED]-(u:User) RETURN m, COUNT(u) AS ratingCount NEXT RETURN m.title AS MovieTitle, ratingCount LIMIT 3
 MATCH (m:Movie)<-[:RATED]-(u:User) RETURN m, count(u) AS userCount NEXT RETURN m
 MATCH (m:Movie)<-[:RATED]-(u:User) RETURN m, count(u) AS userCount NEXT RETURN m ORDER BY userCount DESC LIMIT 5
 MATCH (m:Movie)<-[:REVIEWED]-(r:Person) RETURN m, count(r) AS reviewCount NEXT RETURN m.title AS movieTitle, reviewCount ORDER BY reviewCount DESC LIMIT 5
 MATCH (m:Movie)<-[:REVIEWED{summary:'An amazing journey'}]-(:Person) RETURN m
 MATCH (m:Movie)<-[ai:ACTED_IN]-(p:Person) RETURN m.title AS movie, collect(p.name) AS actors, size(ai.roles) AS numRoles ORDER BY numRoles DESC LIMIT 5
 MATCH (m:Movie)<-[r:ACTED_IN]-(:Person) RETURN m, size(r.roles) AS role_count ORDER BY role_count DESC LIMIT 3 NEXT RETURN m.title AS movie_title, role_count
 MATCH (m:Movie)<-[r:ACTED_IN]-(p:Person) RETURN m.title AS movie, size(r.roles) AS numRoles ORDER BY numRoles DESC LIMIT 5
 MATCH (m:Movie)<-[r:ACTED_IN]-(p:Person) RETURN m.title AS movie, size(r.roles) AS roleCount ORDER BY roleCount DESC LIMIT 5
 MATCH (m:Movie)<-[r:ACTED_IN]-(p:Person) WHERE r.roles = 3 RETURN m.title
 MATCH (m:Movie)<-[r:RATED]-(:User) RETURN m, avg(r.rating) AS avgRating, count(r) AS numRatings NEXT RETURN m.title AS movieTitle, avgRating ORDER BY avgRating DESC LIMIT 5
 MATCH (m:Movie)<-[r:RATED]-(:User) RETURN m.title AS movie, count(r) AS num_ratings ORDER BY num_ratings DESC LIMIT 10
 MATCH (m:Movie)<-[r:RATED]-() RETURN m, COUNT(r) AS reviewCount, AVG(r.rating) AS avgRating NEXT RETURN m.title AS movieTitle, avgRating ORDER BY avgRating DESC LIMIT 1
 MATCH (m:Movie)<-[r:RATED]-(u:User) RETURN m, avg(r.rating) AS avgRating ORDER BY avgRating DESC LIMIT 5 NEXT RETURN m.title AS movie, avgRating
 MATCH (m:Movie)<-[r:REVIEWED]-() WHERE m.tagline > 20 RETURN avg(r.rating) AS average_rating
 MATCH (m:Movie)<-[r:REVIEWED]-() WHERE r.summary = 'A solid romp' RETURN m.title
 MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) RETURN m, r, p ORDER BY r.rating DESC LIMIT 1 NEXT RETURN p.name AS reviewer, r.summary AS review_summary
 MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) WHERE r.rating > 90 RETURN m.title LIMIT 3
 MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) WHERE r.rating > 90 RETURN m.title, r.rating
 MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) WHERE r.summary = 'An amazing journey' RETURN m.title, count(r) AS reviews ORDER BY reviews DESC LIMIT 5
 MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) WHERE r.summary = 'Fun, but a little far fetched' RETURN m.title
 MATCH (m:Movie)<-[r:REVIEWED]-(p:Person) WHERE r.summary = 'Pretty funny at times' RETURN m.title
 MATCH (m:Movie{released:2003})<-[r:REVIEWED]-() RETURN avg(r.rating) AS averageRating NEXT RETURN averageRating
 MATCH (m:Movie{tagline:'Welcome to the Real World'}) RETURN m.title
 MATCH (m:Movie{title:'Father of the Bride Part II'})-[:IN_GENRE]->(g:Genre) RETURN g LIMIT 3
 MATCH (m:Movie{title:'Gone with the Wind'}) RETURN m
 MATCH (m:Movie{title:'Jumanji'}) MATCH (m)-[:IN_GENRE]->(g:Genre) RETURN g.name
 MATCH (m:Movie{title:'Open Season'}) MATCH (m)<-[:DIRECTED]-(d:Director) MATCH (d)-[:DIRECTED]->(otherMovies:Movie) RETURN d NEXT RETURN averageRuntime
 MATCH (m:Movie{title:'The Matrix Revolutions'}) MATCH (movies:Movie{released:releaseYear}) RETURN m.released AS releaseYear NEXT RETURN averageVotes
 MATCH (m:Movie{title:'Toy Story'}) RETURN m.plot
 MATCH (m:Movie{title:'Toy Story'})-[:IN_GENRE]->(g:Genre) RETURN g.name AS genre
 MATCH (m:Movie{title:'Toy Story'})-[r:CREW_FOR{job:'Producer'}]-() RETURN r.department
 MATCH (m:Movie{title:'Toy Story'})<-[:ACTED_IN]-(a:Actor) RETURN a.name
 MATCH (m:Movie{title:'Toy Story'})<-[:CREW_FOR]-(p:Person) RETURN DISTINCT p.job AS job
 MATCH (m:Movie{title:'Underneath'})-[:IN_GENRE]->(g:Genre) RETURN g.name
 MATCH (m:Movie{title:'V for Vendetta'})<-[:DIRECTED]-(p:Person) RETURN p.name
 MATCH (m:Movie{title:'Waiting to Exhale'})-[:HAS_KEYWORD]->(k:Keyword) RETURN k.name ORDER BY k.id LIMIT 5
 MATCH (m:Musical) RETURN m.Nominee AS Nominee, COUNT(m) AS `count` ORDER BY `count` DESC
 MATCH (m:Musical) RETURN m.Nominee AS nominee, COUNT(m) AS `count` ORDER BY `count` DESC LIMIT 1 NEXT RETURN nominee
 MATCH (m:Musical) RETURN m.Result AS Result, count(m) AS `count` ORDER BY `count` DESC NEXT RETURN Result LIMIT 1
 MATCH (m:Musical) WHERE m.Award <> 'Tony Award' RETURN DISTINCT m.Nominee
 MATCH (m:Musical) WHERE m.Nominee = 'Bob Fosse' RETURN m.Name
 MATCH (me:Me)-[:AMPLIFIES]->(u:User) RETURN u.name, u.screen_name ORDER BY u.followers DESC LIMIT 3
 MATCH (me:Me)-[:AMPLIFIES]->(user:User) RETURN user
 MATCH (me:Me)-[:AMPLIFIES]->(user:User) RETURN user.name AS user, user.screen_name AS handle
 MATCH (me:Me)-[:AMPLIFIES]->(user:User) RETURN user.screen_name AS AmplifiedUser
 MATCH (me:Me)-[:POSTS]->(retweet:Tweet)-[:RETWEETS]->(original:Tweet) RETURN original ORDER BY original.created_at ASC LIMIT 3
 MATCH (me:Me)-[:POSTS]->(retweet:Tweet)-[:RETWEETS]->(original:Tweet)<-[:POSTS]-(user:User) RETURN user.screen_name AS retweeted_user
 MATCH (me:Me{name:'Neo4j'})-[:AMPLIFIES]->(user:User) RETURN user ORDER BY user.followers DESC LIMIT 3
 MATCH (me:Me{name:'Neo4j'})-[:FOLLOWS]->(user:User) RETURN user.name, user.screen_name, user.followers, user.following ORDER BY user.followers DESC LIMIT 5
 MATCH (me:Me{name:'Neo4j'})-[:MENTIONS]-(t:Tweet)-[:MENTIONS]-(other:User) RETURN avg(other.followers) AS average_followers NEXT RETURN average_followers
 MATCH (me:Me{name:'Neo4j'})<-[:MENTIONS]-(tweet1:Tweet)<-[:RETWEETS]-(:Tweet)<-[:POSTS]-(user:User)<-[:MENTIONS]-(tweet2:Tweet) RETURN DISTINCT tweet2.id_str
 MATCH (me:Me{name:'Neo4j'})<-[s:SIMILAR_TO]-(u:User) RETURN u.screen_name AS user, s.score AS similarity ORDER BY similarity DESC LIMIT 5
 MATCH (me:Me{screen_name:'neo4j'})-[:AMPLIFIES]->(user:User)-[:POSTS]->(tweet:Tweet) RETURN tweet ORDER BY tweet.created_at ASC LIMIT 3
 MATCH (me:Me{screen_name:'neo4j'})-[:FOLLOWS]->(u:User) WHERE u.followers > 1000 RETURN u.screen_name, u.followers
 MATCH (me:Me{screen_name:'neo4j'})-[:FOLLOWS]->(u:User) WHERE u.followers > 10000 RETURN u.screen_name, u.followers
 MATCH (me:Me{screen_name:'neo4j'})-[:FOLLOWS]->(user:User) WHERE user.followers > 10000 RETURN user.screen_name, user.followers
 MATCH (me:Me{screen_name:'neo4j'})-[:FOLLOWS]->(user:User)-[:POSTS]->(tweet:Tweet)-[:CONTAINS]->(link:Link) RETURN tweet.text AS tweet_text, tweet.created_at AS created_at, link.url AS link_url ORDER BY tweet.created_at DESC LIMIT 5
 MATCH (me:Me{screen_name:'neo4j'})-[:POSTS]->(tweet:Tweet) RETURN tweet.text, tweet.favorites ORDER BY tweet.favorites DESC LIMIT 5
 MATCH (me:Me{screen_name:'neo4j'})-[:POSTS]->(tweet:Tweet)-[:CONTAINS]->(link:Link) RETURN tweet.text, tweet.favorites ORDER BY tweet.favorites DESC LIMIT 5
 MATCH (me:Me{screen_name:'neo4j'})-[:POSTS]->(tweet:Tweet)-[:RETWEETS]->(retweetedTweet:Tweet)<-[:POSTS]-(retweetedUser:User) RETURN retweetedUser.screen_name AS retweeted_user, retweetedTweet.text AS retweeted_tweet
 MATCH (me:Me{screen_name:'neo4j'})-[:POSTS]->(tweet:Tweet)<-[:RETWEETS]-(retweet:Tweet) RETURN tweet, COUNT(retweet) AS retweet_count ORDER BY retweet_count DESC LIMIT 5 NEXT MATCH (tweet)-[:CONTAINS]->(link:Link) RETURN link.url
 MATCH (me:Me{screen_name:'neo4j'})-[:POSTS]->(tweet:Tweet)<-[:RETWEETS]-(retweet:Tweet)<-[:POSTS]-(retweeter:User) RETURN DISTINCT retweeter.screen_name LIMIT 3
 MATCH (me:Me{screen_name:'neo4j'})-[a:AMPLIFIES]->(u:User) RETURN u.screen_name AS user, count(a) AS amplifications ORDER BY amplifications DESC LIMIT 3
 MATCH (me:Me{screen_name:'neo4j'})-[i:INTERACTS_WITH]->(u:User) RETURN u.screen_name AS user, count(i) AS interactions ORDER BY interactions DESC LIMIT 5
 MATCH (me:Me{screen_name:'neo4j'})<-[:FOLLOWS]-(follower:User) RETURN follower.name AS follower_name, follower.betweenness AS betweenness ORDER BY follower.betweenness DESC LIMIT 3
 MATCH (Member:Member) RETURN Member.Card_Number AS card_number, Member.Name AS name, Member.Hometown AS hometown ORDER BY Member.Level DESC
 MATCH (movie:Movie)-[:IN_GENRE]->(genre:Genre) WHERE movie.budget > 200000000 RETURN genre.name AS genreName, count(movie) AS movieCount ORDER BY movieCount DESC NEXT RETURN genreName, movieCount LIMIT 1
 MATCH (n:`List`) RETURN count(n)
 MATCH (n:`List`) RETURN DISTINCT n.Classroom, n.Grade
 MATCH (n:`List`) RETURN DISTINCT n.FirstName AS firstname, n.LastName AS lastname
 MATCH (n:`List`) RETURN n.Classroom, count(n.Grade)
 MATCH (n:`List`) WHERE n.Classroom = 107 RETURN DISTINCT n.FirstName
 MATCH (n:`List`) WHERE n.Classroom = 108 RETURN n.FirstName
 MATCH (n:`List`) WHERE n.Classroom = 111 RETURN n.LastName
 MATCH (n:`List`) WHERE n.Grade = 4 RETURN DISTINCT n.Classroom
 MATCH (n:`List`) WHERE n.Grade = 5 RETURN DISTINCT n.Classroom
 MATCH (n:`Procedure`) RETURN n.Name, n.Cost ORDER BY n.Cost DESC
 MATCH (n:Article) MATCH (m:Article) RETURN n.`abstract`, m.title LIMIT 8
 MATCH (n:Article) MATCH (m:Article) RETURN n.title, m.comments LIMIT 8
 MATCH (n:Article) MATCH (m:Author) RETURN n.comments, m.first_name LIMIT 8
 MATCH (n:Article) MATCH (m:Author) RETURN n.title, m.author_id LIMIT 8
 MATCH (n:Article) MATCH (m:Author) RETURN n.title, m.last_name LIMIT 8
 MATCH (n:Article) MATCH (m:Topic) RETURN n.title, m.description LIMIT 8
 MATCH (n:Article) RETURN n.`abstract` AS `Records` MATCH (m:Article) RETURN m.article_id AS `Records`
 MATCH (n:Article) RETURN n.`abstract` AS `Records` MATCH (m:Categories) RETURN m.category_id AS `Records`
 MATCH (n:Article) RETURN n.`abstract` AS `Records` MATCH (m:Journal) RETURN m.name AS `Records`
 MATCH (n:Article) RETURN n.article_id AS `Records` MATCH (m:Topic) RETURN m.label AS `Records`
 MATCH (n:Article) RETURN n.article_id AS `Records` MATCH (m:UpdateDate) RETURN m.update_date AS `Records`
 MATCH (n:Article) RETURN n.article_id SKIP 2 LIMIT 2
 MATCH (n:Article) RETURN n.title AS `Records` MATCH (m:Keyword) RETURN m.name AS `Records`
 MATCH (n:Article) WHERE n.article_id <> '1006' RETURN DISTINCT n.comments AS comments
 MATCH (n:Article) WHERE n.article_id <> '1056' RETURN DISTINCT n.title AS title
 MATCH (n:Article) WHERE n.comments <> '18 pages, latex2e with amsfonts. Final version, accepted for   publication' RETURN DISTINCT n.`abstract` AS `abstract`
 MATCH (n:Article) WHERE n.comments <> '44 pages' RETURN DISTINCT n.`abstract` AS `abstract`
 MATCH (n:Article) WHERE n.comments = '44 pages' RETURN n
 MATCH (n:Article) WHERE n.title <> 'Chow groups of weighted hypersurfaces' RETURN DISTINCT n.article_id AS article_id
 MATCH (n:Article) WHERE n.title <> 'Solutions to congruences using sets with the property of Baire' RETURN DISTINCT n.comments AS comments
 MATCH (n:Article) WHERE n.title <> 'Subexponential groups in 4-manifold topology' RETURN DISTINCT n.`abstract` AS `abstract`
 MATCH (n:Article) WHERE n.title <> 'Summation and transformation formulas for elliptic hypergeometric series' RETURN DISTINCT n.`abstract` AS `abstract`
 MATCH (n:Article) WHERE n.title <> 'Summation and transformation formulas for elliptic hypergeometric series' RETURN DISTINCT n.article_id AS article_id
 MATCH (n:Article) WHERE n.title <> 'The Gervais-Neveu-Felder equation for the Jordanian quasi-Hopf   U_{h;y}(sl(2)) algebra' RETURN DISTINCT n.`abstract` AS `abstract`
 MATCH (n:Article) WHERE n.title = 'An adelic causality problem related to abelian L-functions' RETURN n
 MATCH (n:Article) WHERE n.title = 'Chow groups of weighted hypersurfaces' RETURN n
 MATCH (n:Article) WHERE n.title = 'Failure of Brown representability in derived categories' RETURN n
 MATCH (n:Article)-[:HAS_CATEGORY]->(m:Categories) RETURN DISTINCT n, m NEXT RETURN `abstract`, `count`, category_id ORDER BY `count` LIMIT 6
 MATCH (n:Article)-[:HAS_CATEGORY]->(m:Categories) RETURN DISTINCT n, m NEXT RETURN n.title AS title, count(m) AS `count` ORDER BY `count` DESC LIMIT 7
 MATCH (n:Article)-[:HAS_DOI]->(m:DOI) RETURN DISTINCT n, m NEXT RETURN article_id, `count`, doi_id ORDER BY `count` LIMIT 6
 MATCH (n:Article)-[:HAS_DOI]->(m:DOI) RETURN DISTINCT n, m NEXT RETURN n.`abstract` AS `abstract`, count(m) AS `count` LIMIT 20
 MATCH (n:Article)-[:HAS_DOI]->(m:DOI) RETURN DISTINCT n, m NEXT RETURN n.comments AS comments, count(m) AS doi_count ORDER BY doi_count
 MATCH (n:Article)-[:HAS_DOI]->(m:DOI) RETURN DISTINCT n, m NEXT RETURN n.title AS title, count(m) AS `count` LIMIT 20
 MATCH (n:Article)-[:HAS_DOI]->(m:DOI) RETURN DISTINCT n, m NEXT RETURN n.title AS title, count(m) AS `count` ORDER BY `count` DESC LIMIT 7
 MATCH (n:Article)-[:HAS_DOI]->(m:DOI) WHERE n.article_id = 1006 RETURN properties(m) AS props
 MATCH (n:Article)-[:HAS_DOI]->(m:DOI) WHERE n.article_id = 1052 RETURN properties(m) AS props
 MATCH (n:Article)-[:HAS_DOI]->(m:DOI) WHERE n.article_id = 1071 RETURN properties(m) AS props
 MATCH (n:Article)-[:HAS_KEY]->(m:Keyword) RETURN DISTINCT n, m NEXT RETURN `abstract`, `count`, key_id ORDER BY `count` LIMIT 6
 MATCH (n:Article)-[:HAS_KEY]->(m:Keyword) RETURN DISTINCT n, m NEXT RETURN `abstract`, `count`, name ORDER BY `count` LIMIT 6
 MATCH (n:Article)-[:PUBLISHED_IN]->(m:Journal) RETURN DISTINCT n, m NEXT RETURN `abstract`, `count`, name ORDER BY `count` LIMIT 6
 MATCH (n:Article)-[:PUBLISHED_IN]->(m:Journal) RETURN DISTINCT n, m NEXT RETURN comments, `count` ORDER BY comments DESC, `count` DESC
 MATCH (n:Article)-[:PUBLISHED_IN]->(m:Journal) RETURN DISTINCT n, m NEXT RETURN n.title AS title, count(m) AS journal_count ORDER BY journal_count
 MATCH (n:Article)-[:PUBLISHED_IN]->(m:Journal) WHERE n.article_id = 4179 RETURN properties(m) AS props
 MATCH (n:Article)-[:PUBLISHED_IN]->(m:Journal) WHERE n.article_id = 5145 RETURN properties(m) AS props
 MATCH (n:Article)-[:PUBLISHED_IN{`year`:'2001'}]->(m:Journal) WHERE n.comments = '31 pages, LaTex' RETURN properties(m) AS props
 MATCH (n:Article)-[:PUBLISHED_IN{meta:'213'}]->(m:Journal) WHERE n.article_id = '1008' RETURN properties(m) AS props
 MATCH (n:Article)-[:PUBLISHED_IN{meta:'217'}]->(m:Journal) WHERE n.title = 'Classification of Subsystems for Local Nets with Trivial Superselection   Structure' RETURN properties(m) AS props
 MATCH (n:Article)-[:PUBLISHED_IN{meta:'220'}]->(m:Journal) WHERE n.comments = '22 pages, LaTeX' RETURN properties(m) AS props
 MATCH (n:Article)-[:PUBLISHED_IN{pages:'1-31'}]->(m:Journal) WHERE n.title = 'A New Cohomology Theory for Orbifold' RETURN properties(m) AS props
 MATCH (n:Article)-[:PUBLISHED_IN{pages:'263-281'}]->(m:Journal) WHERE n.title = 'Superselection Theory for Subsystems' RETURN properties(m) AS props
 MATCH (n:Article)-[:PUBLISHED_IN{pages:'293-299'}]->(m:Journal) WHERE n.title = 'Log mirror symmetry and local mirror symmetry' RETURN properties(m) AS props
 MATCH (n:Article)-[:WRITTEN_BY]->(m:Author) RETURN DISTINCT n, m NEXT RETURN `abstract`, `count`, first_name ORDER BY `count` LIMIT 6
 MATCH (n:Article)-[:WRITTEN_BY]->(m:Author) RETURN DISTINCT n, m NEXT RETURN comments, `count`, affiliation ORDER BY `count` LIMIT 6
 MATCH (n:Article)-[:WRITTEN_BY]->(m:Author) RETURN DISTINCT n, m NEXT RETURN n.`abstract` AS `abstract`, count(m) AS author_count ORDER BY author_count
 MATCH (n:Article)-[:WRITTEN_BY]->(m:Author) RETURN DISTINCT n, m NEXT RETURN title, `count`, author_id ORDER BY `count` LIMIT 6
 MATCH (n:Article)-[ha:HAS_CATEGORY]->(m) WHERE n.article_id = '601494' RETURN m.category_id
 MATCH (n:Article)-[ha:HAS_CATEGORY]->(m) WHERE n.article_id = '603207' RETURN m.category_id
 MATCH (n:Article)-[ha:HAS_CATEGORY]->(m) WHERE n.comments = '26 pages; final version; to appear in Numerische Mathematik' RETURN m.specifications
 MATCH (n:Article)-[ha:HAS_CATEGORY]->(m) WHERE n.comments = 'no comments' RETURN m.category_id
 MATCH (n:Article)-[ha:HAS_CATEGORY]->(m) WHERE n.title = 'Capital allocation for credit portfolios with kernel estimators' RETURN m.specifications
 MATCH (n:Article)-[ha:HAS_CATEGORY]->(m) WHERE n.title = 'Fast linear algebra is stable' RETURN m.specifications
 MATCH (n:Article)-[ha:HAS_DOI]->(m) WHERE n.`abstract` = '  Using matrix inversion and determinant evaluation techniques we prove several summation and transformation formulas for terminating, balanced, very-well-poised, elliptic hypergeometric series. ' RETURN m.name
 MATCH (n:Article)-[ha:HAS_DOI]->(m) WHERE n.comments = '21 pages, AMS-LaTeX' RETURN m.name
 MATCH (n:Article)-[ha:HAS_DOI]->(m) WHERE n.title = 'Solutions to congruences using sets with the property of Baire' RETURN m.doi_id
 MATCH (n:Article)-[ha:HAS_KEY]->(m) WHERE n.`abstract` = '  In this article we study the interface generated by the collision between two cristals growing layer by layer on a one-dimensional substrate through random decomposition of particles. We relate this interface with the notion of beta-path in an equivalent directed polymer model and, by using asymptotics results from Baik and Rains (2000) and some hydrodynamic tools introduced by Cator and Groeenenboon (2005), we derive a law of large numbers for such a path and obtain some bounds for its fluctuations. ' RETURN m.key_id
 MATCH (n:Article)-[ha:HAS_KEY]->(m) WHERE n.`abstract` = '  The classical level set method, which represents the boundary of the unknown geometry as the zero-level set of a function, has been shown to be very effective in solving shape optimization problems. The present work addresses the issue of using a level set representation when there are simple geometrical and topological constraints. We propose a logarithmic barrier penalty which acts to enforce the constraints, leading to an approximate solution to shape design problems. ' RETURN m.key_id
 MATCH (n:Article)-[ha:HAS_KEY]->(m) WHERE n.`abstract` = '  The classical level set method, which represents the boundary of the unknown geometry as the zero-level set of a function, has been shown to be very effective in solving shape optimization problems. The present work addresses the issue of using a level set representation when there are simple geometrical and topological constraints. We propose a logarithmic barrier penalty which acts to enforce the constraints, leading to an approximate solution to shape design problems. ' RETURN m.name
 MATCH (n:Article)-[ha:HAS_KEY]->(m) WHERE n.`abstract` = '  We consider a finite sequence of random points in a finite domain of a finite-dimensional Euclidean space. The points are sequentially allocated in the domain according to a model of cooperative sequential adsorption. The main peculiarity of the model is that the probability distribution of a point depends on previously allocated points. We assume that the dependence vanishes as the concentration of points tends to infinity. Under this assumption the law of large numbers, the central limit theorem and Poisson approximation are proved for the generated sequence of random point measures. ' RETURN m.name
 MATCH (n:Article)-[ha:HAS_KEY]->(m) WHERE n.article_id = '603382' RETURN m.key_id
 MATCH (n:Article)-[ha:HAS_KEY]->(m) WHERE n.article_id = '604531' RETURN m.name
 MATCH (n:Article)-[ha:HAS_KEY]->(m) WHERE n.comments = 'Published at http://dx.doi.org/10.1214/009117905000000369 in the   Annals of Probability (http://www.imstat.org/aop/) by the Institute of   Mathematical Statistics (http://www.imstat.org)' RETURN m.name
 MATCH (n:Article)-[ha:HAS_KEY]->(m) WHERE n.title = 'A Topology-Preserving Level Set Method for Shape Optimization' RETURN m.key_id
 MATCH (n:Article)-[ha:HAS_KEY]->(m) WHERE n.title = 'Limit theorems for random point measures generated by cooperative   sequential adsorption' RETURN m.name
 MATCH (n:Article)-[ha:HAS_KEY]->(m) WHERE n.title = 'Rational points on compactifications of semi-simple algebraic groups' RETURN m.key_id
 MATCH (n:Article)-[pu:PUBLISHED_IN]->(m) WHERE n.`abstract` = '  Let F be a local net of von Neumann algebras in four spacetime dimensions satisfying certain natural structural assumptions. We prove that if F has trivial superselection structure then every covariant, Haag-dual subsystem B is the fixed point net under a compact group action on one component in a suitable tensor product decomposition of F. Then we discuss some application of our result, including free field models and certain theories with at most countably many sectors. ' RETURN m.name
 MATCH (n:Article)-[pu:PUBLISHED_IN]->(m) WHERE n.comments = '19 pages, AMSLatex, references added' RETURN m.journal_id
 MATCH (n:Article)-[pu:PUBLISHED_IN]->(m) WHERE n.title = 'A New Cohomology Theory for Orbifold' RETURN m.name
 MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2000'}]->(m) WHERE n.article_id = '1008' RETURN m.name
 MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2001'}]->(m) WHERE n.`abstract` = '  Let F be a local net of von Neumann algebras in four spacetime dimensions satisfying certain natural structural assumptions. We prove that if F has trivial superselection structure then every covariant, Haag-dual subsystem B is the fixed point net under a compact group action on one component in a suitable tensor product decomposition of F. Then we discuss some application of our result, including free field models and certain theories with at most countably many sectors. ' RETURN m.name
 MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2001'}]->(m) WHERE n.article_id = '1139' RETURN m.journal_id
 MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2001'}]->(m) WHERE n.comments = '28 pages, LaTex' RETURN m.name
 MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2001'}]->(m) WHERE n.comments = '31 pages, LaTex' RETURN m.journal_id
 MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2002'}]->(m) WHERE n.comments = 'Latex, xypic, and AMS packages. 53 pages, 1 figure' RETURN m.name
 MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2002'}]->(m) WHERE n.title = 'Summation and transformation formulas for elliptic hypergeometric series' RETURN m.journal_id
 MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2004'}]->(m) WHERE n.article_id = '4129' RETURN m.name
 MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2004'}]->(m) WHERE n.comments = '19 pages, AMSLatex, references added' RETURN m.name
 MATCH (n:Article)-[pu:PUBLISHED_IN{`year`:'2004'}]->(m) WHERE n.title = 'A New Cohomology Theory for Orbifold' RETURN m.journal_id
 MATCH (n:Article)-[pu:PUBLISHED_IN{meta:'217'}]->(m) WHERE n.`abstract` = '  Let F be a local net of von Neumann algebras in four spacetime dimensions satisfying certain natural structural assumptions. We prove that if F has trivial superselection structure then every covariant, Haag-dual subsystem B is the fixed point net under a compact group action on one component in a suitable tensor product decomposition of F. Then we discuss some application of our result, including free field models and certain theories with at most countably many sectors. ' RETURN m.journal_id
 MATCH (n:Article)-[pu:PUBLISHED_IN{meta:'217'}]->(m) WHERE n.article_id = '2204' RETURN m.journal_id
 MATCH (n:Article)-[pu:PUBLISHED_IN{meta:'217'}]->(m) WHERE n.comments = 'latex, 38 pages, typos corrected' RETURN m.name
 MATCH (n:Article)-[pu:PUBLISHED_IN{meta:'217'}]->(m) WHERE n.title = 'Classification of Subsystems for Local Nets with Trivial Superselection   Structure' RETURN m.journal_id
 MATCH (n:Article)-[pu:PUBLISHED_IN{meta:'217'}]->(m) WHERE n.title = 'Geometrical Tools for Quantum Euclidean Spaces' RETURN m.journal_id
 MATCH (n:Article)-[pu:PUBLISHED_IN{meta:'218'}]->(m) WHERE n.article_id = '1139' RETURN m.journal_id
 MATCH (n:Article)-[pu:PUBLISHED_IN{meta:'222'}]->(m) WHERE n.article_id = '3082' RETURN m.journal_id
 MATCH (n:Article)-[pu:PUBLISHED_IN{meta:'222'}]->(m) WHERE n.title = 'Notes for a Quantum Index Theorem' RETURN m.name
 MATCH (n:Article)-[pu:PUBLISHED_IN{meta:'225'}]->(m) WHERE n.comments = '43 pages, 1 figure. Revised August 2001 to cut page length (eg   deleted appendix) for publication in CMP. Also fleshed out ex. of q-Killing   metric for q-SU_2 previously mentioned (no significant additions)' RETURN m.name
 MATCH (n:Article)-[pu:PUBLISHED_IN{meta:'227'}]->(m) WHERE n.article_id = '6147' RETURN m.name
 MATCH (n:Article)-[pu:PUBLISHED_IN{meta:'227'}]->(m) WHERE n.title = 'Generating Functional in CFT on Riemann Surfaces II: Homological Aspects' RETURN m.journal_id
 MATCH (n:Article)-[pu:PUBLISHED_IN{pages:'263-281'}]->(m) WHERE n.article_id = '1139' RETURN m.name
 MATCH (n:Article)-[pu:PUBLISHED_IN{pages:'293-299'}]->(m) WHERE n.comments = '6 pages' RETURN m.journal_id
 MATCH (n:Article)-[pu:PUBLISHED_IN{pages:'479-502'}]->(m) WHERE n.title = 'Summation and transformation formulas for elliptic hypergeometric series' RETURN m.name
 MATCH (n:Article)-[pu:PUBLISHED_IN{pages:'521-554'}]->(m) WHERE n.article_id = '2007' RETURN m.journal_id
 MATCH (n:Article)-[pu:PUBLISHED_IN{pages:'537-560'}]->(m) WHERE n.article_id = '5145' RETURN m.journal_id
 MATCH (n:Article)-[pu:PUBLISHED_IN{pages:'89-106'}]->(m) WHERE n.title = 'Classification of Subsystems for Local Nets with Trivial Superselection   Structure' RETURN m.journal_id
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.`year` <> '2000' RETURN DISTINCT n, m NEXT RETURN n.title AS title, count(m) AS `count` ORDER BY `count` DESC LIMIT 7
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.`year` <> '2002' RETURN DISTINCT n, m NEXT RETURN n.title AS title, count(m) AS `count` ORDER BY `count` DESC LIMIT 7
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.`year` = '2000' RETURN DISTINCT n, m NEXT RETURN n.`abstract` AS `abstract`, count(m) AS `count` ORDER BY `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.`year` = '2000' RETURN DISTINCT n, m NEXT RETURN n.article_id AS article_id, count(m) AS `count` ORDER BY `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.`year` = '2000' RETURN DISTINCT n, m NEXT RETURN n.title AS title, count(m) AS `count` LIMIT 20
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.`year` = '2002' RETURN n.`abstract` AS `abstract`, count(m) AS `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.`year` = '2004' RETURN DISTINCT n, m NEXT RETURN n.comments AS comments, count(m) AS `count` ORDER BY `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta <> '227' RETURN DISTINCT n, m NEXT RETURN n.article_id AS article_id, count(m) AS `count` ORDER BY `count` DESC LIMIT 7
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta <> '227' RETURN DISTINCT n, m NEXT RETURN n.title AS title, count(m) AS `count` ORDER BY `count` DESC LIMIT 7
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta <> '248' RETURN DISTINCT n, m NEXT RETURN n.`abstract` AS `abstract`, count(m) AS `count` ORDER BY `count` DESC LIMIT 7
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '18' RETURN DISTINCT n, m NEXT RETURN n.`abstract` AS `abstract`, count(m) AS `count` LIMIT 20
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '18' RETURN DISTINCT n, m NEXT RETURN n.article_id AS article_id, count(m) AS `count` LIMIT 20
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '18' RETURN DISTINCT n, m NEXT RETURN n.comments AS comments, count(m) AS `count` ORDER BY `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '18' RETURN n.title AS title, count(m) AS `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '213' RETURN DISTINCT n, m NEXT RETURN n.comments AS comments, count(m) AS `count` ORDER BY `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '217' RETURN DISTINCT n, m NEXT RETURN n.comments AS comments, count(m) AS `count` LIMIT 20
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '217' RETURN n.title AS title, count(m) AS `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '218' RETURN DISTINCT n, m NEXT RETURN n.comments AS comments, count(m) AS `count` ORDER BY `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '220' RETURN DISTINCT n, m NEXT RETURN n.`abstract` AS `abstract`, count(m) AS `count` ORDER BY `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '222' RETURN DISTINCT n, m NEXT RETURN n.title AS title, count(m) AS `count` ORDER BY `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '227' RETURN n.article_id AS article_id, count(m) AS `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '247' RETURN n.`abstract` AS `abstract`, count(m) AS `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '247' RETURN n.comments AS comments, count(m) AS `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.meta = '248' RETURN n.article_id AS article_id, count(m) AS `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages <> '263-281' RETURN DISTINCT n, m NEXT RETURN n.title AS title, count(m) AS `count` ORDER BY `count` DESC LIMIT 7
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages <> '45-96' RETURN DISTINCT n, m NEXT RETURN n.article_id AS article_id, count(m) AS `count` ORDER BY `count` DESC LIMIT 7
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages <> '479-502' RETURN DISTINCT n, m NEXT RETURN n.comments AS comments, count(m) AS `count` ORDER BY `count` DESC LIMIT 7
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '1-31' RETURN DISTINCT n, m NEXT RETURN n.comments AS comments, count(m) AS `count` ORDER BY `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '131-170' RETURN DISTINCT n, m NEXT RETURN n.`abstract` AS `abstract`, count(m) AS `count` LIMIT 20
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '131-170' RETURN n.title AS title, count(m) AS `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '263-281' RETURN DISTINCT n, m NEXT RETURN n.article_id AS article_id, count(m) AS `count` ORDER BY `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '263-281' RETURN n.title AS title, count(m) AS `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '293-299' RETURN n.article_id AS article_id, count(m) AS `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '303-348' RETURN DISTINCT n, m NEXT RETURN n.comments AS comments, count(m) AS `count` LIMIT 20
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '303-348' RETURN n.title AS title, count(m) AS `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '45-96' RETURN DISTINCT n, m NEXT RETURN n.comments AS comments, count(m) AS `count` LIMIT 20
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '521-554' RETURN DISTINCT n, m NEXT RETURN n.`abstract` AS `abstract`, count(m) AS `count` ORDER BY `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '521-554' RETURN DISTINCT n, m NEXT RETURN n.comments AS comments, count(m) AS `count` ORDER BY `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '527-551' RETURN DISTINCT n, m NEXT RETURN n.comments AS comments, count(m) AS `count` ORDER BY `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '527-551' RETURN n.comments AS comments, count(m) AS `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '537-560' RETURN DISTINCT n, m NEXT RETURN n.`abstract` AS `abstract`, count(m) AS `count` ORDER BY `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '537-560' RETURN DISTINCT n, m NEXT RETURN n.article_id AS article_id, count(m) AS `count` LIMIT 20
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '641-672' RETURN DISTINCT n, m NEXT RETURN n.title AS title, count(m) AS `count` LIMIT 20
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '641-672' RETURN DISTINCT n, m NEXT RETURN n.title AS title, count(m) AS `count` ORDER BY `count`
 MATCH (n:Article)-[r:PUBLISHED_IN]->(m:Journal) WHERE r.pages = '641-672' RETURN n.comments AS comments, count(m) AS `count`
 MATCH (n:Article)-[wr:WRITTEN_BY]->(m) WHERE n.article_id = '1006' RETURN m.author_id
 MATCH (n:Article)-[wr:WRITTEN_BY]->(m) WHERE n.article_id = '1009' RETURN m.affiliation
 MATCH (n:Article)-[wr:WRITTEN_BY]->(m) WHERE n.article_id = '1013' RETURN m.affiliation
 MATCH (n:Article)-[wr:WRITTEN_BY]->(m) WHERE n.comments = '18 pages, latex2e with amsfonts. Final version, accepted for   publication' RETURN m.affiliation
 MATCH (n:Article)-[wr:WRITTEN_BY]->(m) WHERE n.comments = '22 pages, to appear in Topology. http://jdc.math.uwo.ca Lots of minor   revisions. This version should closely match the published version' RETURN m.author_id
 MATCH (n:Article{`abstract`:'  I associate to a global field K a Lax-Phillips scattering which has the property of causality if and only if the Riemann Hypothesis holds for all the abelian L-functions of K. As a Hilbert space closure problem this provides an adelic variation on a theme initiated by Nyman and Beurling. The adelic aspects are related to previous work by Tate, Iwasawa and Connes. '}) RETURN n
 MATCH (n:Article{comments:'21 pages, AMS-LaTeX'}) RETURN n
 MATCH (n:Article{comments:'Published by Geometry and Topology at   http://www.maths.warwick.ac.uk/gt/GTVol4/paper14.abs.html'}) RETURN n
 MATCH (n:Author) MATCH (m:Article) RETURN n.last_name, m.article_id LIMIT 8
 MATCH (n:Author) MATCH (m:Author) RETURN n.last_name, m.author_id LIMIT 8
 MATCH (n:Author) MATCH (m:Categories) RETURN n.affiliation, m.specifications LIMIT 8
 MATCH (n:Author) MATCH (m:DOI) RETURN n.author_id, m.doi_id LIMIT 8
 MATCH (n:Author) MATCH (m:Journal) RETURN n.first_name, m.name LIMIT 8
 MATCH (n:Author) MATCH (m:Keyword) RETURN n.author_id, m.key_id LIMIT 8
 MATCH (n:Author) MATCH (m:Keyword) RETURN n.first_name, m.name LIMIT 8
 MATCH (n:Author) MATCH (m:Topic) RETURN n.last_name, m.cluster LIMIT 8
 MATCH (n:Author) RETURN n.affiliation AS `Records` MATCH (m:Article) RETURN m.comments AS `Records`
 MATCH (n:Author) RETURN n.affiliation AS `Records` MATCH (m:Author) RETURN m.affiliation AS `Records`
 MATCH (n:Author) RETURN n.affiliation AS `Records` MATCH (m:UpdateDate) RETURN m.update_date AS `Records`
 MATCH (n:Author) RETURN n.author_id
 MATCH (n:Author) RETURN n.author_id AS `Records` MATCH (m:Article) RETURN m.`abstract` AS `Records`
 MATCH (n:Author) RETURN n.author_id AS `Records` MATCH (m:Journal) RETURN m.journal_id AS `Records`
 MATCH (n:Author) RETURN n.first_name AS `Records` MATCH (m:Author) RETURN m.affiliation AS `Records`
 MATCH (n:Author) RETURN n.first_name AS `Records` MATCH (m:Author) RETURN m.author_id AS `Records`
 MATCH (n:Author) RETURN n.first_name AS `Records` MATCH (m:Topic) RETURN m.description AS `Records`
 MATCH (n:Author) RETURN n.last_name AS `Records` MATCH (m:Article) RETURN m.comments AS `Records`
 MATCH (n:Author) RETURN n.last_name AS `Records` MATCH (m:Author) RETURN m.affiliation AS `Records`
 MATCH (n:Author) RETURN n.last_name AS `Records` MATCH (m:Keyword) RETURN m.name AS `Records`
 MATCH (n:Author) RETURN n.last_name AS `Records` MATCH (m:UpdateDate) RETURN m.update_date AS `Records`
 MATCH (n:Author) WHERE n.author_id <> '13c7b3c4f69c510e94c671c881522bac' RETURN DISTINCT n.first_name AS first_name
 MATCH (n:Author) WHERE n.author_id <> 'ee24bab93b9531431f442226dd453745' RETURN DISTINCT n.first_name AS first_name
 MATCH (n:Author) WHERE n.first_name <> 'J. Daniel' RETURN DISTINCT n.affiliation AS affiliation
 MATCH (n:Author) WHERE n.first_name = 'Amnon' RETURN n
 MATCH (n:Author) WHERE n.first_name = 'Randall' RETURN n
 MATCH (n:Author) WHERE n.last_name <> 'Chakrabarti' RETURN DISTINCT n.author_id AS author_id
 MATCH (n:Author) WHERE n.last_name <> 'Christensen' RETURN DISTINCT n.affiliation AS affiliation
 MATCH (n:Author{author_id:'788db042978edbbfc654927e23ac21d1'}) RETURN n
 MATCH (n:Author{author_id:'ee24bab93b9531431f442226dd453745'}) RETURN n
 MATCH (n:Author{first_name:'Alexander'}) RETURN n
 MATCH (n:Campus) RETURN count(n)
 MATCH (n:Campus) WHERE n.County = 'Los Angeles' RETURN n.Campus
 MATCH (n:Campus{Campus:'San Francisco State University'})<-[:TEACHES]-(fee:CsuFee{`Year`:1996}) RETURN fee.CampusFee
 MATCH (n:Campus{Campus:'San Jose State University'})<-[:TEACHES]-(fee:CsuFee{`Year`:1996}) RETURN fee.CampusFee
 MATCH (n:CatalogContent) RETURN count(n)
 MATCH (n:Categories) MATCH (m:Author) RETURN n.specifications, m.author_id LIMIT 8
 MATCH (n:Categories) MATCH (m:UpdateDate) RETURN n.specifications, m.update_date LIMIT 8
 MATCH (n:Categories) RETURN n.category_id AS `Records` MATCH (m:DOI) RETURN m.name AS `Records`
 MATCH (n:Categories) RETURN n.category_id AS `Records` MATCH (m:Keyword) RETURN m.key_id AS `Records`
 MATCH (n:Categories) RETURN n.category_id AS `Records` MATCH (m:Topic) RETURN m.description AS `Records`
 MATCH (n:Categories) RETURN n.specifications AS `Records` MATCH (m:Article) RETURN m.title AS `Records`
 MATCH (n:Categories) RETURN n.specifications AS `Records` MATCH (m:DOI) RETURN m.doi_id AS `Records`
 MATCH (n:Categories) RETURN n.specifications AS `Records` MATCH (m:Topic) RETURN m.cluster AS `Records`
 MATCH (n:Categories) RETURN n.specifications AS `Records` MATCH (m:Topic) RETURN m.description AS `Records`
 MATCH (n:Categories) RETURN n.specifications AS `Records` MATCH (m:Topic) RETURN m.label AS `Records`
 MATCH (n:Categories) RETURN n.specifications SKIP 2 LIMIT 2
 MATCH (n:Categories) WHERE n.category_id = '33657234da1dc070ea09e7c31bb86abb' RETURN n
 MATCH (n:Categories) WHERE n.category_id = 'cb7bf6a30b0381c15264305ad7677b30' RETURN n
 MATCH (n:Categories{category_id:'4b7053a7def1fb0250a0e83ebd2f9a7b'}) RETURN n
 MATCH (n:Categories{category_id:'775271e2a118257e7308fe4c21c9d0b4'}) RETURN n
 MATCH (n:Categories{category_id:'978aee6db23fc939cec71ac05eb15b7a'}) RETURN n
 MATCH (n:Categories{specifications:'math.AT'}) RETURN n
 MATCH (n:Company) RETURN avg(n.Profits_billion) AS averageProfitInBillions
 MATCH (n:CsuFee) WHERE n.`Year` = 1996 RETURN avg(n.CampusFee)
 MATCH (n:CsuFee) WHERE n.`Year` = 2005 RETURN avg(n.CampusFee)
 MATCH (n:Department) RETURN n.Head AS head, count(n.DepartmentID) AS `count` ORDER BY `count` DESC LIMIT 1 NEXT RETURN head
 MATCH (n:Department) RETURN n.Head LIMIT 1
 MATCH (n:DocumentLocation) RETURN DISTINCT n.Location_Code
 MATCH (n:DocumentsToBeDestroyed) RETURN DISTINCT n.Destroyed_by_Employee_ID
 MATCH (n:DocumentsToBeDestroyed) RETURN DISTINCT n.Destruction_Authorised_by_Employee_ID
 MATCH (n:DOI) MATCH (m:Article) RETURN n.name, m.`abstract` LIMIT 8
 MATCH (n:DOI) MATCH (m:DOI) RETURN n.doi_id, m.doi_id LIMIT 8
 MATCH (n:DOI) MATCH (m:DOI) RETURN n.doi_id, m.name LIMIT 8
 MATCH (n:DOI) RETURN n.name AS `Records` MATCH (m:UpdateDate) RETURN m.update_date AS `Records`
 MATCH (n:DOI) WHERE n.doi_id <> '57aa19619324dcd39039c52e67002af3' RETURN DISTINCT n.name AS name
 MATCH (n:DOI) WHERE n.doi_id <> 'fe8768ee88f2d27ed51861639e63a4ff' RETURN DISTINCT n.doi_id AS doi_id
 MATCH (n:DOI) WHERE n.doi_id = '01c710839626aa78f11824682bccef1b' RETURN n
 MATCH (n:DOI) WHERE n.doi_id = '673313cb2dcde5d215a7e7ec2788f676' RETURN n
 MATCH (n:DOI) WHERE n.name = '10.1006/jnth.2000.2616' RETURN n
 MATCH (n:DOI) WHERE n.name = '10.1142/S0219061301000077' RETURN n
 MATCH (n:DOI{name:'10.1016/S0393-0440(00)00003-6'}) RETURN n
 MATCH (n:Gymnast) RETURN count(n)
 MATCH (n:Inst) RETURN count(n)
 MATCH (n:Journal) MATCH (m:Author) RETURN n.journal_id, m.author_id LIMIT 8
 MATCH (n:Journal) MATCH (m:Keyword) RETURN n.journal_id, m.key_id LIMIT 8
 MATCH (n:Journal) MATCH (m:Topic) RETURN n.journal_id, m.description LIMIT 8
 MATCH (n:Journal) RETURN n.journal_id AS `Records` MATCH (m:Author) RETURN m.affiliation AS `Records`
 MATCH (n:Journal) RETURN n.name AS `Records` MATCH (m:Author) RETURN m.last_name AS `Records`
 MATCH (n:Journal) RETURN n.name AS `Records` MATCH (m:DOI) RETURN m.doi_id AS `Records`
 MATCH (n:Journal) WHERE n.journal_id <> '79942321e19994e38ad2e372af21c893' RETURN DISTINCT n.journal_id AS journal_id
 MATCH (n:Journal) WHERE n.journal_id <> 'd3b321ed42589ea798c241aa7de23d2d' RETURN DISTINCT n.name AS name
 MATCH (n:Journal) WHERE n.journal_id = 'ebe5bed51965553359ee9f13db0293e1' RETURN n
 MATCH (n:Journal) WHERE n.name <> 'Commun.Math.Phys' RETURN DISTINCT n.name AS name
 MATCH (n:Journal) WHERE n.name = 'J.Diff.Eq' RETURN n
 MATCH (n:Journal{journal_id:'d3b321ed42589ea798c241aa7de23d2d'}) RETURN n
 MATCH (n:Keyword) MATCH (m:Journal) RETURN n.key_id, m.journal_id LIMIT 8
 MATCH (n:Keyword) RETURN n.key_id AS `Records` MATCH (m:Article) RETURN m.article_id AS `Records`
 MATCH (n:Keyword) RETURN n.key_id AS `Records` MATCH (m:Article) RETURN m.title AS `Records`
 MATCH (n:Keyword) RETURN n.key_id AS `Records` MATCH (m:Author) RETURN m.author_id AS `Records`
 MATCH (n:Keyword) RETURN n.name AS `Records` MATCH (m:Article) RETURN m.article_id AS `Records`
 MATCH (n:Keyword) RETURN n.name AS `Records` MATCH (m:Author) RETURN m.last_name AS `Records`
 MATCH (n:Keyword) RETURN n.name AS `Records` MATCH (m:Keyword) RETURN m.name AS `Records`
 MATCH (n:Keyword) RETURN n.name AS `Records` MATCH (m:Report) RETURN m.report_id AS `Records`
 MATCH (n:Keyword) WHERE n.key_id = '4969a8e0646cdb8842726781e7637625' RETURN n
 MATCH (n:Keyword) WHERE n.key_id = '72e4f3fc2930bd3a0a7730a664d069d6' RETURN n
 MATCH (n:Keyword) WHERE n.name <> 'tree (optimality criteria: minimum mean-squared error)  alternative keyword suggestions: - multiscale superpopulation models - independent innovations trees - water-' RETURN DISTINCT n.name AS name
 MATCH (n:Keyword) WHERE n.name = 'logarithmic barrier penalty' RETURN n
 MATCH (n:Keyword)-[ha:HAS_TOPIC]->(m) WHERE n.key_id = '0e45607b74a52b79f39c242abf265272' RETURN m.label
 MATCH (n:Keyword)-[ha:HAS_TOPIC]->(m) WHERE n.key_id = '4969a8e0646cdb8842726781e7637625' RETURN m.cluster
 MATCH (n:Keyword)-[ha:HAS_TOPIC]->(m) WHERE n.key_id = 'c807a6943bac079cc85fda45518ea7f4' RETURN m.label
 MATCH (n:Keyword)-[ha:HAS_TOPIC]->(m) WHERE n.name = 'layer-by-layer growth' RETURN m.description
 MATCH (n:Keyword)-[ha:HAS_TOPIC]->(m) WHERE n.name = 'log-balanced' RETURN m.cluster
 MATCH (n:Keyword)-[ha:HAS_TOPIC]->(m) WHERE n.name = 'logarithmic barrier penalty' RETURN m.label
 MATCH (n:Keyword)-[ha:HAS_TOPIC]->(m) WHERE n.name = 'tree (optimality criteria: minimum mean-squared error)  alternative keyword suggestions: - multiscale superpopulation models - independent innovations trees - water-' RETURN m.description
 MATCH (n:Keyword{key_id:'72e4f3fc2930bd3a0a7730a664d069d6'}) RETURN n
 MATCH (n:Keyword{key_id:'c807a6943bac079cc85fda45518ea7f4'}) RETURN n
 MATCH (n:Member) RETURN count(n.Level)
 MATCH (n:Musical) WHERE n.Nominee = 'Bob Fosse' RETURN n.Name
 MATCH (n:Network{ip:'10.2'}) RETURN n.`size`
 MATCH (n:Network{ip:'10.2'})-[:ROUTES]->(i:Interface) RETURN count(i)
 MATCH (n:Network{ip:'10.2'})-[:ROUTES]->(i:Interface) RETURN i.ip AS InterfaceIP
 MATCH (n:Network{ip:'10.4'})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(s:Switch{rack:8}) RETURN s.ip
 MATCH (n:Nurse) RETURN DISTINCT n.Name ORDER BY n.Name
 MATCH (n:RefDocumentStatu) RETURN n.document_status_code
 MATCH (n:RefIncidentType{incident_type_code:'VIOLENCE'}) RETURN n.incident_type_description
 MATCH (n:RefLocation) RETURN count(n)
 MATCH (n:RefLocation) RETURN n.Location_Code, n.Location_Name
 MATCH (n:RefLocation) WHERE n.Location_Code = 'x' RETURN n.Location_Name, n.Location_Description
 MATCH (n:RefLocation) WHERE n.Location_Name = 'Canada' RETURN n.Location_Code
 MATCH (n:RefShippingAgent) RETURN n.shipping_agent_name
 MATCH (n:RefShippingAgent) WHERE n.shipping_agent_name = 'UPS' RETURN n.shipping_agent_code
 MATCH (n:Report) MATCH (m:DOI) RETURN n.report_no, m.name LIMIT 8
 MATCH (n:Report) MATCH (m:Topic) RETURN n.report_id, m.description LIMIT 8
 MATCH (n:Report) RETURN n.report_id
 MATCH (n:Report) RETURN n.report_id AS `Records` MATCH (m:Categories) RETURN m.specifications AS `Records`
 MATCH (n:Report) RETURN n.report_id AS `Records` MATCH (m:DOI) RETURN m.doi_id AS `Records`
 MATCH (n:Report) RETURN n.report_id AS `Records` MATCH (m:Topic) RETURN m.cluster AS `Records`
 MATCH (n:Report) RETURN n.report_id SKIP 2 LIMIT 2
 MATCH (n:Report) RETURN n.report_no AS `Records` MATCH (m:Author) RETURN m.affiliation AS `Records`
 MATCH (n:Report) RETURN n.report_no AS `Records` MATCH (m:Journal) RETURN m.journal_id AS `Records`
 MATCH (n:Report) RETURN n.report_no AS `Records` MATCH (m:UpdateDate) RETURN m.update_date AS `Records`
 MATCH (n:Report) WHERE n.report_id = '3fa3ec8100d88908b00d139dacdedb6a' RETURN n
 MATCH (n:Report) WHERE n.report_id = '45009bf7f2e3f4f275de6d92deab7b27' RETURN n
 MATCH (n:Report) WHERE n.report_no <> 'PAM-780' RETURN DISTINCT n.report_no AS report_no
 MATCH (n:Report) WHERE n.report_no = 'SISSA: 39/99/FM/GEO' RETURN n
 MATCH (n:Report{report_id:'dd0a54fea06e7b7a384741aac9313d65'}) RETURN n
 MATCH (n:Report{report_no:'JNMP 4/2002 (Letter)'}) RETURN n
 MATCH (n:Timed_Status_of_Thing) RETURN COUNT(n.Status_of_Thing_Code)
 MATCH (n:Topic) MATCH (m:Article) RETURN n.cluster, m.article_id LIMIT 8
 MATCH (n:Topic) MATCH (m:Categories) RETURN n.cluster, m.specifications LIMIT 8
 MATCH (n:Topic) MATCH (m:Report) RETURN n.label, m.report_no LIMIT 8
 MATCH (n:Topic) MATCH (m:Topic) RETURN n.label, m.cluster LIMIT 8
 MATCH (n:Topic) RETURN count(n)
 MATCH (n:Topic) RETURN n.cluster AS `Records` MATCH (m:Author) RETURN m.author_id AS `Records`
 MATCH (n:Topic) RETURN n.cluster AS `Records` MATCH (m:DOI) RETURN m.name AS `Records`
 MATCH (n:Topic) RETURN n.cluster AS `Records` MATCH (m:Journal) RETURN m.journal_id AS `Records`
 MATCH (n:Topic) RETURN n.description AS `Records` MATCH (m:Article) RETURN m.comments AS `Records`
 MATCH (n:Topic) RETURN n.description AS `Records` MATCH (m:Report) RETURN m.report_id AS `Records`
 MATCH (n:Topic) RETURN n.label AS `Records` MATCH (m:Article) RETURN m.comments AS `Records`
 MATCH (n:Topic) RETURN n.label AS `Records` MATCH (m:Author) RETURN m.author_id AS `Records`
 MATCH (n:Topic) RETURN n.label AS `Records` MATCH (m:Keyword) RETURN m.key_id AS `Records`
 MATCH (n:Topic) RETURN n.label AS `Records` MATCH (m:Topic) RETURN m.description AS `Records`
 MATCH (n:Topic) WHERE n.cluster <> '5' RETURN DISTINCT n.label AS label
 MATCH (n:Topic) WHERE n.description = 'Collection of techniques and methods for studying the limiting behavior of functions, sequences, and series as certain parameters approach infinity or other special values. Includes concepts such as asymptotic expansions, asymptotic normality, scaling behavior, and Jost asymptotics. Emphasizes the study of asymptotic properties, asymptotic solutions, and asymptotic optimality. Also encompasses topics like approximate normality, asymptotic equivalents, asymptotic expansion of risk difference, and asymptotic relations. May involve the use of O(m log(m B)) notation to describe' RETURN n
 MATCH (n:Topic) WHERE n.description = 'Studies eigenvalues and eigenvectors of operators, analyzing how structures behave under various conditions in mathematics and physics.' RETURN n
 MATCH (n:Topic) WHERE n.label <> 'Category theory_3' RETURN DISTINCT n.label AS label
 MATCH (n:Topic) WHERE n.label <> 'Linear Algebra_1' RETURN DISTINCT n.description AS description
 MATCH (n:Topic) WHERE n.label <> 'Population Dynamics_0' RETURN DISTINCT n.description AS description
 MATCH (n:Topic) WHERE n.label = 'Category theory_3' RETURN n
 MATCH (n:Topic) WHERE n.label = 'Dynamical Systems_10' RETURN n
 MATCH (n:Topic) WHERE n.label = 'Mathematical Analysis_8' RETURN n
 MATCH (n:Topic) WHERE n.label = 'Mathematics_9' RETURN n
 MATCH (n:Topic{cluster:'11'}) RETURN n
 MATCH (n:Topic{label:'Category theory_3'}) RETURN n
 MATCH (n:UpdateDate) MATCH (m:Keyword) RETURN n.update_date, m.key_id LIMIT 8
 MATCH (n:UpdateDate) MATCH (m:Topic) RETURN n.update_date, m.label LIMIT 8
 MATCH (n:UpdateDate) RETURN n.update_date AS `Records` MATCH (m:Article) RETURN m.`abstract` AS `Records`
 MATCH (n:UpdateDate) RETURN n.update_date AS `Records` MATCH (m:Article) RETURN m.comments AS `Records`
 MATCH (n:UpdateDate) RETURN n.update_date AS `Records` MATCH (m:Author) RETURN m.author_id AS `Records`
 MATCH (n:UpdateDate) RETURN n.update_date AS `Records` MATCH (m:Author) RETURN m.last_name AS `Records`
 MATCH (n:UpdateDate) RETURN n.update_date AS `Records` MATCH (m:Categories) RETURN m.specifications AS `Records`
 MATCH (n:UpdateDate) RETURN n.update_date AS `Records` MATCH (m:Keyword) RETURN m.key_id AS `Records`
 MATCH (n:UpdateDate) WHERE n.update_date <> '2010-06-18' RETURN DISTINCT n.update_date AS update_date
 MATCH (n:UpdateDate) WHERE n.update_date = 2020 RETURN n.update_date
 MATCH (n:UpdateDate{update_date:'2010-06-18'}) RETURN n
 MATCH (n:User{name:'Neo4j'})-[:FOLLOWS]->(m:User{location:'Sweden'}) RETURN m.screen_name
 MATCH (n:User{name:'Neo4j'})-[:FOLLOWS]->(u:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(m:User{name:'Neo4j'}) RETURN u.name AS UserName, count(t) AS TweetsCount ORDER BY TweetsCount DESC LIMIT 5
 MATCH (n:User{screen_name:'neo4j'})-[:FOLLOWS]->(followed:User) RETURN followed NEXT MATCH (tweet:Tweet)-[:MENTIONS]->(followed) RETURN max(tweet.created_at) AS most_recent_tweet_date
 MATCH (n:User{screen_name:'neo4j'})<-[:FOLLOWS]-(follower) RETURN avg(follower.betweenness) AS average_betweenness NEXT RETURN average_betweenness
 MATCH (n) MATCH (n)-[r]->(m) RETURN n, r, m
 MATCH (neo:User{screen_name:'neo4j'})-[:FOLLOWS]->(follower:User) MATCH (follower)-[:POSTS]->(tweet:Tweet)-[:CONTAINS]->(link:Link) RETURN DISTINCT tweet
 MATCH (neo4j:Me{screen_name:'neo4j'})<-[:FOLLOWS]-(user:User) RETURN user.screen_name, user.name, user.followers, user.following, user.profile_image_url, user.url, user.location, user.statuses ORDER BY user.followers DESC LIMIT 5
 MATCH (neo4j:User{screen_name:'neo4j'})-[:POSTS]->(neo4jTweets:Tweet)-[:TAGS]->(commonHashtags:Hashtag) MATCH (otherTweets:Tweet)-[:TAGS]->(commonHashtags)<-[:TAGS]-(neo4jTweets) RETURN neo4j, neo4jTweets, commonHashtags NEXT MATCH (user:User)-[:POSTS]->(:Tweet)-[:RETWEETS]->(otherTweets) RETURN DISTINCT user.screen_name
 MATCH (neo4j:User{screen_name:'neo4j'})<-[:FOLLOWS]-(follower:User) RETURN avg(follower.followers) AS average_followers NEXT RETURN average_followers
 MATCH (o:Officer) RETURN o.name, o.lastEditTimestamp ORDER BY o.lastEditTimestamp DESC LIMIT 5
 MATCH (o:Officer) WHERE o.country_codes = 'KOR' RETURN o.name
 MATCH (o:Officer) WHERE o.country_codes = 'KOR' RETURN o.name AS officer_name, o.country_codes AS country_code
 MATCH (o:Officer)-[:intermediary_of]->(e:Entity) RETURN o, e
 MATCH (o:Officer)-[:officer_of]->(e:Entity) RETURN o, COUNT(e) AS entityCount ORDER BY entityCount DESC LIMIT 3 NEXT RETURN o.name AS officerName, entityCount
 MATCH (o:Officer)-[:officer_of]->(e:Entity{incorporation_date:'06-JAN-2006'}) RETURN o.name AS OfficerName
 MATCH (o:Officer)-[:officer_of]->(e1:Entity)-[:same_as]->(e2:Entity)-[:registered_address]->(a:Address) WHERE a.countries = 'Hong Kong' RETURN DISTINCT o.name
 MATCH (o:Officer)-[:registered_address]->(a:Address) WHERE a.countries = 'Bahamas' RETURN o.name, a.address LIMIT 3
 MATCH (o:Officer)-[r:officer_of{link:'shareholder of'}]->(e:Entity{incorporation_date:'10-JAN-2006'}) RETURN o.name AS officer_name, e.name AS entity_name
 MATCH (o:Officer{countries:'South Korea'}) RETURN o
 MATCH (o:Officer{name:'KIM SOO IN'})-[:officer_of]->(e:Entity) RETURN e.name AS entity_name
 MATCH (o:Officer{name:'MOSSFON SUBSCRIBERS LTD.'})-[:officer_of]->(e:Entity) RETURN e.internal_id
 MATCH (o:Officer{sourceID:'Panama Papers'}) RETURN count(o) AS officerCount
 MATCH (o:Order) RETURN min(o.orderDate) AS earliestOrderDate NEXT MATCH (o:Order{orderDate:earliestOrderDate})-[p:PURCHASED]-(c:Customer) RETURN c.customerID, c.companyName
 MATCH (o:Order) RETURN o ORDER BY o.freight DESC LIMIT 3
 MATCH (o:Order) RETURN o ORDER BY o.orderDate DESC LIMIT 3 NEXT RETURN o.orderID, o.orderDate, o.customerID, o.shipName, o.shipCity, o.shipCountry
 MATCH (o:Order) RETURN o.employeeID AS employeeID, COUNT(o) AS orderCount NEXT RETURN employeeID, orderCount ORDER BY orderCount DESC LIMIT 3
 MATCH (o:Order) RETURN o.orderID, o.freight ORDER BY toFloat(o.freight) DESC LIMIT 5
 MATCH (o:Order) RETURN o.shipAddress AS address, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 3 NEXT RETURN address, orderCount
 MATCH (o:Order) RETURN o.shipCity AS City, count(o) AS NumberOfShipments ORDER BY NumberOfShipments DESC LIMIT 5
 MATCH (o:Order) RETURN o.shipCountry AS shipCountry, avg(o.freight) AS averageFreight ORDER BY averageFreight DESC LIMIT 5 NEXT RETURN shipCountry, averageFreight
 MATCH (o:Order) WHERE o.freight > 100 RETURN o.orderID, o.freight ORDER BY toFloat(o.freight) DESC LIMIT 3
 MATCH (o:Order) WHERE o.shipCountry = 'Brazil' RETURN duration.inDays(o.orderDate) AS daysDifference NEXT RETURN avg(daysDifference) AS averageShippingTime
 MATCH (o:Order) WHERE o.shipCountry = 'USA' RETURN collect(o.shipRegion) AS shipRegions NEXT RETURN size(shipRegions) AS distinctShipRegions
 MATCH (o:Order)-[:ORDERS]->(p:`Product`) WHERE o.freight > 250 RETURN p.productName AS productName, o.freight AS freight LIMIT 5
 MATCH (o:Order)-[:ORDERS]->(p:`Product`) WHERE o.orderDate > '1997-01-01' RETURN p.productName AS productName, o.orderDate AS orderDate
 MATCH (o:Order)-[:ORDERS]->(p:`Product`) WHERE o.requiredDate < '1997-01-01' RETURN DISTINCT p.productName AS ProductName, p.productID AS ProductID
 MATCH (o:Order)-[:ORDERS]->(p:`Product`) WHERE o.shipCountry = 'France' RETURN o.orderID, o.shipName, o.shipCity, o.shipPostalCode, o.shipAddress, o.shipCountry, o.shipRegion, o.shipVia, o.shippedDate ORDER BY o.shippedDate LIMIT 3
 MATCH (o:Order)-[:ORDERS]->(p:`Product`)-[:PART_OF]->(c:Category) RETURN o, COUNT(c.categoryID) AS categoryCount NEXT RETURN o.orderID, o.orderDate, o.shipName, o.shipCity, o.shipCountry ORDER BY o.orderDate LIMIT 5
 MATCH (o:Order)-[r:ORDERS]->(p:`Product`) RETURN o, sum(r.quantity) AS totalQuantityPerOrder NEXT RETURN avg(totalQuantityPerOrder) AS averageQuantityPerOrder
 MATCH (o:Order)-[r:ORDERS]->(p:`Product`) RETURN o.orderID AS orderID, SUM(r.quantity) AS totalUnitsOrdered ORDER BY totalUnitsOrdered DESC LIMIT 5
 MATCH (o:Order)-[rel:ORDERS]->(p:`Product`) RETURN o, sum(rel.unitPrice) AS totalDiscount NEXT RETURN o.orderID, totalDiscount
 MATCH (o:Order)-[rel:ORDERS]->(p:`Product`) WHERE o.shipVia = '1' RETURN o, rel, p, toFloat(rel.unitPrice) AS revenue NEXT RETURN sum(revenue) AS totalRevenue
 MATCH (o:Order)-[rel:ORDERS]->(p:`Product`) WHERE rel.discount > 0 RETURN o, sum(rel.unitPrice) AS orderRevenue NEXT RETURN sum(orderRevenue) AS totalRevenue
 MATCH (o:Order)-[rel:ORDERS]->(p:`Product`) WHERE rel.quantity > 10 RETURN avg(rel.unitPrice) AS avgPrice NEXT RETURN avgPrice
 MATCH (o:Order{shipCountry:'Denmark'})-[:ORDERS]->(p:`Product`) RETURN avg(o.discount) AS averageDiscount NEXT RETURN averageDiscount
 MATCH (o:Order{shipCountry:'France'}) RETURN avg(o.freight) AS averageFreight NEXT RETURN averageFreight
 MATCH (o:Order{shipRegion:'NULL'}) RETURN o.orderID
 MATCH (o:Organization) MATCH (o)<-[:HAS_INVESTOR]-(p)-[:HAS_SUPPLIER]->(o) RETURN DISTINCT o.name
 MATCH (o:Organization) RETURN max(o.revenue) AS maxRevenue NEXT MATCH (org:Organization{revenue:maxRevenue}) MATCH (org)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) RETURN country.name
 MATCH (o:Organization) RETURN o.name AS organization_name, o.revenue AS organization_revenue ORDER BY o.revenue DESC LIMIT 3
 MATCH (o:Organization) RETURN o.name LIMIT 5
 MATCH (o:Organization) RETURN o.name, o.nbrEmployees ORDER BY o.nbrEmployees DESC LIMIT 5
 MATCH (o:Organization) RETURN sum(o.revenue) AS totalRevenue NEXT RETURN totalRevenue
 MATCH (o:Organization) WHERE o.isDissolved = false RETURN o.name, o.revenue ORDER BY o.revenue ASC LIMIT 3
 MATCH (o:Organization) WHERE o.isDissolved = true RETURN o.name LIMIT 3
 MATCH (o:Organization) WHERE o.motto <> '' RETURN o.name
 MATCH (o:Organization) WHERE o.nbrEmployees > 100 RETURN o
 MATCH (o:Organization) WHERE o.nbrEmployees > 1000 MATCH (a:Article)-[:MENTIONS]->(o) RETURN o NEXT RETURN a.title
 MATCH (o:Organization) WHERE o.nbrEmployees > 1000 MATCH (o)-[:HAS_BOARD_MEMBER]->(p:Person) RETURN o.name AS Organization, p.name AS BoardMember
 MATCH (o:Organization) WHERE o.revenue > 1.0E9 RETURN o.name, o.revenue
 MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person) RETURN o, COUNT(p) AS boardMemberCount NEXT RETURN o.name
 MATCH (o:Organization)-[:HAS_BOARD_MEMBER]->(p:Person) WHERE o.nbrEmployees > 1000 RETURN o.name AS organization, p.name AS board_member
 MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory) RETURN o, COUNT(c) AS categoryCount NEXT RETURN o.name
 MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory) RETURN o, count(c) AS categoryCount NEXT RETURN o.name AS organization, categoryCount
 MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory) RETURN o, COUNT(c) AS categoryCount NEXT RETURN o.name AS organizationName LIMIT 5
 MATCH (o:Organization)-[:HAS_CATEGORY]->(c:IndustryCategory{name:'Technology'}) RETURN o LIMIT 5
 MATCH (o:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory) RETURN cat, avg(o.revenue) AS avg_revenue ORDER BY avg_revenue DESC NEXT RETURN cat.name, avg_revenue LIMIT 1
 MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory) RETURN ic, count(o) AS numOrganizations ORDER BY numOrganizations DESC NEXT RETURN ic.name, numOrganizations
 MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory) RETURN ic, count(o) AS orgCount ORDER BY orgCount ASC LIMIT 1 NEXT RETURN ic.name AS industryName
 MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory) RETURN ic, count(o) AS orgCount ORDER BY orgCount DESC LIMIT 3 NEXT RETURN ic.name
 MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory) RETURN o, count(ic) AS numCategories NEXT RETURN o LIMIT 3
 MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory) WHERE o.isPublic = true RETURN ic, count(o) AS orgCount ORDER BY orgCount DESC LIMIT 3 NEXT RETURN ic.name AS IndustryCategory, orgCount
 MATCH (o:Organization)-[:HAS_CATEGORY]->(ic:IndustryCategory{name:'Electronic Products Manufacturers'}) RETURN o
 MATCH (o:Organization)-[:HAS_CEO]->(:Person{name:'Julie Spellman Sweet'})<-[:MENTIONS]-(a:Article) RETURN a LIMIT 5
 MATCH (o:Organization)-[:HAS_CEO]->(ceo:Person) MATCH (a:Article)-[:MENTIONS]->(o) RETURN o, a ORDER BY a.`date` DESC NEXT RETURN o.name AS organization, latest_article.title AS latest_article_title, latest_article.`date` AS latest_article_date ORDER BY latest_article_date DESC LIMIT 3
 MATCH (o:Organization)-[:HAS_CEO]->(p:Person) WHERE o.isDissolved = true RETURN p.name AS CEO, o.name AS Organization ORDER BY o.revenue DESC LIMIT 3
 MATCH (o:Organization)-[:HAS_CEO]->(p:Person{name:'Julie Spellman Sweet'}) RETURN o LIMIT 3
 MATCH (o:Organization)-[:HAS_CEO]->(p:Person{name:'Julie Spellman Sweet'}) RETURN o.name AS organization
 MATCH (o:Organization)-[:HAS_COMPETITOR]->(:Organization{name:'Apple'}) RETURN o.name AS OrganizationName LIMIT 3
 MATCH (o:Organization)-[:HAS_COMPETITOR]->(c:Organization) RETURN o, count(c) AS numCompetitors ORDER BY numCompetitors DESC LIMIT 3 NEXT RETURN o.name AS organization, numCompetitors
 MATCH (o:Organization)-[:HAS_COMPETITOR]->(c:Organization{name:'Apple'}) RETURN o.name AS organization ORDER BY o.name LIMIT 3
 MATCH (o:Organization)-[:HAS_INVESTOR]->(i:Person) RETURN o, COUNT(i) AS investorCount NEXT RETURN o.name AS organizationName LIMIT 3
 MATCH (o:Organization)-[:HAS_INVESTOR]->(i) RETURN o, COUNT(i) AS investorCount ORDER BY investorCount DESC NEXT RETURN o.name AS organizationName, investorCount LIMIT 10
 MATCH (o:Organization)-[:HAS_INVESTOR]->(p:Person) WHERE o.revenue > 500000000 RETURN p.name AS InvestorName, o.name AS OrganizationName LIMIT 3
 MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(:Organization) RETURN o.name AS organization, ceo.name AS ceo
 MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(s:Organization) RETURN o, COUNT(s) AS numSubsidiaries ORDER BY numSubsidiaries DESC LIMIT 1 NEXT RETURN o.name AS organizationName, numSubsidiaries
 MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(s:Organization) WHERE o.isDissolved = false RETURN o.name
 MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) RETURN o, count(country) AS countriesCount NEXT RETURN o.name AS Organization, countriesCount
 MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization{name:'SuccessFactors'}) RETURN o.name AS organization, sub.name AS subsidiary
 MATCH (o:Organization)-[:HAS_SUBSIDIARY]->(subsidiary:Organization) RETURN o.name AS CompanyName, COUNT(subsidiary) AS NumberOfSubsidiaries NEXT RETURN CompanyName ORDER BY NumberOfSubsidiaries DESC LIMIT 1
 MATCH (o:Organization)-[:HAS_SUPPLIER]->(s:Organization) RETURN o, COUNT(s) AS supplierCount ORDER BY supplierCount DESC LIMIT 1 NEXT MATCH (o)-[:IN_CITY]->(c:City) RETURN c.name AS city, supplierCount
 MATCH (o:Organization)-[:HAS_SUPPLIER]->(s:Organization) RETURN o.name AS organization, count(s) AS supplierCount ORDER BY supplierCount DESC LIMIT 5
 MATCH (o:Organization)-[:HAS_SUPPLIER]->(supplier:Organization{name:'Accenture'}) RETURN o.name AS OrganizationName
 MATCH (o:Organization)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(c:Country) WHERE o.revenue > 1E8 RETURN DISTINCT c.name LIMIT 3
 MATCH (o:Organization)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(c:Country{name:'Italy'}) MATCH (o)-[:HAS_BOARD_MEMBER]->(p:Person) RETURN p.name AS boardMember LIMIT 3
 MATCH (o:Organization)-[:IN_CITY]->(:City)-[:IN_COUNTRY]->(c:Country{name:'United States of America'}) WHERE o.nbrEmployees > 10000 RETURN o.name AS organization, o.nbrEmployees AS numberOfEmployees
 MATCH (o:Organization)-[:IN_CITY]->(:City{name:'Rome'}) MATCH (o)-[:HAS_CATEGORY]->(c:IndustryCategory) RETURN c.name AS category LIMIT 3
 MATCH (o:Organization)-[:IN_CITY]->(:City{name:'Seattle'}) MATCH (o)-[:HAS_CATEGORY]->(c:IndustryCategory) RETURN DISTINCT c.name
 MATCH (o:Organization)-[:IN_CITY]->(:City{name:'Seattle'}) MATCH (o)-[:HAS_CEO]->(ceo:Person) RETURN o.name AS organization, ceo.name AS ceo
 MATCH (o:Organization)-[:IN_CITY]->(c:City) RETURN c, count(o) AS orgCount ORDER BY orgCount DESC LIMIT 5 NEXT RETURN c.name AS cityName, orgCount
 MATCH (o:Organization)-[:IN_CITY]->(c:City) RETURN c, count(o) AS orgCount ORDER BY orgCount DESC NEXT RETURN c.name, orgCount LIMIT 1
 MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.isPublic = true RETURN c.name AS city, COUNT(o) AS publicOrganizations ORDER BY publicOrganizations DESC LIMIT 5
 MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.isPublic = true RETURN DISTINCT c.name
 MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.nbrEmployees > 300 RETURN DISTINCT c.name AS cityName
 MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.nbrEmployees > 500 RETURN c.name, count(o) AS numberOfOrganizations ORDER BY numberOfOrganizations DESC LIMIT 3
 MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.nbrEmployees > 500 RETURN DISTINCT c.name
 MATCH (o:Organization)-[:IN_CITY]->(c:City) WHERE o.revenue > 1000000 RETURN c, count(o) AS orgCount ORDER BY orgCount DESC NEXT RETURN c.name AS cityName, orgCount LIMIT 1
 MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(co:Country) RETURN co, COUNT(c) AS cityCount ORDER BY cityCount DESC LIMIT 3 NEXT RETURN co.name AS country, cityCount
 MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE country.name <> 'United States of America' RETURN DISTINCT o
 MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE country.name <> 'United States of America' RETURN o
 MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE o.nbrEmployees > 500 RETURN DISTINCT country.name LIMIT 3
 MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE o.revenue < 10000000 RETURN DISTINCT country.name
 MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) WHERE o.revenue > 50000000 RETURN DISTINCT country.name AS Country
 MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country{name:'Italy'}) WHERE o.isPublic = true RETURN o ORDER BY o.revenue DESC LIMIT 3
 MATCH (o:Organization)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country{name:'United States of America'}) RETURN o.name AS BusinessName, o.revenue AS Revenue ORDER BY o.revenue DESC LIMIT 1
 MATCH (o:Organization)-[:IN_CITY]->(c:City)<-[:MENTIONS]-(a:Article) WHERE a.sentiment > 0.5 RETURN o.name AS Organization, c.name AS City, a.title AS ArticleTitle, a.sentiment AS SentimentScore
 MATCH (o:Organization)-[:IN_CITY]->(c:City{name:'New York City'}) RETURN o.name AS OrganizationName, o.revenue AS Revenue ORDER BY o.revenue DESC LIMIT 5
 MATCH (o:Organization)-[:IN_CITY]->(c:City{name:'Seattle'}) MATCH (o)-[:HAS_CEO]->(p:Person) RETURN o.name AS Organization, p.name AS CEO
 MATCH (o:Organization)-[:IN_CITY]->(c:City{name:'Seattle'}) RETURN o.name AS Organization, o.nbrEmployees AS Employees ORDER BY o.nbrEmployees DESC LIMIT 1
 MATCH (o:Organization)-[:IN_CITY]->(c:City{name:'Seattle'}) WHERE o.revenue < 5000000 RETURN o
 MATCH (o:Organization)-[:IN_CITY]->(c:City{name:'Seattle'}) WHERE o.revenue > 10000000 RETURN o LIMIT 5
 MATCH (o:Organization)-[:IN_CITY]->(c:City{name:'Seattle'}) WHERE o.revenue > 10000000 RETURN o.name, o.revenue LIMIT 5
 MATCH (o:Organization)<-[:HAS_INVESTOR]-(investor:Organization{name:'Apple'}) RETURN o NEXT MATCH (o)-[:IN_CITY]->(c:City)-[:IN_COUNTRY]->(country:Country) RETURN DISTINCT country.name
 MATCH (o:Organization)<-[:MENTIONS]-(a:Article) WHERE a.sentiment < 0 RETURN o, COUNT(a) AS articleCount ORDER BY articleCount DESC LIMIT 3 NEXT RETURN o.name AS organizationName, articleCount
 MATCH (o:Organization)<-[:MENTIONS]-(a:Article) WHERE a.sentiment < 0.3 RETURN o, COUNT(a) AS articleCount ORDER BY articleCount DESC LIMIT 3 NEXT RETURN o.name AS organizationName, articleCount
 MATCH (o:Organization)<-[:MENTIONS]-(a:Article) WHERE a.sentiment < 0.3 RETURN o, count(a) AS negArticleCount ORDER BY negArticleCount DESC LIMIT 3 NEXT RETURN o.name AS organization, negArticleCount
 MATCH (o:Organization{isDissolved:true})<-[:MENTIONS]-(a:Article) RETURN a.title
 MATCH (o:Organization{isDissolved:true})<-[:MENTIONS]-(a:Article) RETURN a.title AS articleTitle, a.siteName AS articleSiteName
 MATCH (o:Organization{isPublic:false})-[:HAS_CEO]->(ceo:Person) RETURN ceo.name LIMIT 3
 MATCH (o:Organization{isPublic:true})-[:IN_CITY]->(c:City) RETURN c.name AS City, count(o) AS NumberOfPublicOrganizations ORDER BY NumberOfPublicOrganizations DESC LIMIT 1
 MATCH (o:Organization{isPublic:true})-[:IN_CITY]->(c:City) RETURN DISTINCT c.name
 MATCH (o:Organization{isPublic:true})<-[:MENTIONS]-(a:Article) WHERE a.sentiment > 0.5 RETURN DISTINCT o.name AS organization, a.title AS article, a.sentiment AS sentiment
 MATCH (o:Organization{name:'Accenture'})-[:HAS_COMPETITOR]->(competitor:Organization) RETURN competitor.name LIMIT 3
 MATCH (o:Organization{name:'Accenture'})-[:HAS_SUBSIDIARY]->(s:Organization) RETURN s.name AS subsidiaryName ORDER BY s.revenue DESC LIMIT 5
 MATCH (o:Organization{name:'Accenture'})<-[:HAS_SUBSIDIARY]-{1,3}(parent:Organization) RETURN parent.name LIMIT 3
 MATCH (o:Organization{name:'Accenture'})<-[:MENTIONS]-(a:Article) RETURN a ORDER BY a.`date` DESC LIMIT 3
 MATCH (o:Organization{name:'Accenture'})<-[:MENTIONS]-(a:Article) RETURN a.title, a.sentiment ORDER BY a.sentiment DESC LIMIT 1
 MATCH (o:Organization{name:'Accenture'})<-[:MENTIONS]-(a:Article) RETURN avg(a.sentiment) AS averageSentiment NEXT RETURN averageSentiment
 MATCH (o:Organization{name:'Neo4j'})-[:HAS_CEO]->(p:Person) RETURN p.name AS CEOName
 MATCH (o:Organization{name:'New Energy Group'})<-[:MENTIONS]-(a:Article) RETURN a
 MATCH (o:Organization{name:'New Energy Group'})<-[:MENTIONS]-(a:Article) RETURN a ORDER BY a.`date` DESC LIMIT 3
 MATCH (o:Organization{name:'Wipro'}) MATCH (o)-[:IN_CITY]->(c:City) MATCH (o)-[:HAS_CEO]->(ceo:Person) MATCH (o)-[:HAS_CATEGORY]->(ic:IndustryCategory) MATCH (o)-[:HAS_SUBSIDIARY]->(subsidiary:Organization) MATCH (o)-[:HAS_SUPPLIER]->(supplier:Organization) MATCH (o)-[:HAS_INVESTOR]->(investor) MATCH (o)-[:HAS_BOARD_MEMBER]->(board_member:Person) MATCH (o)-[:HAS_COMPETITOR]->(competitor:Organization) RETURN o.name AS OrganizationName, o.revenue AS Revenue, o.motto AS Motto, o.isDissolved AS IsDissolved, o.nbrEmployees AS NumberOfEmployees, o.summary AS Summary, o.isPublic AS IsPublic, c.name AS CityName, ceo.name AS CEOName, ic.name AS IndustryCategory, collect(subsidiary.name) AS Subsidiaries, collect(supplier.name) AS Suppliers, collect(investor.name) AS Investors, collect(board_member.name) AS BoardMembers, collect(competitor.name) AS Competitors
 MATCH (o:Other) RETURN o ORDER BY o.lastEditTimestamp DESC LIMIT 3
 MATCH (o1:Officer)-[:same_id_as]->(o2:Officer) RETURN o1, o2
 MATCH (oc:OperateCompany) RETURN MAX(oc.Group_Equity_Shareholding)
 MATCH (org:Organization)-[:HAS_BOARD_MEMBER]->(member:Person) MATCH (member)-[:HAS_CEO]->(:Organization)-[:HAS_CATEGORY]->(category:IndustryCategory) RETURN org, collect(category.name) AS industries NEXT RETURN org.name AS organizationName, industryDiversity
 MATCH (org:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory{name:'Electronic Products Manufacturers'}) MATCH (org)-[:HAS_CEO]->(ceo:Person) RETURN ceo.name AS CEOName, org.name AS OrganizationName
 MATCH (org:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory{name:'Electronic Products Manufacturers'}) MATCH (org)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) RETURN country, COUNT(org) AS orgCount ORDER BY orgCount DESC LIMIT 3 NEXT RETURN country.name AS Country, orgCount AS NumberOfOrganizations
 MATCH (org:Organization)-[:HAS_CATEGORY]->(cat:IndustryCategory{name:'Healthcare'}) MATCH (org)-[:HAS_BOARD_MEMBER]->(person:Person) RETURN org.name AS Organization, person.name AS BoardMember
 MATCH (org:Organization)-[:HAS_CEO]->(ceo:Person) RETURN ceo.name AS CEOName, org.name AS OrganizationName, org.revenue AS Revenue ORDER BY org.revenue DESC
 MATCH (org:Organization)-[:HAS_SUBSIDIARY]->(:Organization) MATCH (org)-[:HAS_CEO]->(ceo:Person) RETURN ceo.name AS CEOName, org.name AS OrganizationName
 MATCH (org:Organization)-[:HAS_SUBSIDIARY]->(sub:Organization) MATCH (sub)-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country) RETURN org, sub NEXT RETURN org.name AS organization_name
 MATCH (org:Organization)-[:HAS_SUPPLIER]->(supplier:Organization) RETURN country, count(org) AS orgCount ORDER BY orgCount DESC LIMIT 3 NEXT RETURN country.name AS countryName, orgCount
 MATCH (org:Organization)-[:IN_CITY]->(city:City) RETURN city, avg(org.nbrEmployees) AS average_employees NEXT RETURN avg(average_employees) AS avg_employees_in_large_cities
 MATCH (org:Organization)-[:IN_CITY]->(city:City) RETURN org, city, org.nbrEmployees AS numEmployees ORDER BY numEmployees DESC NEXT RETURN org.name AS organizationName, numEmployees LIMIT 1
 MATCH (org:Organization)-[:IN_CITY]->(city:City) WHERE city.name = 'Rome' RETURN sum(org.nbrEmployees) AS totalEmployees NEXT RETURN totalEmployees
 MATCH (org:Organization)-[:IN_CITY]->(city:City{name:'Seattle'}) MATCH (article:Article)-[:MENTIONS]->(org) RETURN article.title, article.`date`, article.sentiment ORDER BY article.sentiment DESC LIMIT 3
 MATCH (org:Organization)<-[:MENTIONS]-(article:Article) WHERE org.revenue > 1E9 RETURN article.title
 MATCH (org:Organization{isPublic:true})-[:HAS_CEO]->(ceo:Person) MATCH (ceo)-[:HAS_CHILD]->(child:Person) RETURN ceo.name AS CEO, child.name AS Child
 MATCH (org:Organization{isPublic:true})-[:IN_CITY]->(city:City)-[:IN_COUNTRY]->(country:Country{name:'United States of America'}) RETURN org.name AS organizationName
 MATCH (org1:Organization) WHERE org1.nbrEmployees > 1000 MATCH (org1)<-[:MENTIONS]-(article:Article)-[:MENTIONS]->(org2:Organization) RETURN DISTINCT org2.name
 MATCH (org1)<-[:HAS_SUPPLIER]-(supplier)-[:HAS_CEO]->(ceo) RETURN DISTINCT ceo, org1 NEXT MATCH (org1)-[:HAS_COMPETITOR]->(competitor)-[:HAS_CEO]->(ceo) RETURN DISTINCT ceo.name
 MATCH (os:OS{name:'RHEL'})-[:INSTANCE]->(version:Version) RETURN version.name LIMIT 3
 MATCH (oslo:Article{prodName:'Oslo dress'})-[:CUSTOMERS_ALSO_LIKE]->(liked:Article)-[:VARIANT_OF]->(product:`Product`{prodName:'AUTUMN TANK'}) RETURN liked.colourGroupName
 MATCH (p:`Procedure`) RETURN max(p.Cost), min(p.Cost), avg(p.Cost)
 MATCH (p:`Procedure`) RETURN p.Name ORDER BY p.Cost LIMIT 3
 MATCH (p:`Product`) RETURN avg(p.pages_per_minute_color)
 MATCH (p:`Product`) RETURN COUNT(p)
 MATCH (p:`Product`) RETURN max(p.max_page_size) AS maxPageSize NEXT RETURN maxPageSize
 MATCH (p:`Product`) RETURN max(p.unitPrice) AS maxPrice NEXT MATCH (p:`Product`{unitPrice:maxPrice}) MATCH (s:Supplier)-[:SUPPLIES]->(p) RETURN s.companyName
 MATCH (p:`Product`) RETURN p ORDER BY p.unitPrice DESC LIMIT 1 NEXT MATCH (s:Supplier)-[:SUPPLIES]->(p) RETURN s.companyName
 MATCH (p:`Product`) RETURN p, p.reorderLevel AS reorderLevel ORDER BY reorderLevel DESCENDING NEXT RETURN p.productName LIMIT 1
 MATCH (p:`Product`) RETURN p.Product_Name ORDER BY p.Product_Price ASC
 MATCH (p:`Product`) RETURN p.Product_Name ORDER BY p.Product_Price DESC LIMIT 1
 MATCH (p:`Product`) RETURN p.Product_Name, p.Product_Type_Code
 MATCH (p:`Product`) RETURN p.Product_Type_Code AS code, COUNT(p) AS `count` ORDER BY `count` DESC LIMIT 1 NEXT RETURN code
 MATCH (p:`Product`) RETURN p.Product_Type_Code AS Product_Type_Code, COUNT(p) AS `count` NEXT RETURN Product_Type_Code
 MATCH (p:`Product`) RETURN p.productName, p.unitsInStock ORDER BY p.unitsInStock ASC LIMIT 5
 MATCH (p:`Product`) WHERE p.discontinued = false RETURN p ORDER BY p.unitsOnOrder DESC LIMIT 1 NEXT RETURN p.productName, p.categoryID
 MATCH (p:`Product`) WHERE p.discontinued = true RETURN p.productName, p.unitPrice ORDER BY p.unitPrice DESC LIMIT 5
 MATCH (p:`Product`) WHERE p.quantityPerUnit = '10 boxes x 20 bags' RETURN p.productName AS productName
 MATCH (p:`Product`) WHERE p.reorderLevel = 30 RETURN p LIMIT 5
 MATCH (p:`Product`) WHERE p.reorderLevel > 20 RETURN p.productName, p.reorderLevel ORDER BY p.productName LIMIT 3
 MATCH (p:`Product`) WHERE p.reorderLevel > 20 RETURN p.productName, p.reorderLevel ORDER BY p.reorderLevel DESC LIMIT 5
 MATCH (p:`Product`) WHERE p.unitsOnOrder > 20 RETURN p
 MATCH (p:`Product`) WHERE p.unitsOnOrder > 30 RETURN p
 MATCH (p:`Product`) WHERE p.unitsOnOrder > 50 RETURN p
 MATCH (p:`Product`)-[:ORDERS]->(o:Order) RETURN p.productName, count(o) AS reorderCount ORDER BY reorderCount DESC LIMIT 5
 MATCH (p:`Product`)-[:PART_OF]->(c:Category) RETURN c, count(p) AS productCount ORDER BY productCount DESC LIMIT 5 NEXT RETURN c.categoryName, productCount
 MATCH (p:`Product`)-[:PART_OF]->(c:Category) RETURN c.categoryName AS category, avg(p.unitPrice) AS avgUnitPrice ORDER BY avgUnitPrice DESC LIMIT 3 NEXT RETURN category, avgUnitPrice
 MATCH (p:`Product`)-[:PART_OF]->(c:Category) RETURN c.categoryName AS category, COUNT(p) AS productCount ORDER BY productCount ASC LIMIT 3 NEXT RETURN category, productCount
 MATCH (p:`Product`)-[:PART_OF]->(c:Category) RETURN c.categoryName AS category, SUM(p.unitsInStock) AS totalUnitsInStock ORDER BY totalUnitsInStock DESC LIMIT 5 NEXT RETURN category, totalUnitsInStock
 MATCH (p:`Product`)-[:PART_OF]->(c:Category) RETURN c.categoryName AS CategoryName, AVG(p.unitPrice) AS AvgUnitPrice ORDER BY AvgUnitPrice DESC NEXT RETURN CategoryName, AvgUnitPrice LIMIT 3
 MATCH (p:`Product`)-[:PART_OF]->(c:Category) RETURN c.categoryName AS categoryName, avg(p.unitsInStock) AS averageUnitsInStock NEXT RETURN categoryName, averageUnitsInStock
 MATCH (p:`Product`)-[:PART_OF]->(c:Category) WHERE p.discontinued = TRUE RETURN c.categoryName AS categoryName, count(p) AS discontinuedCount ORDER BY discontinuedCount DESC NEXT RETURN categoryName, discontinuedCount LIMIT 1
 MATCH (p:`Product`)-[:PART_OF]->(c:Category) WHERE p.reorderLevel < 10 RETURN c LIMIT 5
 MATCH (p:`Product`)-[:PART_OF]->(c:Category) WHERE p.unitPrice < 10 RETURN DISTINCT c.categoryName
 MATCH (p:`Product`)-[:PART_OF]->(c:Category) WHERE p.unitsInStock < 10 RETURN DISTINCT c
 MATCH (p:`Product`)-[:PART_OF]->(c:Category) WHERE p.unitsOnOrder = 0 RETURN DISTINCT c.categoryName LIMIT 3
 MATCH (p:`Product`)-[:PART_OF]->(c:Category) WHERE p.unitsOnOrder > 0 RETURN c.categoryName AS category, COUNT(p) AS productCount ORDER BY productCount ASC LIMIT 3 NEXT RETURN category, productCount
 MATCH (p:`Product`)-[:PART_OF]->(c:Category) WHERE p.unitsOnOrder > 50 RETURN DISTINCT c.categoryName
 MATCH (p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Condiments'}) RETURN p.productName, p.quantityPerUnit ORDER BY p.quantityPerUnit DESC LIMIT 3
 MATCH (p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Confections'}) MATCH (s:Supplier{country:'Sweden'})-[:SUPPLIES]->(p:`Product`) RETURN collect(o.orderID) AS confectionOrders NEXT MATCH (cust:Customer)-[:PURCHASED]->(o:Order{orderID:orderId}) RETURN DISTINCT cust.companyName
 MATCH (p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Confections'}) RETURN MAX(p.unitsOnOrder) AS MaxUnitsOnOrder
 MATCH (p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Confections'}) WHERE p.unitPrice > 75 RETURN p.productName, p.unitPrice
 MATCH (p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Dairy Products'}) RETURN p.productName, p.unitPrice ORDER BY p.unitPrice DESC LIMIT 3
 MATCH (p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Dairy Products'}) RETURN p.productName, p.unitsInStock ORDER BY p.unitsInStock DESC LIMIT 5
 MATCH (p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Produce'}) MATCH (o:Order)-[r:ORDERS]->(p) RETURN p.productName, COUNT(r) AS orderCount ORDER BY orderCount DESC LIMIT 5
 MATCH (p:`Product`)-[:PART_OF]->(c:Category{description:'Desserts, candies, and sweet breads'}) WHERE p.reorderLevel > 15 RETURN p
 MATCH (p:`Product`)-[:PART_OF]->(c:Category{description:'Desserts, candies, and sweet breads'}) WHERE p.unitsOnOrder > 5 RETURN p.productName, p.unitsOnOrder
 MATCH (p:`Product`)-[:SUPPLIES]-(s:Supplier) RETURN s.supplierID, p.productName, p.unitPrice ORDER BY p.unitPrice DESC LIMIT 1
 MATCH (p:`Product`)-[o:ORDERS]->(:Order) RETURN p, AVG(o.discount) AS avgDiscount ORDER BY avgDiscount DESC LIMIT 3 NEXT RETURN p.productName, avgDiscount
 MATCH (p:`Product`)-[o:ORDERS]->(:Order) RETURN p.productName AS productName, COUNT(o.unitPrice) AS priceVariations ORDER BY priceVariations DESC LIMIT 3 NEXT RETURN productName, priceVariations
 MATCH (p:`Product`)-[o:ORDERS]->() RETURN p, sum(o.quantity) AS totalQuantity ORDER BY totalQuantity DESC LIMIT 5 NEXT RETURN p.productName, totalQuantity
 MATCH (p:`Product`)<-[:ORDERS]-(o:Order) RETURN p, o ORDER BY o.discount DESC LIMIT 3 NEXT RETURN p.productName AS productName, o.discount AS discount
 MATCH (p:`Product`{discontinued:true}) RETURN p.productName, p.productID ORDER BY p.productID LIMIT 5
 MATCH (p:`Product`{prodName:'Timeless Highwaist'})<-[:VARIANT_OF]-(a:Article)-[:FROM_DEPARTMENT]->(d:Department) RETURN d.departmentName, d.departmentNo
 MATCH (p:`Product`{Product_Name:'Dining'}) RETURN p.Product_Price AS ProductPrice MATCH (p:`Product`{Product_Name:'Trading Policy'}) RETURN p.Product_Price AS ProductPrice
 MATCH (p:`Product`{productName:'Aniseed Syrup'})-[:ORDERS]->(o:Order) RETURN p, o, toFloat(o.unitPrice) AS revenue NEXT RETURN sum(revenue) AS totalRevenue
 MATCH (p:`Product`{productName:'Chai'})-[:SUPPLIES]-(s:Supplier) MATCH (s)-[:SUPPLIES]-(otherProducts:`Product`) RETURN DISTINCT otherProducts.productName
 MATCH (p:`Product`{productName:'Chai'})<-[:ORDERS]-(o:Order) RETURN DISTINCT o.shipCity AS shipCity
 MATCH (p:`Product`{productName:'Chai'})<-[:ORDERS]-(o:Order)<-[:PURCHASED]-(c:Customer) RETURN c.companyName, COUNT(o) AS orderCount ORDER BY orderCount DESC LIMIT 5
 MATCH (p:`Product`{productName:'Chang'})<-[:SUPPLIES]-(s:Supplier) RETURN s.contactName
 MATCH (p:Package) RETURN p ORDER BY p.price DESC LIMIT 3
 MATCH (p:Package) RETURN p.name AS package, p.price AS price ORDER BY p.price DESC LIMIT 3
 MATCH (p:Package) RETURN p.name, p.`duration` ORDER BY p.`duration` DESC LIMIT 5
 MATCH (p:Package)-[:PROVIDES_ACCESS_TO]->(g:Genre) RETURN g, count(p) AS packagesCount ORDER BY packagesCount DESC NEXT RETURN g.name AS Genre, packagesCount LIMIT 3
 MATCH (p:Package)-[:PROVIDES_ACCESS_TO]->(g:Genre{name:'Animation'}) RETURN p LIMIT 3
 MATCH (p:Package)-[:PROVIDES_ACCESS_TO]->(g:Genre{name:'Animation'}) RETURN p.name AS package
 MATCH (p:Paper) RETURN count(p)
 MATCH (p:paper)-[:paper_in_domain]->(d:domain) RETURN d, COUNT(p) AS numPapers NEXT RETURN d.name ORDER BY numPapers DESC LIMIT 1
 MATCH (p:paper)-[:paper_in_venue]->(c:conference{name:'ACL'}) MATCH (p)-[:paper_in_domain]->(:domain{name:'Machine Translation'}) RETURN p.name
 MATCH (p:paper{name:'A sequential algorithm for training text classifiers'})<-[:paper_cite_paper]-(c:paper) RETURN c.name
 MATCH (p:Patient)-[:HAS_ALLERGY]->(:Allergy) RETURN COUNT(p) AS PatientsNum
 MATCH (p:Patient)-[:HAS_ALLERGY]->(a:Allergy) RETURN COUNT(p) AS numPatients, COLLECT(a.name) AS allergies
 MATCH (p:Patient)-[:HAS_ALLERGY]->(a:Allergy{name:'Peanuts'}) RETURN DISTINCT p
 MATCH (p:Patient)-[:HAS_APPOINTMENT]->(a:Appointment) MATCH (p)-[:HAS_CHRONIC_DISEASE]->(d:Disease) WHERE a.reason = 'New Patient' RETURN DISTINCT p
 MATCH (p:Patient)-[:HAS_APPOINTMENT]->(a:Appointment) WHERE a.reason = 'Follow-up' RETURN p NEXT MATCH (p)-[:HAD_SURGERY]->() RETURN p
 MATCH (p:Patient)-[:HAS_PRESCRIPTION]->(:Prescription)-[:OF_MEDICATION]->(m:Medication{name:'Insulin'}) RETURN count(p) AS numPatients, COLLECT(p.name) AS patients
 MATCH (p:Patient)-[h:HAD_SURGERY]->(s:Surgery)-[:OF_TYPE]->(st:SurgeryType) RETURN p.name AS patient, s, st.name AS surgeryType NEXT RETURN patient, surgeryTypes
 MATCH (p:Person) RETURN avg(p.Weight), min(p.Weight), p.Sex
 MATCH (p:Person) RETURN count(p.Hometown)
 MATCH (p:Person) RETURN count(p.Hometown) AS hometowns NEXT RETURN hometowns
 MATCH (p:Person) RETURN p.Age ORDER BY p.Height DESC LIMIT 1
 MATCH (p:Person) RETURN p.Name ORDER BY p.Age DESC LIMIT 5
 MATCH (p:Person) RETURN p.Name ORDER BY p.Date_of_Birth
 MATCH (p:Person) RETURN p.Name ORDER BY p.Name ASC
 MATCH (p:Person) RETURN p.name, p.born ORDER BY p.born ASC LIMIT 3
 MATCH (p:Person) WHERE p.born < 1960 RETURN p.name
 MATCH (p:Person) WHERE p.Sex = 'M' RETURN avg(p.Height), avg(p.Weight)
 MATCH (p:Person) WHERE p.Sex = 'M' RETURN AVG(p.Height), AVG(p.Weight)
 MATCH (p:Person)-[:ACTED_IN]->(:Movie) RETURN DISTINCT p.name LIMIT 3
 MATCH (p:Person)-[:ACTED_IN]->(m:Movie) MATCH (actor:Person)-[:ACTED_IN]->(:Movie) RETURN p, count(m) AS movies_count NEXT RETURN total_actors AS percentage
 MATCH (p:Person)-[:ACTED_IN]->(m:Movie) RETURN m, count(p) AS actorCount NEXT RETURN m.title, actorCount
 MATCH (p:Person)-[:ACTED_IN]->(m:Movie) RETURN m.title AS MovieTitle, m.released AS ReleaseYear
 MATCH (p:Person)-[:ACTED_IN]->(m:Movie) RETURN p, COUNT(m) AS movieCount NEXT RETURN p.name AS actor, movieCount ORDER BY movieCount DESC LIMIT 5
 MATCH (p:Person)-[:ACTED_IN]->(m:Movie) RETURN p, count(m) AS movies_count ORDER BY movies_count DESC NEXT RETURN p.name, movies_count LIMIT 3
 MATCH (p:Person)-[:ACTED_IN]->(m:Movie) RETURN p.name, COUNT(m) AS movies_count ORDER BY movies_count DESC LIMIT 10
 MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WHERE m.released = 2012 RETURN p.name LIMIT 3
 MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WHERE m.title = 'Pearl Harbour' RETURN p.name
 MATCH (p:Person)-[:ACTED_IN]->(m:Movie) WHERE p.born > 1980 RETURN p, count(m) AS numMovies NEXT RETURN p.name AS actor, numMovies
 MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p) RETURN m.title AS movie, p.name AS person
 MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p) RETURN m.title LIMIT 3
 MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p) RETURN p.name AS person_name, m.title AS movie_title
 MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p) RETURN p.name AS personName, m.title AS movieTitle
 MATCH (p:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(p) RETURN p.name, m.title
 MATCH (p:Person)-[:ACTED_IN]->(m:Movie{title:'Titanic'}) RETURN p.name
 MATCH (p:Person)-[:CAST_FOR]->(m:Movie) RETURN p, count(m) AS moviesCount, count(a) AS adultCount NEXT RETURN p.name LIMIT 5
 MATCH (p:Person)-[:CAST_FOR]->(m:Movie) RETURN p, count(m) AS num_movies ORDER BY num_movies DESC LIMIT 5 NEXT RETURN p.name AS actor, num_movies
 MATCH (p:Person)-[:CAST_FOR]->(m:Movie) RETURN p.name, count(m) AS movies_count ORDER BY movies_count DESC LIMIT 5
 MATCH (p:Person)-[:CAST_FOR]->(m:Movie) WHERE m.average_vote > 7.5 RETURN p, count(m) AS movieCount NEXT RETURN p.name
 MATCH (p:Person)-[:CAST_FOR]->(m:Movie) WHERE m.runtime > 180 RETURN DISTINCT p.name
 MATCH (p:Person)-[:CAST_FOR]->(m:Movie)-[:PRODUCED_BY]->(pc:ProductionCompany) MATCH (p)-[:CAST_FOR]->(m2:Movie) RETURN p, COUNT(pc) AS productionCompanyCount NEXT RETURN p.name AS actor, firstThreeMovies LIMIT 3
 MATCH (p:Person)-[:CREW_FOR{job:'Director'}]->(m:Movie) RETURN p, avg(m.average_vote) AS avg_vote NEXT RETURN p.name AS director, avg_vote ORDER BY avg_vote DESC LIMIT 3
 MATCH (p:Person)-[:CREW_FOR{job:'Director'}]->(m:Movie) WHERE m.budget > 150000000 RETURN p.name LIMIT 3
 MATCH (p:Person)-[:DIRECTED]->(:Movie) RETURN p NEXT MATCH (p)-[:PRODUCED]->(:Movie) RETURN DISTINCT p.name
 MATCH (p:Person)-[:DIRECTED]->(m:Movie) MATCH (p)-[:WROTE]->(m) RETURN m.title AS movie_title
 MATCH (p:Person)-[:DIRECTED]->(m:Movie) RETURN m.title, p.born ORDER BY p.born ASC LIMIT 1
 MATCH (p:Person)-[:DIRECTED]->(m:Movie) RETURN p, COUNT(m) AS directedMovies ORDER BY directedMovies DESC LIMIT 1 NEXT RETURN p.name AS director, directedMovies
 MATCH (p:Person)-[:DIRECTED]->(m:Movie) RETURN p.name AS director, m.title AS movie, m.released AS age_at_release ORDER BY age_at_release ASC LIMIT 1
 MATCH (p:Person)-[:DIRECTED]->(m:Movie) WHERE m.votes > 200 RETURN p, count(m) AS num_movies ORDER BY num_movies DESC LIMIT 5 NEXT RETURN p.name AS director, num_movies
 MATCH (p:Person)-[:DIRECTED]->(m:Movie) WHERE p.born < 1950 RETURN count(p)
 MATCH (p:Person)-[:DIRECTED]->(m:Movie) WHERE p.born > 1960 RETURN m.title
 MATCH (p:Person)-[:DIRECTED]->(m:Movie) WHERE p.born > 1960 RETURN m.title AS MovieTitle, p.name AS DirectorName
 MATCH (p:Person)-[:DIRECTED]->(m:Movie) WHERE p.born > 1970 RETURN m.title AS MovieTitle, m.released AS ReleaseYear
 MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:PRODUCED]-(p) RETURN m.title AS movie
 MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:PRODUCED]-(p) RETURN m.title AS MovieTitle LIMIT 3
 MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:PRODUCED]-(p)-[:ACTED_IN]->(m) RETURN p.name, collect(m.title) AS movies ORDER BY size(movies) DESC LIMIT 3
 MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[:REVIEWED]-(p) RETURN p.name LIMIT 3
 MATCH (p:Person)-[:DIRECTED]->(m:Movie)<-[r:REVIEWED]-() WHERE r.rating > 95 RETURN DISTINCT p.name
 MATCH (p:Person)-[:DIRECTED]->(m:Movie{title:'The Matrix'}) RETURN p.name
 MATCH (p:Person)-[:DIRECTED]->(m:Movie{title:'V for Vendetta'}) WHERE p.born > 1960 RETURN p.name, p.born ORDER BY p.born DESC LIMIT 3
 MATCH (p:Person)-[:FOLLOWS]->(actor:Person) RETURN actor, count(p) AS followers ORDER BY followers DESC LIMIT 3 NEXT RETURN actor.name, followers
 MATCH (p:Person)-[:HAS_BOARD_MEMBER]-(o:Organization)-[:IN_CITY]->(:City{name:'Houston'}) RETURN p.name AS person, o.name AS organization
 MATCH (p:Person)-[:HAS_BOARD_MEMBER]->(o:Organization) RETURN p, count(o) AS orgCount NEXT RETURN p.name AS BoardMember, orgCount
 MATCH (p:Person)-[:HAS_BOARD_MEMBER]->(o:Organization) RETURN p, count(o) AS orgCount NEXT RETURN p.name LIMIT 5
 MATCH (p:Person)-[:HAS_BOARD_MEMBER]->(o:Organization) WHERE o.nbrEmployees > 1000 RETURN p
 MATCH (p:Person)-[:HAS_INVESTOR]->(o:Organization) RETURN p, count(o) AS numOrgs NEXT RETURN p LIMIT 5
 MATCH (p:Person)-[:HAS_INVESTOR]->(o:Organization) RETURN p, count(o) AS numOrgs NEXT RETURN p.name, numOrgs ORDER BY numOrgs DESC LIMIT 3
 MATCH (p:Person)-[:PRODUCED]->(m:Movie) RETURN m, count(p) AS producers_count NEXT RETURN m.title AS Movie, producers_count
 MATCH (p:Person)-[:PRODUCED]->(m:Movie) RETURN p.name, p.born, count(m) AS movies_produced ORDER BY movies_produced DESC LIMIT 5
 MATCH (p:Person)-[:PRODUCED]->(m:Movie) WHERE m.votes < 100 RETURN p.name
 MATCH (p:Person)-[:PRODUCED]->(m:Movie) WHERE m.votes > 500 RETURN p.name LIMIT 3
 MATCH (p:Person)-[:PRODUCED]->(m:Movie) WHERE p.born > 1960 RETURN m LIMIT 5
 MATCH (p:Person)-[:PRODUCED]->(m:Movie)<-[:WROTE]-(p) RETURN p.name AS person, m.title AS movie
 MATCH (p:Person)-[:REVIEWED]->(m:Movie) RETURN p, count(m) AS reviewCount ORDER BY reviewCount DESC LIMIT 1 NEXT RETURN p.name AS reviewerName, reviewCount
 MATCH (p:Person)-[:REVIEWED]->(m:Movie) WHERE p.born > 1970 RETURN m ORDER BY m.released ASC LIMIT 3
 MATCH (p:Person)-[:REVIEWED{summary:'Silly, but fun'}]->(m:Movie) RETURN p, count(m) AS movieCount ORDER BY movieCount DESC LIMIT 1 NEXT RETURN p.name AS personName, movieCount
 MATCH (p:Person)-[:WROTE]->(:Movie) RETURN p.name, p.born ORDER BY p.born DESC LIMIT 5
 MATCH (p:Person)-[:WROTE]->(m:Movie)<-[:DIRECTED]-(p) RETURN DISTINCT p.name
 MATCH (p:Person)-[:WROTE]->(m:Movie)<-[r:REVIEWED]-() RETURN p, avg(r.rating) AS average_rating NEXT RETURN p.name, average_rating ORDER BY average_rating DESC LIMIT 1
 MATCH (p:Person)-[a:ACTED_IN]->(m:Movie) RETURN p, sum(a.roles) AS totalRoles ORDER BY totalRoles DESC LIMIT 3 NEXT RETURN p.name AS PersonName, totalRoles
 MATCH (p:Person)-[a:ACTED_IN]->(m:Movie)<-[r:REVIEWED]-(p) RETURN p.name, m.title, a.roles, r.summary, r.rating
 MATCH (p:Person)-[cf:CREW_FOR]->(m:Movie) WHERE cf.job = 'Director' RETURN p, count(m) AS movieCount NEXT RETURN p.name, movieCount
 MATCH (p:Person)-[e:WORKS_AT]->(c:Company) WHERE c.Sales_in_Billion > 200 RETURN p.Name
 MATCH (p:Person)-[r:ACTED_IN]->(m:Movie) RETURN m.title AS Movie, r.roles AS Roles ORDER BY size(r.roles) DESC LIMIT 1
 MATCH (p:Person)-[r:ACTED_IN]->(m:Movie) RETURN p, count(r.roles) AS distinctRoles ORDER BY distinctRoles DESC LIMIT 3 NEXT RETURN p.name, distinctRoles
 MATCH (p:Person)-[r:ACTED_IN]->(m:Movie) RETURN p, r.roles AS roles NEXT RETURN p.name AS actor, uniqueRolesCount ORDER BY uniqueRolesCount DESC LIMIT 3
 MATCH (p:Person)-[r:ACTED_IN]->(m:Movie) RETURN p, size(r.roles) AS roleDiversity NEXT RETURN p.name AS actor, roleDiversity ORDER BY roleDiversity DESC LIMIT 3
 MATCH (p:Person)-[r:ACTED_IN]->(m:Movie) RETURN p.name AS person, m.title AS movie, size(r.roles) AS num_roles ORDER BY num_roles DESC LIMIT 1
 MATCH (p:Person)-[r:ACTED_IN]->(m:Movie{title:'Speed Racer'}) RETURN p.name, r.roles
 MATCH (p:Person)-[r:ACTED_IN]->(m:Movie{title:'Speed Racer'}) RETURN p.name, r.roles LIMIT 3
 MATCH (p:Person)-[r:CREW_FOR]->(m:Movie) WHERE r.job = 'Director' RETURN p, count(m) AS films_directed ORDER BY films_directed DESC LIMIT 5 NEXT RETURN p.name AS Director, films_directed
 MATCH (p:Person)-[r:CREW_FOR]->(m:Movie) WHERE r.job = 'Producer' RETURN p.name, count(r) AS credits ORDER BY credits DESC LIMIT 3
 MATCH (p:Person)-[r:CREW_FOR]->(m:Movie) WHERE r.job = 'Producer' RETURN p.name, COUNT(r) AS producer_credits ORDER BY producer_credits DESC LIMIT 3
 MATCH (p:Person)-[r:REVIEWED]->(m:Movie) RETURN m.title AS movie, r.rating AS rating, r.summary AS review ORDER BY r.rating DESC LIMIT 3
 MATCH (p:Person)-[r:REVIEWED]->(m:Movie) RETURN p, avg(r.rating) AS avg_rating NEXT RETURN p.name, avg_rating ORDER BY avg_rating DESC LIMIT 1
 MATCH (p:Person)-[r:REVIEWED]->(m:Movie) RETURN p, avg(r.rating) AS avg_rating ORDER BY avg_rating DESC LIMIT 3 NEXT RETURN p.name AS reviewer, avg_rating
 MATCH (p:Person)-[r:REVIEWED]->(m:Movie) RETURN p, count(m) AS movies_reviewed NEXT RETURN p LIMIT 3
 MATCH (p:Person)-[r:REVIEWED]->(m:Movie) RETURN p, r, m ORDER BY r.rating ASC LIMIT 1 NEXT RETURN p.name AS reviewer, m.title AS movie, r.rating AS rating
 MATCH (p:Person)-[r:REVIEWED]->(m:Movie) RETURN p.name, count(m) AS movies_reviewed ORDER BY movies_reviewed DESC LIMIT 1
 MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE m.released < 2000 RETURN p, count(r) AS reviews ORDER BY reviews DESC LIMIT 3 NEXT RETURN p.name AS PersonName, reviews AS NumberOfReviews
 MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE p.born > 1980 RETURN avg(r.rating) AS average_rating
 MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE r.rating = 100 RETURN p.name
 MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE r.rating > 90 RETURN m.title AS MovieTitle LIMIT 3
 MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE r.rating > 90 RETURN p, count(m) AS moviesReviewed ORDER BY moviesReviewed DESC LIMIT 1 NEXT RETURN p.name AS reviewer, moviesReviewed
 MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE r.rating > 90 RETURN p.name
 MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE r.summary = 'Fun, but a little far fetched' RETURN m.title, r.rating
 MATCH (p:Person)-[r:REVIEWED]->(m:Movie) WHERE r.summary = 'Pretty funny at times' RETURN p.name ORDER BY r.rating DESC LIMIT 3
 MATCH (p:Person)-[r:REVIEWED]->(m:Movie{title:'Speed Racer'}) RETURN p.name AS reviewer, r.rating AS rating
 MATCH (p:Person)<-[:FOLLOWS]-(follower:Person) RETURN p, COUNT(follower) AS followerCount ORDER BY followerCount DESC LIMIT 5 NEXT RETURN p.name AS personName, followerCount
 MATCH (p:Person)<-[:HAS_CEO]-(o:Organization) WHERE o.isPublic = true RETURN p.name AS name, p.id AS id LIMIT 3
 MATCH (p:Person{id:63303}) RETURN p.name
 MATCH (p:Person{name:'봉준호'})-[:CREW_FOR{job:'Director'}]->(m:Movie) RETURN m.title AS MovieTitle
 MATCH (p:Person{name:'Christopher Nolan'})-[:CREW_FOR{job:'Director'}]->(m:Movie) RETURN m.title
 MATCH (p:Person{name:'Jeremy Allen White'})-[:ACTED_IN]->(m:Movie) RETURN COUNT(m) AS movies_played
 MATCH (p:Person{name:'Joel Silver'})-[:PRODUCED]->(m:Movie) RETURN m.title AS MovieTitle, m.released AS ReleaseYear
 MATCH (p:Person{name:'Joel Silver'})-[:PRODUCED]->(m:Movie) RETURN sum(m.votes) AS total_votes
 MATCH (p:Person{name:'Julie Spellman Sweet'}) MATCH (p)<-[:HAS_CEO]-(o:Organization) RETURN o.id
 MATCH (p:Person{name:'Julie Spellman Sweet'})-[:HAS_CHILD]->(child:Person) RETURN child LIMIT 3
 MATCH (p:Person{name:'Julie Spellman Sweet'})<-[:HAS_BOARD_MEMBER]-(o:Organization) RETURN o
 MATCH (p:Person{name:'Keanu Reeves'})-[:ACTED_IN]->(m:Movie) RETURN m.title AS movie, m.released AS `year` ORDER BY m.released LIMIT 3
 MATCH (p:Person{name:'Lana Wachowski'})-[:DIRECTED]->(m:Movie) MATCH (producer:Person)-[:PRODUCED]->(m) RETURN DISTINCT producer.name
 MATCH (p:Person{name:'Laurence Fishburne'})-[:PRODUCED]->(m:Movie) WHERE m.released >= 2001 RETURN m ORDER BY m.released ASC LIMIT 3
 MATCH (p:Person{name:'Nancy Meyers'})-[:DIRECTED]->(m:Movie) MATCH (a:Person)-[:ACTED_IN]->(m) RETURN DISTINCT a.name
 MATCH (p:Person{name:'Nancy Meyers'})-[:WROTE]->(m:Movie) RETURN m.title AS MovieTitle, m.released AS ReleaseYear ORDER BY m.released LIMIT 3
 MATCH (p:Person{name:'Tim Allen'})-[:CAST_FOR]->(m:Movie{title:'Crazy on the Outside'}) RETURN m.title AS MovieTitle, p.name AS ActorName, m.id AS MovieID
 MATCH (p:Person{name:'Tom Hanks'})-[:CAST_FOR]->(m:Movie) RETURN avg(m.budget)
 MATCH (p:Person{name:'Tom Hanks'})-[:CAST_FOR]->(m:Movie) RETURN m
 MATCH (p:Person{summary:'CEO at Accenture'})<-[:HAS_CEO]-(o:Organization) RETURN o.name
 MATCH (p:Port) RETURN p ORDER BY p.port DESC LIMIT 1 NEXT MATCH (i:Interface)-[:EXPOSES]->(p) RETURN i.ip
 MATCH (p:Port{port:80})<-[:EXPOSES]-(i:Interface) RETURN i.ip ORDER BY i.ip LIMIT 3
 MATCH (p:Port{port:80})<-[:LISTENS]-(s:Service) RETURN s.name
 MATCH (p:Post)<-[:THREAD_PARENT]-(c:Comment) RETURN p, count(c) AS commentsPerThread NEXT RETURN avg(commentsPerThread) AS averageCommentsPerThread
 MATCH (p:Process)-[:LISTENS]->(port:Port) RETURN p.name AS process_name, port.port AS port_number ORDER BY port_number DESC LIMIT 1
 MATCH (p:Process)-[:LISTENS]->(port:Port{port:80}) RETURN p ORDER BY p.startTime DESC LIMIT 3
 MATCH (p:Process{name:'webserver'})-[:RUNS]->(m:Machine)-[:ROUTES]->(i:Interface)-[:EXPOSES]->(port:Port) RETURN i.ip AS InterfaceIP, dc.name AS DataCenterName, dc.location AS DataCenterLocation
 MATCH (p:Process{pid:8966})-[:DEPENDS_ON]->(s:Service) RETURN s.name
 MATCH (p:Process{pid:8966})<-[:DEPENDS_ON]-(a:Application) RETURN a.name
 MATCH (p:Process{pid:8966})<-[:DEPENDS_ON]-(a:Application) RETURN a.name LIMIT 5
 MATCH (p:ProductionCompany)<-[:PRODUCED_BY]-(m:Movie) WHERE m.runtime > 180 RETURN p.name AS ProductionCompany, COUNT(m) AS NumberOfMovies ORDER BY NumberOfMovies DESC LIMIT 3
 MATCH (p:ProductionCompany)<-[:PRODUCED_BY]-(m:Movie)-[:ORIGINAL_LANGUAGE]->(l:Language{id:'en'}) RETURN p.name AS ProductionCompany, COUNT(m) AS FilmCount ORDER BY FilmCount DESC LIMIT 3
 MATCH (p:ProductionCompany{name:'Lucasfilm'})<-[:PRODUCED_BY]-(m:Movie) RETURN m.title ORDER BY m.popularity DESC LIMIT 3
 MATCH (p:ProductionCompany{name:'Pixar Animation Studios'})<-[:PRODUCED_BY]-(m:Movie) WHERE m.budget > 100000000 RETURN m.title AS MovieTitle, m.budget AS Budget ORDER BY m.budget DESC LIMIT 3
 MATCH (p:Publication) RETURN COUNT(p.Publication_Date)
 MATCH (p:Publication) RETURN count(p.Publication_Date) AS num NEXT RETURN num
 MATCH (p:Publication) RETURN p.Publication_Date ORDER BY p.Price DESC
 MATCH (p:Publication) RETURN p.Publisher AS Publisher, COUNT(p) AS `count` NEXT RETURN Publisher
 MATCH (p:Publication) RETURN p.Publisher ORDER BY p.Price DESC LIMIT 1
 MATCH (p:Publication) WHERE p.Price > 5000000 RETURN DISTINCT p.Publisher
 MATCH (parent:Organization)-[:HAS_SUBSIDIARY]->(subsidiary:Organization) RETURN parent, COUNT(subsidiary) AS subsidiaryCount NEXT RETURN parent.name AS organizationName, subsidiaryCount ORDER BY subsidiaryCount DESC LIMIT 3
 MATCH (parent:Organization)-[:HAS_SUBSIDIARY]->(subsidiary:Organization) RETURN subsidiary ORDER BY subsidiary.revenue DESC LIMIT 1 NEXT RETURN subsidiary.name
 MATCH (parent:Organization{name:'Accenture'})-[:HAS_SUBSIDIARY]->(subsidiary:Organization) RETURN subsidiary.name AS subsidiaryName
 MATCH (parentOrg:Organization)-[:HAS_SUBSIDIARY]->(subOrg:Organization) RETURN parentOrg, COUNT(subOrg) AS numSubsidiaries NEXT RETURN parentOrg.name AS OrganizationName, numSubsidiaries
 MATCH (parentOrg:Organization)-[:HAS_SUBSIDIARY]->(subsidiary:Organization) WHERE subsidiary.isDissolved = true RETURN parentOrg.name AS ParentOrganization, subsidiary.name AS DissolvedSubsidiary
 MATCH (pc:ProductionCompany)-[:PRODUCED_BY]-(m:Movie)-[:SPOKEN_IN_LANGUAGE]->(l:Language) RETURN pc, count(l) AS languages_count NEXT RETURN pc.name, languages_count ORDER BY languages_count DESC LIMIT 3
 MATCH (pc:ProductionCompany)<-[:PRODUCED_BY]-(m:Movie) RETURN pc, COUNT(m) AS movie_count ORDER BY movie_count DESC LIMIT 5 NEXT RETURN pc.name AS production_company, movie_count
 MATCH (pc:ProductionCompany)<-[:PRODUCED_BY]-(m:Movie) RETURN pc, SUM(m.budget) AS total_budget ORDER BY total_budget DESC LIMIT 3 NEXT RETURN pc.name AS production_company, total_budget
 MATCH (pc:ProductionCompany)<-[:PRODUCED_BY]-(m:Movie) WHERE m.budget > 100000000 RETURN pc.name AS production_company, COUNT(m) AS movie_count ORDER BY movie_count DESC LIMIT 3
 MATCH (people:people) RETURN people.Name, people.Birth_Date ORDER BY people.Name ASC
 MATCH (pets:Pets) RETURN avg(pets.pet_age), max(pets.pet_age), pets.PetType
 MATCH (prodCompany:ProductionCompany{name:'Pixar Animation Studios'}) MATCH (prodCompany)-[:PRODUCED_BY]->(movie:Movie) RETURN avg(movie.budget) AS averageBudget NEXT RETURN averageBudget
 MATCH (q:Question) RETURN min(q.createdAt) AS earliestDate, max(q.createdAt) AS latestDate NEXT RETURN duration.inSeconds(earliestDate) AS timeDifference
 MATCH (q:Question) RETURN q ORDER BY q.answer_count DESC LIMIT 3 NEXT MATCH (q)-[:TAGGED]->(t:Tag) RETURN q.title, q.answer_count, collect(t.name) AS tags
 MATCH (q:Question) RETURN q ORDER BY q.createdAt ASC LIMIT 1
 MATCH (q:Question) RETURN q ORDER BY q.createdAt DESC LIMIT 3
 MATCH (q:Question) RETURN q ORDER BY q.creation_date LIMIT 5
 MATCH (q:Question) RETURN q ORDER BY q.downVotes DESC LIMIT 3
 MATCH (q:Question) RETURN q ORDER BY q.downVotes DESC LIMIT 5
 MATCH (q:Question) RETURN q ORDER BY q.favorites DESC LIMIT 5
 MATCH (q:Question) RETURN q ORDER BY q.score DESC LIMIT 5
 MATCH (q:Question) RETURN q ORDER BY q.upVotes DESC LIMIT 5
 MATCH (q:Question) RETURN q ORDER BY q.view_count DESC LIMIT 1 NEXT MATCH (u:User)-[:ASKED]->(q) RETURN u.display_name
 MATCH (q:Question) RETURN q ORDER BY q.view_count DESC LIMIT 5 NEXT MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q) RETURN DISTINCT u.display_name AS user, q.title AS question_title, q.view_count AS views ORDER BY views DESC
 MATCH (q:Question) RETURN q, q.downVotes AS num_downvotes ORDER BY num_downvotes DESC LIMIT 1 NEXT RETURN q.title
 MATCH (q:Question) RETURN q.title, q.createdAt ORDER BY q.createdAt DESC LIMIT 3
 MATCH (q:Question) RETURN q.title, q.downVotes ORDER BY q.downVotes DESC LIMIT 5
 MATCH (q:Question) RETURN q.title, q.favorites ORDER BY q.favorites DESC LIMIT 3
 MATCH (q:Question) RETURN q.title, q.score ORDER BY q.score ASC LIMIT 3
 MATCH (q:Question) RETURN sum(q.upVotes) AS totalUpvotes NEXT RETURN totalUpvotes
 MATCH (q:Question) WHERE q.answer_count = 0 RETURN q LIMIT 3
 MATCH (q:Question) WHERE q.answer_count = 0 RETURN q ORDER BY q.creation_date ASC LIMIT 3
 MATCH (q:Question) WHERE q.answer_count = 0 RETURN q ORDER BY q.view_count DESC LIMIT 3
 MATCH (q:Question) WHERE q.answer_count = 0 RETURN q.title, q.link, q.view_count ORDER BY q.view_count DESC LIMIT 5
 MATCH (q:Question) WHERE q.answer_count > 1 RETURN q.title, q.link, q.creation_date ORDER BY q.creation_date DESC LIMIT 5
 MATCH (q:Question) WHERE q.answer_count > 2 RETURN q ORDER BY q.creation_date LIMIT 3
 MATCH (q:Question) WHERE q.answered = false RETURN q.title, q.link, q.createdAt ORDER BY q.createdAt DESC LIMIT 5
 MATCH (q:Question) WHERE q.answered = true RETURN count(q) AS AnsweredQuestionsCount
 MATCH (q:Question) WHERE q.answered = true RETURN q ORDER BY q.upVotes DESC LIMIT 3
 MATCH (q:Question) WHERE q.answered = true RETURN q.title, q.downVotes ORDER BY q.downVotes DESC LIMIT 3
 MATCH (q:Question) WHERE q.score < 0 RETURN q.title, q.score, q.link ORDER BY q.score ASC LIMIT 3
 MATCH (q:Question) WHERE q.score < 0 RETURN q.title, q.score, q.link ORDER BY q.score ASC LIMIT 5
 MATCH (q:Question) WHERE q.score < 3 RETURN q.title, q.text, q.link, q.createdAt ORDER BY q.createdAt DESC LIMIT 5
 MATCH (q:Question) WHERE q.score = 0 RETURN q ORDER BY q.createdAt LIMIT 3
 MATCH (q:Question) WHERE q.text > 500 RETURN q.title AS title, q.text AS text, q.link AS link, q.createdAt AS createdAt
 MATCH (q:Question)-[:ANSWERED]-(a:Answer) RETURN q, a ORDER BY q.view_count DESC LIMIT 3 NEXT RETURN a.link AS answer_link, a.score AS answer_score, a.body_markdown AS answer_body
 MATCH (q:Question)-[:ANSWERED]-(a:Answer) WHERE a.is_accepted = true RETURN q.title AS question_title, q.view_count AS view_count, q.link AS question_link ORDER BY q.view_count DESC LIMIT 3
 MATCH (q:Question)-[:COMMENTED_ON]-(c:Comment) RETURN q, COUNT(c) AS commentCount NEXT RETURN q.title AS questionTitle, q.view_count AS viewCount ORDER BY viewCount DESC LIMIT 3
 MATCH (q:Question)-[:TAGGED]->(t:Tag) RETURN q, COUNT(t) AS tagCount ORDER BY tagCount DESC LIMIT 1 NEXT MATCH (u:User)-[:ASKED]->(q) RETURN u.display_name AS userName, q.title AS questionTitle, tagCount
 MATCH (q:Question)-[:TAGGED]->(t:Tag) RETURN q, size(t) AS tagCount ORDER BY tagCount DESC LIMIT 1 NEXT RETURN q.title
 MATCH (q:Question)-[:TAGGED]->(t:Tag) RETURN q, t ORDER BY q.view_count DESC LIMIT 3 NEXT RETURN DISTINCT t.name AS tag_name
 MATCH (q:Question)-[:TAGGED]->(t:Tag) RETURN t, COUNT(q) AS question_count ORDER BY question_count DESC LIMIT 3 NEXT RETURN t.name AS tag_name, question_count
 MATCH (q:Question)-[:TAGGED]->(t:Tag) RETURN t, count(q) AS questionCount NEXT RETURN t.name AS tagName, questionCount
 MATCH (q:Question)-[:TAGGED]->(t:Tag) RETURN t.name AS tag, COUNT(q) AS frequency ORDER BY frequency DESC LIMIT 3
 MATCH (q:Question)-[:TAGGED]->(t:Tag) WHERE q.score < 0 RETURN t.name, count(q) AS usage ORDER BY usage DESC LIMIT 5
 MATCH (q:Question)-[:TAGGED]->(t:Tag) WHERE q.score = 0 RETURN DISTINCT t.name AS tag
 MATCH (q:Question)-[:TAGGED]->(t:Tag) WHERE q.score = 0 RETURN q.title AS question_title, q.text AS question_text, q.link AS question_link, q.createdAt AS created_at, collect(t.name) AS tags
 MATCH (q:Question)-[:TAGGED]->(t:Tag{name:'apollo'}) WHERE q.answered = true RETURN q ORDER BY q.createdAt ASC LIMIT 3
 MATCH (q:Question)-[:TAGGED]->(t:Tag{name:'apollo'}) WHERE q.downVotes > 0 RETURN q ORDER BY q.createdAt LIMIT 5
 MATCH (q:Question)-[:TAGGED]->(t:Tag{name:'aws-lambda'}) RETURN q ORDER BY q.createdAt LIMIT 5
 MATCH (q:Question)-[:TAGGED]->(t:Tag{name:'aws-lambda'}) RETURN q.title, q.link, q.score ORDER BY q.score DESC LIMIT 5
 MATCH (q:Question)-[:TAGGED]->(t:Tag{name:'aws-lambda'}) WHERE q.score = 0 RETURN q.title AS title, q.link AS link, q.createdAt AS createdAt, q.id AS id
 MATCH (q:Question)-[:TAGGED]->(t:Tag{name:'aws-lambda'}) WHERE q.score > 1 RETURN q.text
 MATCH (q:Question)-[:TAGGED]->(t:Tag{name:'graphql-subscriptions'}) RETURN q.title AS title, q.text AS text, q.link AS link, q.createdAt AS createdAt, q.id AS id, q.upVotes AS upVotes, q.downVotes AS downVotes, q.score AS score, q.favorites AS favorites, q.answered AS answered
 MATCH (q:Question)-[:TAGGED]->(t:Tag{name:'graphql'}) RETURN avg(q.favorites) AS average_favorites NEXT RETURN average_favorites
 MATCH (q:Question)-[:TAGGED]->(t:Tag{name:'graphql'}) RETURN q ORDER BY q.score DESC LIMIT 5 NEXT RETURN q
 MATCH (q:Question)-[:TAGGED]->(t:Tag{name:'neo4j'}) MATCH (a:Answer)-[:ANSWERED]->(q) RETURN a.link, a.title, a.body_markdown, a.uuid ORDER BY a.uuid DESC LIMIT 3
 MATCH (q:Question)-[:TAGGED]->(t:Tag{name:'react-apollo'}) WHERE q.score < 0 RETURN q
 MATCH (q:Question)-[:TAGGED]->(t1:Tag{name:'apollo'}) WHERE q.score = 0 MATCH (q)-[:TAGGED]->(t2) RETURN DISTINCT t2.name AS tag
 MATCH (q:Question)-[:TAGGED]->(tag1:Tag{name:'graphql'}) MATCH (q)-[:TAGGED]->(tag2:Tag{name:'apollo'}) RETURN count(q)
 MATCH (q:Question)<-[:ANSWERED]-(a:Answer) RETURN q, SUM(a.score) AS totalAnswerScore ORDER BY totalAnswerScore DESC LIMIT 3 NEXT RETURN q.title AS questionTitle, totalAnswerScore
 MATCH (q:Question)<-[:ANSWERED]-(a:Answer) WHERE a.score < 1 RETURN DISTINCT q.uuid
 MATCH (q:Question)<-[:ASKED]-(u:User) RETURN q.title AS question_title, q.view_count AS views, u.display_name AS user ORDER BY q.view_count DESC LIMIT 3
 MATCH (q:Question)<-[:COMMENTED_ON]-(c:Comment) RETURN q, COUNT(c) AS comment_count ORDER BY comment_count DESC LIMIT 3 NEXT MATCH (q)-[:TAGGED]->(t:Tag) RETURN t.name AS tag, COUNT(q) AS question_count ORDER BY question_count DESC LIMIT 3
 MATCH (q:Question)<-[:COMMENTED_ON]-(c:Comment) RETURN q, COUNT(c) AS comment_count ORDER BY comment_count DESC LIMIT 3 NEXT RETURN q.title AS question_title, q.link AS question_link, comment_count
 MATCH (q:Question)<-[:COMMENTED_ON]-(c:Comment) WHERE c.score = 3 RETURN q LIMIT 3
 MATCH (q:Question{answered:true}) RETURN q ORDER BY q.createdAt LIMIT 3
 MATCH (q:Question{title:'Neo4j- APOC trigger fires without any reason'}) MATCH (u:User)-[:COMMENTED]->(:Comment)-[:COMMENTED_ON]->(q) RETURN count(u) AS NumberOfCommentingUsers
 MATCH (q:Question{title:'Why are non-unique indexes dropped and created when restarting the server?'}) MATCH (u:User)-[:ASKED]->(q) RETURN u.display_name
 MATCH (q:Question{upVotes:2}) RETURN q LIMIT 5
 MATCH (question:Question)<-[:ANSWERED]-(answer:Answer) RETURN question, count(answer) AS answer_count NEXT RETURN question.title
 MATCH (r:Rack)-[:HOLDS]->(m:Machine) WHERE r.zone = 1 RETURN r, count(m) AS machineCount NEXT RETURN r.name
 MATCH (r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type) WHERE r.zone = 1 RETURN r, count(t) AS typeCount NEXT RETURN r.name AS rackName
 MATCH (r:Rack{name:'DC1-RCK-1-1'})-[:HOLDS]->(m:Machine)-[:RUNS]->(a:Application) RETURN a.name
 MATCH (r:Rack{name:'DC1-RCK-1-1'})-[:HOLDS]->(s:Switch) RETURN COUNT(s.ip) AS distinctSwitchTypes
 MATCH (r:Rack{name:'DC1-RCK-2-3'})-[:HOLDS]->(s:Switch) RETURN s
 MATCH (r:Rack{rack:1})-[:HOLDS]->(s:Switch)-[:ROUTES]->(i:Interface) RETURN DISTINCT i.ip
 MATCH (r:RefLocation) RETURN r.Location_Code, r.Location_Name
 MATCH (r:RefLocation) WHERE r.Location_Code = 'x' RETURN r.Location_Name, r.Location_Description
 MATCH (r:Region) RETURN count(r)
 MATCH (r:Region) RETURN r.Region_code, r.Region_name ORDER BY r.Region_code
 MATCH (r:Region) RETURN r.Region_name ORDER BY r.Region_name
 MATCH (r:Region) WHERE r.Region_name <> 'Denmark' RETURN r.Region_name
 MATCH (r:Region)-[:AFFECTS]-(s:Storm) WHERE s.Number_Deaths >= 10 RETURN r.Region_name
 MATCH (r:Resident) RETURN avg(r.age) AS average_age
 MATCH (r:Resident) RETURN COUNT(r) AS number_of_residents
 MATCH (r:Resident) RETURN DISTINCT r.date_moved_in
 MATCH (r:Resident) RETURN max(r.date_moved_in)
 MATCH (r:Restaurant) RETURN r.ResName
 MATCH (r:Restaurant) RETURN r.ResName, r.Rating ORDER BY r.Rating DESC LIMIT 1
 MATCH (r:Restaurant{ResName:'Subway'}) RETURN r.Address
 MATCH (r:Restaurant{ResName:'Subway'}) RETURN r.Rating
 MATCH (r:RestaurantType) RETURN r.ResTypeName
 MATCH (r:RestaurantType) WHERE r.ResTypeName = 'Sandwich' RETURN r.ResTypeDescription
 MATCH (r:Review) RETURN min(r.`date`) AS oldestReviewDate
 MATCH (r:Review) RETURN r ORDER BY r.stars ASC LIMIT 1 NEXT RETURN r.text
 MATCH (r:Review) RETURN r ORDER BY r.stars DESC, r.`date` ASC LIMIT 3 NEXT RETURN r.reviewId, r.text, r.stars, r.`date`
 MATCH (r:Review) RETURN r.reviewId, r.stars, r.text ORDER BY r.stars DESC
 MATCH (r:Review) RETURN size(r.text) AS wordsPerReview NEXT RETURN avg(wordsPerReview) AS averageWordCount
 MATCH (r:Review)-[:REVIEWS]->(b:Business) RETURN b, r ORDER BY r.stars ASC LIMIT 1 NEXT RETURN b.name AS businessName, r.stars AS lowestRating
 MATCH (r:Review)-[:REVIEWS]->(b:Business) RETURN b.state AS state, avg(r.stars) AS averageRating ORDER BY averageRating DESC NEXT RETURN state, averageRating LIMIT 1
 MATCH (r:Review)-[:REVIEWS]->(b:Business) WHERE r.`date` = 2016 RETURN b, count(r) AS reviewCount NEXT RETURN b.name AS businessName, reviewCount ORDER BY reviewCount DESC LIMIT 1
 MATCH (r:Review)-[:REVIEWS]->(b:Business) WHERE r.stars < 4.0 RETURN r.reviewId AS reviewId, r.text AS reviewText, r.stars AS rating, b.name AS businessName
 MATCH (r:Review)-[:REVIEWS]->(b:Business) WHERE r.stars > 4 RETURN r NEXT MATCH (u:User)-[:WROTE]->(r) RETURN DISTINCT u.name
 MATCH (r:Review{reviewId:'r2'})-[:REVIEWS]->(b:Business) RETURN b.name
 MATCH (r:Role) RETURN count(r)
 MATCH (r:Role) RETURN DISTINCT r.title
 MATCH (r:Role) RETURN r.role_code
 MATCH (r:Role) RETURN r.Role_Code AS role_code, r.Role_Name AS role_name, r.Role_Description AS role_description
 MATCH (r:Role) RETURN r.Role_Code, r.Role_Name, r.Role_Description
 MATCH (r:Role) WHERE r.role_code = 'ED' RETURN r.role_description
 MATCH (r:Role) WHERE r.Role_Code = 'MG' RETURN r.Role_Name, r.Role_Description
 MATCH (r:Role) WHERE r.Role_Name = 'Proof Reader' RETURN r.Role_Description
 MATCH (r:Room) RETURN count(r.RoomType)
 MATCH (r:Room) RETURN COUNT(r.RoomType)
 MATCH (r:Room) WHERE r.Unavailable = 0 RETURN DISTINCT r.BlockCode
 MATCH (r:Router)-[:ROUTES]->(i:Interface{ip:'10.3.8.253'}) RETURN r.name AS RouterName
 MATCH (r:Router{name:'DC1-R-1'})-[:ROUTES]->(i:Interface) RETURN i
 MATCH (r:Router{name:'DC1-R-2'})<-[:CONTAINS]-(dc:DataCenter) RETURN dc.name
 MATCH (r:Router{name:'DC1-R-3'}) RETURN r.zone
 MATCH (r1:Region{Region_name:'Afghanistan'}) MATCH (s:Storm)-[a:AFFECTS]->(r1) WHERE a.Number_city_affected > 0 MATCH (s)-[a2:AFFECTS]->(r2) WHERE a2.Number_city_affected > 0 RETURN s.Name
 MATCH (r1:Region{Region_name:'Afghanistan'})<-[:affected_Region]-(s1:Storm)-[:AFFECTS]->(r2:Region{Region_name:'Albania'}) RETURN s1.Name
 MATCH (rack:Rack{name:'DC1-RCK-1-1'})-[:HOLDS]->(machine:Machine) RETURN count(machine) AS numberOfMachines
 MATCH (rack:Rack{name:'DC1-RCK-1-1'})-[:HOLDS]->(machine:Machine)-[:RUNS]->(application:Application) RETURN application.name LIMIT 3
 MATCH (rack:Rack{name:'DC1-RCK-4-9'})-[:HOLDS]->(machine:Machine)-[:TYPE]->(type:Type{type:'xl'}) RETURN machine.name, type.name, type.ram, type.cpu, type.disk LIMIT 3
 MATCH (rack:Rack{rack:5})-[:HOLDS]->(switch:Switch) RETURN switch.name
 MATCH (ref_template_types:Ref_Template_Types) RETURN ref_template_types.Template_Type_Code, ref_template_types.Template_Type_Description
 MATCH (rf:Character{name:'Ryman-Frey'})-[:INTERACTS45]-(other) RETURN avg(other.degree) AS avg_degree NEXT RETURN avg_degree
 MATCH (role:Role) WHERE role.Role_Name = 'Proof Reader' RETURN role.Role_Description
 MATCH (role:Role{Role_Code:'MG'}) RETURN role.Role_Name, role.Role_Description
 MATCH (router:Router{name:'DC1-R-2'})-[:ROUTES]->(interface:Interface) RETURN count(interface) AS numberOfInterfaces
 MATCH (rust_stream:Stream)-[:PLAYS]->(game:Game{name:'Rust'}) MATCH (rust_stream)-[:VIP]->(vip_user:User) MATCH (vip_user)-[:VIP]->(other_stream:Stream) MATCH (chatter_user:User)-[:CHATTER]->(other_stream) RETURN DISTINCT chatter_user.name
 MATCH (s:Sensor)-[d:DETECTS]->(p:Pollutant{name:'CO2'}) RETURN s, d.`value` AS level ORDER BY level DESC LIMIT 1 NEXT RETURN s AS sensor
 MATCH (s:Sensor)-[d:DETECTS]->(p:Pollutant{name:'SO2'}) RETURN d.`date` AS `date`, s.name AS sensor ORDER BY d.`value` DESC LIMIT 1
 MATCH (s:Service) RETURN avg(s.startTime) AS averageStartTime NEXT RETURN averageStartTime
 MATCH (s:Service)-[:LISTENS]->(p:Port{port:80}) RETURN s.name AS service_name LIMIT 3
 MATCH (s:Service{name:'java'})-[:LISTENS]->(p:Port{port:443}) RETURN s
 MATCH (s:Service{name:'java'})<-[:DEPENDS_ON]-(a:Application) RETURN a.name AS applicationName
 MATCH (s:Service{name:'java'})<-[:DEPENDS_ON]-(p:Process)<-[:RUNS]-(m:Machine) RETURN m.name AS machine_name
 MATCH (s:Service{pid:1234}) RETURN s.name AS service_name NEXT MATCH (other:Service{name:service_name}) RETURN count(other)
 MATCH (s:Shop) RETURN s.Address ORDER BY s.Open_Year
 MATCH (s:Software)-[:DEPENDS_ON]->(:Application{name:'webserver'}) RETURN s.name AS software_name ORDER BY s.name LIMIT 3
 MATCH (s:Software)-[:VERSION]->(v:Version{name:'7.1'}) RETURN DISTINCT s NEXT RETURN count(s)
 MATCH (s:Software{name:'RHEL'})-[:DEPENDS_ON]->(dependency) RETURN s.name AS Software, dependency.name AS Dependency
 MATCH (s:Software{name:'RHEL'})-[:VERSION]->(v:Version) RETURN v.name
 MATCH (s:Software{name:'RHEL'})-[:VERSION]->(v:Version) RETURN v.name AS Version
 MATCH (s:Software{name:'webapp'})-[:INSTANCE]->(a:Application) RETURN a.name LIMIT 3
 MATCH (s:Stadium) RETURN count(s)
 MATCH (s:Stadium) RETURN s.name ORDER BY s.Capacity DESC LIMIT 1
 MATCH (s:Stadium) WHERE s.Opening_year < 2006 RETURN COUNT(s.City)
 MATCH (s:Stadium) WHERE s.Opening_year = 2005 RETURN avg(s.Capacity)
 MATCH (s:Station) RETURN count(s)
 MATCH (s:Station) RETURN DISTINCT s.Location
 MATCH (s:Station) RETURN s.Name, s.Location ORDER BY s.Annual_entry_exit, s.Annual_interchanges
 MATCH (s:Station) RETURN s.Name, s.Location, s.Number_of_Platforms
 MATCH (s:Station) RETURN s.Name, s.Main_Services ORDER BY s.Total_Passengers DESC LIMIT 3
 MATCH (s:Station) WHERE s.Location <> 'London' RETURN s.Name, s.Total_Passengers
 MATCH (s:Station)-[:SERVES]->(t:Train) RETURN s.Name AS name, count(t) AS `count` NEXT RETURN name
 MATCH (s:Station)-[:SERVES]->(t:Train) RETURN t.Name, t.`Time`, t.Service
 MATCH (s:Station)-[:SERVES]->(t:Train) WHERE s.Location = 'London' RETURN t.Name, t.`Time` ORDER BY t.`Time` DESC
 MATCH (s:Storm) RETURN s.Name, s.Damage_millions_USD ORDER BY s.Max_speed DESC
 MATCH (s:Storm) WHERE s.Number_Deaths > 0 RETURN count(s)
 MATCH (s:Storm) WHERE s.Number_Deaths > 0 RETURN count(s) AS `count` NEXT RETURN `count`
 MATCH (s:Storm) WHERE s.Number_Deaths >= 1 RETURN s.Name, s.Dates_active, s.Number_Deaths
 MATCH (s:Storm)-[:AFFECTS]->(r:Region) WHERE r.Region_name = 'Denmark' RETURN s.Name
 MATCH (s:Storm)-[:AFFECTS]->(r:Region) WHERE r.Region_name = 'Denmark' RETURN s.Name AS name
 MATCH (s:Storm)-[:AFFECTS]->(r:Region) WHERE s.Number_Deaths >= 10 RETURN r.Region_name
 MATCH (s:Storm)-[r:AFFECTS]->(n:Region) RETURN count(n.Region_id)
 MATCH (s:Storm)-[r:AFFECTS]->(n:Region) RETURN count(n.Region_id) AS `count` NEXT RETURN `count` ORDER BY `count` DESC
 MATCH (s:Stream) MATCH (s)-[:MODERATOR]->(m:User) RETURN s, count(m) AS moderatorCount NEXT RETURN s.name AS streamName, moderatorCount ORDER BY moderatorCount DESC LIMIT 10
 MATCH (s:Stream) RETURN s ORDER BY s.createdAt ASC LIMIT 5
 MATCH (s:Stream) RETURN s ORDER BY s.followers DESC LIMIT 5
 MATCH (s:Stream) RETURN s.name AS stream_name, s.followers AS follower_count ORDER BY follower_count DESC LIMIT 5
 MATCH (s:Stream) RETURN s.name, s.createdAt ORDER BY s.createdAt DESC LIMIT 5
 MATCH (s:Stream) RETURN s.url AS StreamURL ORDER BY s.total_view_count DESC LIMIT 1
 MATCH (s:Stream) WHERE s.createdAt = 3 RETURN count(s)
 MATCH (s:Stream) WHERE s.createdAt = 5 RETURN s NEXT MATCH (s)-[:HAS_TEAM]->(t:Team) RETURN DISTINCT t.name
 MATCH (s:Stream) WHERE s.followers > 100000 MATCH (s)-[:MODERATOR]->(u:User) RETURN count(u) AS moderatorCount
 MATCH (s:Stream) WHERE s.followers > 5000000 RETURN s
 MATCH (s:Stream) WHERE s.total_view_count < 1000000 RETURN s.name AS stream_name, s.followers AS follower_count ORDER BY s.followers DESC LIMIT 10
 MATCH (s:Stream) WHERE s.total_view_count > 1000000 RETURN s.name, s.followers, s.total_view_count ORDER BY s.followers ASC LIMIT 3
 MATCH (s:Stream)-[:CHATTER]->(u:User) WHERE u.followers < 1000 RETURN s
 MATCH (s:Stream)-[:CHATTER]->(u) RETURN s, COUNT(u) AS influence_count NEXT RETURN s.id, s.name, influence_count ORDER BY influence_count DESC LIMIT 1
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) RETURN s, count(l) AS distinctLanguages ORDER BY distinctLanguages DESC LIMIT 3 NEXT RETURN s.id, s.name, distinctLanguages
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) RETURN s, COUNT(l) AS languageCount ORDER BY languageCount DESC LIMIT 5 NEXT RETURN s.name AS streamName, languageCount
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) RETURN s, count(l) AS numLanguages ORDER BY numLanguages DESC LIMIT 3 NEXT RETURN s.name AS streamName, numLanguages
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) RETURN s.name AS stream, count(l) AS num_languages ORDER BY num_languages DESC LIMIT 5
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE l.name = 'en' MATCH (s)<-[:MODERATOR]-(u:User)-[:HAS_TEAM]->(:Team) MATCH (u)-[:VIP]->(otherStream:Stream)<-[:CHATTER]-(u) RETURN DISTINCT s, s.total_view_count AS viewCount NEXT RETURN avg(viewCount) AS average_view_count
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE l.name = 'en' RETURN avg(s.followers)
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE l.name = 'en' RETURN count(s)
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE l.name = 'ru' RETURN avg(s.followers) AS average_followers NEXT RETURN average_followers
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.followers > 10000 RETURN DISTINCT l.name
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.followers > 10000 RETURN l.name AS language, COUNT(s) AS stream_count ORDER BY stream_count DESC LIMIT 3
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.total_view_count > 1000000 RETURN COUNT(l.name) AS numberOfLanguages
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.total_view_count > 1000000 RETURN count(l) AS num_languages
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.total_view_count > 10000000 RETURN DISTINCT l.name AS language
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE s.total_view_count > 10000000 RETURN l.name AS language LIMIT 3
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language{name:'en'}) MATCH (s)-[:PLAYS]->(g:Game) RETURN DISTINCT g.name
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language{name:'en'}) RETURN s LIMIT 3
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language{name:'en'}) RETURN s NEXT MATCH (s)<-[:MODERATOR]-(u:User) RETURN avg(u.followers)
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language{name:'en'}) RETURN s.name AS stream_name, s.url AS stream_url LIMIT 3
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language{name:'en'}) RETURN s.name, s.followers ORDER BY s.followers DESC LIMIT 3
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language{name:'en'}) RETURN s.name, s.total_view_count ORDER BY s.total_view_count DESC LIMIT 5
 MATCH (s:Stream)-[:HAS_LANGUAGE]->(l:Language{name:'ru'}) WHERE s.followers > 20000 RETURN s.name AS stream_name, s.followers
 MATCH (s:Stream)-[:HAS_TEAM]->(:Team) RETURN s.name AS stream_name, s.total_view_count AS view_count ORDER BY s.total_view_count DESC LIMIT 5
 MATCH (s:Stream)-[:HAS_TEAM]->(:Team) RETURN s.name, s.total_view_count ORDER BY s.total_view_count DESC LIMIT 5
 MATCH (s:Stream)-[:HAS_TEAM]->(:Team) WHERE s.followers > 10000 RETURN s.name, s.followers ORDER BY s.followers DESC LIMIT 5
 MATCH (s:Stream)-[:HAS_TEAM]->(t:Team) RETURN s, t ORDER BY t.createdAt NEXT RETURN s LIMIT 3
 MATCH (s:Stream)-[:HAS_TEAM]->(t:Team) RETURN t, avg(s.followers) AS averageFollowers ORDER BY averageFollowers DESC LIMIT 5 NEXT RETURN t.name AS teamName, averageFollowers
 MATCH (s:Stream)-[:HAS_TEAM]->(t:Team{name:'ESO Stream Team'}) RETURN s.name AS stream_name, s.url AS stream_url
 MATCH (s:Stream)-[:MODERATOR]->(m) MATCH (s)-[:PLAYS]->(g:Game) RETURN s, size(m) AS moderatorCount NEXT RETURN gameName, totalModeratorCount
 MATCH (s:Stream)-[:MODERATOR]->(u:User) RETURN s, COUNT(u) AS moderator_count NEXT RETURN s.name AS stream_name, moderator_count ORDER BY moderator_count DESC LIMIT 10
 MATCH (s:Stream)-[:MODERATOR]->(u:User{name:'itsbigchase'}) RETURN s.name
 MATCH (s:Stream)-[:PLAYS]->(:Game{name:'Dota 2'}) RETURN s.name AS stream, s.followers AS followers ORDER BY followers DESC LIMIT 5
 MATCH (s:Stream)-[:PLAYS]->(:Game{name:'Just Chatting'}) WHERE s.total_view_count > 1000000 RETURN DISTINCT t.name
 MATCH (s:Stream)-[:PLAYS]->(:Game{name:'Rust'}) RETURN s.name AS stream_name, s.url AS stream_url LIMIT 5
 MATCH (s:Stream)-[:PLAYS]->(:Game{name:'Rust'}) RETURN s.name AS stream, s.followers AS followers ORDER BY followers DESC LIMIT 5
 MATCH (s:Stream)-[:PLAYS]->(:Game{name:'Rust'}) RETURN s.name AS stream, s.total_view_count AS views ORDER BY views DESC LIMIT 5
 MATCH (s:Stream)-[:PLAYS]->(:Game{name:'VALORANT'}) MATCH (s)-[:MODERATOR]->(m:User) RETURN m.name AS moderator ORDER BY m.name LIMIT 5
 MATCH (s:Stream)-[:PLAYS]->(g:Game) MATCH (s)-[:HAS_TEAM]->(:Team) RETURN g.name AS game, SUM(s.total_view_count) AS total_views ORDER BY total_views DESC LIMIT 3
 MATCH (s:Stream)-[:PLAYS]->(g:Game) RETURN g, count(s) AS streamCount NEXT RETURN g.name AS Game, streamCount
 MATCH (s:Stream)-[:PLAYS]->(g:Game) RETURN g.name AS gameName, COUNT(s) AS streamCount ORDER BY streamCount DESC LIMIT 3 NEXT RETURN gameName, streamCount
 MATCH (s:Stream)-[:PLAYS]->(g:Game) RETURN s, COUNT(g) AS distinctGames ORDER BY distinctGames DESC LIMIT 3 NEXT RETURN s.name AS streamName, distinctGames
 MATCH (s:Stream)-[:PLAYS]->(g:Game) RETURN s, COUNT(g) AS distinctGames ORDER BY distinctGames DESC LIMIT 5 NEXT RETURN s.name AS streamName, distinctGames
 MATCH (s:Stream)-[:PLAYS]->(g:Game) RETURN s, COUNT(g) AS uniqueGames ORDER BY uniqueGames DESC LIMIT 3 NEXT RETURN s.name AS streamName, uniqueGames
 MATCH (s:Stream)-[:PLAYS]->(g:Game) RETURN s, g ORDER BY s.followers DESC LIMIT 3 NEXT RETURN g.name AS game_name
 MATCH (s:Stream)-[:PLAYS]->(g:Game) WHERE s.followers > 500000 RETURN COUNT(g.name) AS unique_games
 MATCH (s:Stream)-[:PLAYS]->(g:Game) WHERE s.followers > 500000 RETURN g.name, count(s) AS stream_count ORDER BY stream_count DESC LIMIT 3
 MATCH (s:Stream)-[:PLAYS]->(g:Game) WHERE s.total_view_count > 1000000 RETURN g.name, count(s) AS streams_count ORDER BY streams_count DESC LIMIT 5
 MATCH (s:Stream)-[:PLAYS]->(g:Game{name:'Call of Duty: Warzone'}) RETURN s.description AS StreamDescription
 MATCH (s:Stream)-[:PLAYS]->(g:Game{name:'Dota 2'}) RETURN s.name AS stream_name, s.followers AS followers ORDER BY s.followers DESC LIMIT 5
 MATCH (s:Stream)-[:PLAYS]->(g:Game{name:'Grand Theft Auto V'}) RETURN s.name AS StreamName
 MATCH (s:Stream)-[:PLAYS]->(g:Game{name:'Just Chatting'}) RETURN s.name AS stream_name, s.followers AS followers ORDER BY s.followers DESC LIMIT 5
 MATCH (s:Stream)-[:PLAYS]->(g:Game{name:'Rust'}) RETURN avg(s.followers)
 MATCH (s:Stream)-[:PLAYS]->(g:Game{name:'Rust'}) WHERE s.followers > 10000 RETURN s.id, s.name, s.url, s.followers
 MATCH (s:Stream)-[:VIP]->(:User) RETURN avg(s.total_view_count) AS average_view_count NEXT RETURN average_view_count
 MATCH (s:Stream)-[:VIP]->(u:User) RETURN s, COUNT(u) AS vip_count ORDER BY vip_count DESC LIMIT 3 NEXT RETURN s.name AS stream_name, vip_count
 MATCH (s:Stream)-[:VIP]->(u:User) RETURN s, count(u) AS vipCount NEXT RETURN s
 MATCH (s:Stream)-[:VIP]->(u:User)-[:VIP]->(otherStream:Stream) RETURN s, COUNT(otherStream) AS vipCount NEXT RETURN s.name AS streamName, s.url AS streamUrl, vipCount ORDER BY vipCount DESC LIMIT 5
 MATCH (s:Stream)-[:VIP]->(vipUser:User) RETURN s.id AS StreamID, collect(vipUser.name) AS VIPUserNames, collect(modUser.name) AS ModeratorUserNames
 MATCH (s:Stream)<-[:CHATTER]-(u:User) RETURN s, COUNT(u) AS chatterCount ORDER BY chatterCount DESC LIMIT 5 NEXT RETURN s.name AS streamName, chatterCount
 MATCH (s:Stream)<-[:CHATTER]-(u:User) WHERE s.followers < 3000 RETURN s ORDER BY s.createdAt ASC LIMIT 3
 MATCH (s:Stream)<-[:CHATTER]-(u:User)-[:CHATTER]->(other:Stream)<-[:VIP]-(u) RETURN s NEXT MATCH (s)-[:HAS_LANGUAGE]->(l:Language) RETURN DISTINCT l.name AS language
 MATCH (s:Stream)<-[:CHATTER]-(u:User)-[:MODERATOR]->(s) RETURN DISTINCT s
 MATCH (s:Stream)<-[:MODERATOR]-(m:User)-[:VIP]->(s) RETURN s.name AS stream, m.name AS moderator_and_vip
 MATCH (s:Stream)<-[:MODERATOR]-(u:User) RETURN s, COUNT(u) AS moderator_count ORDER BY moderator_count DESC LIMIT 3 NEXT RETURN s.name AS stream_name, moderator_count
 MATCH (s:Stream)<-[:MODERATOR]-(u:User)-[:VIP]->(s) RETURN s.name AS stream_name, u.name AS moderator_vip_name
 MATCH (s:Stream)<-[:VIP]-(:User) RETURN s.name AS stream_name ORDER BY s.total_view_count DESC LIMIT 3
 MATCH (s:Stream{name:'9linda'})-[:PLAYS]->(g:Game) RETURN g.name
 MATCH (s:Stream{name:'dota2mc_ru'})<-[:CHATTER]-(chatter:Stream) RETURN chatter.url
 MATCH (s:Stream{name:'itsbigchase'})<-[:MODERATOR]-(u:User) RETURN count(u) AS numberOfModerators
 MATCH (s:Stream{name:'maximilian_dood'}) MATCH (s)-[:MODERATOR]->(u:User) RETURN count(u) AS total_moderators
 MATCH (s:Student) RETURN s.cell_mobile_number, s.email_address
 MATCH (s:Student) RETURN s.Fname ORDER BY s.Age DESC
 MATCH (s:Student) RETURN s.Major, COUNT(s) ORDER BY COUNT(s) ASC LIMIT 1
 MATCH (s:Student) WHERE s.Sex = 'F' RETURN s.LName ORDER BY s.Age DESC
 MATCH (s:Student)-[:ENROLLED_IN]->(:Course{name:'Physics'}) RETURN avg(s.age)
 MATCH (s:Student{Advisor:1121}) RETURN count(s)
 MATCH (s:Supplier) WHERE s.country = 'UK' RETURN s.companyName, s.contactName, s.contactTitle, s.phone, s.fax, s.address, s.city, s.postalCode, s.region, s.homePage
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) RETURN s, avg(p.unitPrice) AS avgUnitPrice ORDER BY avgUnitPrice DESC LIMIT 3 NEXT RETURN s.companyName AS Supplier, avgUnitPrice AS AverageUnitPrice
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) RETURN s, avg(p.unitPrice) AS avgUnitPrice ORDER BY avgUnitPrice DESC LIMIT 5 NEXT RETURN s.companyName AS Supplier, avgUnitPrice AS AverageUnitPrice
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) RETURN s, AVG(p.unitsInStock) AS avgUnitsInStock ORDER BY avgUnitsInStock DESC LIMIT 3 NEXT RETURN s.companyName, avgUnitsInStock
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) RETURN s, count(p) AS productCount NEXT RETURN s.companyName, productCount
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) RETURN s, COUNT(p) AS productCount ORDER BY productCount DESC LIMIT 3 NEXT RETURN s.companyName AS supplierName, productCount
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) RETURN s, COUNT(p) AS productCount ORDER BY productCount DESC LIMIT 5 NEXT RETURN s.companyName AS supplierName, productCount
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) WHERE p.discontinued = true RETURN s.companyName
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) WHERE p.unitsInStock > 50 RETURN s.companyName LIMIT 3
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) WHERE p.unitsInStock > 80 RETURN s
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`) WHERE s.country = 'UK' RETURN p.productName, p.unitPrice ORDER BY p.unitPrice DESC LIMIT 3
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category) RETURN c, count(s) AS supplierCount ORDER BY supplierCount DESC LIMIT 3 NEXT RETURN c.categoryName, supplierCount
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category) RETURN c.categoryName AS categoryName, COUNT(s.supplierID) AS supplierCount ORDER BY supplierCount DESC LIMIT 3 NEXT RETURN categoryName, supplierCount
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category) RETURN s, collect(c.categoryID) AS categories NEXT RETURN s.companyName AS Supplier, categories
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category) RETURN s, count(c) AS categoryCount ORDER BY categoryCount DESC LIMIT 3 NEXT RETURN s.companyName, categoryCount
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category) RETURN s, count(c) AS numCategories NEXT RETURN s LIMIT 3
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category) RETURN s, size(c.categoryID) AS categoryCount ORDER BY categoryCount ASC LIMIT 1 NEXT RETURN s.companyName
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category) WHERE c.categoryName = 'Beverages' MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category) WHERE c.categoryName = 'Seafood' RETURN collect(s.companyName) AS beverageSuppliers NEXT RETURN apoc.coll.intersection(beverageSuppliers) AS suppliersInBothCategories
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Beverages'}) RETURN s, count(p) AS productCount ORDER BY productCount DESC LIMIT 3 NEXT RETURN s.companyName AS supplierName, productCount
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Beverages'}) RETURN s.companyName
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Dairy Products'}) RETURN DISTINCT s.companyName LIMIT 3
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)-[:PART_OF]->(c:Category{categoryName:'Dairy Products'}) RETURN s.companyName
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)<-[:ORDERS]-(o:Order) RETURN s, COLLECT(o.shipCity) AS cities NEXT RETURN s.companyName AS supplier, SIZE(cities) AS cityCount ORDER BY cityCount DESC LIMIT 5
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)<-[:ORDERS]-(o:Order) RETURN s, o.freight AS freight NEXT RETURN s.companyName AS supplierName, avgFreight
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`)<-[:ORDERS]-(o:Order) RETURN s.supplierID AS supplierID, COUNT(o.shipCity) AS cityCount NEXT RETURN supplierID
 MATCH (s:Supplier)-[:SUPPLIES]->(p:`Product`{discontinued:true}) RETURN s, count(p) AS discontinuedProducts ORDER BY discontinuedProducts DESC LIMIT 3 NEXT RETURN s.companyName, discontinuedProducts
 MATCH (s:Supplier{city:'London'})-[:SUPPLIES]->(p:`Product`) RETURN p.productName AS ProductName, p.productID AS ProductID
 MATCH (s:Supplier{companyName:'Exotic Liquids'})-[:SUPPLIES]->(p:`Product`) RETURN p
 MATCH (s:Supplier{companyName:'Exotic Liquids'})-[:SUPPLIES]->(p:`Product`) RETURN p.productName AS productName
 MATCH (s:Supplier{companyName:'Exotic Liquids'})-[:SUPPLIES]->(p:`Product`) RETURN p.productName, count(p) AS supplyCount ORDER BY supplyCount DESC LIMIT 3
 MATCH (s:Supplier{companyName:'Exotic Liquids'})-[:SUPPLIES]->(p:`Product`) RETURN p.productName, p.unitPrice ORDER BY p.unitPrice DESC LIMIT 5
 MATCH (s:Supplier{country:'Germany'})-[:SUPPLIES]->(p:`Product`) RETURN p.productName, p.productID, p.unitPrice LIMIT 3
 MATCH (s:Supplier{country:'UK'})-[:SUPPLIES]->(p:`Product`) RETURN p.productName AS productName
 MATCH (s:Supplier{supplierID:'1'})-[:SUPPLIES]->(p:`Product`) RETURN p.productName
 MATCH (s:Swimmer) RETURN COUNT(s.Nationality)
 MATCH (s:Swimmer) RETURN s.name ORDER BY s.meter_100
 MATCH (s:Swimmer)-[:COMPETES_IN]->(e:Event)-[:HELD_IN]->(st:Stadium) WHERE s.Nationality = 'Australia' RETURN st.name
 MATCH (s:Switch)-[:HOLDS]->(r:Rack{zone:4}) RETURN s.ip AS SwitchIP ORDER BY s.ip LIMIT 5
 MATCH (s:Switch)-[:ROUTES]->(i:Interface) RETURN s, count(i) AS interfaceCount NEXT RETURN avg(interfaceCount) AS averageInterfacesPerSwitch
 MATCH (s1:Software)-[:DEPENDS_ON]->(s2:Software)-[:VERSION]->(v:Version) RETURN s2, size(v) AS versionCount ORDER BY versionCount DESC LIMIT 1 NEXT RETURN s2.name, versionCount
 MATCH (s1:Stream)-[:PLAYS]->(:Game{name:'Rust'}) MATCH (s1)<-[:CHATTER]-(u:User)-[:CHATTER]->(s2:Stream) RETURN s1 NEXT RETURN s2
 MATCH (sap:Organization{name:'SAP'})-[:HAS_COMPETITOR]->(competitor:Organization)<-[:HAS_SUPPLIER]-(supplier:Organization) RETURN DISTINCT supplier.name
 MATCH (sections:Sections) RETURN sections.section_name, sections.section_description
 MATCH (show:show) RETURN avg(show.Attendance)
 MATCH (singer:singer) RETURN singer.Citizenship ORDER BY singer.Citizenship DESC LIMIT 1
 MATCH (singer:singer) RETURN singer.country AS country, count(singer.country) AS `count` NEXT RETURN country, `count`
 MATCH (singer:singer) RETURN singer.Country AS Country, count(singer.Country) AS `count` NEXT RETURN Country, `count`
 MATCH (singer:singer) RETURN singer.Name ORDER BY singer.Net_Worth_Millions ASC
 MATCH (singer:singer) RETURN singer.name, singer.country, singer.age ORDER BY singer.age DESC
 MATCH (singer:singer) RETURN singer.Name, singer.Country, singer.Age ORDER BY singer.Age DESC
 MATCH (singer:singer) RETURN singer.song_name, singer.song_release_year ORDER BY singer.age LIMIT 1
 MATCH (singer:singer) RETURN singer.Song_Name, singer.Song_release_year ORDER BY singer.Age LIMIT 1
 MATCH (singer:singer) WHERE singer.age > 20 RETURN DISTINCT singer.country
 MATCH (singer:singer) WHERE singer.Age > 20 RETURN DISTINCT singer.Country
 MATCH (singer:singer) WHERE singer.country = 'France' RETURN avg(singer.age), min(singer.age), max(singer.age)
 MATCH (singer:singer) WHERE singer.Country = 'France' RETURN avg(singer.Age), min(singer.Age), max(singer.Age)
 MATCH (software:Software{name:'RHEL'})-[:VERSION]->(version:Version) RETURN count(version) AS totalVersions NEXT RETURN totalVersions
 MATCH (stadium:stadium) RETURN avg(stadium.capacity), max(stadium.capacity)
 MATCH (stadium:stadium) RETURN avg(stadium.Capacity), max(stadium.Capacity)
 MATCH (stadium:stadium) RETURN stadium.name, stadium.capacity ORDER BY stadium.average DESC LIMIT 1
 MATCH (stadium:stadium) RETURN stadium.Name, stadium.Capacity ORDER BY stadium.Average DESC LIMIT 1
 MATCH (stream)-[:CHATTER]->(chatter:User)-[:CHATTER]->(target_stream:Stream) MATCH (target_stream)-[:PLAYS]->(g:Game{name:'Rust'}) WHERE target_stream.followers > 5000 MATCH (stream)-[:HAS_LANGUAGE]->(l:Language{name:'ru'}) RETURN DISTINCT stream.name
 MATCH (students:Students) RETURN students.first_name, students.middle_name, students.last_name ORDER BY students.date_first_registered ASC LIMIT 1
 MATCH (t:Tag)<-[:TAGGED]-(q:Question) RETURN t, count(q) AS questionCount ORDER BY questionCount DESC NEXT RETURN t.name AS tagName, questionCount LIMIT 3
 MATCH (t:Tag{name:'cypher'}) MATCH (t)<-[:TAGGED]-(q:Question) MATCH (q)<-[:COMMENTED_ON]-(c:Comment) RETURN avg(c.score) AS average_score NEXT RETURN average_score
 MATCH (t:Tag{name:'cypher'})<-[:TAGGED]-(q:Question)<-[:ANSWERED]-(a:Answer) RETURN max(a.score) AS max_score NEXT MATCH (a:Answer{score:max_score})-[:PROVIDED]-(u:User) RETURN u.display_name
 MATCH (t:Tag{name:'graphenedb'})<-[:TAGGED]-(q:Question) RETURN avg(q.answer_count) AS average_answer_count
 MATCH (t:Tag{name:'neo4j'})<-[:TAGGED]-(q:Question) WHERE q.view_count > 100 MATCH (q)<-[:ANSWERED]-(a:Answer)<-[:PROVIDED]-(u:User) MATCH (u)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q2:Question) RETURN DISTINCT q NEXT RETURN max(comment_scores) AS max_comment_score
 MATCH (t:Tag{name:'neo4j'})<-[:TAGGED]-(q:Question)<-[:ASKED]-(u:User) RETURN DISTINCT u.display_name
 MATCH (t:Teacher) RETURN DISTINCT t.FirstName, t.LastName
 MATCH (t:Teacher) RETURN t.first_name, t.last_name ORDER BY t.last_name
 MATCH (t:Teacher) WHERE t.Classroom = 109 RETURN t.LastName
 MATCH (t:Teacher) WHERE t.Classroom = 110 RETURN t.FirstName
 MATCH (t:Teacher) WHERE t.last_name = 'Medhurst' RETURN t.gender
 MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream) RETURN t, count(s) AS num_streams NEXT RETURN t.name AS team_name, num_streams
 MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream) RETURN t, count(s) AS streamCount ORDER BY streamCount DESC LIMIT 3 NEXT RETURN t.name, streamCount
 MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream) RETURN t.name AS TeamName, count(s) AS NumberOfStreams
 MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream) WHERE s.followers > 10000 RETURN t.name AS team_name ORDER BY t.createdAt LIMIT 3
 MATCH (t:Team)<-[:HAS_TEAM]-(s:Stream)-[:HAS_LANGUAGE]->(l:Language) RETURN t, COUNT(l) AS languageDiversity ORDER BY languageDiversity DESC NEXT MATCH (topTeam)<-[:HAS_TEAM]-(s:Stream)-[:PLAYS]->(g:Game) RETURN topTeam.name AS TeamName, COLLECT(g.name) AS CommonGames
 MATCH (t:Technician) RETURN count(t)
 MATCH (t:Technician) RETURN t.Name ORDER BY t.Age
 MATCH (t:Technician) RETURN t.Name ORDER BY t.Age ASC
 MATCH (t:Technician) RETURN t.Starting_Year ORDER BY t.Age DESC LIMIT 1
 MATCH (t:Technician) RETURN t.Team AS Team, COUNT(t) AS `count` NEXT RETURN Team
 MATCH (t:Technician) RETURN t.Team, t.Starting_Year
 MATCH (t:Technician) WHERE t.Team <> 'NYY' RETURN t.Name
 MATCH (t:Transaction) WHERE t.`date` = 2021 RETURN SUM(t.amount) AS total_amount
 MATCH (t:Tweet) RETURN t ORDER BY t.created_at DESC LIMIT 5
 MATCH (t:Tweet) RETURN t ORDER BY t.favorites DESC LIMIT 5
 MATCH (t:Tweet) RETURN t.id ORDER BY t.created_at ASC LIMIT 1
 MATCH (t:Tweet) RETURN t.text, t.created_at ORDER BY t.created_at DESC LIMIT 5
 MATCH (t:Tweet) RETURN t.text, t.favorites ORDER BY t.favorites DESC LIMIT 3
 MATCH (t:Tweet) RETURN t.text, t.favorites ORDER BY t.favorites DESC LIMIT 5
 MATCH (t:Tweet)-[:CONTAINS]->(l:Link) RETURN t.text AS tweet_text, t.favorites AS favorites, l.url AS link_url ORDER BY t.favorites DESC LIMIT 5
 MATCH (t:Tweet)-[:MENTIONS]->(:User{name:'Neo4j'}) RETURN t.text AS tweet_text, t.favorites AS favorites ORDER BY favorites DESC LIMIT 3
 MATCH (t:Tweet)-[:MENTIONS]->(:User{screen_name:'neo4j'})-[:POSTS]->(tweet)-[:TAGS]->(h:Hashtag) RETURN DISTINCT h.name
 MATCH (t:Tweet)-[:MENTIONS]->(u:User) RETURN t, COUNT(u) AS mention_count ORDER BY mention_count DESC LIMIT 3 NEXT RETURN t.id_str AS tweet_id, t.text AS tweet_text, mention_count
 MATCH (t:Tweet)-[:MENTIONS]->(u:User{name:'Neo4j'}) MATCH (t)-[:CONTAINS]->(l:Link) RETURN t.text AS tweet_text, t.created_at AS created_at, l.url AS link_url ORDER BY t.created_at DESC LIMIT 3
 MATCH (t:Tweet)-[:MENTIONS]->(u:User{name:'Neo4j'}) MATCH (t)-[:TAGS]->(h:Hashtag) RETURN h.name AS Hashtag LIMIT 3
 MATCH (t:Tweet)-[:MENTIONS]->(u:User{name:'Neo4j'}) RETURN avg(t.favorites) AS average_favorites NEXT RETURN average_favorites
 MATCH (t:Tweet)-[:MENTIONS]->(u:User{screen_name:'neo4j'}) RETURN t ORDER BY t.favorites DESC LIMIT 5
 MATCH (t:Tweet)-[:MENTIONS]->(u:User{screen_name:'neo4j'}) WHERE t.favorites > 100 RETURN t.text AS tweet_text, t.favorites AS favorite_count, t.created_at AS created_at
 MATCH (t:Tweet)-[:REPLY_TO]->{1,}(:Tweet) RETURN p ORDER BY length(p) DESC LIMIT 1
 MATCH (t:Tweet)-[:RETWEETS]->(retweet:Tweet) RETURN t.text AS tweet_text, count(retweet) AS retweet_count ORDER BY retweet_count DESC LIMIT 5
 MATCH (t:Tweet)-[:TAGS]->(h:Hashtag{name:'education'}) RETURN avg(t.favorites) AS average_favorites NEXT RETURN average_favorites
 MATCH (t:Tweet)-[:TAGS]->(h:Hashtag{name:'education'}) RETURN t LIMIT 3
 MATCH (t:Tweet)-[:TAGS]->(h:Hashtag{name:'education'}) RETURN t NEXT MATCH (u:User)-[:POSTS]->(t) RETURN avg(u.followers)
 MATCH (t:Tweet)<-[:RETWEETS]-(retweeted:Tweet) RETURN t, count(retweeted) AS retweets ORDER BY retweets DESC LIMIT 3
 MATCH (t:Type) RETURN avg(t.disk) AS average_disk_size NEXT RETURN average_disk_size
 MATCH (t:Type{name:'xl-16/256/625'})<-[:TYPE]-(m:Machine)-[:HOLDS]-(r:Rack) RETURN r.name LIMIT 3
 MATCH (T1:Breeds)-[]-(T2:Dogs) RETURN T1, count(T1.breed_name) AS cnt NEXT RETURN T1.breed_name ORDER BY cnt DESC LIMIT 1
 MATCH (T1:Campus{Campus:'San Francisco State University'})-[r:TEACHES]-(T2:Degree{`Year`:2001}) RETURN T2.`Degrees`
 MATCH (T1:concert)-[]-(T2:stadium) RETURN count(T1.stadium_id) AS `count`, T2.name AS name NEXT RETURN name, `count`
 MATCH (T1:concert)-[]-(T2:stadium) RETURN T2.Name AS Name, count(T1.Stadium_ID) AS `count` NEXT RETURN Name, `count`
 MATCH (T1:concert)-[]-(T2:stadium) WHERE T1.`Year` >= 2014 RETURN T2.Name AS Name, count(T2.Stadium_ID) AS `count`, T2.Capacity AS Capacity NEXT RETURN Name, Capacity ORDER BY `count` DESC LIMIT 1
 MATCH (T1:concert)-[]-(T2:stadium) WHERE T1.`year` >= 2014 RETURN T2.name AS name, T2.capacity AS capacity, count(T2.stadium_id) AS `count` NEXT RETURN name, capacity ORDER BY `count` DESC LIMIT 1
 MATCH (t1:Course)-[:TAUGHT_BY]->(t2:Faculty) WHERE t1.CName = 'COMPUTER LITERACY' RETURN t2.Fname, t2.Lname
 MATCH (T1:Degree_Programs)-[]-(T2:Student_Enrolment) RETURN T1, count(T1.degree_summary_name) AS cnt NEXT RETURN T1.degree_summary_name ORDER BY cnt DESC LIMIT 1
 MATCH (T1:Gymnast) WHERE T1.Total_Points > 57.5 MATCH (T2:Person{People_ID:T1.Gymnast_ID}) RETURN DISTINCT T2.Hometown
 MATCH (t1:hiring)-[]-(t2:shop) RETURN t2, count(t1.Shop_ID) AS cnt NEXT RETURN t2.Name ORDER BY cnt DESC LIMIT 1
 MATCH (T1:Journal)-[:EDited_BY]->(T2:Editor) WHERE T1.Sales > 3000 RETURN T2.Name
 MATCH (T1:Owners)-[]-(T2:Dogs) RETURN T1.first_name, T2.name
 MATCH (T1:people)-[]-(T2:poker_player) WHERE T2.Earnings > 300000 RETURN T1.Name
 MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T3:Technician) MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T2:Machine) RETURN T3.Name ORDER BY T2.quality_rank
 MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T3:Technician) RETURN T3.Name ORDER BY T2.quality_rank
 MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T3:Technician) RETURN T3.Name, T2.Machine_series
 MATCH (t1:RepairAssignment)-[:ASSIGNED_TO]->(t3:Technician) WHERE m2.value_points > 70 RETURN t3.Name
 MATCH (T1:RepairAssignment)-[:ASSIGNED_TO]->(T3:Technician) WHERE T2.value_points > 70 RETURN T3.Name
 MATCH (T1:Student)-[T2:Has_Pet]-() RETURN DISTINCT T1.Fname, T1.Age
 MATCH (T1:Templates)-[]-(T2:Documents) WHERE T2.Document_Name = 'Data base' RETURN T1.Template_Type_Code
 MATCH (T1:TV_Channel)-[]-(T2:Cartoon) WHERE T2.Written_by = 'Todd Casey' RETURN T1.Country
 MATCH (target:Character{name:'Aemon-Targaryen-(Maester-Aemon)'}) MATCH (target)-[:INTERACTS45]->(other:Character) RETURN other ORDER BY other.book45PageRank ASC LIMIT 10 NEXT RETURN other.name AS character_name, other.book45PageRank AS page_rank
 MATCH (target:Character{name:'Stevron-Frey'}) MATCH (target)-[:INTERACTS]-{1,5}(other) RETURN other, other.book1PageRank AS pageRank NEXT RETURN other.name, pageRank ORDER BY pageRank ASC LIMIT 10
 MATCH (targetOrg:Organization{name:'Deja vu Security'})-[:HAS_CATEGORY]->(category:IndustryCategory)<-[:HAS_CATEGORY]-(sameCategoryOrg:Organization) MATCH (sameCategoryOrg)<-[:HAS_SUPPLIER]-(supplierOrg:Organization) RETURN DISTINCT sameCategoryOrg NEXT RETURN averageEmployees
 MATCH (teacher:teacher) WHERE teacher.Hometown <> 'little lever urban district' RETURN teacher.Name
 MATCH (toyStory:Movie{title:'Toy Story'}) MATCH (otherMovies:Movie{released:toyStoryYear}) RETURN toyStory, toyStory.released AS toyStoryYear NEXT RETURN otherMovies.title AS movieTitle, genres, toyStoryYear
 MATCH (tv_series:TV_series) WHERE tv_series.Episode = 'A Love of a Lifetime' RETURN tv_series.Air_Date
 MATCH (tweet:Tweet)-[:MENTIONS]->(:User{screen_name:'neo4j'}) RETURN hashtag, count(tweet) AS tweetCount NEXT RETURN hashtag.name, tweetCount ORDER BY tweetCount DESC
 MATCH (u:Undergo) RETURN u.Patient ORDER BY u.DateUndergo LIMIT 1
 MATCH (u:User) RETURN avg(u.followers) AS average_followers
 MATCH (u:User) RETURN u ORDER BY u.`size` DESC LIMIT 3
 MATCH (u:User) RETURN u ORDER BY u.`size` DESC LIMIT 5
 MATCH (u:User) RETURN u ORDER BY u.reputation DESC LIMIT 1 NEXT MATCH (u)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) RETURN t.name
 MATCH (u:User) RETURN u.name, u.betweenness ORDER BY u.betweenness DESC LIMIT 3
 MATCH (u:User) RETURN u.name, u.screen_name, u.followers ORDER BY u.followers DESC LIMIT 5
 MATCH (u:User) RETURN u.name, u.screen_name, u.statuses ORDER BY u.statuses DESC LIMIT 5
 MATCH (u:User) RETURN u.screen_name AS user, u.following AS following ORDER BY u.following DESC LIMIT 3
 MATCH (u:User) RETURN u.screen_name, u.followers ORDER BY u.followers ASC LIMIT 3
 MATCH (u:User) RETURN u.screen_name, u.followers ORDER BY u.followers DESC LIMIT 3
 MATCH (u:User) WHERE u.`size` < 1.82 RETURN avg(u.x)
 MATCH (u:User) WHERE u.`size` < 2.0 RETURN u ORDER BY u.`size` DESC LIMIT 5
 MATCH (u:User) WHERE u.betweenness > 1000000 RETURN u.screen_name, u.betweenness
 MATCH (u:User) WHERE u.followers > 1000 MATCH (u)-[:POSTS]->(t:Tweet) MATCH (t)-[:TAGS]->(h:Hashtag) RETURN DISTINCT h.name
 MATCH (u:User) WHERE u.followers > 10000 MATCH (u)-[:VIP]->(s:Stream) RETURN avg(s.total_view_count) AS average_view_count NEXT RETURN average_view_count
 MATCH (u:User) WHERE u.followers > 10000 RETURN u.name, u.screen_name, u.followers ORDER BY u.followers DESC LIMIT 3
 MATCH (u:User) WHERE u.key = '0' RETURN u.label
 MATCH (u:User) WHERE u.x < 5000 RETURN u ORDER BY u.x DESC LIMIT 5
 MATCH (u:User)-[:ASKED]->(:Question) RETURN u NEXT MATCH (u)-[:COMMENTED]->(c:Comment) RETURN avg(c.score) AS average_score
 MATCH (u:User)-[:ASKED]->(:Question) RETURN u ORDER BY u.reputation ASC LIMIT 1
 MATCH (u:User)-[:ASKED]->(q:Question) MATCH (u)-[:PROVIDED]->(a:Answer) RETURN DISTINCT u.display_name
 MATCH (u:User)-[:ASKED]->(q:Question) RETURN u, AVG(q.favorites) AS avgFavorites ORDER BY avgFavorites DESC LIMIT 3 NEXT RETURN u.display_name AS UserName, avgFavorites
 MATCH (u:User)-[:ASKED]->(q:Question) RETURN u, count(q.favorites) AS favVariations ORDER BY favVariations DESC LIMIT 3 NEXT RETURN u.display_name, favVariations
 MATCH (u:User)-[:ASKED]->(q:Question) RETURN u, COUNT(q) AS questionCount NEXT MATCH (u)-[:ASKED]->(q:Question) RETURN q.title AS questionTitle, q.id AS questionId, u.display_name AS userName
 MATCH (u:User)-[:ASKED]->(q:Question) RETURN u, q ORDER BY u.reputation DESC LIMIT 1
 MATCH (u:User)-[:ASKED]->(q:Question) RETURN u, q.createdAt AS QuestionDate ORDER BY q.createdAt DESC LIMIT 5
 MATCH (u:User)-[:ASKED]->(q:Question) RETURN u, SUM(q.downVotes) AS totalDownVotes ORDER BY totalDownVotes DESC LIMIT 5 NEXT RETURN u.display_name AS user, totalDownVotes
 MATCH (u:User)-[:ASKED]->(q:Question) RETURN u.display_name, count(q) AS questions_asked ORDER BY questions_asked DESC LIMIT 3
 MATCH (u:User)-[:ASKED]->(q:Question) RETURN u.display_name, u.reputation ORDER BY u.reputation ASC LIMIT 1
 MATCH (u:User)-[:ASKED]->(q:Question) RETURN u.id, u.display_name, count(q) AS questions_asked ORDER BY questions_asked DESC LIMIT 5
 MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.answered = true RETURN u, count(q) AS answeredQuestions ORDER BY answeredQuestions DESC LIMIT 3 NEXT RETURN u.display_name, answeredQuestions
 MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.score < 0 RETURN u, count(q) AS numNegativeScoreQuestions ORDER BY numNegativeScoreQuestions DESC LIMIT 5 NEXT RETURN u.display_name, numNegativeScoreQuestions
 MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.score < 0 RETURN u.link
 MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.score = 0 RETURN u, COUNT(q) AS question_count ORDER BY question_count DESC LIMIT 5 NEXT RETURN u.display_name AS user, question_count
 MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.score > 5 RETURN DISTINCT u NEXT RETURN count(u)
 MATCH (u:User)-[:ASKED]->(q:Question) WHERE q.upVotes = 0 RETURN u LIMIT 3
 MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation < 1000 RETURN q ORDER BY q.createdAt DESC LIMIT 5
 MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation < 50000 RETURN q ORDER BY q.favorites DESC LIMIT 5
 MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation = 420137 RETURN q
 MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation = 65 RETURN q.title, q.createdAt ORDER BY q.createdAt ASC LIMIT 3
 MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 1000 RETURN u, COUNT(q) AS question_count ORDER BY question_count DESC LIMIT 1 NEXT RETURN u.display_name AS user, u.reputation AS reputation, question_count
 MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 10000 RETURN AVG(q.score) AS average_score
 MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 100000 RETURN q ORDER BY q.createdAt ASC LIMIT 3
 MATCH (u:User)-[:ASKED]->(q:Question) WHERE u.reputation > 2000 RETURN q.title, q.link, q.createdAt ORDER BY q.createdAt LIMIT 3
 MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) WHERE t.name = 'apollo' RETURN u, count(q) AS questionsAsked ORDER BY questionsAsked DESC LIMIT 3 NEXT RETURN u.display_name, questionsAsked
 MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) WHERE t.name = 'graphql-subscriptions' RETURN u.display_name, u.id, u.link
 MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) WHERE u.reputation > 5000 RETURN DISTINCT t.name
 MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag{name:'angular'}) RETURN u
 MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag{name:'aws-lambda'}) RETURN u.display_name AS userName, u.reputation AS reputation, u.link AS userLink ORDER BY u.reputation DESC LIMIT 3
 MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag{name:'graphql-js'}) WHERE u.reputation < 5000 RETURN u
 MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag{name:'graphql-subscriptions'}) RETURN u.display_name, u.reputation ORDER BY u.reputation DESC
 MATCH (u:User)-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag{name:'graphql'}) RETURN u
 MATCH (u:User)-[:ASKED]->(q:Question{title:'Neo.ClientError.Statement.ExternalResourceFailed error on loading CSV file from local'}) RETURN u.display_name AS asked_by
 MATCH (u:User)-[:CHATTER]->(s:Stream)-[:VIP]->(u) RETURN avg(u.followers)
 MATCH (u:User)-[:COMMENTED]->(c:Comment) RETURN u.display_name, COUNT(c) AS comment_count ORDER BY comment_count DESC LIMIT 1
 MATCH (u:User)-[:COMMENTED]->(c:Comment)-[:COMMENTED_ON]->(q:Question) RETURN q LIMIT 5
 MATCH (u:User)-[:CREATED]->(p:Post) RETURN u, COUNT(p) AS postCount ORDER BY postCount ASC LIMIT 1 NEXT RETURN postCount
 MATCH (u:User)-[:CREATED]->(p) RETURN u.name AS name, COUNT(p) AS `count` ORDER BY `count` DESC LIMIT 1
 MATCH (u:User)-[:FOLLOWS]->(:Me{screen_name:'neo4j'}) RETURN u
 MATCH (u:User)-[:FOLLOWS]->(:Me{screen_name:'neo4j'}) RETURN u.profile_image_url
 MATCH (u:User)-[:FOLLOWS]->(:User{name:'Bob'}) RETURN u.name AS name
 MATCH (u:User)-[:FOLLOWS]->(a:User{name:'Alice'}) RETURN u.name AS name
 MATCH (u:User)-[:FOLLOWS]->(m:Me{screen_name:'neo4j'}) RETURN u ORDER BY u.followers ASC LIMIT 3
 MATCH (u:User)-[:FOLLOWS]->(m:Me{screen_name:'neo4j'}) RETURN u.name, u.screen_name, u.statuses ORDER BY u.statuses DESC LIMIT 5
 MATCH (u:User)-[:FOLLOWS]->(me:Me{screen_name:'neo4j'}) RETURN u.screen_name, u.name ORDER BY u.following DESC LIMIT 5
 MATCH (u:User)-[:FOLLOWS]->(neo:User{screen_name:'neo4j'}) RETURN u LIMIT 3
 MATCH (u:User)-[:INTERACTED]->(:User) RETURN u, MAX(u.area) AS maxArea ORDER BY maxArea DESC LIMIT 5 NEXT RETURN u.label AS UserLabel, u.area AS Area
 MATCH (u:User)-[:INTERACTED]->(:User) WHERE u.color = '#FF4500' RETURN u
 MATCH (u:User)-[:INTERACTED]->(:User{label:'vtcodes.dev'}) RETURN u.label AS UserLabel, u.area AS UserArea ORDER BY u.area DESC LIMIT 5
 MATCH (u:User)-[:MODERATOR]->(s:Stream) RETURN u, count(s) AS moderated_streams ORDER BY moderated_streams DESC LIMIT 5 NEXT RETURN u.name, moderated_streams
 MATCH (u:User)-[:MODERATOR]->(s:Stream) RETURN u, COUNT(s) AS moderatedStreams ORDER BY moderatedStreams DESC LIMIT 3 NEXT RETURN u.name AS userName, moderatedStreams
 MATCH (u:User)-[:MODERATOR]->(s:Stream) RETURN u, COUNT(s) AS streamCount NEXT RETURN u.name AS userName, streamCount ORDER BY streamCount DESC LIMIT 3
 MATCH (u:User)-[:MODERATOR]->(s:Stream) WHERE s.followers > 1000000 RETURN u.name AS user, s.name AS stream ORDER BY s.followers DESC LIMIT 5
 MATCH (u:User)-[:MODERATOR]->(s:Stream) WHERE s.total_view_count > 500000 RETURN u ORDER BY s.createdAt LIMIT 3
 MATCH (u:User)-[:MODERATOR]->(s:Stream) WHERE u.total_view_count > 1000000 RETURN s.name
 MATCH (u:User)-[:MODERATOR]->(s:Stream)-[:HAS_LANGUAGE]->(:Language{name:'en'}) RETURN u, count(s) AS num_moderated_streams ORDER BY num_moderated_streams DESC LIMIT 5 NEXT RETURN u.name AS user, num_moderated_streams
 MATCH (u:User)-[:MODERATOR]->(s:Stream)-[:HAS_LANGUAGE]->(l:Language) WHERE l.name <> 'en' RETURN u LIMIT 5
 MATCH (u:User)-[:MODERATOR]->(s:Stream)-[:HAS_LANGUAGE]->(l:Language{name:'en'}) RETURN u, count(s) AS moderated_streams ORDER BY moderated_streams DESC LIMIT 5 NEXT RETURN u.name, moderated_streams
 MATCH (u:User)-[:MODERATOR]->(s:Stream)<-[:VIP]-(u) RETURN DISTINCT u.name
 MATCH (u:User)-[:MODERATOR]->(s:Stream{name:'9linda'}) RETURN u.name LIMIT 5
 MATCH (u:User)-[:POSTS]->(t:Tweet) RETURN t.text AS tweet_text, t.created_at AS created_at ORDER BY t.created_at DESC LIMIT 3
 MATCH (u:User)-[:POSTS]->(t:Tweet) RETURN u, COUNT(t) AS tweet_count ORDER BY tweet_count DESC LIMIT 3 NEXT RETURN u.screen_name AS screen_name
 MATCH (u:User)-[:POSTS]->(t:Tweet) RETURN u, count(t) AS tweet_count ORDER BY tweet_count DESC LIMIT 3 NEXT RETURN u.screen_name AS screen_name, tweet_count
 MATCH (u:User)-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link) WHERE u.followers > 10000 RETURN DISTINCT u.screen_name
 MATCH (u:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(:User{name:'Neo4j'}) RETURN u.name AS user, count(t) AS mentions ORDER BY mentions DESC LIMIT 10
 MATCH (u:User)-[:POSTS]->(t:Tweet)-[:MENTIONS]->(m:Me{screen_name:'neo4j'}) RETURN u.screen_name, t.created_at ORDER BY t.created_at ASC LIMIT 3
 MATCH (u:User)-[:POSTS]->(t:Tweet)-[:RETWEETS]->(original:Tweet)-[:MENTIONS]->(m:Me{screen_name:'neo4j'}) RETURN u.screen_name LIMIT 3
 MATCH (u:User)-[:POSTS]->(t:Tweet)-[:TAGS]->(:Hashtag{name:'education'}) RETURN u.name, u.screen_name, count(t) AS tweet_count ORDER BY tweet_count DESC LIMIT 3
 MATCH (u:User)-[:PROVIDED]->(:Answer) RETURN DISTINCT u NEXT MATCH (u)-[:COMMENTED]->(c:Comment) RETURN avg(c.score)
 MATCH (u:User)-[:PROVIDED]->(a:Answer) RETURN u, count(a) AS provided_answer_count ORDER BY provided_answer_count DESC LIMIT 1 NEXT MATCH (u)-[:PROVIDED]->(answer:Answer)-[:ANSWERED]->(q:Question) MATCH (q)<-[:COMMENTED_ON]-(c:Comment)<-[:COMMENTED]-(commenter:User) MATCH (commenter)-[:COMMENTED]->(comment:Comment)-[:COMMENTED_ON]->(target_question:Question) WHERE target_question.view_count > 50 MATCH (target_question)<-[:ANSWERED]-(final_answer:Answer) RETURN final_answer.body_markdown
 MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)-[:TAGGED]->(:Tag{name:'neo4j'}) RETURN DISTINCT u NEXT MATCH (u)-[:COMMENTED]->(c:Comment) RETURN min(c.score)
 MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)-[:TAGGED]->(t:Tag{name:'neo4j'}) RETURN DISTINCT u.display_name
 MATCH (u:User)-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question)-[:TAGGED]->(t:Tag{name:'neo4j'}) RETURN u.display_name, COUNT(a) AS answer_count ORDER BY answer_count DESC LIMIT 1
 MATCH (u:User)-[:PROVIDED]->(a:Answer{link:'https://stackoverflow.com/a/69272967'}) RETURN u.display_name AS user_who_provided_answer
 MATCH (u:User)-[:RATED]->(m:Movie)-[:IN_GENRE]->(g:Genre) RETURN u, count(g) AS numGenres ORDER BY numGenres DESC LIMIT 3 NEXT RETURN u.name AS user, numGenres
 MATCH (u:User)-[:RATED]->(m:Movie)<-[:ACTED_IN]-(a:Actor) RETURN u, count(a) AS numActors ORDER BY numActors DESC LIMIT 3 NEXT RETURN u.name AS user, numActors
 MATCH (u:User)-[:VIP]->(s:Stream) RETURN u, count(s) AS streams_count NEXT RETURN u.name, streams_count
 MATCH (u:User)-[:VIP]->(s:Stream) RETURN u, count(s) AS vip_count ORDER BY vip_count DESC LIMIT 5 NEXT RETURN u.name AS user, vip_count
 MATCH (u:User)-[:VIP]->(s:Stream) RETURN u, COUNT(s) AS vip_stream_count ORDER BY vip_stream_count DESC LIMIT 3 NEXT RETURN u.name AS userName, vip_stream_count
 MATCH (u:User)-[:VIP]->(s:Stream) RETURN u, count(s) AS vipCount ORDER BY vipCount DESC LIMIT 3 NEXT RETURN u.name, vipCount
 MATCH (u:User)-[:WROTE]->(r:Review) RETURN u, avg(r.stars) AS average_rating NEXT MATCH (u)-[:WROTE]->(r2:Review)-[:REVIEWS]->(b:Business) RETURN DISTINCT b.name
 MATCH (u:User)-[:WROTE]->(r:Review) RETURN u, avg(r.stars) AS average_rating NEXT RETURN u.name, average_rating ORDER BY average_rating DESC LIMIT 3
 MATCH (u:User)-[:WROTE]->(r:Review) RETURN u, AVG(r.stars) AS avg_stars ORDER BY avg_stars ASC LIMIT 3 NEXT RETURN u.name AS user, avg_stars
 MATCH (u:User)-[:WROTE]->(r:Review) RETURN u, avg(r.text) AS avgReviewLength NEXT RETURN u.name AS userName, avgReviewLength
 MATCH (u:User)-[:WROTE]->(r:Review) RETURN u.name AS userName, avg(r.stars) AS averageRating NEXT RETURN userName, averageRating
 MATCH (u:User)-[:WROTE]->(r:Review) RETURN u.name, r.`date` ORDER BY r.`date` DESC LIMIT 3
 MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.city AS city, r.stars AS stars NEXT RETURN city, avg(stars) AS averageRating
 MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN date(r.`date`) AS `year`, r.stars AS stars NEXT RETURN `year`, averageRating
 MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN r, u, b ORDER BY r.`date` DESC LIMIT 5
 MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN r.`date` AS reviewDate, r.text AS reviewText, r.stars AS reviewStars, u.name AS userName, b.name AS businessName ORDER BY r.`date` DESC LIMIT 3
 MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN r.`date` AS reviewDate, r.text AS reviewText, r.stars AS reviewStars, u.name AS userName, b.name AS businessName ORDER BY r.`date` DESC LIMIT 5
 MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN u, COUNT(b) AS businessCount NEXT RETURN u.name AS userName
 MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WHERE b.city = 'Burlingame' RETURN u.name
 MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WHERE b.city = 'San Mateo' RETURN u.name
 MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WHERE b.state = 'CA' RETURN DISTINCT u.name
 MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WHERE b.state = 'CA' RETURN r
 MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)-[:IN_CATEGORY]->(c:Category) RETURN u, collect(c.name) AS categories NEXT RETURN u.name AS userName
 MATCH (u:User)-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business{name:'Zootown Brew'}) RETURN u.name AS userName, r.stars AS starRating
 MATCH (u:User)-[:WROTE]->(r:Review{stars:5}) RETURN u LIMIT 5
 MATCH (u:User)-[r:CREATED]->(c:Comment) WHERE r.`timestamp` = 4 RETURN count(c) AS count_Comment_
 MATCH (u:User)-[r:CREATED]->(p:Post) RETURN p.content AS content ORDER BY r.`timestamp` DESC LIMIT 1
 MATCH (u:User)-[r:FRIENDS_WITH]->() RETURN u, COUNT(r) AS count_FRIENDS_WITH_
 MATCH (u:User)-[r:INTERACTED]->(:User) RETURN u.label AS UserLabel, sum(r.ogWeight) AS TotalOgWeight ORDER BY TotalOgWeight DESC LIMIT 5
 MATCH (u:User)-[r:INTERACTED]->(v:User) WHERE v.`size` > 2 RETURN u, COUNT(v) AS interactionCount NEXT RETURN u.label AS user, interactionCount ORDER BY interactionCount DESC LIMIT 5
 MATCH (u:User)-[r:RATED]->(m:Movie) RETURN m, avg(u.userId) AS avgUserId ORDER BY avgUserId ASC LIMIT 3 NEXT RETURN m.title AS MovieTitle, avgUserId AS AverageUserId
 MATCH (u:User)-[r:RATED]->(m:Movie) RETURN u, avg(r.rating) AS avgRating ORDER BY avgRating DESC LIMIT 3 NEXT RETURN u.name AS user, avgRating
 MATCH (u:User)-[r:RATED]->(m:Movie) RETURN u, avg(r.rating) AS avgRating ORDER BY avgRating DESC LIMIT 3 NEXT RETURN u.name AS userName, avgRating
 MATCH (u:User)-[r:RATED]->(m:Movie) RETURN u, AVG(r.rating) AS avgRating ORDER BY avgRating DESC LIMIT 5 NEXT RETURN u.userId, u.name, avgRating
 MATCH (u:User)-[r:RATED]->(m:Movie) RETURN u, COUNT(r) AS ratedMovies, AVG(r.rating) AS avgRating NEXT RETURN u.name AS userName, avgRating ORDER BY avgRating DESC LIMIT 3
 MATCH (u:User)-[r:RATED]->(m:Movie) RETURN u, COUNT(r) AS ratingCount ORDER BY ratingCount DESC LIMIT 5 NEXT RETURN u.id AS userId, ratingCount
 MATCH (u:User)-[r:RATED]->(m:Movie) WHERE r.`timestamp` > 1451606400 RETURN m.title, m.`year`, r.rating ORDER BY r.`timestamp` DESC LIMIT 5
 MATCH (u:User)-[r:RATED]->(m:Movie)-[:IN_GENRE]->(g:Genre) MATCH (g2:Genre) RETURN u, collect(g.name) AS genresRated, count(g.name) AS genreCount NEXT RETURN u.name AS userName, size(genresRated) AS genresRatedCount ORDER BY genresRatedCount DESC LIMIT 3
 MATCH (u:User)-[r:RATED]->(m:Movie)-[:IN_GENRE]->(g:Genre{name:'Comedy'}) RETURN u.name AS user, count(r) AS comedyRatings ORDER BY comedyRatings DESC LIMIT 5
 MATCH (u:User)-[r:RATED]->(m:Movie{title:'Forrest Gump'}) RETURN COUNT(u) AS numberOfUsers, AVG(r.rating) AS averageRating
 MATCH (u:User)<-[:FOLLOWS]-(follower:User) WHERE u.name = 'David' RETURN follower.name AS name
 MATCH (u:User)<-[:MENTIONS]-(t:Tweet) RETURN u.name AS user, count(t) AS mentions ORDER BY mentions DESC LIMIT 5
 MATCH (u:User)<-[:MENTIONS]-(t:Tweet)<-[:POSTS]-(:Me{name:'Neo4j'}) RETURN u.name AS user, count(t) AS mentions ORDER BY mentions DESC LIMIT 3
 MATCH (u:User{city:'Missoula'})-[:WROTE]->(r:Review) RETURN avg(r.stars) AS average_rating
 MATCH (u:User{color:'#3CB371'}) RETURN u LIMIT 3
 MATCH (u:User{color:'#FF4500'})<-[:INTERACTED]-(interactedUser:User) RETURN count(interactedUser)
 MATCH (u:User{color:'#FF4500'})<-[:INTERACTED]-(other:User) RETURN other LIMIT 5 NEXT RETURN average_y
 MATCH (u:User{display_name:'Adrien Lemaire'})-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) RETURN t.name LIMIT 3
 MATCH (u:User{display_name:'Anu'})-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) RETURN t.name AS tag_name
 MATCH (u:User{display_name:'Anu'})-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question) RETURN avg(q.view_count) AS average_view_count NEXT RETURN average_view_count
 MATCH (u:User{display_name:'Christopher'})-[:ASKED]->(q:Question) RETURN q ORDER BY q.createdAt LIMIT 3
 MATCH (u:User{display_name:'Christopher'})-[:ASKED]->(q:Question)-[:TAGGED]->(t:Tag) RETURN q, t ORDER BY q.createdAt LIMIT 3 NEXT RETURN t.name AS tag
 MATCH (u:User{display_name:'Nikhil Kulkarni'})-[:PROVIDED]->(a:Answer)-[:ANSWERED]->(q:Question) RETURN avg(q.view_count) AS average_view_count NEXT RETURN average_view_count
 MATCH (u:User{display_name:'schernichkin'})-[:ASKED]->(q:Question) RETURN q ORDER BY q.view_count DESC LIMIT 3
 MATCH (u:User{id:1})-[:RATED]->(m:Movie) RETURN m LIMIT 5
 MATCH (u:User{id:1})-[:RATED]->(m:Movie) RETURN m.title AS MovieTitle
 MATCH (u:User{id:1})-[r:RATED]->(m:Movie) RETURN m.title, r.rating, r.`timestamp` ORDER BY r.`timestamp` DESC LIMIT 3
 MATCH (u:User{id:10251021})-[:ASKED]->(q:Question) RETURN q.title, q.id
 MATCH (u:User{label:'curvylliptic.bsky.social'})-[:INTERACTED]->(interactedUser:User) RETURN interactedUser
 MATCH (u:User{label:'dwither.bsky.social'})-[:INTERACTED]->(interactedUser:User) RETURN interactedUser LIMIT 5
 MATCH (u:User{location:'Graphs Are Everywhere'})-[:POSTS]->(t:Tweet) RETURN t ORDER BY t.favorites DESC LIMIT 3
 MATCH (u:User{location:'Graphs Are Everywhere'})-[:POSTS]->(t:Tweet) RETURN t.text, t.favorites ORDER BY t.favorites DESC LIMIT 3
 MATCH (u:User{name:'9linda'})-[:VIP]->(s:Stream) RETURN s.id, s.createdAt, s.description, s.url, s.name, s.followers, s.total_view_count
 MATCH (u:User{name:'Alice'})-[:CREATED]->(p:Post) RETURN count(p) AS count_Post_
 MATCH (u:User{name:'Angie'})-[:WROTE]->(:Review)-[:REVIEWS]->(b:Business) RETURN DISTINCT b.city
 MATCH (u:User{name:'Angie'})-[:WROTE]->(r:Review) RETURN r
 MATCH (u:User{name:'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b
 MATCH (u:User{name:'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.name AS businessName
 MATCH (u:User{name:'Angie'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.name AS BusinessName LIMIT 3
 MATCH (u:User{name:'Bob'})-[:CREATED]->(c:Comment) RETURN COUNT(c) AS `count`
 MATCH (u:User{name:'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN COUNT(b) AS numberOfBusinessesReviewed
 MATCH (u:User{name:'Bob'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WHERE r.stars < 4.5 RETURN b.name LIMIT 3
 MATCH (u:User{name:'Charlie'})-[r:CREATED]->(c:Comment) RETURN COUNT(c) AS `count`
 MATCH (u:User{name:'David'})-[:CREATED]->(p:Post) RETURN COUNT(p) AS `count`
 MATCH (u:User{name:'itsbigchase'})-[:CHATTER]->(s:Stream) RETURN s ORDER BY s.createdAt ASC LIMIT 3
 MATCH (u:User{name:'itsbigchase'})-[:VIP]->(s:Stream) RETURN s
 MATCH (u:User{name:'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b
 MATCH (u:User{name:'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.name AS businessName
 MATCH (u:User{name:'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) WHERE r.`date` = 2016 RETURN b.name AS BusinessName, r.stars AS Stars, r.text AS ReviewText
 MATCH (u:User{name:'Jenny'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business{state:'CA'}) RETURN b.name AS businessName
 MATCH (u:User{name:'Neo4j'})-[:POSTS]->(t:Tweet) RETURN t ORDER BY t.favorites DESC LIMIT 5
 MATCH (u:User{name:'Neo4j'})-[:POSTS]->(t:Tweet) RETURN t.text ORDER BY t.created_at DESC LIMIT 1
 MATCH (u:User{name:'Neo4j'})-[:POSTS]->(t:Tweet) WHERE t.favorites > 300 RETURN t ORDER BY t.created_at ASC LIMIT 3
 MATCH (u:User{name:'Neo4j'})-[:POSTS]->(t:Tweet)-[:CONTAINS]->(l:Link) RETURN t
 MATCH (u:User{name:'Neo4j'})-[:POSTS]->(t:Tweet)-[:RETWEETS]->(rt:Tweet) RETURN rt LIMIT 3
 MATCH (u:User{name:'Neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag) RETURN t, h
 MATCH (u:User{name:'Omar Huffman'})-[:RATED]->(m:Movie) RETURN m.title AS MovieTitle, m.imdbRating AS IMDbRating ORDER BY m.imdbRating DESC LIMIT 5
 MATCH (u:User{name:'rajjix'}) MATCH (u)-[:CHATTER]->(s:Stream) MATCH (s)-[:PLAYS]->(g:Game{name:'Dota 2'}) RETURN s.name
 MATCH (u:User{name:'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.address
 MATCH (u:User{name:'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.name AS businessName
 MATCH (u:User{name:'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.name AS BusinessName, b.location AS Location
 MATCH (u:User{name:'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business) RETURN b.name AS businessName, r.`date` AS reviewDate
 MATCH (u:User{name:'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business)-[:IN_CATEGORY]->(c:Category) RETURN DISTINCT c.name AS categories
 MATCH (u:User{name:'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business{city:'Missoula'}) RETURN b.name, b.address, b.city, b.state, b.businessId LIMIT 5
 MATCH (u:User{name:'Will'})-[:WROTE]->(r:Review)-[:REVIEWS]->(b:Business{name:'Missoula Public Library'}) RETURN r.text
 MATCH (u:User{screen_name:'neo4j'})-[:POSTS]->(t:Tweet) MATCH (t)-[:TAGS]->(h:Hashtag) MATCH (t)-[:MENTIONS]->(m:User) RETURN t.id_str AS tweet_id, t.text AS tweet_text, t.created_at AS created_at ORDER BY t.created_at ASC LIMIT 3
 MATCH (u:User{screen_name:'neo4j'})-[:POSTS]->(t:Tweet) MATCH (t)<-[:REPLY_TO]-(r:Tweet) RETURN t, count(r) AS reply_count ORDER BY reply_count DESC LIMIT 5 NEXT RETURN t.text AS tweet_text, reply_count
 MATCH (u:User{screen_name:'neo4j'})-[:POSTS]->(t:Tweet) RETURN t.text AS tweet, t.favorites AS favorites ORDER BY t.favorites DESC LIMIT 5
 MATCH (u:User{screen_name:'neo4j'})-[:POSTS]->(t:Tweet) RETURN t.text AS TweetText, t.favorites AS Favorites ORDER BY t.favorites DESC LIMIT 1
 MATCH (u:User{screen_name:'neo4j'})-[:POSTS]->(t:Tweet) WHERE t.favorites > 200 RETURN t LIMIT 5
 MATCH (u:User{screen_name:'neo4j'})-[:POSTS]->(t:Tweet)-[:MENTIONS]->(mentioned:User) RETURN mentioned.screen_name, count(t) AS mentions_count ORDER BY mentions_count DESC
 MATCH (u:User{screen_name:'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag) RETURN h.name AS hashtag_name
 MATCH (u:User{screen_name:'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag) RETURN t ORDER BY t.created_at ASC LIMIT 3
 MATCH (u:User{screen_name:'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag) RETURN t, h ORDER BY t.created_at DESC LIMIT 3 NEXT RETURN h.name AS hashtag
 MATCH (u:User{screen_name:'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag) RETURN t.text AS tweet, h.name AS hashtag ORDER BY t.created_at DESC LIMIT 3
 MATCH (u:User{screen_name:'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag{name:'education'}) RETURN t
 MATCH (u:User{screen_name:'neo4j'})-[:POSTS]->(t:Tweet)-[:TAGS]->(h:Hashtag{name:'education'}) RETURN t.text, t.favorites, t.created_at ORDER BY t.favorites DESC LIMIT 5
 MATCH (u:User{screen_name:'neo4j'})-[:POSTS]->(t:Tweet)<-[:REPLY_TO]-(reply:Tweet) RETURN reply ORDER BY reply.created_at ASC LIMIT 3
 MATCH (u:User{screen_name:'neo4j'})<-[:MENTIONS]-(t:Tweet) WHERE t.favorites > 100 RETURN t.text, t.favorites, t.created_at ORDER BY t.favorites DESC LIMIT 3
 MATCH (u:User{userId:'u1'}) RETURN u.name
 MATCH (u:User{userId:'u1'})-[wr:WROTE]->(r:Review) RETURN r
 MATCH (u:User{uuid:16922964})-[:PROVIDED]->(a:Answer) RETURN a
 MATCH (u1:User)-[:INTERACTED]->(u2:User) WHERE u2.`size` <> 1.5 RETURN u1.`size` AS interactingUserSize NEXT RETURN sum(interactingUserSize) AS totalSize
 MATCH (u1:User)-[:INTERACTED]->(u2:User) WHERE u2.area <> 1.77 RETURN DISTINCT u1.label
 MATCH (u1:User)-[:INTERACTED]->(u2:User) WHERE u2.y < 5000 RETURN u1 LIMIT 3
 MATCH (u1:User)-[:INTERACTED]->(u2:User) WHERE u2.y > 10000 RETURN DISTINCT u1.label
 MATCH (u1:User)-[:MODERATOR]->(u2:User) RETURN DISTINCT u1.name AS moderator_name
 MATCH (u1:User)-[r:INTERACTED]->(u2:User) WHERE u1.color = '#1E90FF' RETURN u2.label AS user, COUNT(r) AS interactions ORDER BY interactions DESC LIMIT 5
 MATCH (u1:User{label:'inchristbl.bsky.social'})-[:INTERACTED]->(u2:User) WHERE u2.area < 3 RETURN u2.label
 MATCH (user:User)-[:VIP]->(stream:Stream) RETURN user, count(stream) AS vip_stream_count NEXT MATCH (user)-[:MODERATOR]->(:Stream) RETURN count(user) AS vip_moderator_count
 MATCH (user:User)-[:WROTE]->(review:Review) RETURN user, count(review) AS reviewCount NEXT RETURN user.name AS userName, reviewCount
 MATCH (user:User)-[:WROTE]->(review:Review)-[:REVIEWS]->(business:Business) RETURN business, count(user) AS numUsers NEXT RETURN business.name
 MATCH (v:Video) RETURN v ORDER BY v.popularity DESC LIMIT 5
 MATCH (v:Video) WHERE v.budget < 5000 RETURN v.title, v.budget LIMIT 3
 MATCH (v:Video) WHERE v.revenue = 0 RETURN v.title, v.popularity ORDER BY v.popularity DESC LIMIT 3
 MATCH (v:Video) WHERE v.runtime < 90 RETURN v.title, v.popularity ORDER BY v.popularity DESC LIMIT 3
 MATCH (v:Video) WHERE v.status = 'In Production' RETURN v LIMIT 3
 MATCH (v:Video)-[:HAS_KEYWORD]->(k:Keyword) RETURN k, COUNT(v) AS video_count ORDER BY video_count DESC LIMIT 5 NEXT RETURN k.name AS keyword, video_count
 MATCH (v:Video)-[:IN_GENRE]->(g:Genre) RETURN g, count(v) AS videoCount ORDER BY videoCount DESC LIMIT 3 NEXT RETURN g.name AS genre, videoCount
 MATCH (v:Video)-[:IN_GENRE]->(g:Genre) WHERE v.popularity > 5 RETURN g.name AS genre LIMIT 5
 MATCH (v:Video)-[:IN_GENRE]->(g:Genre) WHERE v.runtime < 30 RETURN g.name AS genre, COUNT(v) AS video_count ORDER BY video_count DESC LIMIT 3
 MATCH (v:Video)-[:PRODUCED_BY]->(pc:ProductionCompany) WHERE v.revenue = 0 RETURN pc LIMIT 3
 MATCH (v:Video)-[:PRODUCED_BY]->(pc:ProductionCompany{name:'Pixar Animation Studios'}) WHERE v.runtime < 50 RETURN v.title, v.runtime ORDER BY v.runtime ASC LIMIT 3
 MATCH (v:Video)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN v, count(c) AS countries_count ORDER BY countries_count DESC NEXT RETURN v.title, countries_count LIMIT 5
 MATCH (v:Video)-[:PRODUCED_IN_COUNTRY]->(c:Country) RETURN v, count(c) AS countriesProducedIn ORDER BY countriesProducedIn DESC LIMIT 5 NEXT RETURN v.title, countriesProducedIn
 MATCH (v:Video)-[:SPOKEN_IN_LANGUAGE]->(l:Language{name:'Azərbaycan'}) RETURN v LIMIT 5
 MATCH (v:Video)<-[:RATED]-(u:User) RETURN v, count(u) AS userCount ORDER BY userCount DESC LIMIT 5 NEXT RETURN v.title, userCount
 MATCH (v:Video{title:'Jonah: A VeggieTales Movie'}) RETURN v.homepage
 MATCH (v:Video{title:'Jonah: A VeggieTales Movie'})-[:IN_GENRE]->(g:Genre) RETURN g.name LIMIT 3
 MATCH (v1:Version{name:'7.1'})<-[:PREVIOUS]-(v2:Version) RETURN v2.name
 MATCH (vip_stream:Stream)-[:VIP]->(vip:User) MATCH (vip)-[:CHATTER]->(ru_stream:Stream)-[:HAS_LANGUAGE]->(lang:Language) WHERE lang.name = 'ru' RETURN DISTINCT vip_stream.name
 MATCH (visitor:visitor) WHERE visitor.Level_of_membership <= 4 RETURN avg(visitor.Age)
 MATCH (w:WebClientAccelerator) WHERE w.Connection <> 'Broadband' RETURN w.name, w.Operating_system
 MATCH (z:Zone{`size`:16}) RETURN z LIMIT 3
 MATCH (z:Zone{`size`:16})-[:ROUTES]->(i:Interface{ip:'10.3.10.254'}) RETURN z.zone AS ZoneNumber LIMIT 3
 MATCH (z:Zone{zone:2})-[:ROUTES]->(:Interface)<-[:ROUTES]-(:Switch)<-[:HOLDS]-(r:Rack)-[:HOLDS]->(m:Machine)-[:TYPE]->(t:Type) RETURN DISTINCT t.type AS machineType LIMIT 3
 MATCH (z:Zone{zone:2})-[:ROUTES]->(i:Interface)<-[:ROUTES]-(s:Switch) RETURN count(s) AS numberOfSwitches
 MATCH (z:Zone{zone:3})-[:ROUTES]->(i:Interface)-[:CONNECTS]->(m:Machine)-[:TYPE]->(t:Type) RETURN t.type AS MachineType, t.name AS TypeName ORDER BY t.id LIMIT 5
 MATCH (zone:Zone{zone:1})-[:ROUTES]->(interface:Interface) RETURN interface.ip AS ip, interface.name AS name
 MATCH (zone:Zone{zone:3})-[:ROUTES]->(interface:Interface) RETURN interface.ip
