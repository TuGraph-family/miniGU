
// Generated from GQL.g4 by ANTLR 4.13.2



#include "GQLParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct GQLParserStaticData final {
  GQLParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  GQLParserStaticData(const GQLParserStaticData&) = delete;
  GQLParserStaticData(GQLParserStaticData&&) = delete;
  GQLParserStaticData& operator=(const GQLParserStaticData&) = delete;
  GQLParserStaticData& operator=(GQLParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag gqlParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<GQLParserStaticData> gqlParserStaticData = nullptr;

void gqlParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (gqlParserStaticData != nullptr) {
    return;
  }
#else
  assert(gqlParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<GQLParserStaticData>(
    std::vector<std::string>{
      "gqlProgram", "programActivity", "sessionActivity", "transactionActivity", 
      "endTransactionCommand", "sessionSetCommand", "sessionSetSchemaClause", 
      "sessionSetGraphClause", "sessionSetTimeZoneClause", "setTimeZoneValue", 
      "sessionSetParameterClause", "sessionSetGraphParameterClause", "sessionSetBindingTableParameterClause", 
      "sessionSetValueParameterClause", "sessionSetParameterName", "sessionResetCommand", 
      "sessionResetArguments", "sessionCloseCommand", "sessionParameterSpecification", 
      "startTransactionCommand", "transactionCharacteristics", "transactionMode", 
      "transactionAccessMode", "rollbackCommand", "commitCommand", "nestedProcedureSpecification", 
      "procedureSpecification", "nestedDataModifyingProcedureSpecification", 
      "nestedQuerySpecification", "procedureBody", "bindingVariableDefinitionBlock", 
      "bindingVariableDefinition", "statementBlock", "statement", "nextStatement", 
      "graphVariableDefinition", "optTypedGraphInitializer", "graphInitializer", 
      "bindingTableVariableDefinition", "optTypedBindingTableInitializer", 
      "bindingTableInitializer", "valueVariableDefinition", "optTypedValueInitializer", 
      "valueInitializer", "graphExpression", "currentGraph", "bindingTableExpression", 
      "nestedBindingTableQuerySpecification", "objectExpressionPrimary", 
      "linearCatalogModifyingStatement", "simpleCatalogModifyingStatement", 
      "primitiveCatalogModifyingStatement", "createSchemaStatement", "dropSchemaStatement", 
      "createGraphStatement", "openGraphType", "ofGraphType", "graphTypeLikeGraph", 
      "graphSource", "dropGraphStatement", "createGraphTypeStatement", "graphTypeSource", 
      "copyOfGraphType", "dropGraphTypeStatement", "callCatalogModifyingProcedureStatement", 
      "linearDataModifyingStatement", "focusedLinearDataModifyingStatement", 
      "focusedLinearDataModifyingStatementBody", "focusedNestedDataModifyingProcedureSpecification", 
      "ambientLinearDataModifyingStatement", "ambientLinearDataModifyingStatementBody", 
      "simpleLinearDataAccessingStatement", "simpleDataAccessingStatement", 
      "simpleDataModifyingStatement", "primitiveDataModifyingStatement", 
      "insertStatement", "setStatement", "setItemList", "setItem", "setPropertyItem", 
      "setAllPropertiesItem", "setLabelItem", "removeStatement", "removeItemList", 
      "removeItem", "removePropertyItem", "removeLabelItem", "deleteStatement", 
      "deleteItemList", "deleteItem", "callDataModifyingProcedureStatement", 
      "compositeQueryStatement", "compositeQueryExpression", "queryConjunction", 
      "setOperator", "compositeQueryPrimary", "linearQueryStatement", "focusedLinearQueryStatement", 
      "focusedLinearQueryStatementPart", "focusedLinearQueryAndPrimitiveResultStatementPart", 
      "focusedPrimitiveResultStatement", "focusedNestedQuerySpecification", 
      "ambientLinearQueryStatement", "simpleLinearQueryStatement", "simpleQueryStatement", 
      "primitiveQueryStatement", "matchStatement", "simpleMatchStatement", 
      "optionalMatchStatement", "optionalOperand", "matchStatementBlock", 
      "callQueryStatement", "filterStatement", "letStatement", "letVariableDefinitionList", 
      "letVariableDefinition", "forStatement", "forItem", "forItemAlias", 
      "forItemSource", "forOrdinalityOrOffset", "orderByAndPageStatement", 
      "primitiveResultStatement", "returnStatement", "returnStatementBody", 
      "returnItemList", "returnItem", "returnItemAlias", "selectStatement", 
      "selectItemList", "selectItem", "selectItemAlias", "havingClause", 
      "selectStatementBody", "selectGraphMatchList", "selectGraphMatch", 
      "selectQuerySpecification", "callProcedureStatement", "procedureCall", 
      "inlineProcedureCall", "variableScopeClause", "bindingVariableReferenceList", 
      "namedProcedureCall", "procedureArgumentList", "procedureArgument", 
      "atSchemaClause", "useGraphClause", "graphPatternBindingTable", "graphPatternYieldClause", 
      "graphPatternYieldItemList", "graphPatternYieldItem", "graphPattern", 
      "matchMode", "repeatableElementsMatchMode", "differentEdgesMatchMode", 
      "elementBindingsOrElements", "edgeBindingsOrEdges", "pathPatternList", 
      "pathPattern", "pathVariableDeclaration", "keepClause", "graphPatternWhereClause", 
      "insertGraphPattern", "insertPathPatternList", "insertPathPattern", 
      "insertNodePattern", "insertEdgePattern", "insertEdgePointingLeft", 
      "insertEdgePointingRight", "insertEdgeUndirected", "insertElementPatternFiller", 
      "labelAndPropertySetSpecification", "pathPatternPrefix", "pathModePrefix", 
      "pathMode", "pathSearchPrefix", "allPathSearch", "pathOrPaths", "anyPathSearch", 
      "numberOfPaths", "shortestPathSearch", "allShortestPathSearch", "anyShortestPathSearch", 
      "countedShortestPathSearch", "countedShortestGroupSearch", "numberOfGroups", 
      "pathPatternExpression", "pathTerm", "pathFactor", "pathPrimary", 
      "elementPattern", "nodePattern", "elementPatternFiller", "elementVariableDeclaration", 
      "isLabelExpression", "isOrColon", "elementPatternPredicate", "elementPatternWhereClause", 
      "elementPropertySpecification", "propertyKeyValuePairList", "propertyKeyValuePair", 
      "edgePattern", "fullEdgePattern", "fullEdgePointingLeft", "fullEdgeUndirected", 
      "fullEdgePointingRight", "fullEdgeLeftOrUndirected", "fullEdgeUndirectedOrRight", 
      "fullEdgeLeftOrRight", "fullEdgeAnyDirection", "abbreviatedEdgePattern", 
      "parenthesizedPathPatternExpression", "subpathVariableDeclaration", 
      "parenthesizedPathPatternWhereClause", "labelExpression", "pathVariableReference", 
      "elementVariableReference", "graphPatternQuantifier", "fixedQuantifier", 
      "generalQuantifier", "lowerBound", "upperBound", "simplifiedPathPatternExpression", 
      "simplifiedDefaultingLeft", "simplifiedDefaultingUndirected", "simplifiedDefaultingRight", 
      "simplifiedDefaultingLeftOrUndirected", "simplifiedDefaultingUndirectedOrRight", 
      "simplifiedDefaultingLeftOrRight", "simplifiedDefaultingAnyDirection", 
      "simplifiedContents", "simplifiedPathUnion", "simplifiedMultisetAlternation", 
      "simplifiedTerm", "simplifiedFactorLow", "simplifiedFactorHigh", "simplifiedQuantified", 
      "simplifiedQuestioned", "simplifiedTertiary", "simplifiedDirectionOverride", 
      "simplifiedOverrideLeft", "simplifiedOverrideUndirected", "simplifiedOverrideRight", 
      "simplifiedOverrideLeftOrUndirected", "simplifiedOverrideUndirectedOrRight", 
      "simplifiedOverrideLeftOrRight", "simplifiedOverrideAnyDirection", 
      "simplifiedSecondary", "simplifiedNegation", "simplifiedPrimary", 
      "whereClause", "yieldClause", "yieldItemList", "yieldItem", "yieldItemName", 
      "yieldItemAlias", "groupByClause", "groupingElementList", "groupingElement", 
      "emptyGroupingSet", "orderByClause", "sortSpecificationList", "sortSpecification", 
      "sortKey", "orderingSpecification", "nullOrdering", "limitClause", 
      "offsetClause", "offsetSynonym", "schemaReference", "absoluteCatalogSchemaReference", 
      "catalogSchemaParentAndName", "relativeCatalogSchemaReference", "predefinedSchemaReference", 
      "absoluteDirectoryPath", "relativeDirectoryPath", "simpleDirectoryPath", 
      "graphReference", "catalogGraphParentAndName", "homeGraph", "graphTypeReference", 
      "catalogGraphTypeParentAndName", "bindingTableReference", "procedureReference", 
      "catalogProcedureParentAndName", "catalogObjectParentReference", "referenceParameterSpecification", 
      "nestedGraphTypeSpecification", "graphTypeSpecificationBody", "elementTypeList", 
      "elementTypeSpecification", "nodeTypeSpecification", "nodeTypePattern", 
      "nodeTypePhrase", "nodeTypePhraseFiller", "nodeTypeFiller", "localNodeTypeAlias", 
      "nodeTypeImpliedContent", "nodeTypeKeyLabelSet", "nodeTypeLabelSet", 
      "nodeTypePropertyTypes", "edgeTypeSpecification", "edgeTypePattern", 
      "edgeTypePhrase", "edgeTypePhraseFiller", "edgeTypeFiller", "edgeTypeImpliedContent", 
      "edgeTypeKeyLabelSet", "edgeTypeLabelSet", "edgeTypePropertyTypes", 
      "edgeTypePatternDirected", "edgeTypePatternPointingRight", "edgeTypePatternPointingLeft", 
      "edgeTypePatternUndirected", "arcTypePointingRight", "arcTypePointingLeft", 
      "arcTypeUndirected", "sourceNodeTypeReference", "destinationNodeTypeReference", 
      "edgeKind", "endpointPairPhrase", "endpointPair", "endpointPairDirected", 
      "endpointPairPointingRight", "endpointPairPointingLeft", "endpointPairUndirected", 
      "connectorPointingRight", "connectorUndirected", "sourceNodeTypeAlias", 
      "destinationNodeTypeAlias", "labelSetPhrase", "labelSetSpecification", 
      "propertyTypesSpecification", "propertyTypeList", "propertyType", 
      "propertyValueType", "bindingTableType", "valueType", "typed", "predefinedType", 
      "booleanType", "characterStringType", "byteStringType", "minLength", 
      "maxLength", "fixedLength", "numericType", "exactNumericType", "binaryExactNumericType", 
      "signedBinaryExactNumericType", "unsignedBinaryExactNumericType", 
      "verboseBinaryExactNumericType", "decimalExactNumericType", "precision", 
      "scale", "approximateNumericType", "temporalType", "temporalInstantType", 
      "datetimeType", "localdatetimeType", "dateType", "timeType", "localtimeType", 
      "temporalDurationType", "temporalDurationQualifier", "referenceValueType", 
      "immaterialValueType", "nullType", "emptyType", "graphReferenceValueType", 
      "closedGraphReferenceValueType", "openGraphReferenceValueType", "bindingTableReferenceValueType", 
      "nodeReferenceValueType", "closedNodeReferenceValueType", "openNodeReferenceValueType", 
      "edgeReferenceValueType", "closedEdgeReferenceValueType", "openEdgeReferenceValueType", 
      "pathValueType", "listValueTypeName", "listValueTypeNameSynonym", 
      "recordType", "fieldTypesSpecification", "fieldTypeList", "notNull", 
      "fieldType", "searchCondition", "predicate", "compOp", "existsPredicate", 
      "nullPredicate", "nullPredicatePart2", "valueTypePredicate", "valueTypePredicatePart2", 
      "normalizedPredicatePart2", "directedPredicate", "directedPredicatePart2", 
      "labeledPredicate", "labeledPredicatePart2", "isLabeledOrColon", "sourceDestinationPredicate", 
      "nodeReference", "sourcePredicatePart2", "destinationPredicatePart2", 
      "edgeReference", "all_differentPredicate", "samePredicate", "property_existsPredicate", 
      "valueExpression", "valueFunction", "booleanValueExpression", "characterOrByteStringFunction", 
      "subCharacterOrByteString", "trimSingleCharacterOrByteString", "foldCharacterString", 
      "trimMultiCharacterCharacterString", "normalizeCharacterString", "nodeReferenceValueExpression", 
      "edgeReferenceValueExpression", "aggregatingValueExpression", "valueExpressionPrimary", 
      "parenthesizedValueExpression", "nonParenthesizedValueExpressionPrimary", 
      "nonParenthesizedValueExpressionPrimarySpecialCase", "unsignedValueSpecification", 
      "nonNegativeIntegerSpecification", "generalValueSpecification", "dynamicParameterSpecification", 
      "letValueExpression", "valueQueryExpression", "caseExpression", "caseAbbreviation", 
      "caseSpecification", "simpleCase", "searchedCase", "simpleWhenClause", 
      "searchedWhenClause", "elseClause", "caseOperand", "whenOperandList", 
      "whenOperand", "result", "resultExpression", "castSpecification", 
      "castOperand", "castTarget", "aggregateFunction", "generalSetFunction", 
      "binarySetFunction", "generalSetFunctionType", "setQuantifier", "binarySetFunctionType", 
      "dependentValueExpression", "independentValueExpression", "element_idFunction", 
      "bindingVariableReference", "pathValueExpression", "pathValueConstructor", 
      "pathValueConstructorByEnumeration", "pathElementList", "pathElementListStart", 
      "pathElementListStep", "listValueExpression", "listValueFunction", 
      "trimListFunction", "elementsFunction", "listValueConstructor", "listValueConstructorByEnumeration", 
      "listElementList", "listElement", "recordConstructor", "fieldsSpecification", 
      "fieldList", "field", "truthValue", "numericValueExpression", "numericValueFunction", 
      "lengthExpression", "cardinalityExpression", "cardinalityExpressionArgument", 
      "charLengthExpression", "byteLengthExpression", "pathLengthExpression", 
      "absoluteValueExpression", "modulusExpression", "numericValueExpressionDividend", 
      "numericValueExpressionDivisor", "trigonometricFunction", "trigonometricFunctionName", 
      "generalLogarithmFunction", "generalLogarithmBase", "generalLogarithmArgument", 
      "commonLogarithm", "naturalLogarithm", "exponentialFunction", "powerFunction", 
      "numericValueExpressionBase", "numericValueExpressionExponent", "squareRoot", 
      "floorFunction", "ceilingFunction", "characterStringValueExpression", 
      "byteStringValueExpression", "trimOperands", "trimCharacterOrByteStringSource", 
      "trimSpecification", "trimCharacterOrByteString", "normalForm", "stringLength", 
      "datetimeValueExpression", "datetimeValueFunction", "dateFunction", 
      "timeFunction", "localtimeFunction", "datetimeFunction", "localdatetimeFunction", 
      "dateFunctionParameters", "timeFunctionParameters", "datetimeFunctionParameters", 
      "durationValueExpression", "datetimeSubtraction", "datetimeSubtractionParameters", 
      "datetimeValueExpression1", "datetimeValueExpression2", "durationValueFunction", 
      "durationFunction", "durationFunctionParameters", "objectName", "objectNameOrBindingVariable", 
      "directoryName", "schemaName", "graphName", "delimitedGraphName", 
      "graphTypeName", "nodeTypeName", "edgeTypeName", "bindingTableName", 
      "delimitedBindingTableName", "procedureName", "labelName", "propertyName", 
      "fieldName", "elementVariable", "pathVariable", "subpathVariable", 
      "bindingVariable", "unsignedLiteral", "generalLiteral", "temporalLiteral", 
      "dateLiteral", "timeLiteral", "datetimeLiteral", "listLiteral", "recordLiteral", 
      "identifier", "regularIdentifier", "timeZoneString", "characterStringLiteral", 
      "unsignedNumericLiteral", "exactNumericLiteral", "approximateNumericLiteral", 
      "unsignedInteger", "unsignedDecimalInteger", "nullLiteral", "dateString", 
      "timeString", "datetimeString", "durationLiteral", "durationString", 
      "nodeSynonym", "edgesSynonym", "edgeSynonym", "nonReservedWords"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "'ABS'", "'ACOS'", "'ALL'", "'ALL_DIFFERENT'", "'AND'", 
      "'ANY'", "'ARRAY'", "'AS'", "'ASC'", "'ASCENDING'", "'ASIN'", "'AT'", 
      "'ATAN'", "'AVG'", "'BIG'", "'BIGINT'", "'BINARY'", "'BOOL'", "'BOOLEAN'", 
      "'BOTH'", "'BTRIM'", "'BY'", "'BYTE_LENGTH'", "'BYTES'", "'CALL'", 
      "'CARDINALITY'", "'CASE'", "'CAST'", "'CEIL'", "'CEILING'", "'CHAR'", 
      "'CHAR_LENGTH'", "'CHARACTER_LENGTH'", "'CHARACTERISTICS'", "'CLOSE'", 
      "'COALESCE'", "'COLLECT_LIST'", "'COMMIT'", "'COPY'", "'COS'", "'COSH'", 
      "'COT'", "'COUNT'", "'CREATE'", "'CURRENT_DATE'", "'CURRENT_GRAPH'", 
      "'CURRENT_PROPERTY_GRAPH'", "'CURRENT_SCHEMA'", "'CURRENT_TIME'", 
      "'CURRENT_TIMESTAMP'", "'DATE'", "'DATETIME'", "'DAY'", "'DEC'", "'DECIMAL'", 
      "'DEGREES'", "'DELETE'", "'DESC'", "'DESCENDING'", "'DETACH'", "'DISTINCT'", 
      "'DOUBLE'", "'DROP'", "'DURATION'", "'DURATION_BETWEEN'", "'ELEMENT_ID'", 
      "'ELSE'", "'END'", "'EXCEPT'", "'EXISTS'", "'EXP'", "'FILTER'", "'FINISH'", 
      "'FLOAT'", "'FLOAT16'", "'FLOAT32'", "'FLOAT64'", "'FLOAT128'", "'FLOAT256'", 
      "'FLOOR'", "'FOR'", "'FROM'", "'GROUP'", "'HAVING'", "'HOME_GRAPH'", 
      "'HOME_PROPERTY_GRAPH'", "'HOME_SCHEMA'", "'HOUR'", "'IF'", "'IN'", 
      "'INSERT'", "'INT'", "'INTEGER'", "'INT8'", "'INTEGER8'", "'INT16'", 
      "'INTEGER16'", "'INT32'", "'INTEGER32'", "'INT64'", "'INTEGER64'", 
      "'INT128'", "'INTEGER128'", "'INT256'", "'INTEGER256'", "'INTERSECT'", 
      "'INTERVAL'", "'IS'", "'LEADING'", "'LEFT'", "'LET'", "'LIKE'", "'LIMIT'", 
      "'LIST'", "'LN'", "'LOCAL'", "'LOCAL_DATETIME'", "'LOCAL_TIME'", "'LOCAL_TIMESTAMP'", 
      "'LOG'", "'LOG10'", "'LOWER'", "'LTRIM'", "'MATCH'", "'MAX'", "'MIN'", 
      "'MINUTE'", "'MOD'", "'MONTH'", "'NEXT'", "'NODETACH'", "'NORMALIZE'", 
      "'NOT'", "'NOTHING'", "'NULL'", "'NULLS'", "'NULLIF'", "'OCTET_LENGTH'", 
      "'OF'", "'OFFSET'", "'OPTIONAL'", "'OR'", "'ORDER'", "'OTHERWISE'", 
      "'PARAMETER'", "'PARAMETERS'", "'PATH'", "'PATH_LENGTH'", "'PATHS'", 
      "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'POWER'", "'PRECISION'", 
      "'PROPERTY_EXISTS'", "'RADIANS'", "'REAL'", "'RECORD'", "'REMOVE'", 
      "'REPLACE'", "'RESET'", "'RETURN'", "'RIGHT'", "'ROLLBACK'", "'RTRIM'", 
      "'SAME'", "'SCHEMA'", "'SECOND'", "'SELECT'", "'SESSION'", "'SESSION_USER'", 
      "'SET'", "'SIGNED'", "'SIN'", "'SINH'", "'SIZE'", "'SKIP'", "'SMALL'", 
      "'SMALLINT'", "'SQRT'", "'START'", "'STDDEV_POP'", "'STDDEV_SAMP'", 
      "'STRING'", "'SUM'", "'TAN'", "'TANH'", "'THEN'", "'TIME'", "'TIMESTAMP'", 
      "'TRAILING'", "'TRIM'", "'TYPED'", "'UBIGINT'", "'UINT'", "'UINT8'", 
      "'UINT16'", "'UINT32'", "'UINT64'", "'UINT128'", "'UINT256'", "'UNION'", 
      "'UNSIGNED'", "'UPPER'", "'USE'", "'USMALLINT'", "'VALUE'", "'VARBINARY'", 
      "'VARCHAR'", "'VARIABLE'", "'WHEN'", "'WHERE'", "'WITH'", "'XOR'", 
      "'YEAR'", "'YIELD'", "'ZONED'", "'ZONED_DATETIME'", "'ZONED_TIME'", 
      "'ABSTRACT'", "'AGGREGATE'", "'AGGREGATES'", "'ALTER'", "'CATALOG'", 
      "'CLEAR'", "'CLONE'", "'CONSTRAINT'", "'CURRENT_ROLE'", "'CURRENT_USER'", 
      "'DATA'", "'DIRECTORY'", "'DRYRUN'", "'EXACT'", "'EXISTING'", "'FUNCTION'", 
      "'GQLSTATUS'", "'GRANT'", "'INSTANT'", "'INFINITY'", "'NUMBER'", "'NUMERIC'", 
      "'ON'", "'OPEN'", "'PARTITION'", "'PROCEDURE'", "'PRODUCT'", "'PROJECT'", 
      "'QUERY'", "'RECORDS'", "'REFERENCE'", "'RENAME'", "'REVOKE'", "'SUBSTRING'", 
      "'SYSTEM_USER'", "'TEMPORAL'", "'UNIQUE'", "'UNIT'", "'VALUES'", "'ACYCLIC'", 
      "'BINDING'", "'BINDINGS'", "'CONNECTING'", "'DESTINATION'", "'DIFFERENT'", 
      "'DIRECTED'", "'EDGE'", "'EDGES'", "'ELEMENT'", "'ELEMENTS'", "'FIRST'", 
      "'GRAPH'", "'GROUPS'", "'KEEP'", "'LABEL'", "'LABELED'", "'LABELS'", 
      "'LAST'", "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", "'NO'", "'NODE'", 
      "'NORMALIZED'", "'ONLY'", "'ORDINALITY'", "'PROPERTY'", "'READ'", 
      "'RELATIONSHIP'", "'RELATIONSHIPS'", "'REPEATABLE'", "'SHORTEST'", 
      "'SIMPLE'", "'SOURCE'", "'TABLE'", "'TO'", "'TRAIL'", "'TRANSACTION'", 
      "'TYPE'", "'UNDIRECTED'", "'VERTEX'", "'WALK'", "'WITHOUT'", "'WRITE'", 
      "'ZONE'", "", "", "", "'|+|'", "']->'", "']~>'", "'||'", "'::'", "'$$'", 
      "'..'", "'>='", "'<-'", "'<~'", "'<-['", "'<~['", "'<->'", "'<-/'", 
      "'<~/'", "'<='", "'-['", "'-/'", "'<>'", "'->'", "']-'", "']~'", "'=>'", 
      "'/-'", "'/->'", "'/~'", "'/~>'", "'~['", "'~>'", "'~/'", "'&'", "'*'", 
      "':'", "','", "'@'", "'$'", "'\"'", "'='", "'!'", "'>'", "'`'", "'{'", 
      "'['", "'('", "'<'", "'-'", "'%'", "'.'", "'+'", "'\\u003F'", "'''", 
      "'\\'", "'}'", "']'", "')'", "'/'", "'~'", "'_'", "'|'"
    },
    std::vector<std::string>{
      "", "IMPLIES", "BOOLEAN_LITERAL", "SINGLE_QUOTED_CHARACTER_SEQUENCE", 
      "DOUBLE_QUOTED_CHARACTER_SEQUENCE", "ACCENT_QUOTED_CHARACTER_SEQUENCE", 
      "NO_ESCAPE", "BYTE_STRING_LITERAL", "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX", 
      "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX", "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX", 
      "UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX", "UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX", 
      "UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX", 
      "UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX", "UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX", 
      "UNSIGNED_DECIMAL_INTEGER", "UNSIGNED_HEXADECIMAL_INTEGER", "UNSIGNED_OCTAL_INTEGER", 
      "UNSIGNED_BINARY_INTEGER", "ABS", "ACOS", "ALL", "ALL_DIFFERENT", 
      "AND", "ANY", "ARRAY", "AS", "ASC", "ASCENDING", "ASIN", "AT", "ATAN", 
      "AVG", "BIG", "BIGINT", "BINARY", "BOOL", "BOOLEAN", "BOTH", "BTRIM", 
      "BY", "BYTE_LENGTH", "BYTES", "CALL", "CARDINALITY", "CASE", "CAST", 
      "CEIL", "CEILING", "CHAR", "CHAR_LENGTH", "CHARACTER_LENGTH", "CHARACTERISTICS", 
      "CLOSE", "COALESCE", "COLLECT_LIST", "COMMIT", "COPY", "COS", "COSH", 
      "COT", "COUNT", "CREATE", "CURRENT_DATE", "CURRENT_GRAPH", "CURRENT_PROPERTY_GRAPH", 
      "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "DATE", "DATETIME", 
      "DAY", "DEC", "DECIMAL", "DEGREES", "DELETE", "DESC", "DESCENDING", 
      "DETACH", "DISTINCT", "DOUBLE", "DROP", "DURATION", "DURATION_BETWEEN", 
      "ELEMENT_ID", "ELSE", "END", "EXCEPT", "EXISTS", "EXP", "FILTER", 
      "FINISH", "FLOAT", "FLOAT16", "FLOAT32", "FLOAT64", "FLOAT128", "FLOAT256", 
      "FLOOR", "FOR", "FROM", "GROUP", "HAVING", "HOME_GRAPH", "HOME_PROPERTY_GRAPH", 
      "HOME_SCHEMA", "HOUR", "IF", "IN", "INSERT", "INT", "INTEGER", "INT8", 
      "INTEGER8", "INT16", "INTEGER16", "INT32", "INTEGER32", "INT64", "INTEGER64", 
      "INT128", "INTEGER128", "INT256", "INTEGER256", "INTERSECT", "INTERVAL", 
      "IS", "LEADING", "LEFT", "LET", "LIKE", "LIMIT", "LIST", "LN", "LOCAL", 
      "LOCAL_DATETIME", "LOCAL_TIME", "LOCAL_TIMESTAMP", "LOG_KW", "LOG10", 
      "LOWER", "LTRIM", "MATCH", "MAX", "MIN", "MINUTE", "MOD", "MONTH", 
      "NEXT", "NODETACH", "NORMALIZE", "NOT", "NOTHING", "NULL_KW", "NULLS", 
      "NULLIF", "OCTET_LENGTH", "OF", "OFFSET", "OPTIONAL", "OR", "ORDER", 
      "OTHERWISE", "PARAMETER", "PARAMETERS", "PATH", "PATH_LENGTH", "PATHS", 
      "PERCENTILE_CONT", "PERCENTILE_DISC", "POWER", "PRECISION", "PROPERTY_EXISTS", 
      "RADIANS", "REAL", "RECORD", "REMOVE", "REPLACE", "RESET", "RETURN", 
      "RIGHT", "ROLLBACK", "RTRIM", "SAME", "SCHEMA", "SECOND", "SELECT", 
      "SESSION", "SESSION_USER", "SET", "SIGNED", "SIN", "SINH", "SIZE", 
      "SKIP_RESERVED_WORD", "SMALL", "SMALLINT", "SQRT", "START", "STDDEV_POP", 
      "STDDEV_SAMP", "STRING", "SUM", "TAN", "TANH", "THEN", "TIME", "TIMESTAMP", 
      "TRAILING", "TRIM", "TYPED", "UBIGINT", "UINT", "UINT8", "UINT16", 
      "UINT32", "UINT64", "UINT128", "UINT256", "UNION", "UNSIGNED", "UPPER", 
      "USE", "USMALLINT", "VALUE", "VARBINARY", "VARCHAR", "VARIABLE", "WHEN", 
      "WHERE", "WITH", "XOR", "YEAR", "YIELD", "ZONED", "ZONED_DATETIME", 
      "ZONED_TIME", "ABSTRACT", "AGGREGATE", "AGGREGATES", "ALTER", "CATALOG", 
      "CLEAR", "CLONE", "CONSTRAINT", "CURRENT_ROLE", "CURRENT_USER", "DATA", 
      "DIRECTORY", "DRYRUN", "EXACT", "EXISTING", "FUNCTION", "GQLSTATUS", 
      "GRANT", "INSTANT", "INFINITY_KW", "NUMBER", "NUMERIC", "ON", "OPEN", 
      "PARTITION", "PROCEDURE", "PRODUCT", "PROJECT", "QUERY", "RECORDS", 
      "REFERENCE", "RENAME", "REVOKE", "SUBSTRING", "SYSTEM_USER", "TEMPORAL", 
      "UNIQUE", "UNIT", "VALUES", "ACYCLIC", "BINDING", "BINDINGS", "CONNECTING", 
      "DESTINATION", "DIFFERENT", "DIRECTED", "EDGE", "EDGES", "ELEMENT", 
      "ELEMENTS", "FIRST", "GRAPH", "GROUPS", "KEEP", "LABEL", "LABELED", 
      "LABELS", "LAST", "NFC", "NFD", "NFKC", "NFKD", "NO", "NODE", "NORMALIZED", 
      "ONLY", "ORDINALITY", "PROPERTY", "READ", "RELATIONSHIP", "RELATIONSHIPS", 
      "REPEATABLE", "SHORTEST", "SIMPLE", "SOURCE", "TABLE", "TO", "TRAIL", 
      "TRANSACTION", "TYPE", "UNDIRECTED", "VERTEX", "WALK", "WITHOUT", 
      "WRITE", "ZONE", "REGULAR_IDENTIFIER", "SUBSTITUTED_PARAMETER_REFERENCE", 
      "GENERAL_PARAMETER_REFERENCE", "MULTISET_ALTERNATION_OPERATOR", "BRACKET_RIGHT_ARROW", 
      "BRACKET_TILDE_RIGHT_ARROW", "CONCATENATION_OPERATOR", "DOUBLE_COLON", 
      "DOUBLE_DOLLAR_SIGN", "DOUBLE_PERIOD", "GREATER_THAN_OR_EQUALS_OPERATOR", 
      "LEFT_ARROW", "LEFT_ARROW_TILDE", "LEFT_ARROW_BRACKET", "LEFT_ARROW_TILDE_BRACKET", 
      "LEFT_MINUS_RIGHT", "LEFT_MINUS_SLASH", "LEFT_TILDE_SLASH", "LESS_THAN_OR_EQUALS_OPERATOR", 
      "MINUS_LEFT_BRACKET", "MINUS_SLASH", "NOT_EQUALS_OPERATOR", "RIGHT_ARROW", 
      "RIGHT_BRACKET_MINUS", "RIGHT_BRACKET_TILDE", "RIGHT_DOUBLE_ARROW", 
      "SLASH_MINUS", "SLASH_MINUS_RIGHT", "SLASH_TILDE", "SLASH_TILDE_RIGHT", 
      "TILDE_LEFT_BRACKET", "TILDE_RIGHT_ARROW", "TILDE_SLASH", "AMPERSAND", 
      "ASTERISK", "COLON", "COMMA", "COMMERCIAL_AT", "DOLLAR_SIGN", "DOUBLE_QUOTE", 
      "EQUALS_OPERATOR", "EXCLAMATION_MARK", "RIGHT_ANGLE_BRACKET", "GRAVE_ACCENT", 
      "LEFT_BRACE", "LEFT_BRACKET", "LEFT_PAREN", "LEFT_ANGLE_BRACKET", 
      "MINUS_SIGN", "PERCENT", "PERIOD", "PLUS_SIGN", "QUESTION_MARK", "QUOTE", 
      "REVERSE_SOLIDUS", "RIGHT_BRACE", "RIGHT_BRACKET", "RIGHT_PAREN", 
      "SOLIDUS", "TILDE", "UNDERSCORE", "VERTICAL_BAR", "SP", "WHITESPACE", 
      "BRACKETED_COMMENT", "SIMPLE_COMMENT_SOLIDUS", "SIMPLE_COMMENT_MINUS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,390,4603,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,
  	7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,
  	7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,
  	7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
  	7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,
  	7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,
  	7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,
  	7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,
  	7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
  	7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
  	7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,
  	7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,
  	7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,
  	7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,
  	7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,
  	7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,
  	7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,
  	7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,
  	7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,
  	7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
  	7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
  	7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,
  	7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,
  	7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,
  	7,248,2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,
  	7,254,2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,
  	7,260,2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,
  	7,266,2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,
  	7,272,2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,
  	7,278,2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,
  	7,284,2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,
  	7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,
  	7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,
  	7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,
  	7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,
  	7,314,2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,
  	7,320,2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,
  	7,326,2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,
  	7,332,2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,
  	7,338,2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,
  	7,344,2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,
  	7,350,2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,
  	7,356,2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,
  	7,362,2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,
  	7,368,2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,
  	7,374,2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,
  	7,380,2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,
  	7,386,2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,
  	7,392,2,393,7,393,2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,
  	7,398,2,399,7,399,2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,
  	7,404,2,405,7,405,2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,
  	7,410,2,411,7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,
  	7,416,2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,
  	7,422,2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,
  	7,428,2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,
  	7,434,2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,
  	7,440,2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,
  	7,446,2,447,7,447,2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,
  	7,452,2,453,7,453,2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,
  	7,458,2,459,7,459,2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,
  	7,464,2,465,7,465,2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,
  	7,470,2,471,7,471,2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,
  	7,476,2,477,7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,
  	7,482,2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,
  	7,488,2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,
  	7,494,2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,
  	7,500,2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,
  	7,506,2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,
  	7,512,2,513,7,513,2,514,7,514,2,515,7,515,2,516,7,516,2,517,7,517,2,518,
  	7,518,2,519,7,519,2,520,7,520,2,521,7,521,2,522,7,522,2,523,7,523,2,524,
  	7,524,2,525,7,525,2,526,7,526,2,527,7,527,2,528,7,528,2,529,7,529,2,530,
  	7,530,2,531,7,531,2,532,7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,
  	7,536,2,537,7,537,2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,
  	7,542,2,543,7,543,2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,
  	7,548,2,549,7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,
  	7,554,2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,
  	7,560,2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,2,566,
  	7,566,2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,2,571,7,571,2,572,
  	7,572,2,573,7,573,1,0,1,0,3,0,1151,8,0,1,0,1,0,1,0,1,0,1,0,3,0,1158,8,
  	0,1,1,1,1,3,1,1162,8,1,1,2,4,2,1165,8,2,11,2,12,2,1166,1,2,4,2,1170,8,
  	2,11,2,12,2,1171,1,2,5,2,1175,8,2,10,2,12,2,1178,9,2,3,2,1180,8,2,1,3,
  	1,3,1,3,3,3,1185,8,3,3,3,1187,8,3,1,3,1,3,3,3,1191,8,3,1,3,3,3,1194,8,
  	3,1,4,1,4,3,4,1198,8,4,1,5,1,5,1,5,1,5,1,5,1,5,3,5,1206,8,5,1,6,1,6,1,
  	6,1,7,3,7,1212,8,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,
  	3,10,1226,8,10,1,11,3,11,1229,8,11,1,11,1,11,1,11,1,11,1,12,3,12,1236,
  	8,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,1249,
  	8,14,1,14,1,14,1,15,1,15,1,15,3,15,1256,8,15,1,16,3,16,1259,8,16,1,16,
  	1,16,1,16,3,16,1264,8,16,1,16,1,16,1,16,1,16,3,16,1270,8,16,1,16,3,16,
  	1273,8,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,3,19,1283,8,19,1,20,
  	1,20,1,20,5,20,1288,8,20,10,20,12,20,1291,9,20,1,21,1,21,1,22,1,22,1,
  	22,1,22,3,22,1299,8,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,
  	26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,3,29,1320,8,29,1,29,3,
  	29,1323,8,29,1,29,1,29,1,30,4,30,1328,8,30,11,30,12,30,1329,1,31,1,31,
  	1,31,3,31,1335,8,31,1,32,1,32,5,32,1339,8,32,10,32,12,32,1342,9,32,1,
  	33,1,33,1,33,3,33,1347,8,33,1,34,1,34,3,34,1351,8,34,1,34,1,34,1,35,3,
  	35,1356,8,35,1,35,1,35,1,35,1,35,1,36,3,36,1363,8,36,1,36,3,36,1366,8,
  	36,1,36,1,36,1,37,1,37,1,37,1,38,3,38,1374,8,38,1,38,1,38,1,38,1,38,1,
  	39,3,39,1381,8,39,1,39,3,39,1384,8,39,1,39,1,39,1,40,1,40,1,40,1,41,1,
  	41,1,41,1,41,1,42,3,42,1396,8,42,1,42,3,42,1399,8,42,1,42,1,42,1,43,1,
  	43,1,43,1,44,1,44,1,44,1,44,3,44,1410,8,44,1,45,1,45,1,46,1,46,1,46,1,
  	46,3,46,1418,8,46,1,47,1,47,1,48,1,48,1,48,1,48,3,48,1426,8,48,1,49,4,
  	49,1429,8,49,11,49,12,49,1430,1,50,1,50,3,50,1435,8,50,1,51,1,51,1,51,
  	1,51,1,51,1,51,3,51,1443,8,51,1,52,1,52,1,52,1,52,1,52,3,52,1450,8,52,
  	1,52,1,52,1,53,1,53,1,53,1,53,3,53,1458,8,53,1,53,1,53,1,54,1,54,3,54,
  	1464,8,54,1,54,1,54,1,54,1,54,3,54,1470,8,54,1,54,1,54,1,54,3,54,1475,
  	8,54,1,54,3,54,1478,8,54,1,54,1,54,1,54,3,54,1483,8,54,1,54,3,54,1486,
  	8,54,1,55,3,55,1489,8,55,1,55,1,55,3,55,1493,8,55,1,55,3,55,1496,8,55,
  	1,56,1,56,3,56,1500,8,56,1,56,1,56,3,56,1504,8,56,1,56,3,56,1507,8,56,
  	1,56,3,56,1510,8,56,1,56,3,56,1513,8,56,1,57,1,57,1,57,1,58,1,58,1,58,
  	1,58,1,58,1,59,1,59,3,59,1525,8,59,1,59,1,59,1,59,3,59,1530,8,59,1,59,
  	1,59,1,60,1,60,3,60,1536,8,60,1,60,1,60,1,60,1,60,1,60,3,60,1543,8,60,
  	1,60,1,60,1,60,3,60,1548,8,60,1,60,1,60,3,60,1552,8,60,1,60,1,60,1,60,
  	1,61,3,61,1558,8,61,1,61,1,61,1,61,3,61,1563,8,61,1,61,3,61,1566,8,61,
  	1,62,1,62,1,62,1,62,1,63,1,63,3,63,1574,8,63,1,63,1,63,1,63,1,63,3,63,
  	1580,8,63,1,63,1,63,1,64,1,64,1,65,1,65,3,65,1588,8,65,1,66,1,66,3,66,
  	1592,8,66,1,67,1,67,1,67,3,67,1597,8,67,1,68,1,68,1,68,1,69,1,69,3,69,
  	1604,8,69,1,70,1,70,3,70,1608,8,70,1,71,4,71,1611,8,71,11,71,12,71,1612,
  	1,72,1,72,3,72,1617,8,72,1,73,1,73,3,73,1621,8,73,1,74,1,74,1,74,1,74,
  	3,74,1627,8,74,1,75,1,75,1,75,1,76,1,76,1,76,1,77,1,77,1,77,5,77,1638,
  	8,77,10,77,12,77,1641,9,77,1,78,1,78,1,78,3,78,1646,8,78,1,79,1,79,1,
  	79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,3,80,1658,8,80,1,80,1,80,1,81,1,
  	81,1,81,1,81,1,82,1,82,1,82,1,83,1,83,1,83,5,83,1672,8,83,10,83,12,83,
  	1675,9,83,1,84,1,84,3,84,1679,8,84,1,85,1,85,1,85,1,85,1,86,1,86,1,86,
  	1,86,1,87,3,87,1690,8,87,1,87,1,87,1,87,1,88,1,88,1,88,5,88,1698,8,88,
  	10,88,12,88,1701,9,88,1,89,1,89,1,90,1,90,1,91,1,91,1,92,1,92,1,92,1,
  	92,1,92,1,92,1,92,5,92,1716,8,92,10,92,12,92,1719,9,92,1,93,1,93,3,93,
  	1723,8,93,1,94,1,94,3,94,1727,8,94,1,94,1,94,3,94,1731,8,94,1,94,1,94,
  	3,94,1735,8,94,3,94,1737,8,94,1,95,1,95,1,96,1,96,3,96,1743,8,96,1,97,
  	5,97,1746,8,97,10,97,12,97,1749,9,97,1,97,1,97,1,97,1,97,3,97,1755,8,
  	97,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,101,1,101,1,
  	101,1,102,3,102,1771,8,102,1,102,1,102,3,102,1775,8,102,1,103,4,103,1778,
  	8,103,11,103,12,103,1779,1,104,1,104,3,104,1784,8,104,1,105,1,105,1,105,
  	1,105,1,105,3,105,1791,8,105,1,106,1,106,3,106,1795,8,106,1,107,1,107,
  	1,107,1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
  	1,109,3,109,1812,8,109,1,110,4,110,1815,8,110,11,110,12,110,1816,1,111,
  	1,111,1,112,1,112,1,112,3,112,1824,8,112,1,113,1,113,1,113,1,114,1,114,
  	1,114,5,114,1832,8,114,10,114,12,114,1835,9,114,1,115,1,115,1,115,1,115,
  	1,115,3,115,1842,8,115,1,116,1,116,1,116,3,116,1847,8,116,1,117,1,117,
  	1,117,1,118,1,118,1,118,1,119,1,119,1,120,1,120,1,120,1,120,1,121,1,121,
  	3,121,1863,8,121,1,121,3,121,1866,8,121,1,121,1,121,3,121,1870,8,121,
  	1,121,3,121,1873,8,121,1,122,1,122,3,122,1877,8,122,1,122,3,122,1880,
  	8,122,1,123,1,123,1,123,1,124,3,124,1886,8,124,1,124,1,124,3,124,1890,
  	8,124,1,124,3,124,1893,8,124,1,125,1,125,1,125,5,125,1898,8,125,10,125,
  	12,125,1901,9,125,1,126,1,126,3,126,1905,8,126,1,127,1,127,1,127,1,128,
  	1,128,3,128,1912,8,128,1,128,1,128,3,128,1916,8,128,1,128,1,128,3,128,
  	1920,8,128,1,128,3,128,1923,8,128,1,128,3,128,1926,8,128,1,128,3,128,
  	1929,8,128,1,128,3,128,1932,8,128,1,128,3,128,1935,8,128,3,128,1937,8,
  	128,1,129,1,129,1,129,5,129,1942,8,129,10,129,12,129,1945,9,129,1,130,
  	1,130,3,130,1949,8,130,1,131,1,131,1,131,1,132,1,132,1,132,1,133,1,133,
  	1,133,3,133,1960,8,133,1,134,1,134,1,134,5,134,1965,8,134,10,134,12,134,
  	1968,9,134,1,135,1,135,1,135,1,136,1,136,1,136,1,136,3,136,1977,8,136,
  	1,137,3,137,1980,8,137,1,137,1,137,1,137,1,138,1,138,3,138,1987,8,138,
  	1,139,3,139,1990,8,139,1,139,1,139,1,140,1,140,3,140,1996,8,140,1,140,
  	1,140,1,141,1,141,1,141,5,141,2003,8,141,10,141,12,141,2006,9,141,1,142,
  	1,142,1,142,3,142,2011,8,142,1,142,1,142,3,142,2015,8,142,1,143,1,143,
  	1,143,5,143,2020,8,143,10,143,12,143,2023,9,143,1,144,1,144,1,145,1,145,
  	1,145,1,146,1,146,1,146,1,147,1,147,3,147,2035,8,147,1,148,1,148,1,148,
  	1,149,1,149,1,149,5,149,2043,8,149,10,149,12,149,2046,9,149,1,150,1,150,
  	1,151,3,151,2051,8,151,1,151,1,151,3,151,2055,8,151,1,151,3,151,2058,
  	8,151,1,152,1,152,3,152,2062,8,152,1,153,1,153,1,153,1,154,1,154,1,154,
  	1,155,1,155,3,155,2072,8,155,1,155,3,155,2075,8,155,1,156,1,156,3,156,
  	2079,8,156,1,156,3,156,2082,8,156,1,157,1,157,1,157,5,157,2087,8,157,
  	10,157,12,157,2090,9,157,1,158,3,158,2093,8,158,1,158,3,158,2096,8,158,
  	1,158,1,158,1,159,1,159,1,159,1,160,1,160,1,160,1,161,1,161,1,161,1,162,
  	1,162,1,163,1,163,1,163,5,163,2114,8,163,10,163,12,163,2117,9,163,1,164,
  	1,164,1,164,1,164,5,164,2123,8,164,10,164,12,164,2126,9,164,1,165,1,165,
  	3,165,2130,8,165,1,165,1,165,1,166,1,166,1,166,3,166,2137,8,166,1,167,
  	1,167,3,167,2141,8,167,1,167,1,167,1,168,1,168,3,168,2147,8,168,1,168,
  	1,168,1,169,1,169,3,169,2153,8,169,1,169,1,169,1,170,1,170,3,170,2159,
  	8,170,1,170,3,170,2162,8,170,1,170,3,170,2165,8,170,1,171,1,171,1,171,
  	3,171,2170,8,171,1,171,1,171,1,171,3,171,2175,8,171,1,171,3,171,2178,
  	8,171,1,172,1,172,3,172,2182,8,172,1,173,1,173,3,173,2186,8,173,1,174,
  	1,174,1,175,1,175,1,175,3,175,2193,8,175,1,176,1,176,3,176,2197,8,176,
  	1,176,3,176,2200,8,176,1,177,1,177,1,178,1,178,3,178,2206,8,178,1,178,
  	3,178,2209,8,178,1,178,3,178,2212,8,178,1,179,1,179,1,180,1,180,1,180,
  	1,180,3,180,2220,8,180,1,181,1,181,1,181,3,181,2225,8,181,1,181,3,181,
  	2228,8,181,1,182,1,182,1,182,3,182,2233,8,182,1,182,3,182,2236,8,182,
  	1,183,1,183,1,183,3,183,2241,8,183,1,183,3,183,2244,8,183,1,184,1,184,
  	3,184,2248,8,184,1,184,3,184,2251,8,184,1,184,3,184,2254,8,184,1,184,
  	1,184,1,185,1,185,1,186,1,186,1,186,1,186,4,186,2264,8,186,11,186,12,
  	186,2265,1,186,1,186,1,186,4,186,2271,8,186,11,186,12,186,2272,3,186,
  	2275,8,186,1,187,4,187,2278,8,187,11,187,12,187,2279,1,188,1,188,1,188,
  	1,188,1,188,1,188,1,188,3,188,2289,8,188,1,189,1,189,1,189,3,189,2294,
  	8,189,1,190,1,190,3,190,2298,8,190,1,191,1,191,1,191,1,191,1,192,3,192,
  	2305,8,192,1,192,3,192,2308,8,192,1,192,3,192,2311,8,192,1,193,1,193,
  	1,194,1,194,1,194,1,195,1,195,1,196,1,196,3,196,2322,8,196,1,197,1,197,
  	1,197,1,198,1,198,1,198,1,198,1,199,1,199,1,199,5,199,2334,8,199,10,199,
  	12,199,2337,9,199,1,200,1,200,1,200,1,200,1,201,1,201,3,201,2345,8,201,
  	1,202,1,202,1,202,1,202,1,202,1,202,1,202,3,202,2354,8,202,1,203,1,203,
  	1,203,1,203,1,204,1,204,1,204,1,204,1,205,1,205,1,205,1,205,1,206,1,206,
  	1,206,1,206,1,207,1,207,1,207,1,207,1,208,1,208,1,208,1,208,1,209,1,209,
  	1,209,1,209,1,210,1,210,1,211,1,211,3,211,2388,8,211,1,211,3,211,2391,
  	8,211,1,211,1,211,3,211,2395,8,211,1,211,1,211,1,212,1,212,1,212,1,213,
  	1,213,1,213,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,3,214,
  	2414,8,214,1,214,1,214,1,214,1,214,1,214,1,214,5,214,2422,8,214,10,214,
  	12,214,2425,9,214,1,215,1,215,1,216,1,216,1,217,1,217,1,217,1,217,3,217,
  	2435,8,217,1,218,1,218,1,218,1,218,1,219,1,219,3,219,2443,8,219,1,219,
  	1,219,3,219,2447,8,219,1,219,1,219,1,220,1,220,1,221,1,221,1,222,1,222,
  	1,222,1,222,1,222,1,222,1,222,3,222,2462,8,222,1,223,1,223,1,223,1,223,
  	1,224,1,224,1,224,1,224,1,225,1,225,1,225,1,225,1,226,1,226,1,226,1,226,
  	1,227,1,227,1,227,1,227,1,228,1,228,1,228,1,228,1,229,1,229,1,229,1,229,
  	1,230,1,230,1,230,3,230,2495,8,230,1,231,1,231,1,231,1,231,1,231,5,231,
  	2502,8,231,10,231,12,231,2505,9,231,1,232,1,232,1,232,1,232,1,232,5,232,
  	2512,8,232,10,232,12,232,2515,9,232,1,233,1,233,1,233,1,233,1,233,5,233,
  	2522,8,233,10,233,12,233,2525,9,233,1,234,1,234,1,234,1,234,1,234,1,234,
  	5,234,2533,8,234,10,234,12,234,2536,9,234,1,235,1,235,1,235,3,235,2541,
  	8,235,1,236,1,236,1,236,1,237,1,237,1,237,1,238,1,238,3,238,2551,8,238,
  	1,239,1,239,1,239,1,239,1,239,1,239,1,239,3,239,2560,8,239,1,240,1,240,
  	1,240,1,241,1,241,1,241,1,242,1,242,1,242,1,243,1,243,1,243,1,244,1,244,
  	1,244,1,244,1,245,1,245,1,245,1,245,1,246,1,246,1,246,1,247,1,247,3,247,
  	2587,8,247,1,248,1,248,1,248,1,249,1,249,1,249,1,249,1,249,3,249,2597,
  	8,249,1,250,1,250,1,250,1,251,1,251,1,251,1,252,1,252,1,252,5,252,2608,
  	8,252,10,252,12,252,2611,9,252,1,253,1,253,3,253,2615,8,253,1,254,1,254,
  	1,255,1,255,1,255,1,256,1,256,1,256,1,256,1,257,1,257,1,257,5,257,2629,
  	8,257,10,257,12,257,2632,9,257,1,257,3,257,2635,8,257,1,258,1,258,1,259,
  	1,259,1,259,1,260,1,260,1,260,1,260,1,261,1,261,1,261,5,261,2649,8,261,
  	10,261,12,261,2652,9,261,1,262,1,262,3,262,2656,8,262,1,262,3,262,2659,
  	8,262,1,263,1,263,1,264,1,264,1,265,1,265,1,265,1,265,3,265,2669,8,265,
  	1,266,1,266,1,266,1,267,1,267,1,267,1,268,1,268,1,269,1,269,1,269,3,269,
  	2682,8,269,1,270,1,270,1,270,1,270,3,270,2688,8,270,1,271,1,271,1,271,
  	1,272,1,272,1,272,1,272,3,272,2697,8,272,1,273,1,273,1,274,1,274,3,274,
  	2703,8,274,1,275,1,275,1,275,5,275,2708,8,275,10,275,12,275,2711,9,275,
  	1,275,1,275,3,275,2715,8,275,1,276,1,276,1,276,4,276,2720,8,276,11,276,
  	12,276,2721,1,277,1,277,1,277,1,277,1,277,1,277,3,277,2730,8,277,1,278,
  	3,278,2733,8,278,1,278,1,278,1,279,1,279,1,280,1,280,3,280,2741,8,280,
  	1,281,3,281,2744,8,281,1,281,1,281,1,282,1,282,1,282,1,282,1,282,3,282,
  	2753,8,282,1,283,1,283,3,283,2757,8,283,1,284,3,284,2760,8,284,1,284,
  	1,284,1,285,1,285,3,285,2766,8,285,1,285,1,285,1,285,5,285,2771,8,285,
  	10,285,12,285,2774,9,285,1,285,1,285,1,285,4,285,2779,8,285,11,285,12,
  	285,2780,3,285,2783,8,285,1,286,1,286,1,287,1,287,1,287,1,287,1,288,1,
  	288,1,289,1,289,1,289,5,289,2796,8,289,10,289,12,289,2799,9,289,1,290,
  	1,290,3,290,2803,8,290,1,291,1,291,3,291,2807,8,291,1,292,1,292,3,292,
  	2811,8,292,1,292,1,292,3,292,2815,8,292,1,292,1,292,3,292,2819,8,292,
  	1,292,3,292,2822,8,292,1,292,1,292,1,293,1,293,3,293,2828,8,293,1,293,
  	1,293,1,293,3,293,2833,8,293,1,294,1,294,3,294,2837,8,294,1,294,3,294,
  	2840,8,294,1,295,1,295,3,295,2844,8,295,1,295,3,295,2847,8,295,1,296,
  	1,296,1,297,1,297,1,297,1,297,1,297,3,297,2856,8,297,1,298,3,298,2859,
  	8,298,1,298,1,298,1,299,1,299,1,300,1,300,1,301,1,301,3,301,2869,8,301,
  	1,302,3,302,2872,8,302,1,302,1,302,3,302,2876,8,302,1,302,1,302,3,302,
  	2880,8,302,1,302,1,302,3,302,2884,8,302,1,303,1,303,1,303,3,303,2889,
  	8,303,1,303,1,303,1,303,1,304,1,304,3,304,2896,8,304,1,304,3,304,2899,
  	8,304,1,305,1,305,3,305,2903,8,305,1,305,3,305,2906,8,305,1,306,1,306,
  	1,306,1,306,1,306,3,306,2913,8,306,1,307,3,307,2916,8,307,1,307,1,307,
  	1,308,1,308,1,309,1,309,1,310,1,310,3,310,2926,8,310,1,311,1,311,1,311,
  	1,311,1,312,1,312,1,312,1,312,1,313,1,313,1,313,1,313,1,314,1,314,1,314,
  	1,314,1,315,1,315,1,315,1,315,1,316,1,316,1,316,1,316,1,317,1,317,1,317,
  	1,317,1,317,1,317,3,317,2958,8,317,1,317,3,317,2961,8,317,1,318,1,318,
  	1,318,1,318,1,318,1,318,3,318,2969,8,318,1,318,3,318,2972,8,318,1,319,
  	1,319,1,320,1,320,1,320,1,321,1,321,3,321,2981,8,321,1,322,1,322,3,322,
  	2985,8,322,1,323,1,323,1,323,1,323,1,323,1,323,1,324,1,324,1,324,1,324,
  	1,324,1,324,1,325,1,325,1,325,1,325,1,325,1,325,1,326,1,326,1,327,1,327,
  	1,328,1,328,1,329,1,329,1,330,1,330,1,330,1,330,1,330,1,330,1,330,3,330,
  	3020,8,330,1,331,1,331,1,331,5,331,3025,8,331,10,331,12,331,3028,9,331,
  	1,332,1,332,3,332,3032,8,332,1,332,1,332,1,333,1,333,1,333,5,333,3039,
  	8,333,10,333,12,333,3042,9,333,1,334,1,334,3,334,3046,8,334,1,334,1,334,
  	1,335,1,335,1,336,3,336,3053,8,336,1,336,1,336,1,336,1,337,1,337,1,337,
  	1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,3,337,3069,8,337,1,337,
  	3,337,3072,8,337,1,337,1,337,1,337,1,337,1,337,3,337,3079,8,337,1,337,
  	3,337,3082,8,337,1,337,1,337,1,337,3,337,3087,8,337,1,337,3,337,3090,
  	8,337,1,337,3,337,3093,8,337,1,337,1,337,1,337,3,337,3098,8,337,1,337,
  	1,337,3,337,3102,8,337,1,337,1,337,1,337,1,337,5,337,3108,8,337,10,337,
  	12,337,3111,9,337,1,337,1,337,3,337,3115,8,337,1,337,1,337,1,337,1,337,
  	1,337,1,337,1,337,1,337,1,337,3,337,3126,8,337,1,337,3,337,3129,8,337,
  	5,337,3131,8,337,10,337,12,337,3134,9,337,1,338,1,338,1,339,1,339,1,339,
  	1,339,1,339,1,339,1,339,3,339,3145,8,339,1,340,1,340,3,340,3149,8,340,
  	1,341,1,341,1,341,1,341,1,341,3,341,3156,8,341,1,341,1,341,1,341,3,341,
  	3161,8,341,1,341,3,341,3164,8,341,1,341,1,341,1,341,1,341,1,341,3,341,
  	3171,8,341,1,341,3,341,3174,8,341,1,341,1,341,1,341,1,341,1,341,3,341,
  	3181,8,341,1,341,3,341,3184,8,341,3,341,3186,8,341,1,342,1,342,1,342,
  	1,342,1,342,3,342,3193,8,342,1,342,1,342,1,342,3,342,3198,8,342,1,342,
  	3,342,3201,8,342,1,342,1,342,1,342,1,342,1,342,3,342,3208,8,342,1,342,
  	3,342,3211,8,342,1,342,1,342,1,342,1,342,1,342,3,342,3218,8,342,1,342,
  	3,342,3221,8,342,3,342,3223,8,342,1,343,1,343,1,344,1,344,1,345,1,345,
  	1,346,1,346,3,346,3233,8,346,1,347,1,347,3,347,3237,8,347,1,348,1,348,
  	3,348,3241,8,348,1,349,1,349,3,349,3245,8,349,1,349,1,349,3,349,3249,
  	8,349,1,349,1,349,3,349,3253,8,349,1,349,1,349,3,349,3257,8,349,1,349,
  	1,349,3,349,3261,8,349,1,349,1,349,3,349,3265,8,349,1,349,1,349,3,349,
  	3269,8,349,1,349,1,349,1,349,1,349,1,349,3,349,3276,8,349,1,349,3,349,
  	3279,8,349,1,349,1,349,3,349,3283,8,349,1,349,3,349,3286,8,349,1,349,
  	3,349,3289,8,349,1,350,1,350,3,350,3293,8,350,1,350,1,350,3,350,3297,
  	8,350,1,350,1,350,3,350,3301,8,350,1,350,1,350,3,350,3305,8,350,1,350,
  	1,350,3,350,3309,8,350,1,350,1,350,3,350,3313,8,350,1,350,1,350,3,350,
  	3317,8,350,1,350,1,350,1,350,1,350,1,350,3,350,3324,8,350,1,350,3,350,
  	3327,8,350,1,350,1,350,3,350,3331,8,350,1,350,1,350,3,350,3335,8,350,
  	1,351,1,351,3,351,3339,8,351,1,351,1,351,3,351,3343,8,351,1,351,1,351,
  	3,351,3347,8,351,1,351,1,351,3,351,3351,8,351,1,351,1,351,3,351,3355,
  	8,351,1,351,1,351,3,351,3359,8,351,1,351,1,351,1,351,3,351,3364,8,351,
  	1,351,1,351,1,351,1,351,1,351,3,351,3371,8,351,1,351,3,351,3374,8,351,
  	1,351,1,351,1,351,3,351,3379,8,351,3,351,3381,8,351,1,352,1,352,1,352,
  	1,352,1,352,3,352,3388,8,352,1,352,1,352,3,352,3392,8,352,3,352,3394,
  	8,352,1,353,1,353,1,354,1,354,1,355,1,355,3,355,3402,8,355,1,355,1,355,
  	3,355,3406,8,355,1,355,1,355,3,355,3410,8,355,1,355,1,355,3,355,3414,
  	8,355,1,355,1,355,3,355,3418,8,355,1,355,1,355,1,355,1,355,1,355,3,355,
  	3425,8,355,1,355,1,355,3,355,3429,8,355,1,355,3,355,3432,8,355,1,355,
  	1,355,3,355,3436,8,355,1,355,1,355,3,355,3440,8,355,1,355,3,355,3443,
  	8,355,3,355,3445,8,355,1,356,1,356,3,356,3449,8,356,1,357,1,357,1,357,
  	1,357,1,357,3,357,3456,8,357,1,358,1,358,1,358,3,358,3461,8,358,1,358,
  	1,358,1,358,1,358,1,358,3,358,3468,8,358,3,358,3470,8,358,1,359,1,359,
  	1,359,3,359,3475,8,359,1,359,1,359,1,359,1,359,3,359,3481,8,359,1,359,
  	3,359,3484,8,359,3,359,3486,8,359,1,360,1,360,3,360,3490,8,360,1,361,
  	1,361,1,361,3,361,3495,8,361,1,361,1,361,1,361,1,361,1,361,3,361,3502,
  	8,361,3,361,3504,8,361,1,362,1,362,1,362,3,362,3509,8,362,1,362,1,362,
  	1,362,1,362,1,362,3,362,3516,8,362,3,362,3518,8,362,1,363,1,363,1,363,
  	1,363,1,363,3,363,3525,8,363,1,364,1,364,1,364,1,364,1,364,1,364,3,364,
  	3533,8,364,1,365,1,365,1,365,1,365,3,365,3539,8,365,1,366,1,366,3,366,
  	3543,8,366,1,367,1,367,1,368,1,368,1,368,3,368,3550,8,368,1,369,1,369,
  	3,369,3554,8,369,1,370,3,370,3557,8,370,1,370,1,370,1,370,3,370,3562,
  	8,370,1,371,1,371,3,371,3566,8,371,1,371,1,371,3,371,3570,8,371,1,372,
  	1,372,3,372,3574,8,372,1,373,1,373,3,373,3578,8,373,1,374,1,374,3,374,
  	3582,8,374,1,375,3,375,3585,8,375,1,375,1,375,3,375,3589,8,375,1,376,
  	1,376,3,376,3593,8,376,1,377,1,377,3,377,3597,8,377,1,378,3,378,3600,
  	8,378,1,378,1,378,3,378,3604,8,378,1,379,1,379,3,379,3608,8,379,1,380,
  	1,380,1,381,1,381,1,382,3,382,3615,8,382,1,382,1,382,3,382,3619,8,382,
  	1,382,3,382,3622,8,382,1,382,1,382,3,382,3626,8,382,3,382,3628,8,382,
  	1,383,1,383,3,383,3632,8,383,1,383,1,383,1,384,1,384,1,384,5,384,3639,
  	8,384,10,384,12,384,3642,9,384,1,385,1,385,1,385,1,386,1,386,3,386,3649,
  	8,386,1,386,1,386,1,387,1,387,1,388,1,388,1,388,1,388,1,388,1,388,1,388,
  	1,388,1,388,3,388,3664,8,388,1,389,1,389,1,390,1,390,1,390,1,390,1,390,
  	1,390,1,390,1,390,1,390,1,390,1,390,1,390,1,390,1,390,1,390,1,390,1,390,
  	1,390,3,390,3686,8,390,1,391,1,391,1,391,1,392,1,392,3,392,3693,8,392,
  	1,392,1,392,1,393,1,393,1,393,1,394,1,394,3,394,3702,8,394,1,394,1,394,
  	1,394,1,395,1,395,3,395,3709,8,395,1,395,3,395,3712,8,395,1,395,1,395,
  	1,396,1,396,1,396,1,397,1,397,3,397,3721,8,397,1,397,1,397,1,398,1,398,
  	1,398,1,399,1,399,1,399,1,400,1,400,3,400,3733,8,400,1,400,1,400,3,400,
  	3737,8,400,1,401,1,401,1,401,1,401,1,401,1,401,3,401,3745,8,401,1,402,
  	1,402,1,403,1,403,3,403,3751,8,403,1,403,1,403,1,403,1,403,1,404,1,404,
  	3,404,3759,8,404,1,404,1,404,1,404,1,404,1,405,1,405,1,406,1,406,1,406,
  	1,406,1,406,1,406,1,406,5,406,3774,8,406,10,406,12,406,3777,9,406,1,406,
  	1,406,1,407,1,407,1,407,1,407,1,407,1,407,1,407,5,407,3788,8,407,10,407,
  	12,407,3791,9,407,1,407,1,407,1,408,1,408,1,408,1,408,1,408,1,408,1,408,
  	1,409,1,409,1,409,1,409,1,409,1,409,1,409,3,409,3809,8,409,1,409,1,409,
  	1,409,3,409,3814,8,409,1,409,1,409,1,409,1,409,3,409,3820,8,409,1,409,
  	1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,
  	1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,1,409,3,409,
  	3846,8,409,1,409,5,409,3849,8,409,10,409,12,409,3852,9,409,1,410,1,410,
  	1,410,1,410,1,410,1,410,3,410,3860,8,410,1,411,1,411,1,412,1,412,1,412,
  	1,412,1,412,3,412,3869,8,412,1,413,1,413,1,413,1,413,1,413,1,413,1,413,
  	1,414,1,414,1,414,1,414,1,414,1,415,1,415,1,415,1,415,1,415,1,416,1,416,
  	1,416,1,416,1,416,3,416,3893,8,416,1,416,1,416,1,417,1,417,1,417,1,417,
  	1,417,3,417,3902,8,417,1,417,1,417,1,418,1,418,1,419,1,419,1,420,1,420,
  	1,421,1,421,1,421,1,421,1,421,1,421,1,421,1,421,1,421,1,421,1,421,3,421,
  	3923,8,421,1,421,1,421,1,421,5,421,3928,8,421,10,421,12,421,3931,9,421,
  	1,422,1,422,1,422,1,422,1,423,1,423,3,423,3939,8,423,1,424,1,424,1,424,
  	1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,1,424,3,424,3953,8,424,
  	1,425,1,425,3,425,3957,8,425,1,426,1,426,3,426,3961,8,426,1,427,1,427,
  	3,427,3965,8,427,1,428,1,428,1,429,1,429,1,429,1,429,1,429,1,429,1,430,
  	1,430,1,430,1,431,1,431,3,431,3980,8,431,1,432,1,432,1,432,1,432,1,432,
  	1,432,1,432,1,432,1,432,1,432,1,432,1,432,4,432,3994,8,432,11,432,12,
  	432,3995,1,432,1,432,3,432,4000,8,432,1,433,1,433,3,433,4004,8,433,1,
  	434,1,434,1,434,4,434,4009,8,434,11,434,12,434,4010,1,434,3,434,4014,
  	8,434,1,434,1,434,1,435,1,435,4,435,4020,8,435,11,435,12,435,4021,1,435,
  	3,435,4025,8,435,1,435,1,435,1,436,1,436,1,436,1,436,1,436,1,437,1,437,
  	1,437,1,437,1,437,1,438,1,438,1,438,1,439,1,439,3,439,4044,8,439,1,440,
  	1,440,1,440,5,440,4049,8,440,10,440,12,440,4052,9,440,1,441,1,441,1,441,
  	1,441,1,441,1,441,1,441,1,441,1,441,1,441,1,441,3,441,4065,8,441,1,442,
  	1,442,3,442,4069,8,442,1,443,1,443,1,444,1,444,1,444,1,444,1,444,1,444,
  	1,444,1,445,1,445,3,445,4082,8,445,1,446,1,446,1,447,1,447,1,447,1,447,
  	1,447,1,447,3,447,4092,8,447,1,448,1,448,1,448,3,448,4097,8,448,1,448,
  	1,448,1,448,1,449,1,449,1,449,1,449,1,449,1,449,1,449,1,450,1,450,1,451,
  	1,451,1,452,1,452,1,453,3,453,4116,8,453,1,453,1,453,1,454,1,454,1,455,
  	1,455,1,455,1,455,1,455,1,456,1,456,1,457,1,457,1,458,1,458,1,459,1,459,
  	1,459,1,459,1,459,1,460,1,460,5,460,4140,8,460,10,460,12,460,4143,9,460,
  	1,461,1,461,1,462,1,462,1,462,1,462,1,462,1,463,1,463,1,464,1,464,3,464,
  	4156,8,464,1,465,1,465,1,465,1,465,1,465,1,465,1,465,1,466,1,466,1,466,
  	1,466,1,466,1,467,1,467,1,468,3,468,4173,8,468,1,468,1,468,3,468,4177,
  	8,468,1,468,1,468,1,469,1,469,1,469,5,469,4184,8,469,10,469,12,469,4187,
  	9,469,1,470,1,470,1,471,3,471,4192,8,471,1,471,1,471,1,472,1,472,3,472,
  	4198,8,472,1,472,1,472,1,473,1,473,1,473,5,473,4205,8,473,10,473,12,473,
  	4208,9,473,1,474,1,474,1,474,1,474,1,475,1,475,1,476,1,476,1,476,1,476,
  	1,476,3,476,4221,8,476,1,476,1,476,1,476,1,476,1,476,1,476,5,476,4229,
  	8,476,10,476,12,476,4232,9,476,1,477,1,477,1,477,1,477,1,477,1,477,1,
  	477,1,477,1,477,1,477,1,477,1,477,1,477,3,477,4247,8,477,1,478,1,478,
  	1,478,3,478,4252,8,478,1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,
  	1,479,1,479,3,479,4264,8,479,1,480,1,480,1,481,1,481,1,481,1,481,1,481,
  	1,482,1,482,1,482,1,482,1,482,1,483,1,483,1,483,1,483,1,483,1,484,1,484,
  	1,484,1,484,1,484,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,486,1,486,
  	1,487,1,487,1,488,1,488,1,488,1,488,1,488,1,489,1,489,1,490,1,490,1,490,
  	1,490,1,490,1,490,1,490,1,491,1,491,1,492,1,492,1,493,1,493,1,493,1,493,
  	1,493,1,494,1,494,1,494,1,494,1,494,1,495,1,495,1,495,1,495,1,495,1,496,
  	1,496,1,496,1,496,1,496,1,496,1,496,1,497,1,497,1,498,1,498,1,499,1,499,
  	1,499,1,499,1,499,1,500,1,500,1,500,1,500,1,500,1,501,1,501,1,501,1,501,
  	1,501,1,502,1,502,1,503,1,503,1,504,3,504,4363,8,504,1,504,3,504,4366,
  	8,504,1,504,3,504,4369,8,504,1,504,1,504,1,505,1,505,1,506,1,506,1,507,
  	1,507,1,508,1,508,1,509,1,509,1,510,1,510,1,511,1,511,1,511,1,511,1,511,
  	3,511,4390,8,511,1,512,1,512,1,512,1,512,3,512,4396,8,512,1,512,3,512,
  	4399,8,512,1,513,1,513,1,513,1,513,3,513,4405,8,513,1,513,3,513,4408,
  	8,513,1,514,1,514,1,514,3,514,4413,8,514,1,514,3,514,4416,8,514,1,515,
  	1,515,1,515,1,515,3,515,4422,8,515,1,515,3,515,4425,8,515,1,516,1,516,
  	1,516,1,516,3,516,4431,8,516,1,516,3,516,4434,8,516,1,517,1,517,3,517,
  	4438,8,517,1,518,1,518,3,518,4442,8,518,1,519,1,519,3,519,4446,8,519,
  	1,520,1,520,1,521,1,521,1,521,1,521,1,521,3,521,4455,8,521,1,522,1,522,
  	1,522,1,522,1,523,1,523,1,524,1,524,1,525,1,525,3,525,4467,8,525,1,526,
  	1,526,1,526,1,526,1,526,1,527,1,527,3,527,4476,8,527,1,528,1,528,1,529,
  	1,529,1,530,1,530,1,531,1,531,1,532,1,532,3,532,4488,8,532,1,533,1,533,
  	1,534,1,534,1,535,1,535,1,536,1,536,1,537,1,537,3,537,4500,8,537,1,538,
  	1,538,1,539,1,539,1,540,1,540,1,541,1,541,1,542,1,542,1,543,1,543,1,544,
  	1,544,1,545,1,545,1,546,1,546,1,547,1,547,3,547,4522,8,547,1,548,1,548,
  	1,548,1,548,1,548,1,548,1,548,1,548,3,548,4532,8,548,1,549,1,549,1,549,
  	3,549,4537,8,549,1,550,1,550,1,550,1,551,1,551,1,551,1,552,1,552,1,552,
  	1,553,1,553,1,554,1,554,1,555,1,555,1,555,3,555,4555,8,555,1,556,1,556,
  	3,556,4559,8,556,1,557,1,557,1,558,1,558,1,559,1,559,3,559,4567,8,559,
  	1,560,1,560,1,560,1,560,1,560,3,560,4574,8,560,1,561,1,561,1,562,1,562,
  	1,563,1,563,1,564,1,564,1,565,1,565,1,566,1,566,1,567,1,567,1,568,1,568,
  	1,568,1,569,1,569,1,570,1,570,1,571,1,571,1,572,1,572,1,573,1,573,1,573,
  	0,8,184,428,466,468,674,818,842,952,574,0,2,4,6,8,10,12,14,16,18,20,22,
  	24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
  	70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
  	112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
  	148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
  	184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
  	220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
  	256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
  	292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,
  	328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,
  	364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,
  	400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,
  	436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,
  	472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,
  	508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,
  	544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,
  	580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,
  	616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,
  	652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,
  	688,690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,720,722,
  	724,726,728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,
  	760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,794,
  	796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,826,828,830,
  	832,834,836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,866,
  	868,870,872,874,876,878,880,882,884,886,888,890,892,894,896,898,900,902,
  	904,906,908,910,912,914,916,918,920,922,924,926,928,930,932,934,936,938,
  	940,942,944,946,948,950,952,954,956,958,960,962,964,966,968,970,972,974,
  	976,978,980,982,984,986,988,990,992,994,996,998,1000,1002,1004,1006,1008,
  	1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,
  	1038,1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,1060,1062,1064,
  	1066,1068,1070,1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,1092,
  	1094,1096,1098,1100,1102,1104,1106,1108,1110,1112,1114,1116,1118,1120,
  	1122,1124,1126,1128,1130,1132,1134,1136,1138,1140,1142,1144,1146,0,45,
  	2,0,53,53,165,165,1,0,65,66,2,0,79,79,150,150,2,0,159,159,304,304,4,0,
  	277,277,311,311,315,315,320,320,2,0,166,166,168,168,2,0,102,102,290,290,
  	2,0,127,127,359,359,6,0,335,336,339,339,346,346,355,355,372,372,383,383,
  	2,0,28,29,77,78,2,0,159,159,195,195,3,0,67,67,106,106,374,374,1,0,104,
  	105,2,0,283,283,318,318,2,0,314,314,346,346,2,0,314,314,383,383,2,0,211,
  	211,331,331,1,0,37,38,1,0,73,74,2,0,26,26,133,133,6,0,334,334,342,342,
  	345,345,364,364,366,366,371,371,2,0,372,372,375,375,2,0,358,358,382,382,
  	2,0,161,161,232,232,2,0,129,129,181,181,2,0,141,141,222,222,3,0,40,40,
  	142,142,183,183,6,0,33,33,56,56,62,62,144,145,200,201,203,203,2,0,22,
  	22,80,80,1,0,169,170,1,0,51,52,2,0,42,42,157,157,8,0,21,21,30,30,32,32,
  	59,61,75,75,174,174,192,193,204,205,1,0,48,49,3,0,39,39,128,128,209,209,
  	1,0,296,299,1,0,4,5,2,0,71,71,208,208,1,0,3,4,3,0,9,10,13,13,15,15,1,
  	0,16,19,2,0,301,301,319,319,2,0,285,285,308,308,2,0,284,284,307,307,1,
  	0,277,323,4726,0,1157,1,0,0,0,2,1161,1,0,0,0,4,1179,1,0,0,0,6,1193,1,
  	0,0,0,8,1197,1,0,0,0,10,1199,1,0,0,0,12,1207,1,0,0,0,14,1211,1,0,0,0,
  	16,1216,1,0,0,0,18,1220,1,0,0,0,20,1225,1,0,0,0,22,1228,1,0,0,0,24,1235,
  	1,0,0,0,26,1241,1,0,0,0,28,1248,1,0,0,0,30,1252,1,0,0,0,32,1272,1,0,0,
  	0,34,1274,1,0,0,0,36,1277,1,0,0,0,38,1279,1,0,0,0,40,1284,1,0,0,0,42,
  	1292,1,0,0,0,44,1298,1,0,0,0,46,1300,1,0,0,0,48,1302,1,0,0,0,50,1304,
  	1,0,0,0,52,1308,1,0,0,0,54,1310,1,0,0,0,56,1314,1,0,0,0,58,1319,1,0,0,
  	0,60,1327,1,0,0,0,62,1334,1,0,0,0,64,1336,1,0,0,0,66,1346,1,0,0,0,68,
  	1348,1,0,0,0,70,1355,1,0,0,0,72,1365,1,0,0,0,74,1369,1,0,0,0,76,1373,
  	1,0,0,0,78,1383,1,0,0,0,80,1387,1,0,0,0,82,1390,1,0,0,0,84,1398,1,0,0,
  	0,86,1402,1,0,0,0,88,1409,1,0,0,0,90,1411,1,0,0,0,92,1417,1,0,0,0,94,
  	1419,1,0,0,0,96,1425,1,0,0,0,98,1428,1,0,0,0,100,1434,1,0,0,0,102,1442,
  	1,0,0,0,104,1444,1,0,0,0,106,1453,1,0,0,0,108,1461,1,0,0,0,110,1488,1,
  	0,0,0,112,1512,1,0,0,0,114,1514,1,0,0,0,116,1517,1,0,0,0,118,1522,1,0,
  	0,0,120,1533,1,0,0,0,122,1565,1,0,0,0,124,1567,1,0,0,0,126,1571,1,0,0,
  	0,128,1583,1,0,0,0,130,1587,1,0,0,0,132,1591,1,0,0,0,134,1593,1,0,0,0,
  	136,1598,1,0,0,0,138,1603,1,0,0,0,140,1605,1,0,0,0,142,1610,1,0,0,0,144,
  	1616,1,0,0,0,146,1620,1,0,0,0,148,1626,1,0,0,0,150,1628,1,0,0,0,152,1631,
  	1,0,0,0,154,1634,1,0,0,0,156,1645,1,0,0,0,158,1647,1,0,0,0,160,1653,1,
  	0,0,0,162,1661,1,0,0,0,164,1665,1,0,0,0,166,1668,1,0,0,0,168,1678,1,0,
  	0,0,170,1680,1,0,0,0,172,1684,1,0,0,0,174,1689,1,0,0,0,176,1694,1,0,0,
  	0,178,1702,1,0,0,0,180,1704,1,0,0,0,182,1706,1,0,0,0,184,1708,1,0,0,0,
  	186,1722,1,0,0,0,188,1736,1,0,0,0,190,1738,1,0,0,0,192,1742,1,0,0,0,194,
  	1754,1,0,0,0,196,1756,1,0,0,0,198,1759,1,0,0,0,200,1763,1,0,0,0,202,1766,
  	1,0,0,0,204,1774,1,0,0,0,206,1777,1,0,0,0,208,1783,1,0,0,0,210,1790,1,
  	0,0,0,212,1794,1,0,0,0,214,1796,1,0,0,0,216,1799,1,0,0,0,218,1811,1,0,
  	0,0,220,1814,1,0,0,0,222,1818,1,0,0,0,224,1820,1,0,0,0,226,1825,1,0,0,
  	0,228,1828,1,0,0,0,230,1841,1,0,0,0,232,1843,1,0,0,0,234,1848,1,0,0,0,
  	236,1851,1,0,0,0,238,1854,1,0,0,0,240,1856,1,0,0,0,242,1872,1,0,0,0,244,
  	1879,1,0,0,0,246,1881,1,0,0,0,248,1885,1,0,0,0,250,1894,1,0,0,0,252,1902,
  	1,0,0,0,254,1906,1,0,0,0,256,1909,1,0,0,0,258,1938,1,0,0,0,260,1946,1,
  	0,0,0,262,1950,1,0,0,0,264,1953,1,0,0,0,266,1956,1,0,0,0,268,1961,1,0,
  	0,0,270,1969,1,0,0,0,272,1976,1,0,0,0,274,1979,1,0,0,0,276,1986,1,0,0,
  	0,278,1989,1,0,0,0,280,1993,1,0,0,0,282,1999,1,0,0,0,284,2007,1,0,0,0,
  	286,2016,1,0,0,0,288,2024,1,0,0,0,290,2026,1,0,0,0,292,2029,1,0,0,0,294,
  	2032,1,0,0,0,296,2036,1,0,0,0,298,2039,1,0,0,0,300,2047,1,0,0,0,302,2050,
  	1,0,0,0,304,2061,1,0,0,0,306,2063,1,0,0,0,308,2066,1,0,0,0,310,2074,1,
  	0,0,0,312,2081,1,0,0,0,314,2083,1,0,0,0,316,2092,1,0,0,0,318,2099,1,0,
  	0,0,320,2102,1,0,0,0,322,2105,1,0,0,0,324,2108,1,0,0,0,326,2110,1,0,0,
  	0,328,2118,1,0,0,0,330,2127,1,0,0,0,332,2136,1,0,0,0,334,2138,1,0,0,0,
  	336,2144,1,0,0,0,338,2150,1,0,0,0,340,2164,1,0,0,0,342,2177,1,0,0,0,344,
  	2181,1,0,0,0,346,2183,1,0,0,0,348,2187,1,0,0,0,350,2192,1,0,0,0,352,2194,
  	1,0,0,0,354,2201,1,0,0,0,356,2203,1,0,0,0,358,2213,1,0,0,0,360,2219,1,
  	0,0,0,362,2221,1,0,0,0,364,2229,1,0,0,0,366,2237,1,0,0,0,368,2245,1,0,
  	0,0,370,2257,1,0,0,0,372,2274,1,0,0,0,374,2277,1,0,0,0,376,2288,1,0,0,
  	0,378,2293,1,0,0,0,380,2297,1,0,0,0,382,2299,1,0,0,0,384,2304,1,0,0,0,
  	386,2312,1,0,0,0,388,2314,1,0,0,0,390,2317,1,0,0,0,392,2321,1,0,0,0,394,
  	2323,1,0,0,0,396,2326,1,0,0,0,398,2330,1,0,0,0,400,2338,1,0,0,0,402,2344,
  	1,0,0,0,404,2353,1,0,0,0,406,2355,1,0,0,0,408,2359,1,0,0,0,410,2363,1,
  	0,0,0,412,2367,1,0,0,0,414,2371,1,0,0,0,416,2375,1,0,0,0,418,2379,1,0,
  	0,0,420,2383,1,0,0,0,422,2385,1,0,0,0,424,2398,1,0,0,0,426,2401,1,0,0,
  	0,428,2413,1,0,0,0,430,2426,1,0,0,0,432,2428,1,0,0,0,434,2434,1,0,0,0,
  	436,2436,1,0,0,0,438,2440,1,0,0,0,440,2450,1,0,0,0,442,2452,1,0,0,0,444,
  	2461,1,0,0,0,446,2463,1,0,0,0,448,2467,1,0,0,0,450,2471,1,0,0,0,452,2475,
  	1,0,0,0,454,2479,1,0,0,0,456,2483,1,0,0,0,458,2487,1,0,0,0,460,2494,1,
  	0,0,0,462,2496,1,0,0,0,464,2506,1,0,0,0,466,2516,1,0,0,0,468,2526,1,0,
  	0,0,470,2540,1,0,0,0,472,2542,1,0,0,0,474,2545,1,0,0,0,476,2550,1,0,0,
  	0,478,2559,1,0,0,0,480,2561,1,0,0,0,482,2564,1,0,0,0,484,2567,1,0,0,0,
  	486,2570,1,0,0,0,488,2573,1,0,0,0,490,2577,1,0,0,0,492,2581,1,0,0,0,494,
  	2586,1,0,0,0,496,2588,1,0,0,0,498,2596,1,0,0,0,500,2598,1,0,0,0,502,2601,
  	1,0,0,0,504,2604,1,0,0,0,506,2612,1,0,0,0,508,2616,1,0,0,0,510,2618,1,
  	0,0,0,512,2621,1,0,0,0,514,2634,1,0,0,0,516,2636,1,0,0,0,518,2638,1,0,
  	0,0,520,2641,1,0,0,0,522,2645,1,0,0,0,524,2653,1,0,0,0,526,2660,1,0,0,
  	0,528,2662,1,0,0,0,530,2668,1,0,0,0,532,2670,1,0,0,0,534,2673,1,0,0,0,
  	536,2676,1,0,0,0,538,2681,1,0,0,0,540,2687,1,0,0,0,542,2689,1,0,0,0,544,
  	2696,1,0,0,0,546,2698,1,0,0,0,548,2700,1,0,0,0,550,2704,1,0,0,0,552,2719,
  	1,0,0,0,554,2729,1,0,0,0,556,2732,1,0,0,0,558,2736,1,0,0,0,560,2740,1,
  	0,0,0,562,2743,1,0,0,0,564,2752,1,0,0,0,566,2756,1,0,0,0,568,2759,1,0,
  	0,0,570,2782,1,0,0,0,572,2784,1,0,0,0,574,2786,1,0,0,0,576,2790,1,0,0,
  	0,578,2792,1,0,0,0,580,2802,1,0,0,0,582,2806,1,0,0,0,584,2814,1,0,0,0,
  	586,2825,1,0,0,0,588,2839,1,0,0,0,590,2846,1,0,0,0,592,2848,1,0,0,0,594,
  	2855,1,0,0,0,596,2858,1,0,0,0,598,2862,1,0,0,0,600,2864,1,0,0,0,602,2868,
  	1,0,0,0,604,2879,1,0,0,0,606,2885,1,0,0,0,608,2898,1,0,0,0,610,2905,1,
  	0,0,0,612,2912,1,0,0,0,614,2915,1,0,0,0,616,2919,1,0,0,0,618,2921,1,0,
  	0,0,620,2925,1,0,0,0,622,2927,1,0,0,0,624,2931,1,0,0,0,626,2935,1,0,0,
  	0,628,2939,1,0,0,0,630,2943,1,0,0,0,632,2947,1,0,0,0,634,2960,1,0,0,0,
  	636,2971,1,0,0,0,638,2973,1,0,0,0,640,2975,1,0,0,0,642,2980,1,0,0,0,644,
  	2984,1,0,0,0,646,2986,1,0,0,0,648,2992,1,0,0,0,650,2998,1,0,0,0,652,3004,
  	1,0,0,0,654,3006,1,0,0,0,656,3008,1,0,0,0,658,3010,1,0,0,0,660,3019,1,
  	0,0,0,662,3021,1,0,0,0,664,3029,1,0,0,0,666,3035,1,0,0,0,668,3043,1,0,
  	0,0,670,3049,1,0,0,0,672,3052,1,0,0,0,674,3114,1,0,0,0,676,3135,1,0,0,
  	0,678,3144,1,0,0,0,680,3146,1,0,0,0,682,3185,1,0,0,0,684,3222,1,0,0,0,
  	686,3224,1,0,0,0,688,3226,1,0,0,0,690,3228,1,0,0,0,692,3232,1,0,0,0,694,
  	3236,1,0,0,0,696,3240,1,0,0,0,698,3288,1,0,0,0,700,3334,1,0,0,0,702,3380,
  	1,0,0,0,704,3382,1,0,0,0,706,3395,1,0,0,0,708,3397,1,0,0,0,710,3444,1,
  	0,0,0,712,3448,1,0,0,0,714,3455,1,0,0,0,716,3469,1,0,0,0,718,3485,1,0,
  	0,0,720,3487,1,0,0,0,722,3503,1,0,0,0,724,3517,1,0,0,0,726,3519,1,0,0,
  	0,728,3532,1,0,0,0,730,3538,1,0,0,0,732,3542,1,0,0,0,734,3544,1,0,0,0,
  	736,3549,1,0,0,0,738,3553,1,0,0,0,740,3556,1,0,0,0,742,3563,1,0,0,0,744,
  	3571,1,0,0,0,746,3577,1,0,0,0,748,3579,1,0,0,0,750,3584,1,0,0,0,752,3592,
  	1,0,0,0,754,3594,1,0,0,0,756,3599,1,0,0,0,758,3605,1,0,0,0,760,3609,1,
  	0,0,0,762,3611,1,0,0,0,764,3627,1,0,0,0,766,3629,1,0,0,0,768,3635,1,0,
  	0,0,770,3643,1,0,0,0,772,3646,1,0,0,0,774,3652,1,0,0,0,776,3663,1,0,0,
  	0,778,3665,1,0,0,0,780,3667,1,0,0,0,782,3687,1,0,0,0,784,3690,1,0,0,0,
  	786,3696,1,0,0,0,788,3699,1,0,0,0,790,3706,1,0,0,0,792,3715,1,0,0,0,794,
  	3718,1,0,0,0,796,3724,1,0,0,0,798,3727,1,0,0,0,800,3736,1,0,0,0,802,3744,
  	1,0,0,0,804,3746,1,0,0,0,806,3748,1,0,0,0,808,3756,1,0,0,0,810,3764,1,
  	0,0,0,812,3766,1,0,0,0,814,3780,1,0,0,0,816,3794,1,0,0,0,818,3819,1,0,
  	0,0,820,3859,1,0,0,0,822,3861,1,0,0,0,824,3868,1,0,0,0,826,3870,1,0,0,
  	0,828,3877,1,0,0,0,830,3882,1,0,0,0,832,3887,1,0,0,0,834,3896,1,0,0,0,
  	836,3905,1,0,0,0,838,3907,1,0,0,0,840,3909,1,0,0,0,842,3922,1,0,0,0,844,
  	3932,1,0,0,0,846,3938,1,0,0,0,848,3952,1,0,0,0,850,3956,1,0,0,0,852,3960,
  	1,0,0,0,854,3964,1,0,0,0,856,3966,1,0,0,0,858,3968,1,0,0,0,860,3974,1,
  	0,0,0,862,3979,1,0,0,0,864,3999,1,0,0,0,866,4003,1,0,0,0,868,4005,1,0,
  	0,0,870,4017,1,0,0,0,872,4028,1,0,0,0,874,4033,1,0,0,0,876,4038,1,0,0,
  	0,878,4043,1,0,0,0,880,4045,1,0,0,0,882,4064,1,0,0,0,884,4068,1,0,0,0,
  	886,4070,1,0,0,0,888,4072,1,0,0,0,890,4081,1,0,0,0,892,4083,1,0,0,0,894,
  	4091,1,0,0,0,896,4093,1,0,0,0,898,4101,1,0,0,0,900,4108,1,0,0,0,902,4110,
  	1,0,0,0,904,4112,1,0,0,0,906,4115,1,0,0,0,908,4119,1,0,0,0,910,4121,1,
  	0,0,0,912,4126,1,0,0,0,914,4128,1,0,0,0,916,4130,1,0,0,0,918,4132,1,0,
  	0,0,920,4137,1,0,0,0,922,4144,1,0,0,0,924,4146,1,0,0,0,926,4151,1,0,0,
  	0,928,4155,1,0,0,0,930,4157,1,0,0,0,932,4164,1,0,0,0,934,4169,1,0,0,0,
  	936,4172,1,0,0,0,938,4180,1,0,0,0,940,4188,1,0,0,0,942,4191,1,0,0,0,944,
  	4195,1,0,0,0,946,4201,1,0,0,0,948,4209,1,0,0,0,950,4213,1,0,0,0,952,4220,
  	1,0,0,0,954,4246,1,0,0,0,956,4251,1,0,0,0,958,4263,1,0,0,0,960,4265,1,
  	0,0,0,962,4267,1,0,0,0,964,4272,1,0,0,0,966,4277,1,0,0,0,968,4282,1,0,
  	0,0,970,4287,1,0,0,0,972,4294,1,0,0,0,974,4296,1,0,0,0,976,4298,1,0,0,
  	0,978,4303,1,0,0,0,980,4305,1,0,0,0,982,4312,1,0,0,0,984,4314,1,0,0,0,
  	986,4316,1,0,0,0,988,4321,1,0,0,0,990,4326,1,0,0,0,992,4331,1,0,0,0,994,
  	4338,1,0,0,0,996,4340,1,0,0,0,998,4342,1,0,0,0,1000,4347,1,0,0,0,1002,
  	4352,1,0,0,0,1004,4357,1,0,0,0,1006,4359,1,0,0,0,1008,4368,1,0,0,0,1010,
  	4372,1,0,0,0,1012,4374,1,0,0,0,1014,4376,1,0,0,0,1016,4378,1,0,0,0,1018,
  	4380,1,0,0,0,1020,4382,1,0,0,0,1022,4389,1,0,0,0,1024,4398,1,0,0,0,1026,
  	4407,1,0,0,0,1028,4409,1,0,0,0,1030,4424,1,0,0,0,1032,4433,1,0,0,0,1034,
  	4437,1,0,0,0,1036,4441,1,0,0,0,1038,4445,1,0,0,0,1040,4447,1,0,0,0,1042,
  	4449,1,0,0,0,1044,4456,1,0,0,0,1046,4460,1,0,0,0,1048,4462,1,0,0,0,1050,
  	4466,1,0,0,0,1052,4468,1,0,0,0,1054,4475,1,0,0,0,1056,4477,1,0,0,0,1058,
  	4479,1,0,0,0,1060,4481,1,0,0,0,1062,4483,1,0,0,0,1064,4487,1,0,0,0,1066,
  	4489,1,0,0,0,1068,4491,1,0,0,0,1070,4493,1,0,0,0,1072,4495,1,0,0,0,1074,
  	4499,1,0,0,0,1076,4501,1,0,0,0,1078,4503,1,0,0,0,1080,4505,1,0,0,0,1082,
  	4507,1,0,0,0,1084,4509,1,0,0,0,1086,4511,1,0,0,0,1088,4513,1,0,0,0,1090,
  	4515,1,0,0,0,1092,4517,1,0,0,0,1094,4521,1,0,0,0,1096,4531,1,0,0,0,1098,
  	4536,1,0,0,0,1100,4538,1,0,0,0,1102,4541,1,0,0,0,1104,4544,1,0,0,0,1106,
  	4547,1,0,0,0,1108,4549,1,0,0,0,1110,4554,1,0,0,0,1112,4558,1,0,0,0,1114,
  	4560,1,0,0,0,1116,4562,1,0,0,0,1118,4566,1,0,0,0,1120,4573,1,0,0,0,1122,
  	4575,1,0,0,0,1124,4577,1,0,0,0,1126,4579,1,0,0,0,1128,4581,1,0,0,0,1130,
  	4583,1,0,0,0,1132,4585,1,0,0,0,1134,4587,1,0,0,0,1136,4589,1,0,0,0,1138,
  	4592,1,0,0,0,1140,4594,1,0,0,0,1142,4596,1,0,0,0,1144,4598,1,0,0,0,1146,
  	4600,1,0,0,0,1148,1150,3,2,1,0,1149,1151,3,34,17,0,1150,1149,1,0,0,0,
  	1150,1151,1,0,0,0,1151,1152,1,0,0,0,1152,1153,5,0,0,1,1153,1158,1,0,0,
  	0,1154,1155,3,34,17,0,1155,1156,5,0,0,1,1156,1158,1,0,0,0,1157,1148,1,
  	0,0,0,1157,1154,1,0,0,0,1158,1,1,0,0,0,1159,1162,3,4,2,0,1160,1162,3,
  	6,3,0,1161,1159,1,0,0,0,1161,1160,1,0,0,0,1162,3,1,0,0,0,1163,1165,3,
  	30,15,0,1164,1163,1,0,0,0,1165,1166,1,0,0,0,1166,1164,1,0,0,0,1166,1167,
  	1,0,0,0,1167,1180,1,0,0,0,1168,1170,3,10,5,0,1169,1168,1,0,0,0,1170,1171,
  	1,0,0,0,1171,1169,1,0,0,0,1171,1172,1,0,0,0,1172,1176,1,0,0,0,1173,1175,
  	3,30,15,0,1174,1173,1,0,0,0,1175,1178,1,0,0,0,1176,1174,1,0,0,0,1176,
  	1177,1,0,0,0,1177,1180,1,0,0,0,1178,1176,1,0,0,0,1179,1164,1,0,0,0,1179,
  	1169,1,0,0,0,1180,5,1,0,0,0,1181,1186,3,38,19,0,1182,1184,3,52,26,0,1183,
  	1185,3,8,4,0,1184,1183,1,0,0,0,1184,1185,1,0,0,0,1185,1187,1,0,0,0,1186,
  	1182,1,0,0,0,1186,1187,1,0,0,0,1187,1194,1,0,0,0,1188,1190,3,52,26,0,
  	1189,1191,3,8,4,0,1190,1189,1,0,0,0,1190,1191,1,0,0,0,1191,1194,1,0,0,
  	0,1192,1194,3,8,4,0,1193,1181,1,0,0,0,1193,1188,1,0,0,0,1193,1192,1,0,
  	0,0,1194,7,1,0,0,0,1195,1198,3,46,23,0,1196,1198,3,48,24,0,1197,1195,
  	1,0,0,0,1197,1196,1,0,0,0,1198,9,1,0,0,0,1199,1200,5,188,0,0,1200,1205,
  	5,190,0,0,1201,1206,3,12,6,0,1202,1206,3,14,7,0,1203,1206,3,16,8,0,1204,
  	1206,3,20,10,0,1205,1201,1,0,0,0,1205,1202,1,0,0,0,1205,1203,1,0,0,0,
  	1205,1204,1,0,0,0,1206,11,1,0,0,0,1207,1208,5,185,0,0,1208,1209,3,538,
  	269,0,1209,13,1,0,0,0,1210,1212,5,305,0,0,1211,1210,1,0,0,0,1211,1212,
  	1,0,0,0,1212,1213,1,0,0,0,1213,1214,5,289,0,0,1214,1215,3,88,44,0,1215,
  	15,1,0,0,0,1216,1217,5,207,0,0,1217,1218,5,323,0,0,1218,1219,3,18,9,0,
  	1219,17,1,0,0,0,1220,1221,3,1114,557,0,1221,19,1,0,0,0,1222,1226,3,22,
  	11,0,1223,1226,3,24,12,0,1224,1226,3,26,13,0,1225,1222,1,0,0,0,1225,1223,
  	1,0,0,0,1225,1224,1,0,0,0,1226,21,1,0,0,0,1227,1229,5,305,0,0,1228,1227,
  	1,0,0,0,1228,1229,1,0,0,0,1229,1230,1,0,0,0,1230,1231,5,289,0,0,1231,
  	1232,3,28,14,0,1232,1233,3,72,36,0,1233,23,1,0,0,0,1234,1236,5,278,0,
  	0,1235,1234,1,0,0,0,1235,1236,1,0,0,0,1236,1237,1,0,0,0,1237,1238,5,313,
  	0,0,1238,1239,3,28,14,0,1239,1240,3,78,39,0,1240,25,1,0,0,0,1241,1242,
  	5,225,0,0,1242,1243,3,28,14,0,1243,1244,3,84,42,0,1244,27,1,0,0,0,1245,
  	1246,5,108,0,0,1246,1247,5,152,0,0,1247,1249,5,89,0,0,1248,1245,1,0,0,
  	0,1248,1249,1,0,0,0,1249,1250,1,0,0,0,1250,1251,3,36,18,0,1251,29,1,0,
  	0,0,1252,1253,5,188,0,0,1253,1255,5,179,0,0,1254,1256,3,32,16,0,1255,
  	1254,1,0,0,0,1255,1256,1,0,0,0,1256,31,1,0,0,0,1257,1259,5,22,0,0,1258,
  	1257,1,0,0,0,1258,1259,1,0,0,0,1259,1260,1,0,0,0,1260,1273,7,0,0,0,1261,
  	1273,5,185,0,0,1262,1264,5,305,0,0,1263,1262,1,0,0,0,1263,1264,1,0,0,
  	0,1264,1265,1,0,0,0,1265,1273,5,289,0,0,1266,1267,5,207,0,0,1267,1273,
  	5,323,0,0,1268,1270,5,164,0,0,1269,1268,1,0,0,0,1269,1270,1,0,0,0,1270,
  	1271,1,0,0,0,1271,1273,3,36,18,0,1272,1258,1,0,0,0,1272,1261,1,0,0,0,
  	1272,1263,1,0,0,0,1272,1266,1,0,0,0,1272,1269,1,0,0,0,1273,33,1,0,0,0,
  	1274,1275,5,188,0,0,1275,1276,5,54,0,0,1276,35,1,0,0,0,1277,1278,5,326,
  	0,0,1278,37,1,0,0,0,1279,1280,5,199,0,0,1280,1282,5,316,0,0,1281,1283,
  	3,40,20,0,1282,1281,1,0,0,0,1282,1283,1,0,0,0,1283,39,1,0,0,0,1284,1289,
  	3,42,21,0,1285,1286,5,360,0,0,1286,1288,3,42,21,0,1287,1285,1,0,0,0,1288,
  	1291,1,0,0,0,1289,1287,1,0,0,0,1289,1290,1,0,0,0,1290,41,1,0,0,0,1291,
  	1289,1,0,0,0,1292,1293,3,44,22,0,1293,43,1,0,0,0,1294,1295,5,306,0,0,
  	1295,1299,5,303,0,0,1296,1297,5,306,0,0,1297,1299,5,322,0,0,1298,1294,
  	1,0,0,0,1298,1296,1,0,0,0,1299,45,1,0,0,0,1300,1301,5,182,0,0,1301,47,
  	1,0,0,0,1302,1303,5,57,0,0,1303,49,1,0,0,0,1304,1305,5,368,0,0,1305,1306,
  	3,52,26,0,1306,1307,5,379,0,0,1307,51,1,0,0,0,1308,1309,3,58,29,0,1309,
  	53,1,0,0,0,1310,1311,5,368,0,0,1311,1312,3,58,29,0,1312,1313,5,379,0,
  	0,1313,55,1,0,0,0,1314,1315,5,368,0,0,1315,1316,3,58,29,0,1316,1317,5,
  	379,0,0,1317,57,1,0,0,0,1318,1320,3,290,145,0,1319,1318,1,0,0,0,1319,
  	1320,1,0,0,0,1320,1322,1,0,0,0,1321,1323,3,60,30,0,1322,1321,1,0,0,0,
  	1322,1323,1,0,0,0,1323,1324,1,0,0,0,1324,1325,3,64,32,0,1325,59,1,0,0,
  	0,1326,1328,3,62,31,0,1327,1326,1,0,0,0,1328,1329,1,0,0,0,1329,1327,1,
  	0,0,0,1329,1330,1,0,0,0,1330,61,1,0,0,0,1331,1335,3,70,35,0,1332,1335,
  	3,76,38,0,1333,1335,3,82,41,0,1334,1331,1,0,0,0,1334,1332,1,0,0,0,1334,
  	1333,1,0,0,0,1335,63,1,0,0,0,1336,1340,3,66,33,0,1337,1339,3,68,34,0,
  	1338,1337,1,0,0,0,1339,1342,1,0,0,0,1340,1338,1,0,0,0,1340,1341,1,0,0,
  	0,1341,65,1,0,0,0,1342,1340,1,0,0,0,1343,1347,3,98,49,0,1344,1347,3,130,
  	65,0,1345,1347,3,182,91,0,1346,1343,1,0,0,0,1346,1344,1,0,0,0,1346,1345,
  	1,0,0,0,1347,67,1,0,0,0,1348,1350,5,149,0,0,1349,1351,3,502,251,0,1350,
  	1349,1,0,0,0,1350,1351,1,0,0,0,1351,1352,1,0,0,0,1352,1353,3,66,33,0,
  	1353,69,1,0,0,0,1354,1356,5,305,0,0,1355,1354,1,0,0,0,1355,1356,1,0,0,
  	0,1356,1357,1,0,0,0,1357,1358,5,289,0,0,1358,1359,3,1092,546,0,1359,1360,
  	3,72,36,0,1360,71,1,0,0,0,1361,1363,3,676,338,0,1362,1361,1,0,0,0,1362,
  	1363,1,0,0,0,1363,1364,1,0,0,0,1364,1366,3,738,369,0,1365,1362,1,0,0,
  	0,1365,1366,1,0,0,0,1366,1367,1,0,0,0,1367,1368,3,74,37,0,1368,73,1,0,
  	0,0,1369,1370,5,364,0,0,1370,1371,3,88,44,0,1371,75,1,0,0,0,1372,1374,
  	5,278,0,0,1373,1372,1,0,0,0,1373,1374,1,0,0,0,1374,1375,1,0,0,0,1375,
  	1376,5,313,0,0,1376,1377,3,1092,546,0,1377,1378,3,78,39,0,1378,77,1,0,
  	0,0,1379,1381,3,676,338,0,1380,1379,1,0,0,0,1380,1381,1,0,0,0,1381,1382,
  	1,0,0,0,1382,1384,3,744,372,0,1383,1380,1,0,0,0,1383,1384,1,0,0,0,1384,
  	1385,1,0,0,0,1385,1386,3,80,40,0,1386,79,1,0,0,0,1387,1388,5,364,0,0,
  	1388,1389,3,92,46,0,1389,81,1,0,0,0,1390,1391,5,225,0,0,1391,1392,3,1092,
  	546,0,1392,1393,3,84,42,0,1393,83,1,0,0,0,1394,1396,3,676,338,0,1395,
  	1394,1,0,0,0,1395,1396,1,0,0,0,1396,1397,1,0,0,0,1397,1399,3,674,337,
  	0,1398,1395,1,0,0,0,1398,1399,1,0,0,0,1399,1400,1,0,0,0,1400,1401,3,86,
  	43,0,1401,85,1,0,0,0,1402,1403,5,364,0,0,1403,1404,3,818,409,0,1404,87,
  	1,0,0,0,1405,1410,3,554,277,0,1406,1410,3,96,48,0,1407,1410,3,1058,529,
  	0,1408,1410,3,90,45,0,1409,1405,1,0,0,0,1409,1406,1,0,0,0,1409,1407,1,
  	0,0,0,1409,1408,1,0,0,0,1410,89,1,0,0,0,1411,1412,7,1,0,0,1412,91,1,0,
  	0,0,1413,1418,3,94,47,0,1414,1418,3,564,282,0,1415,1418,3,96,48,0,1416,
  	1418,3,1058,529,0,1417,1413,1,0,0,0,1417,1414,1,0,0,0,1417,1415,1,0,0,
  	0,1417,1416,1,0,0,0,1418,93,1,0,0,0,1419,1420,3,56,28,0,1420,95,1,0,0,
  	0,1421,1422,5,228,0,0,1422,1426,3,842,421,0,1423,1426,3,844,422,0,1424,
  	1426,3,848,424,0,1425,1421,1,0,0,0,1425,1423,1,0,0,0,1425,1424,1,0,0,
  	0,1426,97,1,0,0,0,1427,1429,3,100,50,0,1428,1427,1,0,0,0,1429,1430,1,
  	0,0,0,1430,1428,1,0,0,0,1430,1431,1,0,0,0,1431,99,1,0,0,0,1432,1435,3,
  	102,51,0,1433,1435,3,128,64,0,1434,1432,1,0,0,0,1434,1433,1,0,0,0,1435,
  	101,1,0,0,0,1436,1443,3,104,52,0,1437,1443,3,106,53,0,1438,1443,3,108,
  	54,0,1439,1443,3,118,59,0,1440,1443,3,120,60,0,1441,1443,3,126,63,0,1442,
  	1436,1,0,0,0,1442,1437,1,0,0,0,1442,1438,1,0,0,0,1442,1439,1,0,0,0,1442,
  	1440,1,0,0,0,1442,1441,1,0,0,0,1443,103,1,0,0,0,1444,1445,5,63,0,0,1445,
  	1449,5,185,0,0,1446,1447,5,108,0,0,1447,1448,5,152,0,0,1448,1450,5,89,
  	0,0,1449,1446,1,0,0,0,1449,1450,1,0,0,0,1450,1451,1,0,0,0,1451,1452,3,
  	542,271,0,1452,105,1,0,0,0,1453,1454,5,82,0,0,1454,1457,5,185,0,0,1455,
  	1456,5,108,0,0,1456,1458,5,89,0,0,1457,1455,1,0,0,0,1457,1458,1,0,0,0,
  	1458,1459,1,0,0,0,1459,1460,3,542,271,0,1460,107,1,0,0,0,1461,1477,5,
  	63,0,0,1462,1464,5,305,0,0,1463,1462,1,0,0,0,1463,1464,1,0,0,0,1464,1465,
  	1,0,0,0,1465,1469,5,289,0,0,1466,1467,5,108,0,0,1467,1468,5,152,0,0,1468,
  	1470,5,89,0,0,1469,1466,1,0,0,0,1469,1470,1,0,0,0,1470,1478,1,0,0,0,1471,
  	1472,5,161,0,0,1472,1474,5,178,0,0,1473,1475,5,305,0,0,1474,1473,1,0,
  	0,0,1474,1475,1,0,0,0,1475,1476,1,0,0,0,1476,1478,5,289,0,0,1477,1463,
  	1,0,0,0,1477,1471,1,0,0,0,1478,1479,1,0,0,0,1479,1482,3,556,278,0,1480,
  	1483,3,110,55,0,1481,1483,3,112,56,0,1482,1480,1,0,0,0,1482,1481,1,0,
  	0,0,1483,1485,1,0,0,0,1484,1486,3,116,58,0,1485,1484,1,0,0,0,1485,1486,
  	1,0,0,0,1486,109,1,0,0,0,1487,1489,3,676,338,0,1488,1487,1,0,0,0,1488,
  	1489,1,0,0,0,1489,1490,1,0,0,0,1490,1495,5,25,0,0,1491,1493,5,305,0,0,
  	1492,1491,1,0,0,0,1492,1493,1,0,0,0,1493,1494,1,0,0,0,1494,1496,5,289,
  	0,0,1495,1492,1,0,0,0,1495,1496,1,0,0,0,1496,111,1,0,0,0,1497,1513,3,
  	114,57,0,1498,1500,3,676,338,0,1499,1498,1,0,0,0,1499,1500,1,0,0,0,1500,
  	1501,1,0,0,0,1501,1513,3,560,280,0,1502,1504,3,676,338,0,1503,1502,1,
  	0,0,0,1503,1504,1,0,0,0,1504,1509,1,0,0,0,1505,1507,5,305,0,0,1506,1505,
  	1,0,0,0,1506,1507,1,0,0,0,1507,1508,1,0,0,0,1508,1510,5,289,0,0,1509,
  	1506,1,0,0,0,1509,1510,1,0,0,0,1510,1511,1,0,0,0,1511,1513,3,574,287,
  	0,1512,1497,1,0,0,0,1512,1499,1,0,0,0,1512,1503,1,0,0,0,1513,113,1,0,
  	0,0,1514,1515,5,131,0,0,1515,1516,3,88,44,0,1516,115,1,0,0,0,1517,1518,
  	5,27,0,0,1518,1519,5,58,0,0,1519,1520,5,158,0,0,1520,1521,3,88,44,0,1521,
  	117,1,0,0,0,1522,1524,5,82,0,0,1523,1525,5,305,0,0,1524,1523,1,0,0,0,
  	1524,1525,1,0,0,0,1525,1526,1,0,0,0,1526,1529,5,289,0,0,1527,1528,5,108,
  	0,0,1528,1530,5,89,0,0,1529,1527,1,0,0,0,1529,1530,1,0,0,0,1530,1531,
  	1,0,0,0,1531,1532,3,556,278,0,1532,119,1,0,0,0,1533,1551,5,63,0,0,1534,
  	1536,5,305,0,0,1535,1534,1,0,0,0,1535,1536,1,0,0,0,1536,1537,1,0,0,0,
  	1537,1538,5,289,0,0,1538,1542,5,317,0,0,1539,1540,5,108,0,0,1540,1541,
  	5,152,0,0,1541,1543,5,89,0,0,1542,1539,1,0,0,0,1542,1543,1,0,0,0,1543,
  	1552,1,0,0,0,1544,1545,5,161,0,0,1545,1547,5,178,0,0,1546,1548,5,305,
  	0,0,1547,1546,1,0,0,0,1547,1548,1,0,0,0,1548,1549,1,0,0,0,1549,1550,5,
  	289,0,0,1550,1552,5,317,0,0,1551,1535,1,0,0,0,1551,1544,1,0,0,0,1552,
  	1553,1,0,0,0,1553,1554,3,562,281,0,1554,1555,3,122,61,0,1555,121,1,0,
  	0,0,1556,1558,5,27,0,0,1557,1556,1,0,0,0,1557,1558,1,0,0,0,1558,1559,
  	1,0,0,0,1559,1566,3,124,62,0,1560,1566,3,114,57,0,1561,1563,5,27,0,0,
  	1562,1561,1,0,0,0,1562,1563,1,0,0,0,1563,1564,1,0,0,0,1564,1566,3,574,
  	287,0,1565,1557,1,0,0,0,1565,1560,1,0,0,0,1565,1562,1,0,0,0,1566,123,
  	1,0,0,0,1567,1568,5,58,0,0,1568,1569,5,158,0,0,1569,1570,3,560,280,0,
  	1570,125,1,0,0,0,1571,1573,5,82,0,0,1572,1574,5,305,0,0,1573,1572,1,0,
  	0,0,1573,1574,1,0,0,0,1574,1575,1,0,0,0,1575,1576,5,289,0,0,1576,1579,
  	5,317,0,0,1577,1578,5,108,0,0,1578,1580,5,89,0,0,1579,1577,1,0,0,0,1579,
  	1580,1,0,0,0,1580,1581,1,0,0,0,1581,1582,3,562,281,0,1582,127,1,0,0,0,
  	1583,1584,3,274,137,0,1584,129,1,0,0,0,1585,1588,3,132,66,0,1586,1588,
  	3,138,69,0,1587,1585,1,0,0,0,1587,1586,1,0,0,0,1588,131,1,0,0,0,1589,
  	1592,3,134,67,0,1590,1592,3,136,68,0,1591,1589,1,0,0,0,1591,1590,1,0,
  	0,0,1592,133,1,0,0,0,1593,1594,3,292,146,0,1594,1596,3,142,71,0,1595,
  	1597,3,244,122,0,1596,1595,1,0,0,0,1596,1597,1,0,0,0,1597,135,1,0,0,0,
  	1598,1599,3,292,146,0,1599,1600,3,54,27,0,1600,137,1,0,0,0,1601,1604,
  	3,140,70,0,1602,1604,3,54,27,0,1603,1601,1,0,0,0,1603,1602,1,0,0,0,1604,
  	139,1,0,0,0,1605,1607,3,142,71,0,1606,1608,3,244,122,0,1607,1606,1,0,
  	0,0,1607,1608,1,0,0,0,1608,141,1,0,0,0,1609,1611,3,144,72,0,1610,1609,
  	1,0,0,0,1611,1612,1,0,0,0,1612,1610,1,0,0,0,1612,1613,1,0,0,0,1613,143,
  	1,0,0,0,1614,1617,3,208,104,0,1615,1617,3,146,73,0,1616,1614,1,0,0,0,
  	1616,1615,1,0,0,0,1617,145,1,0,0,0,1618,1621,3,148,74,0,1619,1621,3,180,
  	90,0,1620,1618,1,0,0,0,1620,1619,1,0,0,0,1621,147,1,0,0,0,1622,1627,3,
  	150,75,0,1623,1627,3,152,76,0,1624,1627,3,164,82,0,1625,1627,3,174,87,
  	0,1626,1622,1,0,0,0,1626,1623,1,0,0,0,1626,1624,1,0,0,0,1626,1625,1,0,
  	0,0,1627,149,1,0,0,0,1628,1629,5,110,0,0,1629,1630,3,324,162,0,1630,151,
  	1,0,0,0,1631,1632,5,190,0,0,1632,1633,3,154,77,0,1633,153,1,0,0,0,1634,
  	1639,3,156,78,0,1635,1636,5,360,0,0,1636,1638,3,156,78,0,1637,1635,1,
  	0,0,0,1638,1641,1,0,0,0,1639,1637,1,0,0,0,1639,1640,1,0,0,0,1640,155,
  	1,0,0,0,1641,1639,1,0,0,0,1642,1646,3,158,79,0,1643,1646,3,160,80,0,1644,
  	1646,3,162,81,0,1645,1642,1,0,0,0,1645,1643,1,0,0,0,1645,1644,1,0,0,0,
  	1646,157,1,0,0,0,1647,1648,3,912,456,0,1648,1649,5,374,0,0,1649,1650,
  	3,1082,541,0,1650,1651,5,364,0,0,1651,1652,3,818,409,0,1652,159,1,0,0,
  	0,1653,1654,3,912,456,0,1654,1655,5,364,0,0,1655,1657,5,368,0,0,1656,
  	1658,3,398,199,0,1657,1656,1,0,0,0,1657,1658,1,0,0,0,1658,1659,1,0,0,
  	0,1659,1660,5,379,0,0,1660,161,1,0,0,0,1661,1662,3,912,456,0,1662,1663,
  	3,390,195,0,1663,1664,3,1080,540,0,1664,163,1,0,0,0,1665,1666,5,177,0,
  	0,1666,1667,3,166,83,0,1667,165,1,0,0,0,1668,1673,3,168,84,0,1669,1670,
  	5,360,0,0,1670,1672,3,168,84,0,1671,1669,1,0,0,0,1672,1675,1,0,0,0,1673,
  	1671,1,0,0,0,1673,1674,1,0,0,0,1674,167,1,0,0,0,1675,1673,1,0,0,0,1676,
  	1679,3,170,85,0,1677,1679,3,172,86,0,1678,1676,1,0,0,0,1678,1677,1,0,
  	0,0,1679,169,1,0,0,0,1680,1681,3,912,456,0,1681,1682,5,374,0,0,1682,1683,
  	3,1082,541,0,1683,171,1,0,0,0,1684,1685,3,912,456,0,1685,1686,3,390,195,
  	0,1686,1687,3,1080,540,0,1687,173,1,0,0,0,1688,1690,7,2,0,0,1689,1688,
  	1,0,0,0,1689,1690,1,0,0,0,1690,1691,1,0,0,0,1691,1692,5,76,0,0,1692,1693,
  	3,176,88,0,1693,175,1,0,0,0,1694,1699,3,178,89,0,1695,1696,5,360,0,0,
  	1696,1698,3,178,89,0,1697,1695,1,0,0,0,1698,1701,1,0,0,0,1699,1697,1,
  	0,0,0,1699,1700,1,0,0,0,1700,177,1,0,0,0,1701,1699,1,0,0,0,1702,1703,
  	3,818,409,0,1703,179,1,0,0,0,1704,1705,3,274,137,0,1705,181,1,0,0,0,1706,
  	1707,3,184,92,0,1707,183,1,0,0,0,1708,1709,6,92,-1,0,1709,1710,3,190,
  	95,0,1710,1717,1,0,0,0,1711,1712,10,2,0,0,1712,1713,3,186,93,0,1713,1714,
  	3,190,95,0,1714,1716,1,0,0,0,1715,1711,1,0,0,0,1716,1719,1,0,0,0,1717,
  	1715,1,0,0,0,1717,1718,1,0,0,0,1718,185,1,0,0,0,1719,1717,1,0,0,0,1720,
  	1723,3,188,94,0,1721,1723,5,163,0,0,1722,1720,1,0,0,0,1722,1721,1,0,0,
  	0,1723,187,1,0,0,0,1724,1726,5,220,0,0,1725,1727,3,902,451,0,1726,1725,
  	1,0,0,0,1726,1727,1,0,0,0,1727,1737,1,0,0,0,1728,1730,5,88,0,0,1729,1731,
  	3,902,451,0,1730,1729,1,0,0,0,1730,1731,1,0,0,0,1731,1737,1,0,0,0,1732,
  	1734,5,125,0,0,1733,1735,3,902,451,0,1734,1733,1,0,0,0,1734,1735,1,0,
  	0,0,1735,1737,1,0,0,0,1736,1724,1,0,0,0,1736,1728,1,0,0,0,1736,1732,1,
  	0,0,0,1737,189,1,0,0,0,1738,1739,3,192,96,0,1739,191,1,0,0,0,1740,1743,
  	3,194,97,0,1741,1743,3,204,102,0,1742,1740,1,0,0,0,1742,1741,1,0,0,0,
  	1743,193,1,0,0,0,1744,1746,3,196,98,0,1745,1744,1,0,0,0,1746,1749,1,0,
  	0,0,1747,1745,1,0,0,0,1747,1748,1,0,0,0,1748,1750,1,0,0,0,1749,1747,1,
  	0,0,0,1750,1755,3,198,99,0,1751,1755,3,200,100,0,1752,1755,3,202,101,
  	0,1753,1755,3,256,128,0,1754,1747,1,0,0,0,1754,1751,1,0,0,0,1754,1752,
  	1,0,0,0,1754,1753,1,0,0,0,1755,195,1,0,0,0,1756,1757,3,292,146,0,1757,
  	1758,3,206,103,0,1758,197,1,0,0,0,1759,1760,3,292,146,0,1760,1761,3,206,
  	103,0,1761,1762,3,244,122,0,1762,199,1,0,0,0,1763,1764,3,292,146,0,1764,
  	1765,3,244,122,0,1765,201,1,0,0,0,1766,1767,3,292,146,0,1767,1768,3,56,
  	28,0,1768,203,1,0,0,0,1769,1771,3,206,103,0,1770,1769,1,0,0,0,1770,1771,
  	1,0,0,0,1771,1772,1,0,0,0,1772,1775,3,244,122,0,1773,1775,3,56,28,0,1774,
  	1770,1,0,0,0,1774,1773,1,0,0,0,1775,205,1,0,0,0,1776,1778,3,208,104,0,
  	1777,1776,1,0,0,0,1778,1779,1,0,0,0,1779,1777,1,0,0,0,1779,1780,1,0,0,
  	0,1780,207,1,0,0,0,1781,1784,3,210,105,0,1782,1784,3,222,111,0,1783,1781,
  	1,0,0,0,1783,1782,1,0,0,0,1784,209,1,0,0,0,1785,1791,3,212,106,0,1786,
  	1791,3,226,113,0,1787,1791,3,232,116,0,1788,1791,3,224,112,0,1789,1791,
  	3,242,121,0,1790,1785,1,0,0,0,1790,1786,1,0,0,0,1790,1787,1,0,0,0,1790,
  	1788,1,0,0,0,1790,1789,1,0,0,0,1791,211,1,0,0,0,1792,1795,3,214,107,0,
  	1793,1795,3,216,108,0,1794,1792,1,0,0,0,1794,1793,1,0,0,0,1795,213,1,
  	0,0,0,1796,1797,5,143,0,0,1797,1798,3,294,147,0,1798,215,1,0,0,0,1799,
  	1800,5,160,0,0,1800,1801,3,218,109,0,1801,217,1,0,0,0,1802,1812,3,214,
  	107,0,1803,1804,5,368,0,0,1804,1805,3,220,110,0,1805,1806,5,379,0,0,1806,
  	1812,1,0,0,0,1807,1808,5,370,0,0,1808,1809,3,220,110,0,1809,1810,5,381,
  	0,0,1810,1812,1,0,0,0,1811,1802,1,0,0,0,1811,1803,1,0,0,0,1811,1807,1,
  	0,0,0,1812,219,1,0,0,0,1813,1815,3,212,106,0,1814,1813,1,0,0,0,1815,1816,
  	1,0,0,0,1816,1814,1,0,0,0,1816,1817,1,0,0,0,1817,221,1,0,0,0,1818,1819,
  	3,274,137,0,1819,223,1,0,0,0,1820,1823,5,91,0,0,1821,1824,3,500,250,0,
  	1822,1824,3,774,387,0,1823,1821,1,0,0,0,1823,1822,1,0,0,0,1824,225,1,
  	0,0,0,1825,1826,5,130,0,0,1826,1827,3,228,114,0,1827,227,1,0,0,0,1828,
  	1833,3,230,115,0,1829,1830,5,360,0,0,1830,1832,3,230,115,0,1831,1829,
  	1,0,0,0,1832,1835,1,0,0,0,1833,1831,1,0,0,0,1833,1834,1,0,0,0,1834,229,
  	1,0,0,0,1835,1833,1,0,0,0,1836,1842,3,82,41,0,1837,1838,3,1092,546,0,
  	1838,1839,5,364,0,0,1839,1840,3,818,409,0,1840,1842,1,0,0,0,1841,1836,
  	1,0,0,0,1841,1837,1,0,0,0,1842,231,1,0,0,0,1843,1844,5,100,0,0,1844,1846,
  	3,234,117,0,1845,1847,3,240,120,0,1846,1845,1,0,0,0,1846,1847,1,0,0,0,
  	1847,233,1,0,0,0,1848,1849,3,236,118,0,1849,1850,3,238,119,0,1850,235,
  	1,0,0,0,1851,1852,3,1092,546,0,1852,1853,5,109,0,0,1853,237,1,0,0,0,1854,
  	1855,3,818,409,0,1855,239,1,0,0,0,1856,1857,5,231,0,0,1857,1858,7,3,0,
  	0,1858,1859,3,1092,546,0,1859,241,1,0,0,0,1860,1862,3,520,260,0,1861,
  	1863,3,534,267,0,1862,1861,1,0,0,0,1862,1863,1,0,0,0,1863,1865,1,0,0,
  	0,1864,1866,3,532,266,0,1865,1864,1,0,0,0,1865,1866,1,0,0,0,1866,1873,
  	1,0,0,0,1867,1869,3,534,267,0,1868,1870,3,532,266,0,1869,1868,1,0,0,0,
  	1869,1870,1,0,0,0,1870,1873,1,0,0,0,1871,1873,3,532,266,0,1872,1860,1,
  	0,0,0,1872,1867,1,0,0,0,1872,1871,1,0,0,0,1873,243,1,0,0,0,1874,1876,
  	3,246,123,0,1875,1877,3,242,121,0,1876,1875,1,0,0,0,1876,1877,1,0,0,0,
  	1877,1880,1,0,0,0,1878,1880,5,92,0,0,1879,1874,1,0,0,0,1879,1878,1,0,
  	0,0,1880,245,1,0,0,0,1881,1882,5,180,0,0,1882,1883,3,248,124,0,1883,247,
  	1,0,0,0,1884,1886,3,902,451,0,1885,1884,1,0,0,0,1885,1886,1,0,0,0,1886,
  	1889,1,0,0,0,1887,1890,5,358,0,0,1888,1890,3,250,125,0,1889,1887,1,0,
  	0,0,1889,1888,1,0,0,0,1890,1892,1,0,0,0,1891,1893,3,512,256,0,1892,1891,
  	1,0,0,0,1892,1893,1,0,0,0,1893,249,1,0,0,0,1894,1899,3,252,126,0,1895,
  	1896,5,360,0,0,1896,1898,3,252,126,0,1897,1895,1,0,0,0,1898,1901,1,0,
  	0,0,1899,1897,1,0,0,0,1899,1900,1,0,0,0,1900,251,1,0,0,0,1901,1899,1,
  	0,0,0,1902,1904,3,840,420,0,1903,1905,3,254,127,0,1904,1903,1,0,0,0,1904,
  	1905,1,0,0,0,1905,253,1,0,0,0,1906,1907,5,27,0,0,1907,1908,3,1110,555,
  	0,1908,255,1,0,0,0,1909,1911,5,187,0,0,1910,1912,3,902,451,0,1911,1910,
  	1,0,0,0,1911,1912,1,0,0,0,1912,1915,1,0,0,0,1913,1916,5,358,0,0,1914,
  	1916,3,258,129,0,1915,1913,1,0,0,0,1915,1914,1,0,0,0,1916,1936,1,0,0,
  	0,1917,1919,3,266,133,0,1918,1920,3,500,250,0,1919,1918,1,0,0,0,1919,
  	1920,1,0,0,0,1920,1922,1,0,0,0,1921,1923,3,512,256,0,1922,1921,1,0,0,
  	0,1922,1923,1,0,0,0,1923,1925,1,0,0,0,1924,1926,3,264,132,0,1925,1924,
  	1,0,0,0,1925,1926,1,0,0,0,1926,1928,1,0,0,0,1927,1929,3,520,260,0,1928,
  	1927,1,0,0,0,1928,1929,1,0,0,0,1929,1931,1,0,0,0,1930,1932,3,534,267,
  	0,1931,1930,1,0,0,0,1931,1932,1,0,0,0,1932,1934,1,0,0,0,1933,1935,3,532,
  	266,0,1934,1933,1,0,0,0,1934,1935,1,0,0,0,1935,1937,1,0,0,0,1936,1917,
  	1,0,0,0,1936,1937,1,0,0,0,1937,257,1,0,0,0,1938,1943,3,260,130,0,1939,
  	1940,5,360,0,0,1940,1942,3,260,130,0,1941,1939,1,0,0,0,1942,1945,1,0,
  	0,0,1943,1941,1,0,0,0,1943,1944,1,0,0,0,1944,259,1,0,0,0,1945,1943,1,
  	0,0,0,1946,1948,3,840,420,0,1947,1949,3,262,131,0,1948,1947,1,0,0,0,1948,
  	1949,1,0,0,0,1949,261,1,0,0,0,1950,1951,5,27,0,0,1951,1952,3,1110,555,
  	0,1952,263,1,0,0,0,1953,1954,5,103,0,0,1954,1955,3,774,387,0,1955,265,
  	1,0,0,0,1956,1959,5,101,0,0,1957,1960,3,268,134,0,1958,1960,3,272,136,
  	0,1959,1957,1,0,0,0,1959,1958,1,0,0,0,1960,267,1,0,0,0,1961,1966,3,270,
  	135,0,1962,1963,5,360,0,0,1963,1965,3,270,135,0,1964,1962,1,0,0,0,1965,
  	1968,1,0,0,0,1966,1964,1,0,0,0,1966,1967,1,0,0,0,1967,269,1,0,0,0,1968,
  	1966,1,0,0,0,1969,1970,3,88,44,0,1970,1971,3,212,106,0,1971,271,1,0,0,
  	0,1972,1977,3,56,28,0,1973,1974,3,88,44,0,1974,1975,3,56,28,0,1975,1977,
  	1,0,0,0,1976,1972,1,0,0,0,1976,1973,1,0,0,0,1977,273,1,0,0,0,1978,1980,
  	5,160,0,0,1979,1978,1,0,0,0,1979,1980,1,0,0,0,1980,1981,1,0,0,0,1981,
  	1982,5,44,0,0,1982,1983,3,276,138,0,1983,275,1,0,0,0,1984,1987,3,278,
  	139,0,1985,1987,3,284,142,0,1986,1984,1,0,0,0,1986,1985,1,0,0,0,1987,
  	277,1,0,0,0,1988,1990,3,280,140,0,1989,1988,1,0,0,0,1989,1990,1,0,0,0,
  	1990,1991,1,0,0,0,1991,1992,3,50,25,0,1992,279,1,0,0,0,1993,1995,5,370,
  	0,0,1994,1996,3,282,141,0,1995,1994,1,0,0,0,1995,1996,1,0,0,0,1996,1997,
  	1,0,0,0,1997,1998,5,381,0,0,1998,281,1,0,0,0,1999,2004,3,912,456,0,2000,
  	2001,5,360,0,0,2001,2003,3,912,456,0,2002,2000,1,0,0,0,2003,2006,1,0,
  	0,0,2004,2002,1,0,0,0,2004,2005,1,0,0,0,2005,283,1,0,0,0,2006,2004,1,
  	0,0,0,2007,2008,3,566,283,0,2008,2010,5,370,0,0,2009,2011,3,286,143,0,
  	2010,2009,1,0,0,0,2010,2011,1,0,0,0,2011,2012,1,0,0,0,2012,2014,5,381,
  	0,0,2013,2015,3,502,251,0,2014,2013,1,0,0,0,2014,2015,1,0,0,0,2015,285,
  	1,0,0,0,2016,2021,3,288,144,0,2017,2018,5,360,0,0,2018,2020,3,288,144,
  	0,2019,2017,1,0,0,0,2020,2023,1,0,0,0,2021,2019,1,0,0,0,2021,2022,1,0,
  	0,0,2022,287,1,0,0,0,2023,2021,1,0,0,0,2024,2025,3,818,409,0,2025,289,
  	1,0,0,0,2026,2027,5,31,0,0,2027,2028,3,538,269,0,2028,291,1,0,0,0,2029,
  	2030,5,223,0,0,2030,2031,3,88,44,0,2031,293,1,0,0,0,2032,2034,3,302,151,
  	0,2033,2035,3,296,148,0,2034,2033,1,0,0,0,2034,2035,1,0,0,0,2035,295,
  	1,0,0,0,2036,2037,5,234,0,0,2037,2038,3,298,149,0,2038,297,1,0,0,0,2039,
  	2044,3,300,150,0,2040,2041,5,360,0,0,2041,2043,3,300,150,0,2042,2040,
  	1,0,0,0,2043,2046,1,0,0,0,2044,2042,1,0,0,0,2044,2045,1,0,0,0,2045,299,
  	1,0,0,0,2046,2044,1,0,0,0,2047,2048,3,912,456,0,2048,301,1,0,0,0,2049,
  	2051,3,304,152,0,2050,2049,1,0,0,0,2050,2051,1,0,0,0,2051,2052,1,0,0,
  	0,2052,2054,3,314,157,0,2053,2055,3,320,160,0,2054,2053,1,0,0,0,2054,
  	2055,1,0,0,0,2055,2057,1,0,0,0,2056,2058,3,322,161,0,2057,2056,1,0,0,
  	0,2057,2058,1,0,0,0,2058,303,1,0,0,0,2059,2062,3,306,153,0,2060,2062,
  	3,308,154,0,2061,2059,1,0,0,0,2061,2060,1,0,0,0,2062,305,1,0,0,0,2063,
  	2064,5,309,0,0,2064,2065,3,310,155,0,2065,307,1,0,0,0,2066,2067,5,282,
  	0,0,2067,2068,3,312,156,0,2068,309,1,0,0,0,2069,2071,5,286,0,0,2070,2072,
  	5,279,0,0,2071,2070,1,0,0,0,2071,2072,1,0,0,0,2072,2075,1,0,0,0,2073,
  	2075,5,287,0,0,2074,2069,1,0,0,0,2074,2073,1,0,0,0,2075,311,1,0,0,0,2076,
  	2078,3,1144,572,0,2077,2079,5,279,0,0,2078,2077,1,0,0,0,2078,2079,1,0,
  	0,0,2079,2082,1,0,0,0,2080,2082,3,1142,571,0,2081,2076,1,0,0,0,2081,2080,
  	1,0,0,0,2082,313,1,0,0,0,2083,2088,3,316,158,0,2084,2085,5,360,0,0,2085,
  	2087,3,316,158,0,2086,2084,1,0,0,0,2087,2090,1,0,0,0,2088,2086,1,0,0,
  	0,2088,2089,1,0,0,0,2089,315,1,0,0,0,2090,2088,1,0,0,0,2091,2093,3,318,
  	159,0,2092,2091,1,0,0,0,2092,2093,1,0,0,0,2093,2095,1,0,0,0,2094,2096,
  	3,344,172,0,2095,2094,1,0,0,0,2095,2096,1,0,0,0,2096,2097,1,0,0,0,2097,
  	2098,3,372,186,0,2098,317,1,0,0,0,2099,2100,3,1088,544,0,2100,2101,5,
  	364,0,0,2101,319,1,0,0,0,2102,2103,5,291,0,0,2103,2104,3,344,172,0,2104,
  	321,1,0,0,0,2105,2106,5,230,0,0,2106,2107,3,774,387,0,2107,323,1,0,0,
  	0,2108,2109,3,326,163,0,2109,325,1,0,0,0,2110,2115,3,328,164,0,2111,2112,
  	5,360,0,0,2112,2114,3,328,164,0,2113,2111,1,0,0,0,2114,2117,1,0,0,0,2115,
  	2113,1,0,0,0,2115,2116,1,0,0,0,2116,327,1,0,0,0,2117,2115,1,0,0,0,2118,
  	2124,3,330,165,0,2119,2120,3,332,166,0,2120,2121,3,330,165,0,2121,2123,
  	1,0,0,0,2122,2119,1,0,0,0,2123,2126,1,0,0,0,2124,2122,1,0,0,0,2124,2125,
  	1,0,0,0,2125,329,1,0,0,0,2126,2124,1,0,0,0,2127,2129,5,370,0,0,2128,2130,
  	3,340,170,0,2129,2128,1,0,0,0,2129,2130,1,0,0,0,2130,2131,1,0,0,0,2131,
  	2132,5,381,0,0,2132,331,1,0,0,0,2133,2137,3,334,167,0,2134,2137,3,336,
  	168,0,2135,2137,3,338,169,0,2136,2133,1,0,0,0,2136,2134,1,0,0,0,2136,
  	2135,1,0,0,0,2137,333,1,0,0,0,2138,2140,5,337,0,0,2139,2141,3,340,170,
  	0,2140,2139,1,0,0,0,2140,2141,1,0,0,0,2141,2142,1,0,0,0,2142,2143,5,347,
  	0,0,2143,335,1,0,0,0,2144,2146,5,343,0,0,2145,2147,3,340,170,0,2146,2145,
  	1,0,0,0,2146,2147,1,0,0,0,2147,2148,1,0,0,0,2148,2149,5,328,0,0,2149,
  	337,1,0,0,0,2150,2152,5,354,0,0,2151,2153,3,340,170,0,2152,2151,1,0,0,
  	0,2152,2153,1,0,0,0,2153,2154,1,0,0,0,2154,2155,5,348,0,0,2155,339,1,
  	0,0,0,2156,2158,3,386,193,0,2157,2159,3,342,171,0,2158,2157,1,0,0,0,2158,
  	2159,1,0,0,0,2159,2165,1,0,0,0,2160,2162,3,386,193,0,2161,2160,1,0,0,
  	0,2161,2162,1,0,0,0,2162,2163,1,0,0,0,2163,2165,3,342,171,0,2164,2156,
  	1,0,0,0,2164,2161,1,0,0,0,2165,341,1,0,0,0,2166,2167,3,390,195,0,2167,
  	2169,3,662,331,0,2168,2170,3,396,198,0,2169,2168,1,0,0,0,2169,2170,1,
  	0,0,0,2170,2178,1,0,0,0,2171,2172,3,390,195,0,2172,2173,3,662,331,0,2173,
  	2175,1,0,0,0,2174,2171,1,0,0,0,2174,2175,1,0,0,0,2175,2176,1,0,0,0,2176,
  	2178,3,396,198,0,2177,2166,1,0,0,0,2177,2174,1,0,0,0,2178,343,1,0,0,0,
  	2179,2182,3,346,173,0,2180,2182,3,350,175,0,2181,2179,1,0,0,0,2181,2180,
  	1,0,0,0,2182,345,1,0,0,0,2183,2185,3,348,174,0,2184,2186,3,354,177,0,
  	2185,2184,1,0,0,0,2185,2186,1,0,0,0,2186,347,1,0,0,0,2187,2188,7,4,0,
  	0,2188,349,1,0,0,0,2189,2193,3,352,176,0,2190,2193,3,356,178,0,2191,2193,
  	3,360,180,0,2192,2189,1,0,0,0,2192,2190,1,0,0,0,2192,2191,1,0,0,0,2193,
  	351,1,0,0,0,2194,2196,5,22,0,0,2195,2197,3,348,174,0,2196,2195,1,0,0,
  	0,2196,2197,1,0,0,0,2197,2199,1,0,0,0,2198,2200,3,354,177,0,2199,2198,
  	1,0,0,0,2199,2200,1,0,0,0,2200,353,1,0,0,0,2201,2202,7,5,0,0,2202,355,
  	1,0,0,0,2203,2205,5,25,0,0,2204,2206,3,358,179,0,2205,2204,1,0,0,0,2205,
  	2206,1,0,0,0,2206,2208,1,0,0,0,2207,2209,3,348,174,0,2208,2207,1,0,0,
  	0,2208,2209,1,0,0,0,2209,2211,1,0,0,0,2210,2212,3,354,177,0,2211,2210,
  	1,0,0,0,2211,2212,1,0,0,0,2212,357,1,0,0,0,2213,2214,3,852,426,0,2214,
  	359,1,0,0,0,2215,2220,3,362,181,0,2216,2220,3,364,182,0,2217,2220,3,366,
  	183,0,2218,2220,3,368,184,0,2219,2215,1,0,0,0,2219,2216,1,0,0,0,2219,
  	2217,1,0,0,0,2219,2218,1,0,0,0,2220,361,1,0,0,0,2221,2222,5,22,0,0,2222,
  	2224,5,310,0,0,2223,2225,3,348,174,0,2224,2223,1,0,0,0,2224,2225,1,0,
  	0,0,2225,2227,1,0,0,0,2226,2228,3,354,177,0,2227,2226,1,0,0,0,2227,2228,
  	1,0,0,0,2228,363,1,0,0,0,2229,2230,5,25,0,0,2230,2232,5,310,0,0,2231,
  	2233,3,348,174,0,2232,2231,1,0,0,0,2232,2233,1,0,0,0,2233,2235,1,0,0,
  	0,2234,2236,3,354,177,0,2235,2234,1,0,0,0,2235,2236,1,0,0,0,2236,365,
  	1,0,0,0,2237,2238,5,310,0,0,2238,2240,3,358,179,0,2239,2241,3,348,174,
  	0,2240,2239,1,0,0,0,2240,2241,1,0,0,0,2241,2243,1,0,0,0,2242,2244,3,354,
  	177,0,2243,2242,1,0,0,0,2243,2244,1,0,0,0,2244,367,1,0,0,0,2245,2247,
  	5,310,0,0,2246,2248,3,370,185,0,2247,2246,1,0,0,0,2247,2248,1,0,0,0,2248,
  	2250,1,0,0,0,2249,2251,3,348,174,0,2250,2249,1,0,0,0,2250,2251,1,0,0,
  	0,2251,2253,1,0,0,0,2252,2254,3,354,177,0,2253,2252,1,0,0,0,2253,2254,
  	1,0,0,0,2254,2255,1,0,0,0,2255,2256,7,6,0,0,2256,369,1,0,0,0,2257,2258,
  	3,852,426,0,2258,371,1,0,0,0,2259,2275,3,374,187,0,2260,2263,3,374,187,
  	0,2261,2262,5,327,0,0,2262,2264,3,374,187,0,2263,2261,1,0,0,0,2264,2265,
  	1,0,0,0,2265,2263,1,0,0,0,2265,2266,1,0,0,0,2266,2275,1,0,0,0,2267,2270,
  	3,374,187,0,2268,2269,5,385,0,0,2269,2271,3,374,187,0,2270,2268,1,0,0,
  	0,2271,2272,1,0,0,0,2272,2270,1,0,0,0,2272,2273,1,0,0,0,2273,2275,1,0,
  	0,0,2274,2259,1,0,0,0,2274,2260,1,0,0,0,2274,2267,1,0,0,0,2275,373,1,
  	0,0,0,2276,2278,3,376,188,0,2277,2276,1,0,0,0,2278,2279,1,0,0,0,2279,
  	2277,1,0,0,0,2279,2280,1,0,0,0,2280,375,1,0,0,0,2281,2289,3,378,189,0,
  	2282,2283,3,378,189,0,2283,2284,3,434,217,0,2284,2289,1,0,0,0,2285,2286,
  	3,378,189,0,2286,2287,5,376,0,0,2287,2289,1,0,0,0,2288,2281,1,0,0,0,2288,
  	2282,1,0,0,0,2288,2285,1,0,0,0,2289,377,1,0,0,0,2290,2294,3,380,190,0,
  	2291,2294,3,422,211,0,2292,2294,3,444,222,0,2293,2290,1,0,0,0,2293,2291,
  	1,0,0,0,2293,2292,1,0,0,0,2294,379,1,0,0,0,2295,2298,3,382,191,0,2296,
  	2298,3,402,201,0,2297,2295,1,0,0,0,2297,2296,1,0,0,0,2298,381,1,0,0,0,
  	2299,2300,5,370,0,0,2300,2301,3,384,192,0,2301,2302,5,381,0,0,2302,383,
  	1,0,0,0,2303,2305,3,386,193,0,2304,2303,1,0,0,0,2304,2305,1,0,0,0,2305,
  	2307,1,0,0,0,2306,2308,3,388,194,0,2307,2306,1,0,0,0,2307,2308,1,0,0,
  	0,2308,2310,1,0,0,0,2309,2311,3,392,196,0,2310,2309,1,0,0,0,2310,2311,
  	1,0,0,0,2311,385,1,0,0,0,2312,2313,3,1086,543,0,2313,387,1,0,0,0,2314,
  	2315,3,390,195,0,2315,2316,3,428,214,0,2316,389,1,0,0,0,2317,2318,7,7,
  	0,0,2318,391,1,0,0,0,2319,2322,3,394,197,0,2320,2322,3,396,198,0,2321,
  	2319,1,0,0,0,2321,2320,1,0,0,0,2322,393,1,0,0,0,2323,2324,5,230,0,0,2324,
  	2325,3,774,387,0,2325,395,1,0,0,0,2326,2327,5,368,0,0,2327,2328,3,398,
  	199,0,2328,2329,5,379,0,0,2329,397,1,0,0,0,2330,2335,3,400,200,0,2331,
  	2332,5,360,0,0,2332,2334,3,400,200,0,2333,2331,1,0,0,0,2334,2337,1,0,
  	0,0,2335,2333,1,0,0,0,2335,2336,1,0,0,0,2336,399,1,0,0,0,2337,2335,1,
  	0,0,0,2338,2339,3,1082,541,0,2339,2340,5,359,0,0,2340,2341,3,818,409,
  	0,2341,401,1,0,0,0,2342,2345,3,404,202,0,2343,2345,3,420,210,0,2344,2342,
  	1,0,0,0,2344,2343,1,0,0,0,2345,403,1,0,0,0,2346,2354,3,406,203,0,2347,
  	2354,3,408,204,0,2348,2354,3,410,205,0,2349,2354,3,412,206,0,2350,2354,
  	3,414,207,0,2351,2354,3,416,208,0,2352,2354,3,418,209,0,2353,2346,1,0,
  	0,0,2353,2347,1,0,0,0,2353,2348,1,0,0,0,2353,2349,1,0,0,0,2353,2350,1,
  	0,0,0,2353,2351,1,0,0,0,2353,2352,1,0,0,0,2354,405,1,0,0,0,2355,2356,
  	5,337,0,0,2356,2357,3,384,192,0,2357,2358,5,347,0,0,2358,407,1,0,0,0,
  	2359,2360,5,354,0,0,2360,2361,3,384,192,0,2361,2362,5,348,0,0,2362,409,
  	1,0,0,0,2363,2364,5,343,0,0,2364,2365,3,384,192,0,2365,2366,5,328,0,0,
  	2366,411,1,0,0,0,2367,2368,5,338,0,0,2368,2369,3,384,192,0,2369,2370,
  	5,348,0,0,2370,413,1,0,0,0,2371,2372,5,354,0,0,2372,2373,3,384,192,0,
  	2373,2374,5,329,0,0,2374,415,1,0,0,0,2375,2376,5,337,0,0,2376,2377,3,
  	384,192,0,2377,2378,5,328,0,0,2378,417,1,0,0,0,2379,2380,5,343,0,0,2380,
  	2381,3,384,192,0,2381,2382,5,347,0,0,2382,419,1,0,0,0,2383,2384,7,8,0,
  	0,2384,421,1,0,0,0,2385,2387,5,370,0,0,2386,2388,3,424,212,0,2387,2386,
  	1,0,0,0,2387,2388,1,0,0,0,2388,2390,1,0,0,0,2389,2391,3,346,173,0,2390,
  	2389,1,0,0,0,2390,2391,1,0,0,0,2391,2392,1,0,0,0,2392,2394,3,372,186,
  	0,2393,2395,3,426,213,0,2394,2393,1,0,0,0,2394,2395,1,0,0,0,2395,2396,
  	1,0,0,0,2396,2397,5,381,0,0,2397,423,1,0,0,0,2398,2399,3,1090,545,0,2399,
  	2400,5,364,0,0,2400,425,1,0,0,0,2401,2402,5,230,0,0,2402,2403,3,774,387,
  	0,2403,427,1,0,0,0,2404,2405,6,214,-1,0,2405,2406,5,365,0,0,2406,2414,
  	3,428,214,6,2407,2414,3,1080,540,0,2408,2414,5,373,0,0,2409,2410,5,370,
  	0,0,2410,2411,3,428,214,0,2411,2412,5,381,0,0,2412,2414,1,0,0,0,2413,
  	2404,1,0,0,0,2413,2407,1,0,0,0,2413,2408,1,0,0,0,2413,2409,1,0,0,0,2414,
  	2423,1,0,0,0,2415,2416,10,5,0,0,2416,2417,5,357,0,0,2417,2422,3,428,214,
  	6,2418,2419,10,4,0,0,2419,2420,5,385,0,0,2420,2422,3,428,214,5,2421,2415,
  	1,0,0,0,2421,2418,1,0,0,0,2422,2425,1,0,0,0,2423,2421,1,0,0,0,2423,2424,
  	1,0,0,0,2424,429,1,0,0,0,2425,2423,1,0,0,0,2426,2427,3,912,456,0,2427,
  	431,1,0,0,0,2428,2429,3,912,456,0,2429,433,1,0,0,0,2430,2435,5,358,0,
  	0,2431,2435,5,375,0,0,2432,2435,3,436,218,0,2433,2435,3,438,219,0,2434,
  	2430,1,0,0,0,2434,2431,1,0,0,0,2434,2432,1,0,0,0,2434,2433,1,0,0,0,2435,
  	435,1,0,0,0,2436,2437,5,368,0,0,2437,2438,3,1124,562,0,2438,2439,5,379,
  	0,0,2439,437,1,0,0,0,2440,2442,5,368,0,0,2441,2443,3,440,220,0,2442,2441,
  	1,0,0,0,2442,2443,1,0,0,0,2443,2444,1,0,0,0,2444,2446,5,360,0,0,2445,
  	2447,3,442,221,0,2446,2445,1,0,0,0,2446,2447,1,0,0,0,2447,2448,1,0,0,
  	0,2448,2449,5,379,0,0,2449,439,1,0,0,0,2450,2451,3,1124,562,0,2451,441,
  	1,0,0,0,2452,2453,3,1124,562,0,2453,443,1,0,0,0,2454,2462,3,446,223,0,
  	2455,2462,3,448,224,0,2456,2462,3,450,225,0,2457,2462,3,452,226,0,2458,
  	2462,3,454,227,0,2459,2462,3,456,228,0,2460,2462,3,458,229,0,2461,2454,
  	1,0,0,0,2461,2455,1,0,0,0,2461,2456,1,0,0,0,2461,2457,1,0,0,0,2461,2458,
  	1,0,0,0,2461,2459,1,0,0,0,2461,2460,1,0,0,0,2462,445,1,0,0,0,2463,2464,
  	5,340,0,0,2464,2465,3,460,230,0,2465,2466,5,350,0,0,2466,447,1,0,0,0,
  	2467,2468,5,356,0,0,2468,2469,3,460,230,0,2469,2470,5,352,0,0,2470,449,
  	1,0,0,0,2471,2472,5,344,0,0,2472,2473,3,460,230,0,2473,2474,5,351,0,0,
  	2474,451,1,0,0,0,2475,2476,5,341,0,0,2476,2477,3,460,230,0,2477,2478,
  	5,352,0,0,2478,453,1,0,0,0,2479,2480,5,356,0,0,2480,2481,3,460,230,0,
  	2481,2482,5,353,0,0,2482,455,1,0,0,0,2483,2484,5,340,0,0,2484,2485,3,
  	460,230,0,2485,2486,5,351,0,0,2486,457,1,0,0,0,2487,2488,5,344,0,0,2488,
  	2489,3,460,230,0,2489,2490,5,350,0,0,2490,459,1,0,0,0,2491,2495,3,466,
  	233,0,2492,2495,3,462,231,0,2493,2495,3,464,232,0,2494,2491,1,0,0,0,2494,
  	2492,1,0,0,0,2494,2493,1,0,0,0,2495,461,1,0,0,0,2496,2497,3,466,233,0,
  	2497,2498,5,385,0,0,2498,2503,3,466,233,0,2499,2500,5,385,0,0,2500,2502,
  	3,466,233,0,2501,2499,1,0,0,0,2502,2505,1,0,0,0,2503,2501,1,0,0,0,2503,
  	2504,1,0,0,0,2504,463,1,0,0,0,2505,2503,1,0,0,0,2506,2507,3,466,233,0,
  	2507,2508,5,327,0,0,2508,2513,3,466,233,0,2509,2510,5,327,0,0,2510,2512,
  	3,466,233,0,2511,2509,1,0,0,0,2512,2515,1,0,0,0,2513,2511,1,0,0,0,2513,
  	2514,1,0,0,0,2514,465,1,0,0,0,2515,2513,1,0,0,0,2516,2517,6,233,-1,0,
  	2517,2518,3,468,234,0,2518,2523,1,0,0,0,2519,2520,10,1,0,0,2520,2522,
  	3,468,234,0,2521,2519,1,0,0,0,2522,2525,1,0,0,0,2523,2521,1,0,0,0,2523,
  	2524,1,0,0,0,2524,467,1,0,0,0,2525,2523,1,0,0,0,2526,2527,6,234,-1,0,
  	2527,2528,3,470,235,0,2528,2534,1,0,0,0,2529,2530,10,1,0,0,2530,2531,
  	5,357,0,0,2531,2533,3,470,235,0,2532,2529,1,0,0,0,2533,2536,1,0,0,0,2534,
  	2532,1,0,0,0,2534,2535,1,0,0,0,2535,469,1,0,0,0,2536,2534,1,0,0,0,2537,
  	2541,3,476,238,0,2538,2541,3,472,236,0,2539,2541,3,474,237,0,2540,2537,
  	1,0,0,0,2540,2538,1,0,0,0,2540,2539,1,0,0,0,2541,471,1,0,0,0,2542,2543,
  	3,476,238,0,2543,2544,3,434,217,0,2544,473,1,0,0,0,2545,2546,3,476,238,
  	0,2546,2547,5,376,0,0,2547,475,1,0,0,0,2548,2551,3,478,239,0,2549,2551,
  	3,494,247,0,2550,2548,1,0,0,0,2550,2549,1,0,0,0,2551,477,1,0,0,0,2552,
  	2560,3,480,240,0,2553,2560,3,482,241,0,2554,2560,3,484,242,0,2555,2560,
  	3,486,243,0,2556,2560,3,488,244,0,2557,2560,3,490,245,0,2558,2560,3,492,
  	246,0,2559,2552,1,0,0,0,2559,2553,1,0,0,0,2559,2554,1,0,0,0,2559,2555,
  	1,0,0,0,2559,2556,1,0,0,0,2559,2557,1,0,0,0,2559,2558,1,0,0,0,2560,479,
  	1,0,0,0,2561,2562,5,371,0,0,2562,2563,3,494,247,0,2563,481,1,0,0,0,2564,
  	2565,5,383,0,0,2565,2566,3,494,247,0,2566,483,1,0,0,0,2567,2568,3,494,
  	247,0,2568,2569,5,366,0,0,2569,485,1,0,0,0,2570,2571,5,336,0,0,2571,2572,
  	3,494,247,0,2572,487,1,0,0,0,2573,2574,5,383,0,0,2574,2575,3,494,247,
  	0,2575,2576,5,366,0,0,2576,489,1,0,0,0,2577,2578,5,371,0,0,2578,2579,
  	3,494,247,0,2579,2580,5,366,0,0,2580,491,1,0,0,0,2581,2582,5,372,0,0,
  	2582,2583,3,494,247,0,2583,493,1,0,0,0,2584,2587,3,498,249,0,2585,2587,
  	3,496,248,0,2586,2584,1,0,0,0,2586,2585,1,0,0,0,2587,495,1,0,0,0,2588,
  	2589,5,365,0,0,2589,2590,3,498,249,0,2590,497,1,0,0,0,2591,2597,3,1080,
  	540,0,2592,2593,5,370,0,0,2593,2594,3,460,230,0,2594,2595,5,381,0,0,2595,
  	2597,1,0,0,0,2596,2591,1,0,0,0,2596,2592,1,0,0,0,2597,499,1,0,0,0,2598,
  	2599,5,230,0,0,2599,2600,3,774,387,0,2600,501,1,0,0,0,2601,2602,5,234,
  	0,0,2602,2603,3,504,252,0,2603,503,1,0,0,0,2604,2609,3,506,253,0,2605,
  	2606,5,360,0,0,2606,2608,3,506,253,0,2607,2605,1,0,0,0,2608,2611,1,0,
  	0,0,2609,2607,1,0,0,0,2609,2610,1,0,0,0,2610,505,1,0,0,0,2611,2609,1,
  	0,0,0,2612,2614,3,508,254,0,2613,2615,3,510,255,0,2614,2613,1,0,0,0,2614,
  	2615,1,0,0,0,2615,507,1,0,0,0,2616,2617,3,1084,542,0,2617,509,1,0,0,0,
  	2618,2619,5,27,0,0,2619,2620,3,1092,546,0,2620,511,1,0,0,0,2621,2622,
  	5,102,0,0,2622,2623,5,41,0,0,2623,2624,3,514,257,0,2624,513,1,0,0,0,2625,
  	2630,3,516,258,0,2626,2627,5,360,0,0,2627,2629,3,516,258,0,2628,2626,
  	1,0,0,0,2629,2632,1,0,0,0,2630,2628,1,0,0,0,2630,2631,1,0,0,0,2631,2635,
  	1,0,0,0,2632,2630,1,0,0,0,2633,2635,3,518,259,0,2634,2625,1,0,0,0,2634,
  	2633,1,0,0,0,2635,515,1,0,0,0,2636,2637,3,912,456,0,2637,517,1,0,0,0,
  	2638,2639,5,370,0,0,2639,2640,5,381,0,0,2640,519,1,0,0,0,2641,2642,5,
  	162,0,0,2642,2643,5,41,0,0,2643,2644,3,522,261,0,2644,521,1,0,0,0,2645,
  	2650,3,524,262,0,2646,2647,5,360,0,0,2647,2649,3,524,262,0,2648,2646,
  	1,0,0,0,2649,2652,1,0,0,0,2650,2648,1,0,0,0,2650,2651,1,0,0,0,2651,523,
  	1,0,0,0,2652,2650,1,0,0,0,2653,2655,3,526,263,0,2654,2656,3,528,264,0,
  	2655,2654,1,0,0,0,2655,2656,1,0,0,0,2656,2658,1,0,0,0,2657,2659,3,530,
  	265,0,2658,2657,1,0,0,0,2658,2659,1,0,0,0,2659,525,1,0,0,0,2660,2661,
  	3,840,420,0,2661,527,1,0,0,0,2662,2663,7,9,0,0,2663,529,1,0,0,0,2664,
  	2665,5,155,0,0,2665,2669,5,288,0,0,2666,2667,5,155,0,0,2667,2669,5,295,
  	0,0,2668,2664,1,0,0,0,2668,2666,1,0,0,0,2669,531,1,0,0,0,2670,2671,5,
  	132,0,0,2671,2672,3,852,426,0,2672,533,1,0,0,0,2673,2674,3,536,268,0,
  	2674,2675,3,852,426,0,2675,535,1,0,0,0,2676,2677,7,10,0,0,2677,537,1,
  	0,0,0,2678,2682,3,540,270,0,2679,2682,3,544,272,0,2680,2682,3,572,286,
  	0,2681,2678,1,0,0,0,2681,2679,1,0,0,0,2681,2680,1,0,0,0,2682,539,1,0,
  	0,0,2683,2688,5,382,0,0,2684,2685,3,548,274,0,2685,2686,3,1062,531,0,
  	2686,2688,1,0,0,0,2687,2683,1,0,0,0,2687,2684,1,0,0,0,2688,541,1,0,0,
  	0,2689,2690,3,548,274,0,2690,2691,3,1062,531,0,2691,543,1,0,0,0,2692,
  	2697,3,546,273,0,2693,2694,3,550,275,0,2694,2695,3,1062,531,0,2695,2697,
  	1,0,0,0,2696,2692,1,0,0,0,2696,2693,1,0,0,0,2697,545,1,0,0,0,2698,2699,
  	7,11,0,0,2699,547,1,0,0,0,2700,2702,5,382,0,0,2701,2703,3,552,276,0,2702,
  	2701,1,0,0,0,2702,2703,1,0,0,0,2703,549,1,0,0,0,2704,2709,5,333,0,0,2705,
  	2706,5,382,0,0,2706,2708,5,333,0,0,2707,2705,1,0,0,0,2708,2711,1,0,0,
  	0,2709,2707,1,0,0,0,2709,2710,1,0,0,0,2710,2712,1,0,0,0,2711,2709,1,0,
  	0,0,2712,2714,5,382,0,0,2713,2715,3,552,276,0,2714,2713,1,0,0,0,2714,
  	2715,1,0,0,0,2715,551,1,0,0,0,2716,2717,3,1060,530,0,2717,2718,5,382,
  	0,0,2718,2720,1,0,0,0,2719,2716,1,0,0,0,2720,2721,1,0,0,0,2721,2719,1,
  	0,0,0,2721,2722,1,0,0,0,2722,553,1,0,0,0,2723,2724,3,570,285,0,2724,2725,
  	3,1064,532,0,2725,2730,1,0,0,0,2726,2730,3,1066,533,0,2727,2730,3,558,
  	279,0,2728,2730,3,572,286,0,2729,2723,1,0,0,0,2729,2726,1,0,0,0,2729,
  	2727,1,0,0,0,2729,2728,1,0,0,0,2730,555,1,0,0,0,2731,2733,3,570,285,0,
  	2732,2731,1,0,0,0,2732,2733,1,0,0,0,2733,2734,1,0,0,0,2734,2735,3,1064,
  	532,0,2735,557,1,0,0,0,2736,2737,7,12,0,0,2737,559,1,0,0,0,2738,2741,
  	3,562,281,0,2739,2741,3,572,286,0,2740,2738,1,0,0,0,2740,2739,1,0,0,0,
  	2741,561,1,0,0,0,2742,2744,3,570,285,0,2743,2742,1,0,0,0,2743,2744,1,
  	0,0,0,2744,2745,1,0,0,0,2745,2746,3,1068,534,0,2746,563,1,0,0,0,2747,
  	2748,3,570,285,0,2748,2749,3,1074,537,0,2749,2753,1,0,0,0,2750,2753,3,
  	1076,538,0,2751,2753,3,572,286,0,2752,2747,1,0,0,0,2752,2750,1,0,0,0,
  	2752,2751,1,0,0,0,2753,565,1,0,0,0,2754,2757,3,568,284,0,2755,2757,3,
  	572,286,0,2756,2754,1,0,0,0,2756,2755,1,0,0,0,2757,567,1,0,0,0,2758,2760,
  	3,570,285,0,2759,2758,1,0,0,0,2759,2760,1,0,0,0,2760,2761,1,0,0,0,2761,
  	2762,3,1078,539,0,2762,569,1,0,0,0,2763,2765,3,538,269,0,2764,2766,5,
  	382,0,0,2765,2764,1,0,0,0,2765,2766,1,0,0,0,2766,2772,1,0,0,0,2767,2768,
  	3,1056,528,0,2768,2769,5,374,0,0,2769,2771,1,0,0,0,2770,2767,1,0,0,0,
  	2771,2774,1,0,0,0,2772,2770,1,0,0,0,2772,2773,1,0,0,0,2773,2783,1,0,0,
  	0,2774,2772,1,0,0,0,2775,2776,3,1056,528,0,2776,2777,5,374,0,0,2777,2779,
  	1,0,0,0,2778,2775,1,0,0,0,2779,2780,1,0,0,0,2780,2778,1,0,0,0,2780,2781,
  	1,0,0,0,2781,2783,1,0,0,0,2782,2763,1,0,0,0,2782,2778,1,0,0,0,2783,571,
  	1,0,0,0,2784,2785,5,325,0,0,2785,573,1,0,0,0,2786,2787,5,368,0,0,2787,
  	2788,3,576,288,0,2788,2789,5,379,0,0,2789,575,1,0,0,0,2790,2791,3,578,
  	289,0,2791,577,1,0,0,0,2792,2797,3,580,290,0,2793,2794,5,360,0,0,2794,
  	2796,3,580,290,0,2795,2793,1,0,0,0,2796,2799,1,0,0,0,2797,2795,1,0,0,
  	0,2797,2798,1,0,0,0,2798,579,1,0,0,0,2799,2797,1,0,0,0,2800,2803,3,582,
  	291,0,2801,2803,3,602,301,0,2802,2800,1,0,0,0,2802,2801,1,0,0,0,2803,
  	581,1,0,0,0,2804,2807,3,584,292,0,2805,2807,3,586,293,0,2806,2804,1,0,
  	0,0,2806,2805,1,0,0,0,2807,583,1,0,0,0,2808,2810,3,1140,570,0,2809,2811,
  	5,317,0,0,2810,2809,1,0,0,0,2810,2811,1,0,0,0,2811,2812,1,0,0,0,2812,
  	2813,3,1070,535,0,2813,2815,1,0,0,0,2814,2808,1,0,0,0,2814,2815,1,0,0,
  	0,2815,2816,1,0,0,0,2816,2818,5,370,0,0,2817,2819,3,592,296,0,2818,2817,
  	1,0,0,0,2818,2819,1,0,0,0,2819,2821,1,0,0,0,2820,2822,3,590,295,0,2821,
  	2820,1,0,0,0,2821,2822,1,0,0,0,2822,2823,1,0,0,0,2823,2824,5,381,0,0,
  	2824,585,1,0,0,0,2825,2827,3,1140,570,0,2826,2828,5,317,0,0,2827,2826,
  	1,0,0,0,2827,2828,1,0,0,0,2828,2829,1,0,0,0,2829,2832,3,588,294,0,2830,
  	2831,5,27,0,0,2831,2833,3,592,296,0,2832,2830,1,0,0,0,2832,2833,1,0,0,
  	0,2833,587,1,0,0,0,2834,2836,3,1070,535,0,2835,2837,3,590,295,0,2836,
  	2835,1,0,0,0,2836,2837,1,0,0,0,2837,2840,1,0,0,0,2838,2840,3,590,295,
  	0,2839,2834,1,0,0,0,2839,2838,1,0,0,0,2840,589,1,0,0,0,2841,2843,3,596,
  	298,0,2842,2844,3,594,297,0,2843,2842,1,0,0,0,2843,2844,1,0,0,0,2844,
  	2847,1,0,0,0,2845,2847,3,594,297,0,2846,2841,1,0,0,0,2846,2845,1,0,0,
  	0,2847,591,1,0,0,0,2848,2849,3,1112,556,0,2849,593,1,0,0,0,2850,2856,
  	3,598,299,0,2851,2856,3,600,300,0,2852,2853,3,598,299,0,2853,2854,3,600,
  	300,0,2854,2856,1,0,0,0,2855,2850,1,0,0,0,2855,2851,1,0,0,0,2855,2852,
  	1,0,0,0,2856,595,1,0,0,0,2857,2859,3,660,330,0,2858,2857,1,0,0,0,2858,
  	2859,1,0,0,0,2859,2860,1,0,0,0,2860,2861,5,1,0,0,2861,597,1,0,0,0,2862,
  	2863,3,660,330,0,2863,599,1,0,0,0,2864,2865,3,664,332,0,2865,601,1,0,
  	0,0,2866,2869,3,604,302,0,2867,2869,3,606,303,0,2868,2866,1,0,0,0,2868,
  	2867,1,0,0,0,2869,603,1,0,0,0,2870,2872,3,638,319,0,2871,2870,1,0,0,0,
  	2871,2872,1,0,0,0,2872,2873,1,0,0,0,2873,2875,3,1144,572,0,2874,2876,
  	5,317,0,0,2875,2874,1,0,0,0,2875,2876,1,0,0,0,2876,2877,1,0,0,0,2877,
  	2878,3,1072,536,0,2878,2880,1,0,0,0,2879,2871,1,0,0,0,2879,2880,1,0,0,
  	0,2880,2883,1,0,0,0,2881,2884,3,620,310,0,2882,2884,3,626,313,0,2883,
  	2881,1,0,0,0,2883,2882,1,0,0,0,2884,605,1,0,0,0,2885,2886,3,638,319,0,
  	2886,2888,3,1144,572,0,2887,2889,5,317,0,0,2888,2887,1,0,0,0,2888,2889,
  	1,0,0,0,2889,2890,1,0,0,0,2890,2891,3,608,304,0,2891,2892,3,640,320,0,
  	2892,607,1,0,0,0,2893,2895,3,1072,536,0,2894,2896,3,610,305,0,2895,2894,
  	1,0,0,0,2895,2896,1,0,0,0,2896,2899,1,0,0,0,2897,2899,3,610,305,0,2898,
  	2893,1,0,0,0,2898,2897,1,0,0,0,2899,609,1,0,0,0,2900,2902,3,614,307,0,
  	2901,2903,3,612,306,0,2902,2901,1,0,0,0,2902,2903,1,0,0,0,2903,2906,1,
  	0,0,0,2904,2906,3,612,306,0,2905,2900,1,0,0,0,2905,2904,1,0,0,0,2906,
  	611,1,0,0,0,2907,2913,3,616,308,0,2908,2913,3,618,309,0,2909,2910,3,616,
  	308,0,2910,2911,3,618,309,0,2911,2913,1,0,0,0,2912,2907,1,0,0,0,2912,
  	2908,1,0,0,0,2912,2909,1,0,0,0,2913,613,1,0,0,0,2914,2916,3,660,330,0,
  	2915,2914,1,0,0,0,2915,2916,1,0,0,0,2916,2917,1,0,0,0,2917,2918,5,1,0,
  	0,2918,615,1,0,0,0,2919,2920,3,660,330,0,2920,617,1,0,0,0,2921,2922,3,
  	664,332,0,2922,619,1,0,0,0,2923,2926,3,622,311,0,2924,2926,3,624,312,
  	0,2925,2923,1,0,0,0,2925,2924,1,0,0,0,2926,621,1,0,0,0,2927,2928,3,634,
  	317,0,2928,2929,3,628,314,0,2929,2930,3,636,318,0,2930,623,1,0,0,0,2931,
  	2932,3,636,318,0,2932,2933,3,630,315,0,2933,2934,3,634,317,0,2934,625,
  	1,0,0,0,2935,2936,3,634,317,0,2936,2937,3,632,316,0,2937,2938,3,636,318,
  	0,2938,627,1,0,0,0,2939,2940,5,343,0,0,2940,2941,3,610,305,0,2941,2942,
  	5,328,0,0,2942,629,1,0,0,0,2943,2944,5,337,0,0,2944,2945,3,610,305,0,
  	2945,2946,5,347,0,0,2946,631,1,0,0,0,2947,2948,5,354,0,0,2948,2949,3,
  	610,305,0,2949,2950,5,348,0,0,2950,633,1,0,0,0,2951,2952,5,370,0,0,2952,
  	2953,3,656,328,0,2953,2954,5,381,0,0,2954,2961,1,0,0,0,2955,2957,5,370,
  	0,0,2956,2958,3,590,295,0,2957,2956,1,0,0,0,2957,2958,1,0,0,0,2958,2959,
  	1,0,0,0,2959,2961,5,381,0,0,2960,2951,1,0,0,0,2960,2955,1,0,0,0,2961,
  	635,1,0,0,0,2962,2963,5,370,0,0,2963,2964,3,658,329,0,2964,2965,5,381,
  	0,0,2965,2972,1,0,0,0,2966,2968,5,370,0,0,2967,2969,3,590,295,0,2968,
  	2967,1,0,0,0,2968,2969,1,0,0,0,2969,2970,1,0,0,0,2970,2972,5,381,0,0,
  	2971,2962,1,0,0,0,2971,2966,1,0,0,0,2972,637,1,0,0,0,2973,2974,7,13,0,
  	0,2974,639,1,0,0,0,2975,2976,5,280,0,0,2976,2977,3,642,321,0,2977,641,
  	1,0,0,0,2978,2981,3,644,322,0,2979,2981,3,650,325,0,2980,2978,1,0,0,0,
  	2980,2979,1,0,0,0,2981,643,1,0,0,0,2982,2985,3,646,323,0,2983,2985,3,
  	648,324,0,2984,2982,1,0,0,0,2984,2983,1,0,0,0,2985,645,1,0,0,0,2986,2987,
  	5,370,0,0,2987,2988,3,656,328,0,2988,2989,3,652,326,0,2989,2990,3,658,
  	329,0,2990,2991,5,381,0,0,2991,647,1,0,0,0,2992,2993,5,370,0,0,2993,2994,
  	3,658,329,0,2994,2995,5,335,0,0,2995,2996,3,656,328,0,2996,2997,5,381,
  	0,0,2997,649,1,0,0,0,2998,2999,5,370,0,0,2999,3000,3,656,328,0,3000,3001,
  	3,654,327,0,3001,3002,3,658,329,0,3002,3003,5,381,0,0,3003,651,1,0,0,
  	0,3004,3005,7,14,0,0,3005,653,1,0,0,0,3006,3007,7,15,0,0,3007,655,1,0,
  	0,0,3008,3009,3,1112,556,0,3009,657,1,0,0,0,3010,3011,3,1112,556,0,3011,
  	659,1,0,0,0,3012,3013,5,292,0,0,3013,3020,3,1080,540,0,3014,3015,5,294,
  	0,0,3015,3020,3,662,331,0,3016,3017,3,390,195,0,3017,3018,3,662,331,0,
  	3018,3020,1,0,0,0,3019,3012,1,0,0,0,3019,3014,1,0,0,0,3019,3016,1,0,0,
  	0,3020,661,1,0,0,0,3021,3026,3,1080,540,0,3022,3023,5,357,0,0,3023,3025,
  	3,1080,540,0,3024,3022,1,0,0,0,3025,3028,1,0,0,0,3026,3024,1,0,0,0,3026,
  	3027,1,0,0,0,3027,663,1,0,0,0,3028,3026,1,0,0,0,3029,3031,5,368,0,0,3030,
  	3032,3,666,333,0,3031,3030,1,0,0,0,3031,3032,1,0,0,0,3032,3033,1,0,0,
  	0,3033,3034,5,379,0,0,3034,665,1,0,0,0,3035,3040,3,668,334,0,3036,3037,
  	5,360,0,0,3037,3039,3,668,334,0,3038,3036,1,0,0,0,3039,3042,1,0,0,0,3040,
  	3038,1,0,0,0,3040,3041,1,0,0,0,3041,667,1,0,0,0,3042,3040,1,0,0,0,3043,
  	3045,3,1082,541,0,3044,3046,3,676,338,0,3045,3044,1,0,0,0,3045,3046,1,
  	0,0,0,3046,3047,1,0,0,0,3047,3048,3,670,335,0,3048,669,1,0,0,0,3049,3050,
  	3,674,337,0,3050,671,1,0,0,0,3051,3053,5,278,0,0,3052,3051,1,0,0,0,3052,
  	3053,1,0,0,0,3053,3054,1,0,0,0,3054,3055,5,313,0,0,3055,3056,3,766,383,
  	0,3056,673,1,0,0,0,3057,3058,6,337,-1,0,3058,3115,3,678,339,0,3059,3115,
  	3,758,379,0,3060,3061,3,760,380,0,3061,3062,5,371,0,0,3062,3063,3,674,
  	337,0,3063,3068,5,366,0,0,3064,3065,5,369,0,0,3065,3066,3,688,344,0,3066,
  	3067,5,380,0,0,3067,3069,1,0,0,0,3068,3064,1,0,0,0,3068,3069,1,0,0,0,
  	3069,3071,1,0,0,0,3070,3072,3,770,385,0,3071,3070,1,0,0,0,3071,3072,1,
  	0,0,0,3072,3115,1,0,0,0,3073,3078,3,760,380,0,3074,3075,5,369,0,0,3075,
  	3076,3,688,344,0,3076,3077,5,380,0,0,3077,3079,1,0,0,0,3078,3074,1,0,
  	0,0,3078,3079,1,0,0,0,3079,3081,1,0,0,0,3080,3082,3,770,385,0,3081,3080,
  	1,0,0,0,3081,3082,1,0,0,0,3082,3115,1,0,0,0,3083,3115,3,764,382,0,3084,
  	3086,5,25,0,0,3085,3087,5,225,0,0,3086,3085,1,0,0,0,3086,3087,1,0,0,0,
  	3087,3089,1,0,0,0,3088,3090,3,770,385,0,3089,3088,1,0,0,0,3089,3090,1,
  	0,0,0,3090,3115,1,0,0,0,3091,3093,5,25,0,0,3092,3091,1,0,0,0,3092,3093,
  	1,0,0,0,3093,3094,1,0,0,0,3094,3095,5,305,0,0,3095,3097,5,225,0,0,3096,
  	3098,3,770,385,0,3097,3096,1,0,0,0,3097,3098,1,0,0,0,3098,3115,1,0,0,
  	0,3099,3101,5,25,0,0,3100,3102,5,225,0,0,3101,3100,1,0,0,0,3101,3102,
  	1,0,0,0,3102,3103,1,0,0,0,3103,3104,5,371,0,0,3104,3109,3,674,337,0,3105,
  	3106,5,385,0,0,3106,3108,3,674,337,0,3107,3105,1,0,0,0,3108,3111,1,0,
  	0,0,3109,3107,1,0,0,0,3109,3110,1,0,0,0,3110,3112,1,0,0,0,3111,3109,1,
  	0,0,0,3112,3113,5,366,0,0,3113,3115,1,0,0,0,3114,3057,1,0,0,0,3114,3059,
  	1,0,0,0,3114,3060,1,0,0,0,3114,3073,1,0,0,0,3114,3083,1,0,0,0,3114,3084,
  	1,0,0,0,3114,3092,1,0,0,0,3114,3099,1,0,0,0,3115,3132,1,0,0,0,3116,3117,
  	10,1,0,0,3117,3118,5,385,0,0,3118,3131,3,674,337,2,3119,3120,10,7,0,0,
  	3120,3125,3,760,380,0,3121,3122,5,369,0,0,3122,3123,3,688,344,0,3123,
  	3124,5,380,0,0,3124,3126,1,0,0,0,3125,3121,1,0,0,0,3125,3126,1,0,0,0,
  	3126,3128,1,0,0,0,3127,3129,3,770,385,0,3128,3127,1,0,0,0,3128,3129,1,
  	0,0,0,3129,3131,1,0,0,0,3130,3116,1,0,0,0,3130,3119,1,0,0,0,3131,3134,
  	1,0,0,0,3132,3130,1,0,0,0,3132,3133,1,0,0,0,3133,675,1,0,0,0,3134,3132,
  	1,0,0,0,3135,3136,7,16,0,0,3136,677,1,0,0,0,3137,3145,3,680,340,0,3138,
  	3145,3,682,341,0,3139,3145,3,684,342,0,3140,3145,3,692,346,0,3141,3145,
  	3,712,356,0,3142,3145,3,730,365,0,3143,3145,3,732,366,0,3144,3137,1,0,
  	0,0,3144,3138,1,0,0,0,3144,3139,1,0,0,0,3144,3140,1,0,0,0,3144,3141,1,
  	0,0,0,3144,3142,1,0,0,0,3144,3143,1,0,0,0,3145,679,1,0,0,0,3146,3148,
  	7,17,0,0,3147,3149,3,770,385,0,3148,3147,1,0,0,0,3148,3149,1,0,0,0,3149,
  	681,1,0,0,0,3150,3160,5,202,0,0,3151,3155,5,370,0,0,3152,3153,3,686,343,
  	0,3153,3154,5,360,0,0,3154,3156,1,0,0,0,3155,3152,1,0,0,0,3155,3156,1,
  	0,0,0,3156,3157,1,0,0,0,3157,3158,3,688,344,0,3158,3159,5,381,0,0,3159,
  	3161,1,0,0,0,3160,3151,1,0,0,0,3160,3161,1,0,0,0,3161,3163,1,0,0,0,3162,
  	3164,3,770,385,0,3163,3162,1,0,0,0,3163,3164,1,0,0,0,3164,3186,1,0,0,
  	0,3165,3170,5,50,0,0,3166,3167,5,370,0,0,3167,3168,3,690,345,0,3168,3169,
  	5,381,0,0,3169,3171,1,0,0,0,3170,3166,1,0,0,0,3170,3171,1,0,0,0,3171,
  	3173,1,0,0,0,3172,3174,3,770,385,0,3173,3172,1,0,0,0,3173,3174,1,0,0,
  	0,3174,3186,1,0,0,0,3175,3180,5,227,0,0,3176,3177,5,370,0,0,3177,3178,
  	3,688,344,0,3178,3179,5,381,0,0,3179,3181,1,0,0,0,3180,3176,1,0,0,0,3180,
  	3181,1,0,0,0,3181,3183,1,0,0,0,3182,3184,3,770,385,0,3183,3182,1,0,0,
  	0,3183,3184,1,0,0,0,3184,3186,1,0,0,0,3185,3150,1,0,0,0,3185,3165,1,0,
  	0,0,3185,3175,1,0,0,0,3186,683,1,0,0,0,3187,3197,5,43,0,0,3188,3192,5,
  	370,0,0,3189,3190,3,686,343,0,3190,3191,5,360,0,0,3191,3193,1,0,0,0,3192,
  	3189,1,0,0,0,3192,3193,1,0,0,0,3193,3194,1,0,0,0,3194,3195,3,688,344,
  	0,3195,3196,5,381,0,0,3196,3198,1,0,0,0,3197,3188,1,0,0,0,3197,3198,1,
  	0,0,0,3198,3200,1,0,0,0,3199,3201,3,770,385,0,3200,3199,1,0,0,0,3200,
  	3201,1,0,0,0,3201,3223,1,0,0,0,3202,3207,5,36,0,0,3203,3204,5,370,0,0,
  	3204,3205,3,690,345,0,3205,3206,5,381,0,0,3206,3208,1,0,0,0,3207,3203,
  	1,0,0,0,3207,3208,1,0,0,0,3208,3210,1,0,0,0,3209,3211,3,770,385,0,3210,
  	3209,1,0,0,0,3210,3211,1,0,0,0,3211,3223,1,0,0,0,3212,3217,5,226,0,0,
  	3213,3214,5,370,0,0,3214,3215,3,688,344,0,3215,3216,5,381,0,0,3216,3218,
  	1,0,0,0,3217,3213,1,0,0,0,3217,3218,1,0,0,0,3218,3220,1,0,0,0,3219,3221,
  	3,770,385,0,3220,3219,1,0,0,0,3220,3221,1,0,0,0,3221,3223,1,0,0,0,3222,
  	3187,1,0,0,0,3222,3202,1,0,0,0,3222,3212,1,0,0,0,3223,685,1,0,0,0,3224,
  	3225,3,1124,562,0,3225,687,1,0,0,0,3226,3227,3,1124,562,0,3227,689,1,
  	0,0,0,3228,3229,3,1124,562,0,3229,691,1,0,0,0,3230,3233,3,694,347,0,3231,
  	3233,3,710,355,0,3232,3230,1,0,0,0,3232,3231,1,0,0,0,3233,693,1,0,0,0,
  	3234,3237,3,696,348,0,3235,3237,3,704,352,0,3236,3234,1,0,0,0,3236,3235,
  	1,0,0,0,3237,695,1,0,0,0,3238,3241,3,698,349,0,3239,3241,3,700,350,0,
  	3240,3238,1,0,0,0,3240,3239,1,0,0,0,3241,697,1,0,0,0,3242,3244,5,113,
  	0,0,3243,3245,3,770,385,0,3244,3243,1,0,0,0,3244,3245,1,0,0,0,3245,3289,
  	1,0,0,0,3246,3248,5,115,0,0,3247,3249,3,770,385,0,3248,3247,1,0,0,0,3248,
  	3249,1,0,0,0,3249,3289,1,0,0,0,3250,3252,5,117,0,0,3251,3253,3,770,385,
  	0,3252,3251,1,0,0,0,3252,3253,1,0,0,0,3253,3289,1,0,0,0,3254,3256,5,119,
  	0,0,3255,3257,3,770,385,0,3256,3255,1,0,0,0,3256,3257,1,0,0,0,3257,3289,
  	1,0,0,0,3258,3260,5,121,0,0,3259,3261,3,770,385,0,3260,3259,1,0,0,0,3260,
  	3261,1,0,0,0,3261,3289,1,0,0,0,3262,3264,5,123,0,0,3263,3265,3,770,385,
  	0,3264,3263,1,0,0,0,3264,3265,1,0,0,0,3265,3289,1,0,0,0,3266,3268,5,197,
  	0,0,3267,3269,3,770,385,0,3268,3267,1,0,0,0,3268,3269,1,0,0,0,3269,3289,
  	1,0,0,0,3270,3275,5,111,0,0,3271,3272,5,370,0,0,3272,3273,3,706,353,0,
  	3273,3274,5,381,0,0,3274,3276,1,0,0,0,3275,3271,1,0,0,0,3275,3276,1,0,
  	0,0,3276,3278,1,0,0,0,3277,3279,3,770,385,0,3278,3277,1,0,0,0,3278,3279,
  	1,0,0,0,3279,3289,1,0,0,0,3280,3282,5,35,0,0,3281,3283,3,770,385,0,3282,
  	3281,1,0,0,0,3282,3283,1,0,0,0,3283,3289,1,0,0,0,3284,3286,5,191,0,0,
  	3285,3284,1,0,0,0,3285,3286,1,0,0,0,3286,3287,1,0,0,0,3287,3289,3,702,
  	351,0,3288,3242,1,0,0,0,3288,3246,1,0,0,0,3288,3250,1,0,0,0,3288,3254,
  	1,0,0,0,3288,3258,1,0,0,0,3288,3262,1,0,0,0,3288,3266,1,0,0,0,3288,3270,
  	1,0,0,0,3288,3280,1,0,0,0,3288,3285,1,0,0,0,3289,699,1,0,0,0,3290,3292,
  	5,214,0,0,3291,3293,3,770,385,0,3292,3291,1,0,0,0,3292,3293,1,0,0,0,3293,
  	3335,1,0,0,0,3294,3296,5,215,0,0,3295,3297,3,770,385,0,3296,3295,1,0,
  	0,0,3296,3297,1,0,0,0,3297,3335,1,0,0,0,3298,3300,5,216,0,0,3299,3301,
  	3,770,385,0,3300,3299,1,0,0,0,3300,3301,1,0,0,0,3301,3335,1,0,0,0,3302,
  	3304,5,217,0,0,3303,3305,3,770,385,0,3304,3303,1,0,0,0,3304,3305,1,0,
  	0,0,3305,3335,1,0,0,0,3306,3308,5,218,0,0,3307,3309,3,770,385,0,3308,
  	3307,1,0,0,0,3308,3309,1,0,0,0,3309,3335,1,0,0,0,3310,3312,5,219,0,0,
  	3311,3313,3,770,385,0,3312,3311,1,0,0,0,3312,3313,1,0,0,0,3313,3335,1,
  	0,0,0,3314,3316,5,224,0,0,3315,3317,3,770,385,0,3316,3315,1,0,0,0,3316,
  	3317,1,0,0,0,3317,3335,1,0,0,0,3318,3323,5,213,0,0,3319,3320,5,370,0,
  	0,3320,3321,3,706,353,0,3321,3322,5,381,0,0,3322,3324,1,0,0,0,3323,3319,
  	1,0,0,0,3323,3324,1,0,0,0,3324,3326,1,0,0,0,3325,3327,3,770,385,0,3326,
  	3325,1,0,0,0,3326,3327,1,0,0,0,3327,3335,1,0,0,0,3328,3330,5,212,0,0,
  	3329,3331,3,770,385,0,3330,3329,1,0,0,0,3330,3331,1,0,0,0,3331,3335,1,
  	0,0,0,3332,3333,5,221,0,0,3333,3335,3,702,351,0,3334,3290,1,0,0,0,3334,
  	3294,1,0,0,0,3334,3298,1,0,0,0,3334,3302,1,0,0,0,3334,3306,1,0,0,0,3334,
  	3310,1,0,0,0,3334,3314,1,0,0,0,3334,3318,1,0,0,0,3334,3328,1,0,0,0,3334,
  	3332,1,0,0,0,3335,701,1,0,0,0,3336,3338,5,114,0,0,3337,3339,3,770,385,
  	0,3338,3337,1,0,0,0,3338,3339,1,0,0,0,3339,3381,1,0,0,0,3340,3342,5,116,
  	0,0,3341,3343,3,770,385,0,3342,3341,1,0,0,0,3342,3343,1,0,0,0,3343,3381,
  	1,0,0,0,3344,3346,5,118,0,0,3345,3347,3,770,385,0,3346,3345,1,0,0,0,3346,
  	3347,1,0,0,0,3347,3381,1,0,0,0,3348,3350,5,120,0,0,3349,3351,3,770,385,
  	0,3350,3349,1,0,0,0,3350,3351,1,0,0,0,3351,3381,1,0,0,0,3352,3354,5,122,
  	0,0,3353,3355,3,770,385,0,3354,3353,1,0,0,0,3354,3355,1,0,0,0,3355,3381,
  	1,0,0,0,3356,3358,5,124,0,0,3357,3359,3,770,385,0,3358,3357,1,0,0,0,3358,
  	3359,1,0,0,0,3359,3381,1,0,0,0,3360,3361,5,196,0,0,3361,3363,5,112,0,
  	0,3362,3364,3,770,385,0,3363,3362,1,0,0,0,3363,3364,1,0,0,0,3364,3381,
  	1,0,0,0,3365,3370,5,112,0,0,3366,3367,5,370,0,0,3367,3368,3,706,353,0,
  	3368,3369,5,381,0,0,3369,3371,1,0,0,0,3370,3366,1,0,0,0,3370,3371,1,0,
  	0,0,3371,3373,1,0,0,0,3372,3374,3,770,385,0,3373,3372,1,0,0,0,3373,3374,
  	1,0,0,0,3374,3381,1,0,0,0,3375,3376,5,34,0,0,3376,3378,5,112,0,0,3377,
  	3379,3,770,385,0,3378,3377,1,0,0,0,3378,3379,1,0,0,0,3379,3381,1,0,0,
  	0,3380,3336,1,0,0,0,3380,3340,1,0,0,0,3380,3344,1,0,0,0,3380,3348,1,0,
  	0,0,3380,3352,1,0,0,0,3380,3356,1,0,0,0,3380,3360,1,0,0,0,3380,3365,1,
  	0,0,0,3380,3375,1,0,0,0,3381,703,1,0,0,0,3382,3393,7,18,0,0,3383,3384,
  	5,370,0,0,3384,3387,3,706,353,0,3385,3386,5,360,0,0,3386,3388,3,708,354,
  	0,3387,3385,1,0,0,0,3387,3388,1,0,0,0,3388,3389,1,0,0,0,3389,3391,5,381,
  	0,0,3390,3392,3,770,385,0,3391,3390,1,0,0,0,3391,3392,1,0,0,0,3392,3394,
  	1,0,0,0,3393,3383,1,0,0,0,3393,3394,1,0,0,0,3394,705,1,0,0,0,3395,3396,
  	3,1126,563,0,3396,707,1,0,0,0,3397,3398,3,1126,563,0,3398,709,1,0,0,0,
  	3399,3401,5,94,0,0,3400,3402,3,770,385,0,3401,3400,1,0,0,0,3401,3402,
  	1,0,0,0,3402,3445,1,0,0,0,3403,3405,5,95,0,0,3404,3406,3,770,385,0,3405,
  	3404,1,0,0,0,3405,3406,1,0,0,0,3406,3445,1,0,0,0,3407,3409,5,96,0,0,3408,
  	3410,3,770,385,0,3409,3408,1,0,0,0,3409,3410,1,0,0,0,3410,3445,1,0,0,
  	0,3411,3413,5,97,0,0,3412,3414,3,770,385,0,3413,3412,1,0,0,0,3413,3414,
  	1,0,0,0,3414,3445,1,0,0,0,3415,3417,5,98,0,0,3416,3418,3,770,385,0,3417,
  	3416,1,0,0,0,3417,3418,1,0,0,0,3418,3445,1,0,0,0,3419,3428,5,93,0,0,3420,
  	3421,5,370,0,0,3421,3424,3,706,353,0,3422,3423,5,360,0,0,3423,3425,3,
  	708,354,0,3424,3422,1,0,0,0,3424,3425,1,0,0,0,3425,3426,1,0,0,0,3426,
  	3427,5,381,0,0,3427,3429,1,0,0,0,3428,3420,1,0,0,0,3428,3429,1,0,0,0,
  	3429,3431,1,0,0,0,3430,3432,3,770,385,0,3431,3430,1,0,0,0,3431,3432,1,
  	0,0,0,3432,3445,1,0,0,0,3433,3435,5,175,0,0,3434,3436,3,770,385,0,3435,
  	3434,1,0,0,0,3435,3436,1,0,0,0,3436,3445,1,0,0,0,3437,3439,5,81,0,0,3438,
  	3440,5,172,0,0,3439,3438,1,0,0,0,3439,3440,1,0,0,0,3440,3442,1,0,0,0,
  	3441,3443,3,770,385,0,3442,3441,1,0,0,0,3442,3443,1,0,0,0,3443,3445,1,
  	0,0,0,3444,3399,1,0,0,0,3444,3403,1,0,0,0,3444,3407,1,0,0,0,3444,3411,
  	1,0,0,0,3444,3415,1,0,0,0,3444,3419,1,0,0,0,3444,3433,1,0,0,0,3444,3437,
  	1,0,0,0,3445,711,1,0,0,0,3446,3449,3,714,357,0,3447,3449,3,726,363,0,
  	3448,3446,1,0,0,0,3448,3447,1,0,0,0,3449,713,1,0,0,0,3450,3456,3,716,
  	358,0,3451,3456,3,718,359,0,3452,3456,3,720,360,0,3453,3456,3,722,361,
  	0,3454,3456,3,724,362,0,3455,3450,1,0,0,0,3455,3451,1,0,0,0,3455,3452,
  	1,0,0,0,3455,3453,1,0,0,0,3455,3454,1,0,0,0,3456,715,1,0,0,0,3457,3458,
  	5,235,0,0,3458,3460,5,71,0,0,3459,3461,3,770,385,0,3460,3459,1,0,0,0,
  	3460,3461,1,0,0,0,3461,3470,1,0,0,0,3462,3463,5,208,0,0,3463,3464,5,231,
  	0,0,3464,3465,5,207,0,0,3465,3467,5,323,0,0,3466,3468,3,770,385,0,3467,
  	3466,1,0,0,0,3467,3468,1,0,0,0,3468,3470,1,0,0,0,3469,3457,1,0,0,0,3469,
  	3462,1,0,0,0,3470,717,1,0,0,0,3471,3472,5,135,0,0,3472,3474,5,71,0,0,
  	3473,3475,3,770,385,0,3474,3473,1,0,0,0,3474,3475,1,0,0,0,3475,3486,1,
  	0,0,0,3476,3480,5,208,0,0,3477,3478,5,321,0,0,3478,3479,5,207,0,0,3479,
  	3481,5,323,0,0,3480,3477,1,0,0,0,3480,3481,1,0,0,0,3481,3483,1,0,0,0,
  	3482,3484,3,770,385,0,3483,3482,1,0,0,0,3483,3484,1,0,0,0,3484,3486,1,
  	0,0,0,3485,3471,1,0,0,0,3485,3476,1,0,0,0,3486,719,1,0,0,0,3487,3489,
  	5,70,0,0,3488,3490,3,770,385,0,3489,3488,1,0,0,0,3489,3490,1,0,0,0,3490,
  	721,1,0,0,0,3491,3492,5,235,0,0,3492,3494,5,207,0,0,3493,3495,3,770,385,
  	0,3494,3493,1,0,0,0,3494,3495,1,0,0,0,3495,3504,1,0,0,0,3496,3497,5,207,
  	0,0,3497,3498,5,231,0,0,3498,3499,5,207,0,0,3499,3501,5,323,0,0,3500,
  	3502,3,770,385,0,3501,3500,1,0,0,0,3501,3502,1,0,0,0,3502,3504,1,0,0,
  	0,3503,3491,1,0,0,0,3503,3496,1,0,0,0,3504,723,1,0,0,0,3505,3506,5,135,
  	0,0,3506,3508,5,207,0,0,3507,3509,3,770,385,0,3508,3507,1,0,0,0,3508,
  	3509,1,0,0,0,3509,3518,1,0,0,0,3510,3511,5,207,0,0,3511,3512,5,321,0,
  	0,3512,3513,5,207,0,0,3513,3515,5,323,0,0,3514,3516,3,770,385,0,3515,
  	3514,1,0,0,0,3515,3516,1,0,0,0,3516,3518,1,0,0,0,3517,3505,1,0,0,0,3517,
  	3510,1,0,0,0,3518,725,1,0,0,0,3519,3520,5,83,0,0,3520,3521,5,370,0,0,
  	3521,3522,3,728,364,0,3522,3524,5,381,0,0,3523,3525,3,770,385,0,3524,
  	3523,1,0,0,0,3524,3525,1,0,0,0,3525,727,1,0,0,0,3526,3527,5,233,0,0,3527,
  	3528,5,314,0,0,3528,3533,5,148,0,0,3529,3530,5,72,0,0,3530,3531,5,314,
  	0,0,3531,3533,5,186,0,0,3532,3526,1,0,0,0,3532,3529,1,0,0,0,3533,729,
  	1,0,0,0,3534,3539,3,738,369,0,3535,3539,3,744,372,0,3536,3539,3,746,373,
  	0,3537,3539,3,752,376,0,3538,3534,1,0,0,0,3538,3535,1,0,0,0,3538,3536,
  	1,0,0,0,3538,3537,1,0,0,0,3539,731,1,0,0,0,3540,3543,3,734,367,0,3541,
  	3543,3,736,368,0,3542,3540,1,0,0,0,3542,3541,1,0,0,0,3543,733,1,0,0,0,
  	3544,3545,5,154,0,0,3545,735,1,0,0,0,3546,3547,5,154,0,0,3547,3550,3,
  	770,385,0,3548,3550,5,153,0,0,3549,3546,1,0,0,0,3549,3548,1,0,0,0,3550,
  	737,1,0,0,0,3551,3554,3,742,371,0,3552,3554,3,740,370,0,3553,3551,1,0,
  	0,0,3553,3552,1,0,0,0,3554,739,1,0,0,0,3555,3557,5,305,0,0,3556,3555,
  	1,0,0,0,3556,3557,1,0,0,0,3557,3558,1,0,0,0,3558,3559,5,289,0,0,3559,
  	3561,3,574,287,0,3560,3562,3,770,385,0,3561,3560,1,0,0,0,3561,3562,1,
  	0,0,0,3562,741,1,0,0,0,3563,3565,5,25,0,0,3564,3566,5,305,0,0,3565,3564,
  	1,0,0,0,3565,3566,1,0,0,0,3566,3567,1,0,0,0,3567,3569,5,289,0,0,3568,
  	3570,3,770,385,0,3569,3568,1,0,0,0,3569,3570,1,0,0,0,3570,743,1,0,0,0,
  	3571,3573,3,672,336,0,3572,3574,3,770,385,0,3573,3572,1,0,0,0,3573,3574,
  	1,0,0,0,3574,745,1,0,0,0,3575,3578,3,750,375,0,3576,3578,3,748,374,0,
  	3577,3575,1,0,0,0,3577,3576,1,0,0,0,3578,747,1,0,0,0,3579,3581,3,582,
  	291,0,3580,3582,3,770,385,0,3581,3580,1,0,0,0,3581,3582,1,0,0,0,3582,
  	749,1,0,0,0,3583,3585,5,25,0,0,3584,3583,1,0,0,0,3584,3585,1,0,0,0,3585,
  	3586,1,0,0,0,3586,3588,3,1140,570,0,3587,3589,3,770,385,0,3588,3587,1,
  	0,0,0,3588,3589,1,0,0,0,3589,751,1,0,0,0,3590,3593,3,756,378,0,3591,3593,
  	3,754,377,0,3592,3590,1,0,0,0,3592,3591,1,0,0,0,3593,753,1,0,0,0,3594,
  	3596,3,602,301,0,3595,3597,3,770,385,0,3596,3595,1,0,0,0,3596,3597,1,
  	0,0,0,3597,755,1,0,0,0,3598,3600,5,25,0,0,3599,3598,1,0,0,0,3599,3600,
  	1,0,0,0,3600,3601,1,0,0,0,3601,3603,3,1144,572,0,3602,3604,3,770,385,
  	0,3603,3602,1,0,0,0,3603,3604,1,0,0,0,3604,757,1,0,0,0,3605,3607,5,166,
  	0,0,3606,3608,3,770,385,0,3607,3606,1,0,0,0,3607,3608,1,0,0,0,3608,759,
  	1,0,0,0,3609,3610,3,762,381,0,3610,761,1,0,0,0,3611,3612,7,19,0,0,3612,
  	763,1,0,0,0,3613,3615,5,25,0,0,3614,3613,1,0,0,0,3614,3615,1,0,0,0,3615,
  	3616,1,0,0,0,3616,3618,5,176,0,0,3617,3619,3,770,385,0,3618,3617,1,0,
  	0,0,3618,3619,1,0,0,0,3619,3628,1,0,0,0,3620,3622,5,176,0,0,3621,3620,
  	1,0,0,0,3621,3622,1,0,0,0,3622,3623,1,0,0,0,3623,3625,3,766,383,0,3624,
  	3626,3,770,385,0,3625,3624,1,0,0,0,3625,3626,1,0,0,0,3626,3628,1,0,0,
  	0,3627,3614,1,0,0,0,3627,3621,1,0,0,0,3628,765,1,0,0,0,3629,3631,5,368,
  	0,0,3630,3632,3,768,384,0,3631,3630,1,0,0,0,3631,3632,1,0,0,0,3632,3633,
  	1,0,0,0,3633,3634,5,379,0,0,3634,767,1,0,0,0,3635,3640,3,772,386,0,3636,
  	3637,5,360,0,0,3637,3639,3,772,386,0,3638,3636,1,0,0,0,3639,3642,1,0,
  	0,0,3640,3638,1,0,0,0,3640,3641,1,0,0,0,3641,769,1,0,0,0,3642,3640,1,
  	0,0,0,3643,3644,5,152,0,0,3644,3645,5,154,0,0,3645,771,1,0,0,0,3646,3648,
  	3,1084,542,0,3647,3649,3,676,338,0,3648,3647,1,0,0,0,3648,3649,1,0,0,
  	0,3649,3650,1,0,0,0,3650,3651,3,674,337,0,3651,773,1,0,0,0,3652,3653,
  	3,822,411,0,3653,775,1,0,0,0,3654,3664,3,780,390,0,3655,3664,3,782,391,
  	0,3656,3664,3,786,393,0,3657,3664,3,792,396,0,3658,3664,3,796,398,0,3659,
  	3664,3,802,401,0,3660,3664,3,812,406,0,3661,3664,3,814,407,0,3662,3664,
  	3,816,408,0,3663,3654,1,0,0,0,3663,3655,1,0,0,0,3663,3656,1,0,0,0,3663,
  	3657,1,0,0,0,3663,3658,1,0,0,0,3663,3659,1,0,0,0,3663,3660,1,0,0,0,3663,
  	3661,1,0,0,0,3663,3662,1,0,0,0,3664,777,1,0,0,0,3665,3666,7,20,0,0,3666,
  	779,1,0,0,0,3667,3685,5,89,0,0,3668,3669,5,368,0,0,3669,3670,3,302,151,
  	0,3670,3671,5,379,0,0,3671,3686,1,0,0,0,3672,3673,5,370,0,0,3673,3674,
  	3,302,151,0,3674,3675,5,381,0,0,3675,3686,1,0,0,0,3676,3677,5,368,0,0,
  	3677,3678,3,220,110,0,3678,3679,5,379,0,0,3679,3686,1,0,0,0,3680,3681,
  	5,370,0,0,3681,3682,3,220,110,0,3682,3683,5,381,0,0,3683,3686,1,0,0,0,
  	3684,3686,3,56,28,0,3685,3668,1,0,0,0,3685,3672,1,0,0,0,3685,3676,1,0,
  	0,0,3685,3680,1,0,0,0,3685,3684,1,0,0,0,3686,781,1,0,0,0,3687,3688,3,
  	842,421,0,3688,3689,3,784,392,0,3689,783,1,0,0,0,3690,3692,5,127,0,0,
  	3691,3693,5,152,0,0,3692,3691,1,0,0,0,3692,3693,1,0,0,0,3693,3694,1,0,
  	0,0,3694,3695,5,154,0,0,3695,785,1,0,0,0,3696,3697,3,842,421,0,3697,3698,
  	3,788,394,0,3698,787,1,0,0,0,3699,3701,5,127,0,0,3700,3702,5,152,0,0,
  	3701,3700,1,0,0,0,3701,3702,1,0,0,0,3702,3703,1,0,0,0,3703,3704,3,676,
  	338,0,3704,3705,3,674,337,0,3705,789,1,0,0,0,3706,3708,5,127,0,0,3707,
  	3709,5,152,0,0,3708,3707,1,0,0,0,3708,3709,1,0,0,0,3709,3711,1,0,0,0,
  	3710,3712,3,1016,508,0,3711,3710,1,0,0,0,3711,3712,1,0,0,0,3712,3713,
  	1,0,0,0,3713,3714,5,302,0,0,3714,791,1,0,0,0,3715,3716,3,432,216,0,3716,
  	3717,3,794,397,0,3717,793,1,0,0,0,3718,3720,5,127,0,0,3719,3721,5,152,
  	0,0,3720,3719,1,0,0,0,3720,3721,1,0,0,0,3721,3722,1,0,0,0,3722,3723,5,
  	283,0,0,3723,795,1,0,0,0,3724,3725,3,432,216,0,3725,3726,3,798,399,0,
  	3726,797,1,0,0,0,3727,3728,3,800,400,0,3728,3729,3,428,214,0,3729,799,
  	1,0,0,0,3730,3732,5,127,0,0,3731,3733,5,152,0,0,3732,3731,1,0,0,0,3732,
  	3733,1,0,0,0,3733,3734,1,0,0,0,3734,3737,5,293,0,0,3735,3737,5,359,0,
  	0,3736,3730,1,0,0,0,3736,3735,1,0,0,0,3737,801,1,0,0,0,3738,3739,3,804,
  	402,0,3739,3740,3,806,403,0,3740,3745,1,0,0,0,3741,3742,3,804,402,0,3742,
  	3743,3,808,404,0,3743,3745,1,0,0,0,3744,3738,1,0,0,0,3744,3741,1,0,0,
  	0,3745,803,1,0,0,0,3746,3747,3,432,216,0,3747,805,1,0,0,0,3748,3750,5,
  	127,0,0,3749,3751,5,152,0,0,3750,3749,1,0,0,0,3750,3751,1,0,0,0,3751,
  	3752,1,0,0,0,3752,3753,5,312,0,0,3753,3754,5,158,0,0,3754,3755,3,810,
  	405,0,3755,807,1,0,0,0,3756,3758,5,127,0,0,3757,3759,5,152,0,0,3758,3757,
  	1,0,0,0,3758,3759,1,0,0,0,3759,3760,1,0,0,0,3760,3761,5,281,0,0,3761,
  	3762,5,158,0,0,3762,3763,3,810,405,0,3763,809,1,0,0,0,3764,3765,3,432,
  	216,0,3765,811,1,0,0,0,3766,3767,5,23,0,0,3767,3768,5,370,0,0,3768,3769,
  	3,432,216,0,3769,3770,5,360,0,0,3770,3775,3,432,216,0,3771,3772,5,360,
  	0,0,3772,3774,3,432,216,0,3773,3771,1,0,0,0,3774,3777,1,0,0,0,3775,3773,
  	1,0,0,0,3775,3776,1,0,0,0,3776,3778,1,0,0,0,3777,3775,1,0,0,0,3778,3779,
  	5,381,0,0,3779,813,1,0,0,0,3780,3781,5,184,0,0,3781,3782,5,370,0,0,3782,
  	3783,3,432,216,0,3783,3784,5,360,0,0,3784,3789,3,432,216,0,3785,3786,
  	5,360,0,0,3786,3788,3,432,216,0,3787,3785,1,0,0,0,3788,3791,1,0,0,0,3789,
  	3787,1,0,0,0,3789,3790,1,0,0,0,3790,3792,1,0,0,0,3791,3789,1,0,0,0,3792,
  	3793,5,381,0,0,3793,815,1,0,0,0,3794,3795,5,173,0,0,3795,3796,5,370,0,
  	0,3796,3797,3,432,216,0,3797,3798,5,360,0,0,3798,3799,3,1082,541,0,3799,
  	3800,5,381,0,0,3800,817,1,0,0,0,3801,3802,6,409,-1,0,3802,3803,7,21,0,
  	0,3803,3820,3,818,409,15,3804,3820,3,776,388,0,3805,3806,5,152,0,0,3806,
  	3820,3,818,409,8,3807,3809,5,305,0,0,3808,3807,1,0,0,0,3808,3809,1,0,
  	0,0,3809,3810,1,0,0,0,3810,3811,5,289,0,0,3811,3820,3,88,44,0,3812,3814,
  	5,278,0,0,3813,3812,1,0,0,0,3813,3814,1,0,0,0,3814,3815,1,0,0,0,3815,
  	3816,5,313,0,0,3816,3820,3,92,46,0,3817,3820,3,820,410,0,3818,3820,3,
  	842,421,0,3819,3801,1,0,0,0,3819,3804,1,0,0,0,3819,3805,1,0,0,0,3819,
  	3808,1,0,0,0,3819,3813,1,0,0,0,3819,3817,1,0,0,0,3819,3818,1,0,0,0,3820,
  	3850,1,0,0,0,3821,3822,10,14,0,0,3822,3823,7,22,0,0,3823,3849,3,818,409,
  	15,3824,3825,10,13,0,0,3825,3826,7,21,0,0,3826,3849,3,818,409,14,3827,
  	3828,10,12,0,0,3828,3829,5,330,0,0,3829,3849,3,818,409,13,3830,3831,10,
  	11,0,0,3831,3832,3,778,389,0,3832,3833,3,818,409,12,3833,3849,1,0,0,0,
  	3834,3835,10,6,0,0,3835,3836,5,24,0,0,3836,3849,3,818,409,7,3837,3838,
  	10,5,0,0,3838,3839,7,23,0,0,3839,3849,3,818,409,6,3840,3841,10,9,0,0,
  	3841,3849,3,790,395,0,3842,3843,10,7,0,0,3843,3845,5,127,0,0,3844,3846,
  	5,152,0,0,3845,3844,1,0,0,0,3845,3846,1,0,0,0,3846,3847,1,0,0,0,3847,
  	3849,3,950,475,0,3848,3821,1,0,0,0,3848,3824,1,0,0,0,3848,3827,1,0,0,
  	0,3848,3830,1,0,0,0,3848,3834,1,0,0,0,3848,3837,1,0,0,0,3848,3840,1,0,
  	0,0,3848,3842,1,0,0,0,3849,3852,1,0,0,0,3850,3848,1,0,0,0,3850,3851,1,
  	0,0,0,3851,819,1,0,0,0,3852,3850,1,0,0,0,3853,3860,3,954,477,0,3854,3860,
  	3,1042,521,0,3855,3860,3,1022,511,0,3856,3860,3,1050,525,0,3857,3860,
  	3,824,412,0,3858,3860,3,928,464,0,3859,3853,1,0,0,0,3859,3854,1,0,0,0,
  	3859,3855,1,0,0,0,3859,3856,1,0,0,0,3859,3857,1,0,0,0,3859,3858,1,0,0,
  	0,3860,821,1,0,0,0,3861,3862,3,818,409,0,3862,823,1,0,0,0,3863,3869,3,
  	826,413,0,3864,3869,3,828,414,0,3865,3869,3,830,415,0,3866,3869,3,832,
  	416,0,3867,3869,3,834,417,0,3868,3863,1,0,0,0,3868,3864,1,0,0,0,3868,
  	3865,1,0,0,0,3868,3866,1,0,0,0,3868,3867,1,0,0,0,3869,825,1,0,0,0,3870,
  	3871,7,24,0,0,3871,3872,5,370,0,0,3872,3873,3,818,409,0,3873,3874,5,360,
  	0,0,3874,3875,3,1018,509,0,3875,3876,5,381,0,0,3876,827,1,0,0,0,3877,
  	3878,5,210,0,0,3878,3879,5,370,0,0,3879,3880,3,1008,504,0,3880,3881,5,
  	381,0,0,3881,829,1,0,0,0,3882,3883,7,25,0,0,3883,3884,5,370,0,0,3884,
  	3885,3,818,409,0,3885,3886,5,381,0,0,3886,831,1,0,0,0,3887,3888,7,26,
  	0,0,3888,3889,5,370,0,0,3889,3892,3,818,409,0,3890,3891,5,360,0,0,3891,
  	3893,3,818,409,0,3892,3890,1,0,0,0,3892,3893,1,0,0,0,3893,3894,1,0,0,
  	0,3894,3895,5,381,0,0,3895,833,1,0,0,0,3896,3897,5,151,0,0,3897,3898,
  	5,370,0,0,3898,3901,3,818,409,0,3899,3900,5,360,0,0,3900,3902,3,1016,
  	508,0,3901,3899,1,0,0,0,3901,3902,1,0,0,0,3902,3903,1,0,0,0,3903,3904,
  	5,381,0,0,3904,835,1,0,0,0,3905,3906,3,842,421,0,3906,837,1,0,0,0,3907,
  	3908,3,842,421,0,3908,839,1,0,0,0,3909,3910,3,818,409,0,3910,841,1,0,
  	0,0,3911,3912,6,421,-1,0,3912,3923,3,844,422,0,3913,3923,3,894,447,0,
  	3914,3923,3,850,425,0,3915,3923,3,916,458,0,3916,3923,3,860,430,0,3917,
  	3923,3,862,431,0,3918,3923,3,888,444,0,3919,3923,3,910,455,0,3920,3923,
  	3,858,429,0,3921,3923,3,912,456,0,3922,3911,1,0,0,0,3922,3913,1,0,0,0,
  	3922,3914,1,0,0,0,3922,3915,1,0,0,0,3922,3916,1,0,0,0,3922,3917,1,0,0,
  	0,3922,3918,1,0,0,0,3922,3919,1,0,0,0,3922,3920,1,0,0,0,3922,3921,1,0,
  	0,0,3923,3929,1,0,0,0,3924,3925,10,7,0,0,3925,3926,5,374,0,0,3926,3928,
  	3,1082,541,0,3927,3924,1,0,0,0,3928,3931,1,0,0,0,3929,3927,1,0,0,0,3929,
  	3930,1,0,0,0,3930,843,1,0,0,0,3931,3929,1,0,0,0,3932,3933,5,370,0,0,3933,
  	3934,3,818,409,0,3934,3935,5,381,0,0,3935,845,1,0,0,0,3936,3939,3,848,
  	424,0,3937,3939,3,912,456,0,3938,3936,1,0,0,0,3938,3937,1,0,0,0,3939,
  	847,1,0,0,0,3940,3953,3,894,447,0,3941,3953,3,850,425,0,3942,3953,3,916,
  	458,0,3943,3944,3,842,421,0,3944,3945,5,374,0,0,3945,3946,3,1082,541,
  	0,3946,3953,1,0,0,0,3947,3953,3,860,430,0,3948,3953,3,862,431,0,3949,
  	3953,3,888,444,0,3950,3953,3,910,455,0,3951,3953,3,858,429,0,3952,3940,
  	1,0,0,0,3952,3941,1,0,0,0,3952,3942,1,0,0,0,3952,3943,1,0,0,0,3952,3947,
  	1,0,0,0,3952,3948,1,0,0,0,3952,3949,1,0,0,0,3952,3950,1,0,0,0,3952,3951,
  	1,0,0,0,3953,849,1,0,0,0,3954,3957,3,1094,547,0,3955,3957,3,854,427,0,
  	3956,3954,1,0,0,0,3956,3955,1,0,0,0,3957,851,1,0,0,0,3958,3961,3,1124,
  	562,0,3959,3961,3,856,428,0,3960,3958,1,0,0,0,3960,3959,1,0,0,0,3961,
  	853,1,0,0,0,3962,3965,3,856,428,0,3963,3965,5,189,0,0,3964,3962,1,0,0,
  	0,3964,3963,1,0,0,0,3965,855,1,0,0,0,3966,3967,5,326,0,0,3967,857,1,0,
  	0,0,3968,3969,5,130,0,0,3969,3970,3,228,114,0,3970,3971,5,109,0,0,3971,
  	3972,3,818,409,0,3972,3973,5,87,0,0,3973,859,1,0,0,0,3974,3975,5,225,
  	0,0,3975,3976,3,56,28,0,3976,861,1,0,0,0,3977,3980,3,864,432,0,3978,3980,
  	3,866,433,0,3979,3977,1,0,0,0,3979,3978,1,0,0,0,3980,863,1,0,0,0,3981,
  	3982,5,156,0,0,3982,3983,5,370,0,0,3983,3984,3,818,409,0,3984,3985,5,
  	360,0,0,3985,3986,3,818,409,0,3986,3987,5,381,0,0,3987,4000,1,0,0,0,3988,
  	3989,5,55,0,0,3989,3990,5,370,0,0,3990,3993,3,818,409,0,3991,3992,5,360,
  	0,0,3992,3994,3,818,409,0,3993,3991,1,0,0,0,3994,3995,1,0,0,0,3995,3993,
  	1,0,0,0,3995,3996,1,0,0,0,3996,3997,1,0,0,0,3997,3998,5,381,0,0,3998,
  	4000,1,0,0,0,3999,3981,1,0,0,0,3999,3988,1,0,0,0,4000,865,1,0,0,0,4001,
  	4004,3,868,434,0,4002,4004,3,870,435,0,4003,4001,1,0,0,0,4003,4002,1,
  	0,0,0,4004,867,1,0,0,0,4005,4006,5,46,0,0,4006,4008,3,878,439,0,4007,
  	4009,3,872,436,0,4008,4007,1,0,0,0,4009,4010,1,0,0,0,4010,4008,1,0,0,
  	0,4010,4011,1,0,0,0,4011,4013,1,0,0,0,4012,4014,3,876,438,0,4013,4012,
  	1,0,0,0,4013,4014,1,0,0,0,4014,4015,1,0,0,0,4015,4016,5,87,0,0,4016,869,
  	1,0,0,0,4017,4019,5,46,0,0,4018,4020,3,874,437,0,4019,4018,1,0,0,0,4020,
  	4021,1,0,0,0,4021,4019,1,0,0,0,4021,4022,1,0,0,0,4022,4024,1,0,0,0,4023,
  	4025,3,876,438,0,4024,4023,1,0,0,0,4024,4025,1,0,0,0,4025,4026,1,0,0,
  	0,4026,4027,5,87,0,0,4027,871,1,0,0,0,4028,4029,5,229,0,0,4029,4030,3,
  	880,440,0,4030,4031,5,206,0,0,4031,4032,3,884,442,0,4032,873,1,0,0,0,
  	4033,4034,5,229,0,0,4034,4035,3,774,387,0,4035,4036,5,206,0,0,4036,4037,
  	3,884,442,0,4037,875,1,0,0,0,4038,4039,5,86,0,0,4039,4040,3,884,442,0,
  	4040,877,1,0,0,0,4041,4044,3,846,423,0,4042,4044,3,432,216,0,4043,4041,
  	1,0,0,0,4043,4042,1,0,0,0,4044,879,1,0,0,0,4045,4050,3,882,441,0,4046,
  	4047,5,360,0,0,4047,4049,3,882,441,0,4048,4046,1,0,0,0,4049,4052,1,0,
  	0,0,4050,4048,1,0,0,0,4050,4051,1,0,0,0,4051,881,1,0,0,0,4052,4050,1,
  	0,0,0,4053,4065,3,846,423,0,4054,4055,3,778,389,0,4055,4056,3,818,409,
  	0,4056,4065,1,0,0,0,4057,4065,3,784,392,0,4058,4065,3,788,394,0,4059,
  	4065,3,790,395,0,4060,4065,3,794,397,0,4061,4065,3,798,399,0,4062,4065,
  	3,806,403,0,4063,4065,3,808,404,0,4064,4053,1,0,0,0,4064,4054,1,0,0,0,
  	4064,4057,1,0,0,0,4064,4058,1,0,0,0,4064,4059,1,0,0,0,4064,4060,1,0,0,
  	0,4064,4061,1,0,0,0,4064,4062,1,0,0,0,4064,4063,1,0,0,0,4065,883,1,0,
  	0,0,4066,4069,3,886,443,0,4067,4069,3,1128,564,0,4068,4066,1,0,0,0,4068,
  	4067,1,0,0,0,4069,885,1,0,0,0,4070,4071,3,818,409,0,4071,887,1,0,0,0,
  	4072,4073,5,47,0,0,4073,4074,5,370,0,0,4074,4075,3,890,445,0,4075,4076,
  	5,27,0,0,4076,4077,3,892,446,0,4077,4078,5,381,0,0,4078,889,1,0,0,0,4079,
  	4082,3,818,409,0,4080,4082,3,1128,564,0,4081,4079,1,0,0,0,4081,4080,1,
  	0,0,0,4082,891,1,0,0,0,4083,4084,3,674,337,0,4084,893,1,0,0,0,4085,4086,
  	5,62,0,0,4086,4087,5,370,0,0,4087,4088,5,358,0,0,4088,4092,5,381,0,0,
  	4089,4092,3,896,448,0,4090,4092,3,898,449,0,4091,4085,1,0,0,0,4091,4089,
  	1,0,0,0,4091,4090,1,0,0,0,4092,895,1,0,0,0,4093,4094,3,900,450,0,4094,
  	4096,5,370,0,0,4095,4097,3,902,451,0,4096,4095,1,0,0,0,4096,4097,1,0,
  	0,0,4097,4098,1,0,0,0,4098,4099,3,818,409,0,4099,4100,5,381,0,0,4100,
  	897,1,0,0,0,4101,4102,3,904,452,0,4102,4103,5,370,0,0,4103,4104,3,906,
  	453,0,4104,4105,5,360,0,0,4105,4106,3,908,454,0,4106,4107,5,381,0,0,4107,
  	899,1,0,0,0,4108,4109,7,27,0,0,4109,901,1,0,0,0,4110,4111,7,28,0,0,4111,
  	903,1,0,0,0,4112,4113,7,29,0,0,4113,905,1,0,0,0,4114,4116,3,902,451,0,
  	4115,4114,1,0,0,0,4115,4116,1,0,0,0,4116,4117,1,0,0,0,4117,4118,3,952,
  	476,0,4118,907,1,0,0,0,4119,4120,3,952,476,0,4120,909,1,0,0,0,4121,4122,
  	5,85,0,0,4122,4123,5,370,0,0,4123,4124,3,432,216,0,4124,4125,5,381,0,
  	0,4125,911,1,0,0,0,4126,4127,3,1092,546,0,4127,913,1,0,0,0,4128,4129,
  	3,818,409,0,4129,915,1,0,0,0,4130,4131,3,918,459,0,4131,917,1,0,0,0,4132,
  	4133,5,166,0,0,4133,4134,5,369,0,0,4134,4135,3,920,460,0,4135,4136,5,
  	380,0,0,4136,919,1,0,0,0,4137,4141,3,922,461,0,4138,4140,3,924,462,0,
  	4139,4138,1,0,0,0,4140,4143,1,0,0,0,4141,4139,1,0,0,0,4141,4142,1,0,0,
  	0,4142,921,1,0,0,0,4143,4141,1,0,0,0,4144,4145,3,836,418,0,4145,923,1,
  	0,0,0,4146,4147,5,360,0,0,4147,4148,3,838,419,0,4148,4149,5,360,0,0,4149,
  	4150,3,836,418,0,4150,925,1,0,0,0,4151,4152,3,818,409,0,4152,927,1,0,
  	0,0,4153,4156,3,930,465,0,4154,4156,3,932,466,0,4155,4153,1,0,0,0,4155,
  	4154,1,0,0,0,4156,929,1,0,0,0,4157,4158,5,210,0,0,4158,4159,5,370,0,0,
  	4159,4160,3,926,463,0,4160,4161,5,360,0,0,4161,4162,3,952,476,0,4162,
  	4163,5,381,0,0,4163,931,1,0,0,0,4164,4165,5,287,0,0,4165,4166,5,370,0,
  	0,4166,4167,3,914,457,0,4167,4168,5,381,0,0,4168,933,1,0,0,0,4169,4170,
  	3,936,468,0,4170,935,1,0,0,0,4171,4173,3,760,380,0,4172,4171,1,0,0,0,
  	4172,4173,1,0,0,0,4173,4174,1,0,0,0,4174,4176,5,369,0,0,4175,4177,3,938,
  	469,0,4176,4175,1,0,0,0,4176,4177,1,0,0,0,4177,4178,1,0,0,0,4178,4179,
  	5,380,0,0,4179,937,1,0,0,0,4180,4185,3,940,470,0,4181,4182,5,360,0,0,
  	4182,4184,3,940,470,0,4183,4181,1,0,0,0,4184,4187,1,0,0,0,4185,4183,1,
  	0,0,0,4185,4186,1,0,0,0,4186,939,1,0,0,0,4187,4185,1,0,0,0,4188,4189,
  	3,818,409,0,4189,941,1,0,0,0,4190,4192,5,176,0,0,4191,4190,1,0,0,0,4191,
  	4192,1,0,0,0,4192,4193,1,0,0,0,4193,4194,3,944,472,0,4194,943,1,0,0,0,
  	4195,4197,5,368,0,0,4196,4198,3,946,473,0,4197,4196,1,0,0,0,4197,4198,
  	1,0,0,0,4198,4199,1,0,0,0,4199,4200,5,379,0,0,4200,945,1,0,0,0,4201,4206,
  	3,948,474,0,4202,4203,5,360,0,0,4203,4205,3,948,474,0,4204,4202,1,0,0,
  	0,4205,4208,1,0,0,0,4206,4204,1,0,0,0,4206,4207,1,0,0,0,4207,947,1,0,
  	0,0,4208,4206,1,0,0,0,4209,4210,3,1084,542,0,4210,4211,5,359,0,0,4211,
  	4212,3,818,409,0,4212,949,1,0,0,0,4213,4214,5,2,0,0,4214,951,1,0,0,0,
  	4215,4216,6,476,-1,0,4216,4217,7,21,0,0,4217,4221,3,952,476,5,4218,4221,
  	3,842,421,0,4219,4221,3,954,477,0,4220,4215,1,0,0,0,4220,4218,1,0,0,0,
  	4220,4219,1,0,0,0,4221,4230,1,0,0,0,4222,4223,10,4,0,0,4223,4224,7,22,
  	0,0,4224,4229,3,952,476,5,4225,4226,10,3,0,0,4226,4227,7,21,0,0,4227,
  	4229,3,952,476,4,4228,4222,1,0,0,0,4228,4225,1,0,0,0,4229,4232,1,0,0,
  	0,4230,4228,1,0,0,0,4230,4231,1,0,0,0,4231,953,1,0,0,0,4232,4230,1,0,
  	0,0,4233,4247,3,956,478,0,4234,4247,3,958,479,0,4235,4247,3,968,484,0,
  	4236,4247,3,970,485,0,4237,4247,3,976,488,0,4238,4247,3,980,490,0,4239,
  	4247,3,986,493,0,4240,4247,3,988,494,0,4241,4247,3,990,495,0,4242,4247,
  	3,992,496,0,4243,4247,3,998,499,0,4244,4247,3,1000,500,0,4245,4247,3,
  	1002,501,0,4246,4233,1,0,0,0,4246,4234,1,0,0,0,4246,4235,1,0,0,0,4246,
  	4236,1,0,0,0,4246,4237,1,0,0,0,4246,4238,1,0,0,0,4246,4239,1,0,0,0,4246,
  	4240,1,0,0,0,4246,4241,1,0,0,0,4246,4242,1,0,0,0,4246,4243,1,0,0,0,4246,
  	4244,1,0,0,0,4246,4245,1,0,0,0,4247,955,1,0,0,0,4248,4252,3,962,481,0,
  	4249,4252,3,964,482,0,4250,4252,3,966,483,0,4251,4248,1,0,0,0,4251,4249,
  	1,0,0,0,4251,4250,1,0,0,0,4252,957,1,0,0,0,4253,4254,5,45,0,0,4254,4255,
  	5,370,0,0,4255,4256,3,960,480,0,4256,4257,5,381,0,0,4257,4264,1,0,0,0,
  	4258,4259,5,194,0,0,4259,4260,5,370,0,0,4260,4261,3,926,463,0,4261,4262,
  	5,381,0,0,4262,4264,1,0,0,0,4263,4253,1,0,0,0,4263,4258,1,0,0,0,4264,
  	959,1,0,0,0,4265,4266,3,818,409,0,4266,961,1,0,0,0,4267,4268,7,30,0,0,
  	4268,4269,5,370,0,0,4269,4270,3,1004,502,0,4270,4271,5,381,0,0,4271,963,
  	1,0,0,0,4272,4273,7,31,0,0,4273,4274,5,370,0,0,4274,4275,3,1006,503,0,
  	4275,4276,5,381,0,0,4276,965,1,0,0,0,4277,4278,5,167,0,0,4278,4279,5,
  	370,0,0,4279,4280,3,914,457,0,4280,4281,5,381,0,0,4281,967,1,0,0,0,4282,
  	4283,5,20,0,0,4283,4284,5,370,0,0,4284,4285,3,818,409,0,4285,4286,5,381,
  	0,0,4286,969,1,0,0,0,4287,4288,5,147,0,0,4288,4289,5,370,0,0,4289,4290,
  	3,972,486,0,4290,4291,5,360,0,0,4291,4292,3,974,487,0,4292,4293,5,381,
  	0,0,4293,971,1,0,0,0,4294,4295,3,952,476,0,4295,973,1,0,0,0,4296,4297,
  	3,952,476,0,4297,975,1,0,0,0,4298,4299,3,978,489,0,4299,4300,5,370,0,
  	0,4300,4301,3,952,476,0,4301,4302,5,381,0,0,4302,977,1,0,0,0,4303,4304,
  	7,32,0,0,4304,979,1,0,0,0,4305,4306,5,139,0,0,4306,4307,5,370,0,0,4307,
  	4308,3,982,491,0,4308,4309,5,360,0,0,4309,4310,3,984,492,0,4310,4311,
  	5,381,0,0,4311,981,1,0,0,0,4312,4313,3,952,476,0,4313,983,1,0,0,0,4314,
  	4315,3,952,476,0,4315,985,1,0,0,0,4316,4317,5,140,0,0,4317,4318,5,370,
  	0,0,4318,4319,3,952,476,0,4319,4320,5,381,0,0,4320,987,1,0,0,0,4321,4322,
  	5,134,0,0,4322,4323,5,370,0,0,4323,4324,3,952,476,0,4324,4325,5,381,0,
  	0,4325,989,1,0,0,0,4326,4327,5,90,0,0,4327,4328,5,370,0,0,4328,4329,3,
  	952,476,0,4329,4330,5,381,0,0,4330,991,1,0,0,0,4331,4332,5,171,0,0,4332,
  	4333,5,370,0,0,4333,4334,3,994,497,0,4334,4335,5,360,0,0,4335,4336,3,
  	996,498,0,4336,4337,5,381,0,0,4337,993,1,0,0,0,4338,4339,3,952,476,0,
  	4339,995,1,0,0,0,4340,4341,3,952,476,0,4341,997,1,0,0,0,4342,4343,5,198,
  	0,0,4343,4344,5,370,0,0,4344,4345,3,952,476,0,4345,4346,5,381,0,0,4346,
  	999,1,0,0,0,4347,4348,5,99,0,0,4348,4349,5,370,0,0,4349,4350,3,952,476,
  	0,4350,4351,5,381,0,0,4351,1001,1,0,0,0,4352,4353,7,33,0,0,4353,4354,
  	5,370,0,0,4354,4355,3,952,476,0,4355,4356,5,381,0,0,4356,1003,1,0,0,0,
  	4357,4358,3,818,409,0,4358,1005,1,0,0,0,4359,4360,3,818,409,0,4360,1007,
  	1,0,0,0,4361,4363,3,1012,506,0,4362,4361,1,0,0,0,4362,4363,1,0,0,0,4363,
  	4365,1,0,0,0,4364,4366,3,1014,507,0,4365,4364,1,0,0,0,4365,4366,1,0,0,
  	0,4366,4367,1,0,0,0,4367,4369,5,101,0,0,4368,4362,1,0,0,0,4368,4369,1,
  	0,0,0,4369,4370,1,0,0,0,4370,4371,3,1010,505,0,4371,1009,1,0,0,0,4372,
  	4373,3,818,409,0,4373,1011,1,0,0,0,4374,4375,7,34,0,0,4375,1013,1,0,0,
  	0,4376,4377,3,818,409,0,4377,1015,1,0,0,0,4378,4379,7,35,0,0,4379,1017,
  	1,0,0,0,4380,4381,3,952,476,0,4381,1019,1,0,0,0,4382,4383,3,818,409,0,
  	4383,1021,1,0,0,0,4384,4390,3,1024,512,0,4385,4390,3,1026,513,0,4386,
  	4390,3,1030,515,0,4387,4390,3,1028,514,0,4388,4390,3,1032,516,0,4389,
  	4384,1,0,0,0,4389,4385,1,0,0,0,4389,4386,1,0,0,0,4389,4387,1,0,0,0,4389,
  	4388,1,0,0,0,4390,1023,1,0,0,0,4391,4399,5,64,0,0,4392,4393,5,70,0,0,
  	4393,4395,5,370,0,0,4394,4396,3,1034,517,0,4395,4394,1,0,0,0,4395,4396,
  	1,0,0,0,4396,4397,1,0,0,0,4397,4399,5,381,0,0,4398,4391,1,0,0,0,4398,
  	4392,1,0,0,0,4399,1025,1,0,0,0,4400,4408,5,68,0,0,4401,4402,5,237,0,0,
  	4402,4404,5,370,0,0,4403,4405,3,1036,518,0,4404,4403,1,0,0,0,4404,4405,
  	1,0,0,0,4405,4406,1,0,0,0,4406,4408,5,381,0,0,4407,4400,1,0,0,0,4407,
  	4401,1,0,0,0,4408,1027,1,0,0,0,4409,4415,5,137,0,0,4410,4412,5,370,0,
  	0,4411,4413,3,1036,518,0,4412,4411,1,0,0,0,4412,4413,1,0,0,0,4413,4414,
  	1,0,0,0,4414,4416,5,381,0,0,4415,4410,1,0,0,0,4415,4416,1,0,0,0,4416,
  	1029,1,0,0,0,4417,4425,5,69,0,0,4418,4419,5,236,0,0,4419,4421,5,370,0,
  	0,4420,4422,3,1038,519,0,4421,4420,1,0,0,0,4421,4422,1,0,0,0,4422,4423,
  	1,0,0,0,4423,4425,5,381,0,0,4424,4417,1,0,0,0,4424,4418,1,0,0,0,4425,
  	1031,1,0,0,0,4426,4434,5,138,0,0,4427,4428,5,136,0,0,4428,4430,5,370,
  	0,0,4429,4431,3,1038,519,0,4430,4429,1,0,0,0,4430,4431,1,0,0,0,4431,4432,
  	1,0,0,0,4432,4434,5,381,0,0,4433,4426,1,0,0,0,4433,4427,1,0,0,0,4434,
  	1033,1,0,0,0,4435,4438,3,1130,565,0,4436,4438,3,942,471,0,4437,4435,1,
  	0,0,0,4437,4436,1,0,0,0,4438,1035,1,0,0,0,4439,4442,3,1132,566,0,4440,
  	4442,3,942,471,0,4441,4439,1,0,0,0,4441,4440,1,0,0,0,4442,1037,1,0,0,
  	0,4443,4446,3,1134,567,0,4444,4446,3,942,471,0,4445,4443,1,0,0,0,4445,
  	4444,1,0,0,0,4446,1039,1,0,0,0,4447,4448,3,818,409,0,4448,1041,1,0,0,
  	0,4449,4450,5,84,0,0,4450,4451,5,370,0,0,4451,4452,3,1044,522,0,4452,
  	4454,5,381,0,0,4453,4455,3,728,364,0,4454,4453,1,0,0,0,4454,4455,1,0,
  	0,0,4455,1043,1,0,0,0,4456,4457,3,1046,523,0,4457,4458,5,360,0,0,4458,
  	4459,3,1048,524,0,4459,1045,1,0,0,0,4460,4461,3,1020,510,0,4461,1047,
  	1,0,0,0,4462,4463,3,1020,510,0,4463,1049,1,0,0,0,4464,4467,3,1052,526,
  	0,4465,4467,3,968,484,0,4466,4464,1,0,0,0,4466,4465,1,0,0,0,4467,1051,
  	1,0,0,0,4468,4469,5,83,0,0,4469,4470,5,370,0,0,4470,4471,3,1054,527,0,
  	4471,4472,5,381,0,0,4472,1053,1,0,0,0,4473,4476,3,1138,569,0,4474,4476,
  	3,942,471,0,4475,4473,1,0,0,0,4475,4474,1,0,0,0,4476,1055,1,0,0,0,4477,
  	4478,3,1110,555,0,4478,1057,1,0,0,0,4479,4480,3,1112,556,0,4480,1059,
  	1,0,0,0,4481,4482,3,1110,555,0,4482,1061,1,0,0,0,4483,4484,3,1110,555,
  	0,4484,1063,1,0,0,0,4485,4488,3,1112,556,0,4486,4488,3,1066,533,0,4487,
  	4485,1,0,0,0,4487,4486,1,0,0,0,4488,1065,1,0,0,0,4489,4490,7,36,0,0,4490,
  	1067,1,0,0,0,4491,4492,3,1110,555,0,4492,1069,1,0,0,0,4493,4494,3,1110,
  	555,0,4494,1071,1,0,0,0,4495,4496,3,1110,555,0,4496,1073,1,0,0,0,4497,
  	4500,3,1112,556,0,4498,4500,3,1076,538,0,4499,4497,1,0,0,0,4499,4498,
  	1,0,0,0,4500,1075,1,0,0,0,4501,4502,7,36,0,0,4502,1077,1,0,0,0,4503,4504,
  	3,1110,555,0,4504,1079,1,0,0,0,4505,4506,3,1110,555,0,4506,1081,1,0,0,
  	0,4507,4508,3,1110,555,0,4508,1083,1,0,0,0,4509,4510,3,1110,555,0,4510,
  	1085,1,0,0,0,4511,4512,3,1092,546,0,4512,1087,1,0,0,0,4513,4514,3,1092,
  	546,0,4514,1089,1,0,0,0,4515,4516,3,1112,556,0,4516,1091,1,0,0,0,4517,
  	4518,3,1112,556,0,4518,1093,1,0,0,0,4519,4522,3,1118,559,0,4520,4522,
  	3,1096,548,0,4521,4519,1,0,0,0,4521,4520,1,0,0,0,4522,1095,1,0,0,0,4523,
  	4532,5,2,0,0,4524,4532,3,1116,558,0,4525,4532,5,7,0,0,4526,4532,3,1098,
  	549,0,4527,4532,3,1136,568,0,4528,4532,3,1128,564,0,4529,4532,3,1106,
  	553,0,4530,4532,3,1108,554,0,4531,4523,1,0,0,0,4531,4524,1,0,0,0,4531,
  	4525,1,0,0,0,4531,4526,1,0,0,0,4531,4527,1,0,0,0,4531,4528,1,0,0,0,4531,
  	4529,1,0,0,0,4531,4530,1,0,0,0,4532,1097,1,0,0,0,4533,4537,3,1100,550,
  	0,4534,4537,3,1102,551,0,4535,4537,3,1104,552,0,4536,4533,1,0,0,0,4536,
  	4534,1,0,0,0,4536,4535,1,0,0,0,4537,1099,1,0,0,0,4538,4539,5,70,0,0,4539,
  	4540,3,1130,565,0,4540,1101,1,0,0,0,4541,4542,5,207,0,0,4542,4543,3,1132,
  	566,0,4543,1103,1,0,0,0,4544,4545,7,37,0,0,4545,4546,3,1134,567,0,4546,
  	1105,1,0,0,0,4547,4548,3,936,468,0,4548,1107,1,0,0,0,4549,4550,3,942,
  	471,0,4550,1109,1,0,0,0,4551,4555,3,1112,556,0,4552,4555,5,4,0,0,4553,
  	4555,5,5,0,0,4554,4551,1,0,0,0,4554,4552,1,0,0,0,4554,4553,1,0,0,0,4555,
  	1111,1,0,0,0,4556,4559,5,324,0,0,4557,4559,3,1146,573,0,4558,4556,1,0,
  	0,0,4558,4557,1,0,0,0,4559,1113,1,0,0,0,4560,4561,3,1116,558,0,4561,1115,
  	1,0,0,0,4562,4563,7,38,0,0,4563,1117,1,0,0,0,4564,4567,3,1120,560,0,4565,
  	4567,3,1122,561,0,4566,4564,1,0,0,0,4566,4565,1,0,0,0,4567,1119,1,0,0,
  	0,4568,4574,5,8,0,0,4569,4574,5,11,0,0,4570,4574,5,12,0,0,4571,4574,5,
  	14,0,0,4572,4574,3,1124,562,0,4573,4568,1,0,0,0,4573,4569,1,0,0,0,4573,
  	4570,1,0,0,0,4573,4571,1,0,0,0,4573,4572,1,0,0,0,4574,1121,1,0,0,0,4575,
  	4576,7,39,0,0,4576,1123,1,0,0,0,4577,4578,7,40,0,0,4578,1125,1,0,0,0,
  	4579,4580,5,16,0,0,4580,1127,1,0,0,0,4581,4582,5,154,0,0,4582,1129,1,
  	0,0,0,4583,4584,3,1116,558,0,4584,1131,1,0,0,0,4585,4586,3,1116,558,0,
  	4586,1133,1,0,0,0,4587,4588,3,1116,558,0,4588,1135,1,0,0,0,4589,4590,
  	5,83,0,0,4590,4591,3,1138,569,0,4591,1137,1,0,0,0,4592,4593,3,1116,558,
  	0,4593,1139,1,0,0,0,4594,4595,7,41,0,0,4595,1141,1,0,0,0,4596,4597,7,
  	42,0,0,4597,1143,1,0,0,0,4598,4599,7,43,0,0,4599,1145,1,0,0,0,4600,4601,
  	7,44,0,0,4601,1147,1,0,0,0,507,1150,1157,1161,1166,1171,1176,1179,1184,
  	1186,1190,1193,1197,1205,1211,1225,1228,1235,1248,1255,1258,1263,1269,
  	1272,1282,1289,1298,1319,1322,1329,1334,1340,1346,1350,1355,1362,1365,
  	1373,1380,1383,1395,1398,1409,1417,1425,1430,1434,1442,1449,1457,1463,
  	1469,1474,1477,1482,1485,1488,1492,1495,1499,1503,1506,1509,1512,1524,
  	1529,1535,1542,1547,1551,1557,1562,1565,1573,1579,1587,1591,1596,1603,
  	1607,1612,1616,1620,1626,1639,1645,1657,1673,1678,1689,1699,1717,1722,
  	1726,1730,1734,1736,1742,1747,1754,1770,1774,1779,1783,1790,1794,1811,
  	1816,1823,1833,1841,1846,1862,1865,1869,1872,1876,1879,1885,1889,1892,
  	1899,1904,1911,1915,1919,1922,1925,1928,1931,1934,1936,1943,1948,1959,
  	1966,1976,1979,1986,1989,1995,2004,2010,2014,2021,2034,2044,2050,2054,
  	2057,2061,2071,2074,2078,2081,2088,2092,2095,2115,2124,2129,2136,2140,
  	2146,2152,2158,2161,2164,2169,2174,2177,2181,2185,2192,2196,2199,2205,
  	2208,2211,2219,2224,2227,2232,2235,2240,2243,2247,2250,2253,2265,2272,
  	2274,2279,2288,2293,2297,2304,2307,2310,2321,2335,2344,2353,2387,2390,
  	2394,2413,2421,2423,2434,2442,2446,2461,2494,2503,2513,2523,2534,2540,
  	2550,2559,2586,2596,2609,2614,2630,2634,2650,2655,2658,2668,2681,2687,
  	2696,2702,2709,2714,2721,2729,2732,2740,2743,2752,2756,2759,2765,2772,
  	2780,2782,2797,2802,2806,2810,2814,2818,2821,2827,2832,2836,2839,2843,
  	2846,2855,2858,2868,2871,2875,2879,2883,2888,2895,2898,2902,2905,2912,
  	2915,2925,2957,2960,2968,2971,2980,2984,3019,3026,3031,3040,3045,3052,
  	3068,3071,3078,3081,3086,3089,3092,3097,3101,3109,3114,3125,3128,3130,
  	3132,3144,3148,3155,3160,3163,3170,3173,3180,3183,3185,3192,3197,3200,
  	3207,3210,3217,3220,3222,3232,3236,3240,3244,3248,3252,3256,3260,3264,
  	3268,3275,3278,3282,3285,3288,3292,3296,3300,3304,3308,3312,3316,3323,
  	3326,3330,3334,3338,3342,3346,3350,3354,3358,3363,3370,3373,3378,3380,
  	3387,3391,3393,3401,3405,3409,3413,3417,3424,3428,3431,3435,3439,3442,
  	3444,3448,3455,3460,3467,3469,3474,3480,3483,3485,3489,3494,3501,3503,
  	3508,3515,3517,3524,3532,3538,3542,3549,3553,3556,3561,3565,3569,3573,
  	3577,3581,3584,3588,3592,3596,3599,3603,3607,3614,3618,3621,3625,3627,
  	3631,3640,3648,3663,3685,3692,3701,3708,3711,3720,3732,3736,3744,3750,
  	3758,3775,3789,3808,3813,3819,3845,3848,3850,3859,3868,3892,3901,3922,
  	3929,3938,3952,3956,3960,3964,3979,3995,3999,4003,4010,4013,4021,4024,
  	4043,4050,4064,4068,4081,4091,4096,4115,4141,4155,4172,4176,4185,4191,
  	4197,4206,4220,4228,4230,4246,4251,4263,4362,4365,4368,4389,4395,4398,
  	4404,4407,4412,4415,4421,4424,4430,4433,4437,4441,4445,4454,4466,4475,
  	4487,4499,4521,4531,4536,4554,4558,4566,4573
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  gqlParserStaticData = std::move(staticData);
}

}

GQLParser::GQLParser(TokenStream *input) : GQLParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

GQLParser::GQLParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  GQLParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *gqlParserStaticData->atn, gqlParserStaticData->decisionToDFA, gqlParserStaticData->sharedContextCache, options);
}

GQLParser::~GQLParser() {
  delete _interpreter;
}

const atn::ATN& GQLParser::getATN() const {
  return *gqlParserStaticData->atn;
}

std::string GQLParser::getGrammarFileName() const {
  return "GQL.g4";
}

const std::vector<std::string>& GQLParser::getRuleNames() const {
  return gqlParserStaticData->ruleNames;
}

const dfa::Vocabulary& GQLParser::getVocabulary() const {
  return gqlParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView GQLParser::getSerializedATN() const {
  return gqlParserStaticData->serializedATN;
}


//----------------- GqlProgramContext ------------------------------------------------------------------

GQLParser::GqlProgramContext::GqlProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ProgramActivityContext* GQLParser::GqlProgramContext::programActivity() {
  return getRuleContext<GQLParser::ProgramActivityContext>(0);
}

tree::TerminalNode* GQLParser::GqlProgramContext::EOF() {
  return getToken(GQLParser::EOF, 0);
}

GQLParser::SessionCloseCommandContext* GQLParser::GqlProgramContext::sessionCloseCommand() {
  return getRuleContext<GQLParser::SessionCloseCommandContext>(0);
}


size_t GQLParser::GqlProgramContext::getRuleIndex() const {
  return GQLParser::RuleGqlProgram;
}


GQLParser::GqlProgramContext* GQLParser::gqlProgram() {
  GqlProgramContext *_localctx = _tracker.createInstance<GqlProgramContext>(_ctx, getState());
  enterRule(_localctx, 0, GQLParser::RuleGqlProgram);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1157);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1148);
      programActivity();
      setState(1150);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::SESSION) {
        setState(1149);
        sessionCloseCommand();
      }
      setState(1152);
      match(GQLParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1154);
      sessionCloseCommand();
      setState(1155);
      match(GQLParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramActivityContext ------------------------------------------------------------------

GQLParser::ProgramActivityContext::ProgramActivityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SessionActivityContext* GQLParser::ProgramActivityContext::sessionActivity() {
  return getRuleContext<GQLParser::SessionActivityContext>(0);
}

GQLParser::TransactionActivityContext* GQLParser::ProgramActivityContext::transactionActivity() {
  return getRuleContext<GQLParser::TransactionActivityContext>(0);
}


size_t GQLParser::ProgramActivityContext::getRuleIndex() const {
  return GQLParser::RuleProgramActivity;
}


GQLParser::ProgramActivityContext* GQLParser::programActivity() {
  ProgramActivityContext *_localctx = _tracker.createInstance<ProgramActivityContext>(_ctx, getState());
  enterRule(_localctx, 2, GQLParser::RuleProgramActivity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1161);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::SESSION: {
        enterOuterAlt(_localctx, 1);
        setState(1159);
        sessionActivity();
        break;
      }

      case GQLParser::AT:
      case GQLParser::CALL:
      case GQLParser::COMMIT:
      case GQLParser::CREATE:
      case GQLParser::DELETE:
      case GQLParser::DETACH:
      case GQLParser::DROP:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FOR:
      case GQLParser::INSERT:
      case GQLParser::LET:
      case GQLParser::LIMIT:
      case GQLParser::MATCH:
      case GQLParser::NODETACH:
      case GQLParser::OFFSET:
      case GQLParser::OPTIONAL:
      case GQLParser::ORDER:
      case GQLParser::REMOVE:
      case GQLParser::RETURN:
      case GQLParser::ROLLBACK:
      case GQLParser::SELECT:
      case GQLParser::SET:
      case GQLParser::SKIP_RESERVED_WORD:
      case GQLParser::START:
      case GQLParser::USE:
      case GQLParser::VALUE:
      case GQLParser::BINDING:
      case GQLParser::GRAPH:
      case GQLParser::PROPERTY:
      case GQLParser::TABLE:
      case GQLParser::LEFT_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1160);
        transactionActivity();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionActivityContext ------------------------------------------------------------------

GQLParser::SessionActivityContext::SessionActivityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SessionResetCommandContext *> GQLParser::SessionActivityContext::sessionResetCommand() {
  return getRuleContexts<GQLParser::SessionResetCommandContext>();
}

GQLParser::SessionResetCommandContext* GQLParser::SessionActivityContext::sessionResetCommand(size_t i) {
  return getRuleContext<GQLParser::SessionResetCommandContext>(i);
}

std::vector<GQLParser::SessionSetCommandContext *> GQLParser::SessionActivityContext::sessionSetCommand() {
  return getRuleContexts<GQLParser::SessionSetCommandContext>();
}

GQLParser::SessionSetCommandContext* GQLParser::SessionActivityContext::sessionSetCommand(size_t i) {
  return getRuleContext<GQLParser::SessionSetCommandContext>(i);
}


size_t GQLParser::SessionActivityContext::getRuleIndex() const {
  return GQLParser::RuleSessionActivity;
}


GQLParser::SessionActivityContext* GQLParser::sessionActivity() {
  SessionActivityContext *_localctx = _tracker.createInstance<SessionActivityContext>(_ctx, getState());
  enterRule(_localctx, 4, GQLParser::RuleSessionActivity);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1179);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1164); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1163);
                sessionResetCommand();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1166); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1169); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1168);
                sessionSetCommand();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1171); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(1176);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1173);
          sessionResetCommand(); 
        }
        setState(1178);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionActivityContext ------------------------------------------------------------------

GQLParser::TransactionActivityContext::TransactionActivityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::StartTransactionCommandContext* GQLParser::TransactionActivityContext::startTransactionCommand() {
  return getRuleContext<GQLParser::StartTransactionCommandContext>(0);
}

GQLParser::ProcedureSpecificationContext* GQLParser::TransactionActivityContext::procedureSpecification() {
  return getRuleContext<GQLParser::ProcedureSpecificationContext>(0);
}

GQLParser::EndTransactionCommandContext* GQLParser::TransactionActivityContext::endTransactionCommand() {
  return getRuleContext<GQLParser::EndTransactionCommandContext>(0);
}


size_t GQLParser::TransactionActivityContext::getRuleIndex() const {
  return GQLParser::RuleTransactionActivity;
}


GQLParser::TransactionActivityContext* GQLParser::transactionActivity() {
  TransactionActivityContext *_localctx = _tracker.createInstance<TransactionActivityContext>(_ctx, getState());
  enterRule(_localctx, 6, GQLParser::RuleTransactionActivity);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1193);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::START: {
        enterOuterAlt(_localctx, 1);
        setState(1181);
        startTransactionCommand();
        setState(1186);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 31) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 31)) & 3461332977278001153) != 0) || ((((_la - 100) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 100)) & 6342202976706233345) != 0) || ((((_la - 177) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 177)) & 351843721159689) != 0) || ((((_la - 278) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 278)) & 34493958145) != 0) || _la == GQLParser::LEFT_BRACE) {
          setState(1182);
          procedureSpecification();
          setState(1184);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == GQLParser::COMMIT || _la == GQLParser::ROLLBACK) {
            setState(1183);
            endTransactionCommand();
          }
        }
        break;
      }

      case GQLParser::AT:
      case GQLParser::CALL:
      case GQLParser::CREATE:
      case GQLParser::DELETE:
      case GQLParser::DETACH:
      case GQLParser::DROP:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FOR:
      case GQLParser::INSERT:
      case GQLParser::LET:
      case GQLParser::LIMIT:
      case GQLParser::MATCH:
      case GQLParser::NODETACH:
      case GQLParser::OFFSET:
      case GQLParser::OPTIONAL:
      case GQLParser::ORDER:
      case GQLParser::REMOVE:
      case GQLParser::RETURN:
      case GQLParser::SELECT:
      case GQLParser::SET:
      case GQLParser::SKIP_RESERVED_WORD:
      case GQLParser::USE:
      case GQLParser::VALUE:
      case GQLParser::BINDING:
      case GQLParser::GRAPH:
      case GQLParser::PROPERTY:
      case GQLParser::TABLE:
      case GQLParser::LEFT_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1188);
        procedureSpecification();
        setState(1190);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::COMMIT || _la == GQLParser::ROLLBACK) {
          setState(1189);
          endTransactionCommand();
        }
        break;
      }

      case GQLParser::COMMIT:
      case GQLParser::ROLLBACK: {
        enterOuterAlt(_localctx, 3);
        setState(1192);
        endTransactionCommand();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndTransactionCommandContext ------------------------------------------------------------------

GQLParser::EndTransactionCommandContext::EndTransactionCommandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::RollbackCommandContext* GQLParser::EndTransactionCommandContext::rollbackCommand() {
  return getRuleContext<GQLParser::RollbackCommandContext>(0);
}

GQLParser::CommitCommandContext* GQLParser::EndTransactionCommandContext::commitCommand() {
  return getRuleContext<GQLParser::CommitCommandContext>(0);
}


size_t GQLParser::EndTransactionCommandContext::getRuleIndex() const {
  return GQLParser::RuleEndTransactionCommand;
}


GQLParser::EndTransactionCommandContext* GQLParser::endTransactionCommand() {
  EndTransactionCommandContext *_localctx = _tracker.createInstance<EndTransactionCommandContext>(_ctx, getState());
  enterRule(_localctx, 8, GQLParser::RuleEndTransactionCommand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1197);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ROLLBACK: {
        enterOuterAlt(_localctx, 1);
        setState(1195);
        rollbackCommand();
        break;
      }

      case GQLParser::COMMIT: {
        enterOuterAlt(_localctx, 2);
        setState(1196);
        commitCommand();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionSetCommandContext ------------------------------------------------------------------

GQLParser::SessionSetCommandContext::SessionSetCommandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionSetCommandContext::SESSION() {
  return getToken(GQLParser::SESSION, 0);
}

tree::TerminalNode* GQLParser::SessionSetCommandContext::SET() {
  return getToken(GQLParser::SET, 0);
}

GQLParser::SessionSetSchemaClauseContext* GQLParser::SessionSetCommandContext::sessionSetSchemaClause() {
  return getRuleContext<GQLParser::SessionSetSchemaClauseContext>(0);
}

GQLParser::SessionSetGraphClauseContext* GQLParser::SessionSetCommandContext::sessionSetGraphClause() {
  return getRuleContext<GQLParser::SessionSetGraphClauseContext>(0);
}

GQLParser::SessionSetTimeZoneClauseContext* GQLParser::SessionSetCommandContext::sessionSetTimeZoneClause() {
  return getRuleContext<GQLParser::SessionSetTimeZoneClauseContext>(0);
}

GQLParser::SessionSetParameterClauseContext* GQLParser::SessionSetCommandContext::sessionSetParameterClause() {
  return getRuleContext<GQLParser::SessionSetParameterClauseContext>(0);
}


size_t GQLParser::SessionSetCommandContext::getRuleIndex() const {
  return GQLParser::RuleSessionSetCommand;
}


GQLParser::SessionSetCommandContext* GQLParser::sessionSetCommand() {
  SessionSetCommandContext *_localctx = _tracker.createInstance<SessionSetCommandContext>(_ctx, getState());
  enterRule(_localctx, 10, GQLParser::RuleSessionSetCommand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1199);
    match(GQLParser::SESSION);
    setState(1200);
    match(GQLParser::SET);
    setState(1205);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      setState(1201);
      sessionSetSchemaClause();
      break;
    }

    case 2: {
      setState(1202);
      sessionSetGraphClause();
      break;
    }

    case 3: {
      setState(1203);
      sessionSetTimeZoneClause();
      break;
    }

    case 4: {
      setState(1204);
      sessionSetParameterClause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionSetSchemaClauseContext ------------------------------------------------------------------

GQLParser::SessionSetSchemaClauseContext::SessionSetSchemaClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionSetSchemaClauseContext::SCHEMA() {
  return getToken(GQLParser::SCHEMA, 0);
}

GQLParser::SchemaReferenceContext* GQLParser::SessionSetSchemaClauseContext::schemaReference() {
  return getRuleContext<GQLParser::SchemaReferenceContext>(0);
}


size_t GQLParser::SessionSetSchemaClauseContext::getRuleIndex() const {
  return GQLParser::RuleSessionSetSchemaClause;
}


GQLParser::SessionSetSchemaClauseContext* GQLParser::sessionSetSchemaClause() {
  SessionSetSchemaClauseContext *_localctx = _tracker.createInstance<SessionSetSchemaClauseContext>(_ctx, getState());
  enterRule(_localctx, 12, GQLParser::RuleSessionSetSchemaClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1207);
    match(GQLParser::SCHEMA);
    setState(1208);
    schemaReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionSetGraphClauseContext ------------------------------------------------------------------

GQLParser::SessionSetGraphClauseContext::SessionSetGraphClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionSetGraphClauseContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

GQLParser::GraphExpressionContext* GQLParser::SessionSetGraphClauseContext::graphExpression() {
  return getRuleContext<GQLParser::GraphExpressionContext>(0);
}

tree::TerminalNode* GQLParser::SessionSetGraphClauseContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}


size_t GQLParser::SessionSetGraphClauseContext::getRuleIndex() const {
  return GQLParser::RuleSessionSetGraphClause;
}


GQLParser::SessionSetGraphClauseContext* GQLParser::sessionSetGraphClause() {
  SessionSetGraphClauseContext *_localctx = _tracker.createInstance<SessionSetGraphClauseContext>(_ctx, getState());
  enterRule(_localctx, 14, GQLParser::RuleSessionSetGraphClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1211);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::PROPERTY) {
      setState(1210);
      match(GQLParser::PROPERTY);
    }
    setState(1213);
    match(GQLParser::GRAPH);
    setState(1214);
    graphExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionSetTimeZoneClauseContext ------------------------------------------------------------------

GQLParser::SessionSetTimeZoneClauseContext::SessionSetTimeZoneClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionSetTimeZoneClauseContext::TIME() {
  return getToken(GQLParser::TIME, 0);
}

tree::TerminalNode* GQLParser::SessionSetTimeZoneClauseContext::ZONE() {
  return getToken(GQLParser::ZONE, 0);
}

GQLParser::SetTimeZoneValueContext* GQLParser::SessionSetTimeZoneClauseContext::setTimeZoneValue() {
  return getRuleContext<GQLParser::SetTimeZoneValueContext>(0);
}


size_t GQLParser::SessionSetTimeZoneClauseContext::getRuleIndex() const {
  return GQLParser::RuleSessionSetTimeZoneClause;
}


GQLParser::SessionSetTimeZoneClauseContext* GQLParser::sessionSetTimeZoneClause() {
  SessionSetTimeZoneClauseContext *_localctx = _tracker.createInstance<SessionSetTimeZoneClauseContext>(_ctx, getState());
  enterRule(_localctx, 16, GQLParser::RuleSessionSetTimeZoneClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1216);
    match(GQLParser::TIME);
    setState(1217);
    match(GQLParser::ZONE);
    setState(1218);
    setTimeZoneValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetTimeZoneValueContext ------------------------------------------------------------------

GQLParser::SetTimeZoneValueContext::SetTimeZoneValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::TimeZoneStringContext* GQLParser::SetTimeZoneValueContext::timeZoneString() {
  return getRuleContext<GQLParser::TimeZoneStringContext>(0);
}


size_t GQLParser::SetTimeZoneValueContext::getRuleIndex() const {
  return GQLParser::RuleSetTimeZoneValue;
}


GQLParser::SetTimeZoneValueContext* GQLParser::setTimeZoneValue() {
  SetTimeZoneValueContext *_localctx = _tracker.createInstance<SetTimeZoneValueContext>(_ctx, getState());
  enterRule(_localctx, 18, GQLParser::RuleSetTimeZoneValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1220);
    timeZoneString();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionSetParameterClauseContext ------------------------------------------------------------------

GQLParser::SessionSetParameterClauseContext::SessionSetParameterClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SessionSetGraphParameterClauseContext* GQLParser::SessionSetParameterClauseContext::sessionSetGraphParameterClause() {
  return getRuleContext<GQLParser::SessionSetGraphParameterClauseContext>(0);
}

GQLParser::SessionSetBindingTableParameterClauseContext* GQLParser::SessionSetParameterClauseContext::sessionSetBindingTableParameterClause() {
  return getRuleContext<GQLParser::SessionSetBindingTableParameterClauseContext>(0);
}

GQLParser::SessionSetValueParameterClauseContext* GQLParser::SessionSetParameterClauseContext::sessionSetValueParameterClause() {
  return getRuleContext<GQLParser::SessionSetValueParameterClauseContext>(0);
}


size_t GQLParser::SessionSetParameterClauseContext::getRuleIndex() const {
  return GQLParser::RuleSessionSetParameterClause;
}


GQLParser::SessionSetParameterClauseContext* GQLParser::sessionSetParameterClause() {
  SessionSetParameterClauseContext *_localctx = _tracker.createInstance<SessionSetParameterClauseContext>(_ctx, getState());
  enterRule(_localctx, 20, GQLParser::RuleSessionSetParameterClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1225);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::GRAPH:
      case GQLParser::PROPERTY: {
        enterOuterAlt(_localctx, 1);
        setState(1222);
        sessionSetGraphParameterClause();
        break;
      }

      case GQLParser::BINDING:
      case GQLParser::TABLE: {
        enterOuterAlt(_localctx, 2);
        setState(1223);
        sessionSetBindingTableParameterClause();
        break;
      }

      case GQLParser::VALUE: {
        enterOuterAlt(_localctx, 3);
        setState(1224);
        sessionSetValueParameterClause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionSetGraphParameterClauseContext ------------------------------------------------------------------

GQLParser::SessionSetGraphParameterClauseContext::SessionSetGraphParameterClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionSetGraphParameterClauseContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

GQLParser::SessionSetParameterNameContext* GQLParser::SessionSetGraphParameterClauseContext::sessionSetParameterName() {
  return getRuleContext<GQLParser::SessionSetParameterNameContext>(0);
}

GQLParser::OptTypedGraphInitializerContext* GQLParser::SessionSetGraphParameterClauseContext::optTypedGraphInitializer() {
  return getRuleContext<GQLParser::OptTypedGraphInitializerContext>(0);
}

tree::TerminalNode* GQLParser::SessionSetGraphParameterClauseContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}


size_t GQLParser::SessionSetGraphParameterClauseContext::getRuleIndex() const {
  return GQLParser::RuleSessionSetGraphParameterClause;
}


GQLParser::SessionSetGraphParameterClauseContext* GQLParser::sessionSetGraphParameterClause() {
  SessionSetGraphParameterClauseContext *_localctx = _tracker.createInstance<SessionSetGraphParameterClauseContext>(_ctx, getState());
  enterRule(_localctx, 22, GQLParser::RuleSessionSetGraphParameterClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1228);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::PROPERTY) {
      setState(1227);
      match(GQLParser::PROPERTY);
    }
    setState(1230);
    match(GQLParser::GRAPH);
    setState(1231);
    sessionSetParameterName();
    setState(1232);
    optTypedGraphInitializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionSetBindingTableParameterClauseContext ------------------------------------------------------------------

GQLParser::SessionSetBindingTableParameterClauseContext::SessionSetBindingTableParameterClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionSetBindingTableParameterClauseContext::TABLE() {
  return getToken(GQLParser::TABLE, 0);
}

GQLParser::SessionSetParameterNameContext* GQLParser::SessionSetBindingTableParameterClauseContext::sessionSetParameterName() {
  return getRuleContext<GQLParser::SessionSetParameterNameContext>(0);
}

GQLParser::OptTypedBindingTableInitializerContext* GQLParser::SessionSetBindingTableParameterClauseContext::optTypedBindingTableInitializer() {
  return getRuleContext<GQLParser::OptTypedBindingTableInitializerContext>(0);
}

tree::TerminalNode* GQLParser::SessionSetBindingTableParameterClauseContext::BINDING() {
  return getToken(GQLParser::BINDING, 0);
}


size_t GQLParser::SessionSetBindingTableParameterClauseContext::getRuleIndex() const {
  return GQLParser::RuleSessionSetBindingTableParameterClause;
}


GQLParser::SessionSetBindingTableParameterClauseContext* GQLParser::sessionSetBindingTableParameterClause() {
  SessionSetBindingTableParameterClauseContext *_localctx = _tracker.createInstance<SessionSetBindingTableParameterClauseContext>(_ctx, getState());
  enterRule(_localctx, 24, GQLParser::RuleSessionSetBindingTableParameterClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1235);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::BINDING) {
      setState(1234);
      match(GQLParser::BINDING);
    }
    setState(1237);
    match(GQLParser::TABLE);
    setState(1238);
    sessionSetParameterName();
    setState(1239);
    optTypedBindingTableInitializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionSetValueParameterClauseContext ------------------------------------------------------------------

GQLParser::SessionSetValueParameterClauseContext::SessionSetValueParameterClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionSetValueParameterClauseContext::VALUE() {
  return getToken(GQLParser::VALUE, 0);
}

GQLParser::SessionSetParameterNameContext* GQLParser::SessionSetValueParameterClauseContext::sessionSetParameterName() {
  return getRuleContext<GQLParser::SessionSetParameterNameContext>(0);
}

GQLParser::OptTypedValueInitializerContext* GQLParser::SessionSetValueParameterClauseContext::optTypedValueInitializer() {
  return getRuleContext<GQLParser::OptTypedValueInitializerContext>(0);
}


size_t GQLParser::SessionSetValueParameterClauseContext::getRuleIndex() const {
  return GQLParser::RuleSessionSetValueParameterClause;
}


GQLParser::SessionSetValueParameterClauseContext* GQLParser::sessionSetValueParameterClause() {
  SessionSetValueParameterClauseContext *_localctx = _tracker.createInstance<SessionSetValueParameterClauseContext>(_ctx, getState());
  enterRule(_localctx, 26, GQLParser::RuleSessionSetValueParameterClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1241);
    match(GQLParser::VALUE);
    setState(1242);
    sessionSetParameterName();
    setState(1243);
    optTypedValueInitializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionSetParameterNameContext ------------------------------------------------------------------

GQLParser::SessionSetParameterNameContext::SessionSetParameterNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SessionParameterSpecificationContext* GQLParser::SessionSetParameterNameContext::sessionParameterSpecification() {
  return getRuleContext<GQLParser::SessionParameterSpecificationContext>(0);
}

tree::TerminalNode* GQLParser::SessionSetParameterNameContext::IF() {
  return getToken(GQLParser::IF, 0);
}

tree::TerminalNode* GQLParser::SessionSetParameterNameContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}

tree::TerminalNode* GQLParser::SessionSetParameterNameContext::EXISTS() {
  return getToken(GQLParser::EXISTS, 0);
}


size_t GQLParser::SessionSetParameterNameContext::getRuleIndex() const {
  return GQLParser::RuleSessionSetParameterName;
}


GQLParser::SessionSetParameterNameContext* GQLParser::sessionSetParameterName() {
  SessionSetParameterNameContext *_localctx = _tracker.createInstance<SessionSetParameterNameContext>(_ctx, getState());
  enterRule(_localctx, 28, GQLParser::RuleSessionSetParameterName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1248);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::IF) {
      setState(1245);
      match(GQLParser::IF);
      setState(1246);
      match(GQLParser::NOT);
      setState(1247);
      match(GQLParser::EXISTS);
    }
    setState(1250);
    sessionParameterSpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionResetCommandContext ------------------------------------------------------------------

GQLParser::SessionResetCommandContext::SessionResetCommandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionResetCommandContext::SESSION() {
  return getToken(GQLParser::SESSION, 0);
}

tree::TerminalNode* GQLParser::SessionResetCommandContext::RESET() {
  return getToken(GQLParser::RESET, 0);
}

GQLParser::SessionResetArgumentsContext* GQLParser::SessionResetCommandContext::sessionResetArguments() {
  return getRuleContext<GQLParser::SessionResetArgumentsContext>(0);
}


size_t GQLParser::SessionResetCommandContext::getRuleIndex() const {
  return GQLParser::RuleSessionResetCommand;
}


GQLParser::SessionResetCommandContext* GQLParser::sessionResetCommand() {
  SessionResetCommandContext *_localctx = _tracker.createInstance<SessionResetCommandContext>(_ctx, getState());
  enterRule(_localctx, 30, GQLParser::RuleSessionResetCommand);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1252);
    match(GQLParser::SESSION);
    setState(1253);
    match(GQLParser::RESET);
    setState(1255);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::ALL

    || _la == GQLParser::CHARACTERISTICS || ((((_la - 164) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 164)) & 8796095119363) != 0) || ((((_la - 289) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 289)) & 137439019009) != 0)) {
      setState(1254);
      sessionResetArguments();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionResetArgumentsContext ------------------------------------------------------------------

GQLParser::SessionResetArgumentsContext::SessionResetArgumentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionResetArgumentsContext::PARAMETERS() {
  return getToken(GQLParser::PARAMETERS, 0);
}

tree::TerminalNode* GQLParser::SessionResetArgumentsContext::CHARACTERISTICS() {
  return getToken(GQLParser::CHARACTERISTICS, 0);
}

tree::TerminalNode* GQLParser::SessionResetArgumentsContext::ALL() {
  return getToken(GQLParser::ALL, 0);
}

tree::TerminalNode* GQLParser::SessionResetArgumentsContext::SCHEMA() {
  return getToken(GQLParser::SCHEMA, 0);
}

tree::TerminalNode* GQLParser::SessionResetArgumentsContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

tree::TerminalNode* GQLParser::SessionResetArgumentsContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

tree::TerminalNode* GQLParser::SessionResetArgumentsContext::TIME() {
  return getToken(GQLParser::TIME, 0);
}

tree::TerminalNode* GQLParser::SessionResetArgumentsContext::ZONE() {
  return getToken(GQLParser::ZONE, 0);
}

GQLParser::SessionParameterSpecificationContext* GQLParser::SessionResetArgumentsContext::sessionParameterSpecification() {
  return getRuleContext<GQLParser::SessionParameterSpecificationContext>(0);
}

tree::TerminalNode* GQLParser::SessionResetArgumentsContext::PARAMETER() {
  return getToken(GQLParser::PARAMETER, 0);
}


size_t GQLParser::SessionResetArgumentsContext::getRuleIndex() const {
  return GQLParser::RuleSessionResetArguments;
}


GQLParser::SessionResetArgumentsContext* GQLParser::sessionResetArguments() {
  SessionResetArgumentsContext *_localctx = _tracker.createInstance<SessionResetArgumentsContext>(_ctx, getState());
  enterRule(_localctx, 32, GQLParser::RuleSessionResetArguments);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1272);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ALL:
      case GQLParser::CHARACTERISTICS:
      case GQLParser::PARAMETERS: {
        enterOuterAlt(_localctx, 1);
        setState(1258);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::ALL) {
          setState(1257);
          match(GQLParser::ALL);
        }
        setState(1260);
        _la = _input->LA(1);
        if (!(_la == GQLParser::CHARACTERISTICS || _la == GQLParser::PARAMETERS)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case GQLParser::SCHEMA: {
        enterOuterAlt(_localctx, 2);
        setState(1261);
        match(GQLParser::SCHEMA);
        break;
      }

      case GQLParser::GRAPH:
      case GQLParser::PROPERTY: {
        enterOuterAlt(_localctx, 3);
        setState(1263);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::PROPERTY) {
          setState(1262);
          match(GQLParser::PROPERTY);
        }
        setState(1265);
        match(GQLParser::GRAPH);
        break;
      }

      case GQLParser::TIME: {
        enterOuterAlt(_localctx, 4);
        setState(1266);
        match(GQLParser::TIME);
        setState(1267);
        match(GQLParser::ZONE);
        break;
      }

      case GQLParser::PARAMETER:
      case GQLParser::GENERAL_PARAMETER_REFERENCE: {
        enterOuterAlt(_localctx, 5);
        setState(1269);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::PARAMETER) {
          setState(1268);
          match(GQLParser::PARAMETER);
        }
        setState(1271);
        sessionParameterSpecification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionCloseCommandContext ------------------------------------------------------------------

GQLParser::SessionCloseCommandContext::SessionCloseCommandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionCloseCommandContext::SESSION() {
  return getToken(GQLParser::SESSION, 0);
}

tree::TerminalNode* GQLParser::SessionCloseCommandContext::CLOSE() {
  return getToken(GQLParser::CLOSE, 0);
}


size_t GQLParser::SessionCloseCommandContext::getRuleIndex() const {
  return GQLParser::RuleSessionCloseCommand;
}


GQLParser::SessionCloseCommandContext* GQLParser::sessionCloseCommand() {
  SessionCloseCommandContext *_localctx = _tracker.createInstance<SessionCloseCommandContext>(_ctx, getState());
  enterRule(_localctx, 34, GQLParser::RuleSessionCloseCommand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1274);
    match(GQLParser::SESSION);
    setState(1275);
    match(GQLParser::CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SessionParameterSpecificationContext ------------------------------------------------------------------

GQLParser::SessionParameterSpecificationContext::SessionParameterSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SessionParameterSpecificationContext::GENERAL_PARAMETER_REFERENCE() {
  return getToken(GQLParser::GENERAL_PARAMETER_REFERENCE, 0);
}


size_t GQLParser::SessionParameterSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleSessionParameterSpecification;
}


GQLParser::SessionParameterSpecificationContext* GQLParser::sessionParameterSpecification() {
  SessionParameterSpecificationContext *_localctx = _tracker.createInstance<SessionParameterSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 36, GQLParser::RuleSessionParameterSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1277);
    match(GQLParser::GENERAL_PARAMETER_REFERENCE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StartTransactionCommandContext ------------------------------------------------------------------

GQLParser::StartTransactionCommandContext::StartTransactionCommandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::StartTransactionCommandContext::START() {
  return getToken(GQLParser::START, 0);
}

tree::TerminalNode* GQLParser::StartTransactionCommandContext::TRANSACTION() {
  return getToken(GQLParser::TRANSACTION, 0);
}

GQLParser::TransactionCharacteristicsContext* GQLParser::StartTransactionCommandContext::transactionCharacteristics() {
  return getRuleContext<GQLParser::TransactionCharacteristicsContext>(0);
}


size_t GQLParser::StartTransactionCommandContext::getRuleIndex() const {
  return GQLParser::RuleStartTransactionCommand;
}


GQLParser::StartTransactionCommandContext* GQLParser::startTransactionCommand() {
  StartTransactionCommandContext *_localctx = _tracker.createInstance<StartTransactionCommandContext>(_ctx, getState());
  enterRule(_localctx, 38, GQLParser::RuleStartTransactionCommand);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1279);
    match(GQLParser::START);
    setState(1280);
    match(GQLParser::TRANSACTION);
    setState(1282);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::READ) {
      setState(1281);
      transactionCharacteristics();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionCharacteristicsContext ------------------------------------------------------------------

GQLParser::TransactionCharacteristicsContext::TransactionCharacteristicsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::TransactionModeContext *> GQLParser::TransactionCharacteristicsContext::transactionMode() {
  return getRuleContexts<GQLParser::TransactionModeContext>();
}

GQLParser::TransactionModeContext* GQLParser::TransactionCharacteristicsContext::transactionMode(size_t i) {
  return getRuleContext<GQLParser::TransactionModeContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::TransactionCharacteristicsContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::TransactionCharacteristicsContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::TransactionCharacteristicsContext::getRuleIndex() const {
  return GQLParser::RuleTransactionCharacteristics;
}


GQLParser::TransactionCharacteristicsContext* GQLParser::transactionCharacteristics() {
  TransactionCharacteristicsContext *_localctx = _tracker.createInstance<TransactionCharacteristicsContext>(_ctx, getState());
  enterRule(_localctx, 40, GQLParser::RuleTransactionCharacteristics);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1284);
    transactionMode();
    setState(1289);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(1285);
      match(GQLParser::COMMA);
      setState(1286);
      transactionMode();
      setState(1291);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionModeContext ------------------------------------------------------------------

GQLParser::TransactionModeContext::TransactionModeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::TransactionAccessModeContext* GQLParser::TransactionModeContext::transactionAccessMode() {
  return getRuleContext<GQLParser::TransactionAccessModeContext>(0);
}


size_t GQLParser::TransactionModeContext::getRuleIndex() const {
  return GQLParser::RuleTransactionMode;
}


GQLParser::TransactionModeContext* GQLParser::transactionMode() {
  TransactionModeContext *_localctx = _tracker.createInstance<TransactionModeContext>(_ctx, getState());
  enterRule(_localctx, 42, GQLParser::RuleTransactionMode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1292);
    transactionAccessMode();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionAccessModeContext ------------------------------------------------------------------

GQLParser::TransactionAccessModeContext::TransactionAccessModeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TransactionAccessModeContext::READ() {
  return getToken(GQLParser::READ, 0);
}

tree::TerminalNode* GQLParser::TransactionAccessModeContext::ONLY() {
  return getToken(GQLParser::ONLY, 0);
}

tree::TerminalNode* GQLParser::TransactionAccessModeContext::WRITE() {
  return getToken(GQLParser::WRITE, 0);
}


size_t GQLParser::TransactionAccessModeContext::getRuleIndex() const {
  return GQLParser::RuleTransactionAccessMode;
}


GQLParser::TransactionAccessModeContext* GQLParser::transactionAccessMode() {
  TransactionAccessModeContext *_localctx = _tracker.createInstance<TransactionAccessModeContext>(_ctx, getState());
  enterRule(_localctx, 44, GQLParser::RuleTransactionAccessMode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1298);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1294);
      match(GQLParser::READ);
      setState(1295);
      match(GQLParser::ONLY);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1296);
      match(GQLParser::READ);
      setState(1297);
      match(GQLParser::WRITE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RollbackCommandContext ------------------------------------------------------------------

GQLParser::RollbackCommandContext::RollbackCommandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::RollbackCommandContext::ROLLBACK() {
  return getToken(GQLParser::ROLLBACK, 0);
}


size_t GQLParser::RollbackCommandContext::getRuleIndex() const {
  return GQLParser::RuleRollbackCommand;
}


GQLParser::RollbackCommandContext* GQLParser::rollbackCommand() {
  RollbackCommandContext *_localctx = _tracker.createInstance<RollbackCommandContext>(_ctx, getState());
  enterRule(_localctx, 46, GQLParser::RuleRollbackCommand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1300);
    match(GQLParser::ROLLBACK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommitCommandContext ------------------------------------------------------------------

GQLParser::CommitCommandContext::CommitCommandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CommitCommandContext::COMMIT() {
  return getToken(GQLParser::COMMIT, 0);
}


size_t GQLParser::CommitCommandContext::getRuleIndex() const {
  return GQLParser::RuleCommitCommand;
}


GQLParser::CommitCommandContext* GQLParser::commitCommand() {
  CommitCommandContext *_localctx = _tracker.createInstance<CommitCommandContext>(_ctx, getState());
  enterRule(_localctx, 48, GQLParser::RuleCommitCommand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1302);
    match(GQLParser::COMMIT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedProcedureSpecificationContext ------------------------------------------------------------------

GQLParser::NestedProcedureSpecificationContext::NestedProcedureSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NestedProcedureSpecificationContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

GQLParser::ProcedureSpecificationContext* GQLParser::NestedProcedureSpecificationContext::procedureSpecification() {
  return getRuleContext<GQLParser::ProcedureSpecificationContext>(0);
}

tree::TerminalNode* GQLParser::NestedProcedureSpecificationContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}


size_t GQLParser::NestedProcedureSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleNestedProcedureSpecification;
}


GQLParser::NestedProcedureSpecificationContext* GQLParser::nestedProcedureSpecification() {
  NestedProcedureSpecificationContext *_localctx = _tracker.createInstance<NestedProcedureSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 50, GQLParser::RuleNestedProcedureSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1304);
    match(GQLParser::LEFT_BRACE);
    setState(1305);
    procedureSpecification();
    setState(1306);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureSpecificationContext ------------------------------------------------------------------

GQLParser::ProcedureSpecificationContext::ProcedureSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ProcedureBodyContext* GQLParser::ProcedureSpecificationContext::procedureBody() {
  return getRuleContext<GQLParser::ProcedureBodyContext>(0);
}


size_t GQLParser::ProcedureSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleProcedureSpecification;
}


GQLParser::ProcedureSpecificationContext* GQLParser::procedureSpecification() {
  ProcedureSpecificationContext *_localctx = _tracker.createInstance<ProcedureSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 52, GQLParser::RuleProcedureSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1308);
    procedureBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedDataModifyingProcedureSpecificationContext ------------------------------------------------------------------

GQLParser::NestedDataModifyingProcedureSpecificationContext::NestedDataModifyingProcedureSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NestedDataModifyingProcedureSpecificationContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

GQLParser::ProcedureBodyContext* GQLParser::NestedDataModifyingProcedureSpecificationContext::procedureBody() {
  return getRuleContext<GQLParser::ProcedureBodyContext>(0);
}

tree::TerminalNode* GQLParser::NestedDataModifyingProcedureSpecificationContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}


size_t GQLParser::NestedDataModifyingProcedureSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleNestedDataModifyingProcedureSpecification;
}


GQLParser::NestedDataModifyingProcedureSpecificationContext* GQLParser::nestedDataModifyingProcedureSpecification() {
  NestedDataModifyingProcedureSpecificationContext *_localctx = _tracker.createInstance<NestedDataModifyingProcedureSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 54, GQLParser::RuleNestedDataModifyingProcedureSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1310);
    match(GQLParser::LEFT_BRACE);
    setState(1311);
    procedureBody();
    setState(1312);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedQuerySpecificationContext ------------------------------------------------------------------

GQLParser::NestedQuerySpecificationContext::NestedQuerySpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NestedQuerySpecificationContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

GQLParser::ProcedureBodyContext* GQLParser::NestedQuerySpecificationContext::procedureBody() {
  return getRuleContext<GQLParser::ProcedureBodyContext>(0);
}

tree::TerminalNode* GQLParser::NestedQuerySpecificationContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}


size_t GQLParser::NestedQuerySpecificationContext::getRuleIndex() const {
  return GQLParser::RuleNestedQuerySpecification;
}


GQLParser::NestedQuerySpecificationContext* GQLParser::nestedQuerySpecification() {
  NestedQuerySpecificationContext *_localctx = _tracker.createInstance<NestedQuerySpecificationContext>(_ctx, getState());
  enterRule(_localctx, 56, GQLParser::RuleNestedQuerySpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1314);
    match(GQLParser::LEFT_BRACE);
    setState(1315);
    procedureBody();
    setState(1316);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureBodyContext ------------------------------------------------------------------

GQLParser::ProcedureBodyContext::ProcedureBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::StatementBlockContext* GQLParser::ProcedureBodyContext::statementBlock() {
  return getRuleContext<GQLParser::StatementBlockContext>(0);
}

GQLParser::AtSchemaClauseContext* GQLParser::ProcedureBodyContext::atSchemaClause() {
  return getRuleContext<GQLParser::AtSchemaClauseContext>(0);
}

GQLParser::BindingVariableDefinitionBlockContext* GQLParser::ProcedureBodyContext::bindingVariableDefinitionBlock() {
  return getRuleContext<GQLParser::BindingVariableDefinitionBlockContext>(0);
}


size_t GQLParser::ProcedureBodyContext::getRuleIndex() const {
  return GQLParser::RuleProcedureBody;
}


GQLParser::ProcedureBodyContext* GQLParser::procedureBody() {
  ProcedureBodyContext *_localctx = _tracker.createInstance<ProcedureBodyContext>(_ctx, getState());
  enterRule(_localctx, 58, GQLParser::RuleProcedureBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1319);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::AT) {
      setState(1318);
      atSchemaClause();
    }
    setState(1322);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::VALUE

    || _la == GQLParser::BINDING || ((((_la - 289) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 289)) & 16842753) != 0)) {
      setState(1321);
      bindingVariableDefinitionBlock();
    }
    setState(1324);
    statementBlock();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingVariableDefinitionBlockContext ------------------------------------------------------------------

GQLParser::BindingVariableDefinitionBlockContext::BindingVariableDefinitionBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::BindingVariableDefinitionContext *> GQLParser::BindingVariableDefinitionBlockContext::bindingVariableDefinition() {
  return getRuleContexts<GQLParser::BindingVariableDefinitionContext>();
}

GQLParser::BindingVariableDefinitionContext* GQLParser::BindingVariableDefinitionBlockContext::bindingVariableDefinition(size_t i) {
  return getRuleContext<GQLParser::BindingVariableDefinitionContext>(i);
}


size_t GQLParser::BindingVariableDefinitionBlockContext::getRuleIndex() const {
  return GQLParser::RuleBindingVariableDefinitionBlock;
}


GQLParser::BindingVariableDefinitionBlockContext* GQLParser::bindingVariableDefinitionBlock() {
  BindingVariableDefinitionBlockContext *_localctx = _tracker.createInstance<BindingVariableDefinitionBlockContext>(_ctx, getState());
  enterRule(_localctx, 60, GQLParser::RuleBindingVariableDefinitionBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1327); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1326);
      bindingVariableDefinition();
      setState(1329); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GQLParser::VALUE

    || _la == GQLParser::BINDING || ((((_la - 289) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 289)) & 16842753) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingVariableDefinitionContext ------------------------------------------------------------------

GQLParser::BindingVariableDefinitionContext::BindingVariableDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::GraphVariableDefinitionContext* GQLParser::BindingVariableDefinitionContext::graphVariableDefinition() {
  return getRuleContext<GQLParser::GraphVariableDefinitionContext>(0);
}

GQLParser::BindingTableVariableDefinitionContext* GQLParser::BindingVariableDefinitionContext::bindingTableVariableDefinition() {
  return getRuleContext<GQLParser::BindingTableVariableDefinitionContext>(0);
}

GQLParser::ValueVariableDefinitionContext* GQLParser::BindingVariableDefinitionContext::valueVariableDefinition() {
  return getRuleContext<GQLParser::ValueVariableDefinitionContext>(0);
}


size_t GQLParser::BindingVariableDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleBindingVariableDefinition;
}


GQLParser::BindingVariableDefinitionContext* GQLParser::bindingVariableDefinition() {
  BindingVariableDefinitionContext *_localctx = _tracker.createInstance<BindingVariableDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 62, GQLParser::RuleBindingVariableDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1334);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::GRAPH:
      case GQLParser::PROPERTY: {
        enterOuterAlt(_localctx, 1);
        setState(1331);
        graphVariableDefinition();
        break;
      }

      case GQLParser::BINDING:
      case GQLParser::TABLE: {
        enterOuterAlt(_localctx, 2);
        setState(1332);
        bindingTableVariableDefinition();
        break;
      }

      case GQLParser::VALUE: {
        enterOuterAlt(_localctx, 3);
        setState(1333);
        valueVariableDefinition();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementBlockContext ------------------------------------------------------------------

GQLParser::StatementBlockContext::StatementBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::StatementContext* GQLParser::StatementBlockContext::statement() {
  return getRuleContext<GQLParser::StatementContext>(0);
}

std::vector<GQLParser::NextStatementContext *> GQLParser::StatementBlockContext::nextStatement() {
  return getRuleContexts<GQLParser::NextStatementContext>();
}

GQLParser::NextStatementContext* GQLParser::StatementBlockContext::nextStatement(size_t i) {
  return getRuleContext<GQLParser::NextStatementContext>(i);
}


size_t GQLParser::StatementBlockContext::getRuleIndex() const {
  return GQLParser::RuleStatementBlock;
}


GQLParser::StatementBlockContext* GQLParser::statementBlock() {
  StatementBlockContext *_localctx = _tracker.createInstance<StatementBlockContext>(_ctx, getState());
  enterRule(_localctx, 64, GQLParser::RuleStatementBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1336);
    statement();
    setState(1340);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::NEXT) {
      setState(1337);
      nextStatement();
      setState(1342);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

GQLParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::LinearCatalogModifyingStatementContext* GQLParser::StatementContext::linearCatalogModifyingStatement() {
  return getRuleContext<GQLParser::LinearCatalogModifyingStatementContext>(0);
}

GQLParser::LinearDataModifyingStatementContext* GQLParser::StatementContext::linearDataModifyingStatement() {
  return getRuleContext<GQLParser::LinearDataModifyingStatementContext>(0);
}

GQLParser::CompositeQueryStatementContext* GQLParser::StatementContext::compositeQueryStatement() {
  return getRuleContext<GQLParser::CompositeQueryStatementContext>(0);
}


size_t GQLParser::StatementContext::getRuleIndex() const {
  return GQLParser::RuleStatement;
}


GQLParser::StatementContext* GQLParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 66, GQLParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1346);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1343);
      linearCatalogModifyingStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1344);
      linearDataModifyingStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1345);
      compositeQueryStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NextStatementContext ------------------------------------------------------------------

GQLParser::NextStatementContext::NextStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NextStatementContext::NEXT() {
  return getToken(GQLParser::NEXT, 0);
}

GQLParser::StatementContext* GQLParser::NextStatementContext::statement() {
  return getRuleContext<GQLParser::StatementContext>(0);
}

GQLParser::YieldClauseContext* GQLParser::NextStatementContext::yieldClause() {
  return getRuleContext<GQLParser::YieldClauseContext>(0);
}


size_t GQLParser::NextStatementContext::getRuleIndex() const {
  return GQLParser::RuleNextStatement;
}


GQLParser::NextStatementContext* GQLParser::nextStatement() {
  NextStatementContext *_localctx = _tracker.createInstance<NextStatementContext>(_ctx, getState());
  enterRule(_localctx, 68, GQLParser::RuleNextStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1348);
    match(GQLParser::NEXT);
    setState(1350);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::YIELD) {
      setState(1349);
      yieldClause();
    }
    setState(1352);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphVariableDefinitionContext ------------------------------------------------------------------

GQLParser::GraphVariableDefinitionContext::GraphVariableDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GraphVariableDefinitionContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

GQLParser::BindingVariableContext* GQLParser::GraphVariableDefinitionContext::bindingVariable() {
  return getRuleContext<GQLParser::BindingVariableContext>(0);
}

GQLParser::OptTypedGraphInitializerContext* GQLParser::GraphVariableDefinitionContext::optTypedGraphInitializer() {
  return getRuleContext<GQLParser::OptTypedGraphInitializerContext>(0);
}

tree::TerminalNode* GQLParser::GraphVariableDefinitionContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}


size_t GQLParser::GraphVariableDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleGraphVariableDefinition;
}


GQLParser::GraphVariableDefinitionContext* GQLParser::graphVariableDefinition() {
  GraphVariableDefinitionContext *_localctx = _tracker.createInstance<GraphVariableDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 70, GQLParser::RuleGraphVariableDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1355);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::PROPERTY) {
      setState(1354);
      match(GQLParser::PROPERTY);
    }
    setState(1357);
    match(GQLParser::GRAPH);
    setState(1358);
    bindingVariable();
    setState(1359);
    optTypedGraphInitializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptTypedGraphInitializerContext ------------------------------------------------------------------

GQLParser::OptTypedGraphInitializerContext::OptTypedGraphInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::GraphInitializerContext* GQLParser::OptTypedGraphInitializerContext::graphInitializer() {
  return getRuleContext<GQLParser::GraphInitializerContext>(0);
}

GQLParser::GraphReferenceValueTypeContext* GQLParser::OptTypedGraphInitializerContext::graphReferenceValueType() {
  return getRuleContext<GQLParser::GraphReferenceValueTypeContext>(0);
}

GQLParser::TypedContext* GQLParser::OptTypedGraphInitializerContext::typed() {
  return getRuleContext<GQLParser::TypedContext>(0);
}


size_t GQLParser::OptTypedGraphInitializerContext::getRuleIndex() const {
  return GQLParser::RuleOptTypedGraphInitializer;
}


GQLParser::OptTypedGraphInitializerContext* GQLParser::optTypedGraphInitializer() {
  OptTypedGraphInitializerContext *_localctx = _tracker.createInstance<OptTypedGraphInitializerContext>(_ctx, getState());
  enterRule(_localctx, 72, GQLParser::RuleOptTypedGraphInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1365);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::ANY || _la == GQLParser::TYPED || ((((_la - 289) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 289)) & 4398046576641) != 0)) {
      setState(1362);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::TYPED || _la == GQLParser::DOUBLE_COLON) {
        setState(1361);
        typed();
      }
      setState(1364);
      graphReferenceValueType();
    }
    setState(1367);
    graphInitializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphInitializerContext ------------------------------------------------------------------

GQLParser::GraphInitializerContext::GraphInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GraphInitializerContext::EQUALS_OPERATOR() {
  return getToken(GQLParser::EQUALS_OPERATOR, 0);
}

GQLParser::GraphExpressionContext* GQLParser::GraphInitializerContext::graphExpression() {
  return getRuleContext<GQLParser::GraphExpressionContext>(0);
}


size_t GQLParser::GraphInitializerContext::getRuleIndex() const {
  return GQLParser::RuleGraphInitializer;
}


GQLParser::GraphInitializerContext* GQLParser::graphInitializer() {
  GraphInitializerContext *_localctx = _tracker.createInstance<GraphInitializerContext>(_ctx, getState());
  enterRule(_localctx, 74, GQLParser::RuleGraphInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1369);
    match(GQLParser::EQUALS_OPERATOR);
    setState(1370);
    graphExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingTableVariableDefinitionContext ------------------------------------------------------------------

GQLParser::BindingTableVariableDefinitionContext::BindingTableVariableDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::BindingTableVariableDefinitionContext::TABLE() {
  return getToken(GQLParser::TABLE, 0);
}

GQLParser::BindingVariableContext* GQLParser::BindingTableVariableDefinitionContext::bindingVariable() {
  return getRuleContext<GQLParser::BindingVariableContext>(0);
}

GQLParser::OptTypedBindingTableInitializerContext* GQLParser::BindingTableVariableDefinitionContext::optTypedBindingTableInitializer() {
  return getRuleContext<GQLParser::OptTypedBindingTableInitializerContext>(0);
}

tree::TerminalNode* GQLParser::BindingTableVariableDefinitionContext::BINDING() {
  return getToken(GQLParser::BINDING, 0);
}


size_t GQLParser::BindingTableVariableDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleBindingTableVariableDefinition;
}


GQLParser::BindingTableVariableDefinitionContext* GQLParser::bindingTableVariableDefinition() {
  BindingTableVariableDefinitionContext *_localctx = _tracker.createInstance<BindingTableVariableDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 76, GQLParser::RuleBindingTableVariableDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1373);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::BINDING) {
      setState(1372);
      match(GQLParser::BINDING);
    }
    setState(1375);
    match(GQLParser::TABLE);
    setState(1376);
    bindingVariable();
    setState(1377);
    optTypedBindingTableInitializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptTypedBindingTableInitializerContext ------------------------------------------------------------------

GQLParser::OptTypedBindingTableInitializerContext::OptTypedBindingTableInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingTableInitializerContext* GQLParser::OptTypedBindingTableInitializerContext::bindingTableInitializer() {
  return getRuleContext<GQLParser::BindingTableInitializerContext>(0);
}

GQLParser::BindingTableReferenceValueTypeContext* GQLParser::OptTypedBindingTableInitializerContext::bindingTableReferenceValueType() {
  return getRuleContext<GQLParser::BindingTableReferenceValueTypeContext>(0);
}

GQLParser::TypedContext* GQLParser::OptTypedBindingTableInitializerContext::typed() {
  return getRuleContext<GQLParser::TypedContext>(0);
}


size_t GQLParser::OptTypedBindingTableInitializerContext::getRuleIndex() const {
  return GQLParser::RuleOptTypedBindingTableInitializer;
}


GQLParser::OptTypedBindingTableInitializerContext* GQLParser::optTypedBindingTableInitializer() {
  OptTypedBindingTableInitializerContext *_localctx = _tracker.createInstance<OptTypedBindingTableInitializerContext>(_ctx, getState());
  enterRule(_localctx, 78, GQLParser::RuleOptTypedBindingTableInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1383);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::TYPED || ((((_la - 278) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 278)) & 9007233614479361) != 0)) {
      setState(1380);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::TYPED || _la == GQLParser::DOUBLE_COLON) {
        setState(1379);
        typed();
      }
      setState(1382);
      bindingTableReferenceValueType();
    }
    setState(1385);
    bindingTableInitializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingTableInitializerContext ------------------------------------------------------------------

GQLParser::BindingTableInitializerContext::BindingTableInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::BindingTableInitializerContext::EQUALS_OPERATOR() {
  return getToken(GQLParser::EQUALS_OPERATOR, 0);
}

GQLParser::BindingTableExpressionContext* GQLParser::BindingTableInitializerContext::bindingTableExpression() {
  return getRuleContext<GQLParser::BindingTableExpressionContext>(0);
}


size_t GQLParser::BindingTableInitializerContext::getRuleIndex() const {
  return GQLParser::RuleBindingTableInitializer;
}


GQLParser::BindingTableInitializerContext* GQLParser::bindingTableInitializer() {
  BindingTableInitializerContext *_localctx = _tracker.createInstance<BindingTableInitializerContext>(_ctx, getState());
  enterRule(_localctx, 80, GQLParser::RuleBindingTableInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1387);
    match(GQLParser::EQUALS_OPERATOR);
    setState(1388);
    bindingTableExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueVariableDefinitionContext ------------------------------------------------------------------

GQLParser::ValueVariableDefinitionContext::ValueVariableDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ValueVariableDefinitionContext::VALUE() {
  return getToken(GQLParser::VALUE, 0);
}

GQLParser::BindingVariableContext* GQLParser::ValueVariableDefinitionContext::bindingVariable() {
  return getRuleContext<GQLParser::BindingVariableContext>(0);
}

GQLParser::OptTypedValueInitializerContext* GQLParser::ValueVariableDefinitionContext::optTypedValueInitializer() {
  return getRuleContext<GQLParser::OptTypedValueInitializerContext>(0);
}


size_t GQLParser::ValueVariableDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleValueVariableDefinition;
}


GQLParser::ValueVariableDefinitionContext* GQLParser::valueVariableDefinition() {
  ValueVariableDefinitionContext *_localctx = _tracker.createInstance<ValueVariableDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 82, GQLParser::RuleValueVariableDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1390);
    match(GQLParser::VALUE);
    setState(1391);
    bindingVariable();
    setState(1392);
    optTypedValueInitializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptTypedValueInitializerContext ------------------------------------------------------------------

GQLParser::OptTypedValueInitializerContext::OptTypedValueInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueInitializerContext* GQLParser::OptTypedValueInitializerContext::valueInitializer() {
  return getRuleContext<GQLParser::ValueInitializerContext>(0);
}

GQLParser::ValueTypeContext* GQLParser::OptTypedValueInitializerContext::valueType() {
  return getRuleContext<GQLParser::ValueTypeContext>(0);
}

GQLParser::TypedContext* GQLParser::OptTypedValueInitializerContext::typed() {
  return getRuleContext<GQLParser::TypedContext>(0);
}


size_t GQLParser::OptTypedValueInitializerContext::getRuleIndex() const {
  return GQLParser::RuleOptTypedValueInitializer;
}


GQLParser::OptTypedValueInitializerContext* GQLParser::optTypedValueInitializer() {
  OptTypedValueInitializerContext *_localctx = _tracker.createInstance<OptTypedValueInitializerContext>(_ctx, getState());
  enterRule(_localctx, 84, GQLParser::RuleOptTypedValueInitializer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1398);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 1135228676472832) != 0) || ((((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & -9187345438330574823) != 0) || ((((_la - 135) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 135)) & 6989589922362163201) != 0) || ((((_la - 202) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 202)) & 8645246561) != 0) || ((((_la - 278) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 278)) & 9010532828842081) != 0) || _la == GQLParser::LEFT_BRACE

    || _la == GQLParser::LEFT_PAREN) {
      setState(1395);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::TYPED || _la == GQLParser::DOUBLE_COLON) {
        setState(1394);
        typed();
      }
      setState(1397);
      valueType(0);
    }
    setState(1400);
    valueInitializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueInitializerContext ------------------------------------------------------------------

GQLParser::ValueInitializerContext::ValueInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ValueInitializerContext::EQUALS_OPERATOR() {
  return getToken(GQLParser::EQUALS_OPERATOR, 0);
}

GQLParser::ValueExpressionContext* GQLParser::ValueInitializerContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::ValueInitializerContext::getRuleIndex() const {
  return GQLParser::RuleValueInitializer;
}


GQLParser::ValueInitializerContext* GQLParser::valueInitializer() {
  ValueInitializerContext *_localctx = _tracker.createInstance<ValueInitializerContext>(_ctx, getState());
  enterRule(_localctx, 86, GQLParser::RuleValueInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1402);
    match(GQLParser::EQUALS_OPERATOR);
    setState(1403);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphExpressionContext ------------------------------------------------------------------

GQLParser::GraphExpressionContext::GraphExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::GraphReferenceContext* GQLParser::GraphExpressionContext::graphReference() {
  return getRuleContext<GQLParser::GraphReferenceContext>(0);
}

GQLParser::ObjectExpressionPrimaryContext* GQLParser::GraphExpressionContext::objectExpressionPrimary() {
  return getRuleContext<GQLParser::ObjectExpressionPrimaryContext>(0);
}

GQLParser::ObjectNameOrBindingVariableContext* GQLParser::GraphExpressionContext::objectNameOrBindingVariable() {
  return getRuleContext<GQLParser::ObjectNameOrBindingVariableContext>(0);
}

GQLParser::CurrentGraphContext* GQLParser::GraphExpressionContext::currentGraph() {
  return getRuleContext<GQLParser::CurrentGraphContext>(0);
}


size_t GQLParser::GraphExpressionContext::getRuleIndex() const {
  return GQLParser::RuleGraphExpression;
}


GQLParser::GraphExpressionContext* GQLParser::graphExpression() {
  GraphExpressionContext *_localctx = _tracker.createInstance<GraphExpressionContext>(_ctx, getState());
  enterRule(_localctx, 88, GQLParser::RuleGraphExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1409);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1405);
      graphReference();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1406);
      objectExpressionPrimary();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1407);
      objectNameOrBindingVariable();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1408);
      currentGraph();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CurrentGraphContext ------------------------------------------------------------------

GQLParser::CurrentGraphContext::CurrentGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CurrentGraphContext::CURRENT_PROPERTY_GRAPH() {
  return getToken(GQLParser::CURRENT_PROPERTY_GRAPH, 0);
}

tree::TerminalNode* GQLParser::CurrentGraphContext::CURRENT_GRAPH() {
  return getToken(GQLParser::CURRENT_GRAPH, 0);
}


size_t GQLParser::CurrentGraphContext::getRuleIndex() const {
  return GQLParser::RuleCurrentGraph;
}


GQLParser::CurrentGraphContext* GQLParser::currentGraph() {
  CurrentGraphContext *_localctx = _tracker.createInstance<CurrentGraphContext>(_ctx, getState());
  enterRule(_localctx, 90, GQLParser::RuleCurrentGraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1411);
    _la = _input->LA(1);
    if (!(_la == GQLParser::CURRENT_GRAPH

    || _la == GQLParser::CURRENT_PROPERTY_GRAPH)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingTableExpressionContext ------------------------------------------------------------------

GQLParser::BindingTableExpressionContext::BindingTableExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NestedBindingTableQuerySpecificationContext* GQLParser::BindingTableExpressionContext::nestedBindingTableQuerySpecification() {
  return getRuleContext<GQLParser::NestedBindingTableQuerySpecificationContext>(0);
}

GQLParser::BindingTableReferenceContext* GQLParser::BindingTableExpressionContext::bindingTableReference() {
  return getRuleContext<GQLParser::BindingTableReferenceContext>(0);
}

GQLParser::ObjectExpressionPrimaryContext* GQLParser::BindingTableExpressionContext::objectExpressionPrimary() {
  return getRuleContext<GQLParser::ObjectExpressionPrimaryContext>(0);
}

GQLParser::ObjectNameOrBindingVariableContext* GQLParser::BindingTableExpressionContext::objectNameOrBindingVariable() {
  return getRuleContext<GQLParser::ObjectNameOrBindingVariableContext>(0);
}


size_t GQLParser::BindingTableExpressionContext::getRuleIndex() const {
  return GQLParser::RuleBindingTableExpression;
}


GQLParser::BindingTableExpressionContext* GQLParser::bindingTableExpression() {
  BindingTableExpressionContext *_localctx = _tracker.createInstance<BindingTableExpressionContext>(_ctx, getState());
  enterRule(_localctx, 92, GQLParser::RuleBindingTableExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1417);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1413);
      nestedBindingTableQuerySpecification();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1414);
      bindingTableReference();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1415);
      objectExpressionPrimary();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1416);
      objectNameOrBindingVariable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedBindingTableQuerySpecificationContext ------------------------------------------------------------------

GQLParser::NestedBindingTableQuerySpecificationContext::NestedBindingTableQuerySpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NestedQuerySpecificationContext* GQLParser::NestedBindingTableQuerySpecificationContext::nestedQuerySpecification() {
  return getRuleContext<GQLParser::NestedQuerySpecificationContext>(0);
}


size_t GQLParser::NestedBindingTableQuerySpecificationContext::getRuleIndex() const {
  return GQLParser::RuleNestedBindingTableQuerySpecification;
}


GQLParser::NestedBindingTableQuerySpecificationContext* GQLParser::nestedBindingTableQuerySpecification() {
  NestedBindingTableQuerySpecificationContext *_localctx = _tracker.createInstance<NestedBindingTableQuerySpecificationContext>(_ctx, getState());
  enterRule(_localctx, 94, GQLParser::RuleNestedBindingTableQuerySpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1419);
    nestedQuerySpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectExpressionPrimaryContext ------------------------------------------------------------------

GQLParser::ObjectExpressionPrimaryContext::ObjectExpressionPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ObjectExpressionPrimaryContext::VARIABLE() {
  return getToken(GQLParser::VARIABLE, 0);
}

GQLParser::ValueExpressionPrimaryContext* GQLParser::ObjectExpressionPrimaryContext::valueExpressionPrimary() {
  return getRuleContext<GQLParser::ValueExpressionPrimaryContext>(0);
}

GQLParser::ParenthesizedValueExpressionContext* GQLParser::ObjectExpressionPrimaryContext::parenthesizedValueExpression() {
  return getRuleContext<GQLParser::ParenthesizedValueExpressionContext>(0);
}

GQLParser::NonParenthesizedValueExpressionPrimarySpecialCaseContext* GQLParser::ObjectExpressionPrimaryContext::nonParenthesizedValueExpressionPrimarySpecialCase() {
  return getRuleContext<GQLParser::NonParenthesizedValueExpressionPrimarySpecialCaseContext>(0);
}


size_t GQLParser::ObjectExpressionPrimaryContext::getRuleIndex() const {
  return GQLParser::RuleObjectExpressionPrimary;
}


GQLParser::ObjectExpressionPrimaryContext* GQLParser::objectExpressionPrimary() {
  ObjectExpressionPrimaryContext *_localctx = _tracker.createInstance<ObjectExpressionPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 96, GQLParser::RuleObjectExpressionPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1425);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1421);
      match(GQLParser::VARIABLE);
      setState(1422);
      valueExpressionPrimary(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1423);
      parenthesizedValueExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1424);
      nonParenthesizedValueExpressionPrimarySpecialCase();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinearCatalogModifyingStatementContext ------------------------------------------------------------------

GQLParser::LinearCatalogModifyingStatementContext::LinearCatalogModifyingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SimpleCatalogModifyingStatementContext *> GQLParser::LinearCatalogModifyingStatementContext::simpleCatalogModifyingStatement() {
  return getRuleContexts<GQLParser::SimpleCatalogModifyingStatementContext>();
}

GQLParser::SimpleCatalogModifyingStatementContext* GQLParser::LinearCatalogModifyingStatementContext::simpleCatalogModifyingStatement(size_t i) {
  return getRuleContext<GQLParser::SimpleCatalogModifyingStatementContext>(i);
}


size_t GQLParser::LinearCatalogModifyingStatementContext::getRuleIndex() const {
  return GQLParser::RuleLinearCatalogModifyingStatement;
}


GQLParser::LinearCatalogModifyingStatementContext* GQLParser::linearCatalogModifyingStatement() {
  LinearCatalogModifyingStatementContext *_localctx = _tracker.createInstance<LinearCatalogModifyingStatementContext>(_ctx, getState());
  enterRule(_localctx, 98, GQLParser::RuleLinearCatalogModifyingStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1428); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1427);
      simpleCatalogModifyingStatement();
      setState(1430); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 44) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 44)) & 274878431233) != 0) || _la == GQLParser::OPTIONAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleCatalogModifyingStatementContext ------------------------------------------------------------------

GQLParser::SimpleCatalogModifyingStatementContext::SimpleCatalogModifyingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PrimitiveCatalogModifyingStatementContext* GQLParser::SimpleCatalogModifyingStatementContext::primitiveCatalogModifyingStatement() {
  return getRuleContext<GQLParser::PrimitiveCatalogModifyingStatementContext>(0);
}

GQLParser::CallCatalogModifyingProcedureStatementContext* GQLParser::SimpleCatalogModifyingStatementContext::callCatalogModifyingProcedureStatement() {
  return getRuleContext<GQLParser::CallCatalogModifyingProcedureStatementContext>(0);
}


size_t GQLParser::SimpleCatalogModifyingStatementContext::getRuleIndex() const {
  return GQLParser::RuleSimpleCatalogModifyingStatement;
}


GQLParser::SimpleCatalogModifyingStatementContext* GQLParser::simpleCatalogModifyingStatement() {
  SimpleCatalogModifyingStatementContext *_localctx = _tracker.createInstance<SimpleCatalogModifyingStatementContext>(_ctx, getState());
  enterRule(_localctx, 100, GQLParser::RuleSimpleCatalogModifyingStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1434);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::CREATE:
      case GQLParser::DROP: {
        enterOuterAlt(_localctx, 1);
        setState(1432);
        primitiveCatalogModifyingStatement();
        break;
      }

      case GQLParser::CALL:
      case GQLParser::OPTIONAL: {
        enterOuterAlt(_localctx, 2);
        setState(1433);
        callCatalogModifyingProcedureStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimitiveCatalogModifyingStatementContext ------------------------------------------------------------------

GQLParser::PrimitiveCatalogModifyingStatementContext::PrimitiveCatalogModifyingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CreateSchemaStatementContext* GQLParser::PrimitiveCatalogModifyingStatementContext::createSchemaStatement() {
  return getRuleContext<GQLParser::CreateSchemaStatementContext>(0);
}

GQLParser::DropSchemaStatementContext* GQLParser::PrimitiveCatalogModifyingStatementContext::dropSchemaStatement() {
  return getRuleContext<GQLParser::DropSchemaStatementContext>(0);
}

GQLParser::CreateGraphStatementContext* GQLParser::PrimitiveCatalogModifyingStatementContext::createGraphStatement() {
  return getRuleContext<GQLParser::CreateGraphStatementContext>(0);
}

GQLParser::DropGraphStatementContext* GQLParser::PrimitiveCatalogModifyingStatementContext::dropGraphStatement() {
  return getRuleContext<GQLParser::DropGraphStatementContext>(0);
}

GQLParser::CreateGraphTypeStatementContext* GQLParser::PrimitiveCatalogModifyingStatementContext::createGraphTypeStatement() {
  return getRuleContext<GQLParser::CreateGraphTypeStatementContext>(0);
}

GQLParser::DropGraphTypeStatementContext* GQLParser::PrimitiveCatalogModifyingStatementContext::dropGraphTypeStatement() {
  return getRuleContext<GQLParser::DropGraphTypeStatementContext>(0);
}


size_t GQLParser::PrimitiveCatalogModifyingStatementContext::getRuleIndex() const {
  return GQLParser::RulePrimitiveCatalogModifyingStatement;
}


GQLParser::PrimitiveCatalogModifyingStatementContext* GQLParser::primitiveCatalogModifyingStatement() {
  PrimitiveCatalogModifyingStatementContext *_localctx = _tracker.createInstance<PrimitiveCatalogModifyingStatementContext>(_ctx, getState());
  enterRule(_localctx, 102, GQLParser::RulePrimitiveCatalogModifyingStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1442);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1436);
      createSchemaStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1437);
      dropSchemaStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1438);
      createGraphStatement();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1439);
      dropGraphStatement();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1440);
      createGraphTypeStatement();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1441);
      dropGraphTypeStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateSchemaStatementContext ------------------------------------------------------------------

GQLParser::CreateSchemaStatementContext::CreateSchemaStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CreateSchemaStatementContext::CREATE() {
  return getToken(GQLParser::CREATE, 0);
}

tree::TerminalNode* GQLParser::CreateSchemaStatementContext::SCHEMA() {
  return getToken(GQLParser::SCHEMA, 0);
}

GQLParser::CatalogSchemaParentAndNameContext* GQLParser::CreateSchemaStatementContext::catalogSchemaParentAndName() {
  return getRuleContext<GQLParser::CatalogSchemaParentAndNameContext>(0);
}

tree::TerminalNode* GQLParser::CreateSchemaStatementContext::IF() {
  return getToken(GQLParser::IF, 0);
}

tree::TerminalNode* GQLParser::CreateSchemaStatementContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}

tree::TerminalNode* GQLParser::CreateSchemaStatementContext::EXISTS() {
  return getToken(GQLParser::EXISTS, 0);
}


size_t GQLParser::CreateSchemaStatementContext::getRuleIndex() const {
  return GQLParser::RuleCreateSchemaStatement;
}


GQLParser::CreateSchemaStatementContext* GQLParser::createSchemaStatement() {
  CreateSchemaStatementContext *_localctx = _tracker.createInstance<CreateSchemaStatementContext>(_ctx, getState());
  enterRule(_localctx, 104, GQLParser::RuleCreateSchemaStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1444);
    match(GQLParser::CREATE);
    setState(1445);
    match(GQLParser::SCHEMA);
    setState(1449);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::IF) {
      setState(1446);
      match(GQLParser::IF);
      setState(1447);
      match(GQLParser::NOT);
      setState(1448);
      match(GQLParser::EXISTS);
    }
    setState(1451);
    catalogSchemaParentAndName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropSchemaStatementContext ------------------------------------------------------------------

GQLParser::DropSchemaStatementContext::DropSchemaStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DropSchemaStatementContext::DROP() {
  return getToken(GQLParser::DROP, 0);
}

tree::TerminalNode* GQLParser::DropSchemaStatementContext::SCHEMA() {
  return getToken(GQLParser::SCHEMA, 0);
}

GQLParser::CatalogSchemaParentAndNameContext* GQLParser::DropSchemaStatementContext::catalogSchemaParentAndName() {
  return getRuleContext<GQLParser::CatalogSchemaParentAndNameContext>(0);
}

tree::TerminalNode* GQLParser::DropSchemaStatementContext::IF() {
  return getToken(GQLParser::IF, 0);
}

tree::TerminalNode* GQLParser::DropSchemaStatementContext::EXISTS() {
  return getToken(GQLParser::EXISTS, 0);
}


size_t GQLParser::DropSchemaStatementContext::getRuleIndex() const {
  return GQLParser::RuleDropSchemaStatement;
}


GQLParser::DropSchemaStatementContext* GQLParser::dropSchemaStatement() {
  DropSchemaStatementContext *_localctx = _tracker.createInstance<DropSchemaStatementContext>(_ctx, getState());
  enterRule(_localctx, 106, GQLParser::RuleDropSchemaStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1453);
    match(GQLParser::DROP);
    setState(1454);
    match(GQLParser::SCHEMA);
    setState(1457);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::IF) {
      setState(1455);
      match(GQLParser::IF);
      setState(1456);
      match(GQLParser::EXISTS);
    }
    setState(1459);
    catalogSchemaParentAndName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateGraphStatementContext ------------------------------------------------------------------

GQLParser::CreateGraphStatementContext::CreateGraphStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CreateGraphStatementContext::CREATE() {
  return getToken(GQLParser::CREATE, 0);
}

GQLParser::CatalogGraphParentAndNameContext* GQLParser::CreateGraphStatementContext::catalogGraphParentAndName() {
  return getRuleContext<GQLParser::CatalogGraphParentAndNameContext>(0);
}

tree::TerminalNode* GQLParser::CreateGraphStatementContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

tree::TerminalNode* GQLParser::CreateGraphStatementContext::OR() {
  return getToken(GQLParser::OR, 0);
}

tree::TerminalNode* GQLParser::CreateGraphStatementContext::REPLACE() {
  return getToken(GQLParser::REPLACE, 0);
}

GQLParser::OpenGraphTypeContext* GQLParser::CreateGraphStatementContext::openGraphType() {
  return getRuleContext<GQLParser::OpenGraphTypeContext>(0);
}

GQLParser::OfGraphTypeContext* GQLParser::CreateGraphStatementContext::ofGraphType() {
  return getRuleContext<GQLParser::OfGraphTypeContext>(0);
}

GQLParser::GraphSourceContext* GQLParser::CreateGraphStatementContext::graphSource() {
  return getRuleContext<GQLParser::GraphSourceContext>(0);
}

tree::TerminalNode* GQLParser::CreateGraphStatementContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

tree::TerminalNode* GQLParser::CreateGraphStatementContext::IF() {
  return getToken(GQLParser::IF, 0);
}

tree::TerminalNode* GQLParser::CreateGraphStatementContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}

tree::TerminalNode* GQLParser::CreateGraphStatementContext::EXISTS() {
  return getToken(GQLParser::EXISTS, 0);
}


size_t GQLParser::CreateGraphStatementContext::getRuleIndex() const {
  return GQLParser::RuleCreateGraphStatement;
}


GQLParser::CreateGraphStatementContext* GQLParser::createGraphStatement() {
  CreateGraphStatementContext *_localctx = _tracker.createInstance<CreateGraphStatementContext>(_ctx, getState());
  enterRule(_localctx, 108, GQLParser::RuleCreateGraphStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1461);
    match(GQLParser::CREATE);
    setState(1477);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::GRAPH:
      case GQLParser::PROPERTY: {
        setState(1463);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::PROPERTY) {
          setState(1462);
          match(GQLParser::PROPERTY);
        }
        setState(1465);
        match(GQLParser::GRAPH);
        setState(1469);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::IF) {
          setState(1466);
          match(GQLParser::IF);
          setState(1467);
          match(GQLParser::NOT);
          setState(1468);
          match(GQLParser::EXISTS);
        }
        break;
      }

      case GQLParser::OR: {
        setState(1471);
        match(GQLParser::OR);
        setState(1472);
        match(GQLParser::REPLACE);
        setState(1474);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::PROPERTY) {
          setState(1473);
          match(GQLParser::PROPERTY);
        }
        setState(1476);
        match(GQLParser::GRAPH);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1479);
    catalogGraphParentAndName();
    setState(1482);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      setState(1480);
      openGraphType();
      break;
    }

    case 2: {
      setState(1481);
      ofGraphType();
      break;
    }

    default:
      break;
    }
    setState(1485);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::AS) {
      setState(1484);
      graphSource();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpenGraphTypeContext ------------------------------------------------------------------

GQLParser::OpenGraphTypeContext::OpenGraphTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::OpenGraphTypeContext::ANY() {
  return getToken(GQLParser::ANY, 0);
}

GQLParser::TypedContext* GQLParser::OpenGraphTypeContext::typed() {
  return getRuleContext<GQLParser::TypedContext>(0);
}

tree::TerminalNode* GQLParser::OpenGraphTypeContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

tree::TerminalNode* GQLParser::OpenGraphTypeContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}


size_t GQLParser::OpenGraphTypeContext::getRuleIndex() const {
  return GQLParser::RuleOpenGraphType;
}


GQLParser::OpenGraphTypeContext* GQLParser::openGraphType() {
  OpenGraphTypeContext *_localctx = _tracker.createInstance<OpenGraphTypeContext>(_ctx, getState());
  enterRule(_localctx, 110, GQLParser::RuleOpenGraphType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1488);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::TYPED || _la == GQLParser::DOUBLE_COLON) {
      setState(1487);
      typed();
    }
    setState(1490);
    match(GQLParser::ANY);
    setState(1495);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::GRAPH

    || _la == GQLParser::PROPERTY) {
      setState(1492);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::PROPERTY) {
        setState(1491);
        match(GQLParser::PROPERTY);
      }
      setState(1494);
      match(GQLParser::GRAPH);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OfGraphTypeContext ------------------------------------------------------------------

GQLParser::OfGraphTypeContext::OfGraphTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::GraphTypeLikeGraphContext* GQLParser::OfGraphTypeContext::graphTypeLikeGraph() {
  return getRuleContext<GQLParser::GraphTypeLikeGraphContext>(0);
}

GQLParser::GraphTypeReferenceContext* GQLParser::OfGraphTypeContext::graphTypeReference() {
  return getRuleContext<GQLParser::GraphTypeReferenceContext>(0);
}

GQLParser::TypedContext* GQLParser::OfGraphTypeContext::typed() {
  return getRuleContext<GQLParser::TypedContext>(0);
}

GQLParser::NestedGraphTypeSpecificationContext* GQLParser::OfGraphTypeContext::nestedGraphTypeSpecification() {
  return getRuleContext<GQLParser::NestedGraphTypeSpecificationContext>(0);
}

tree::TerminalNode* GQLParser::OfGraphTypeContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

tree::TerminalNode* GQLParser::OfGraphTypeContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}


size_t GQLParser::OfGraphTypeContext::getRuleIndex() const {
  return GQLParser::RuleOfGraphType;
}


GQLParser::OfGraphTypeContext* GQLParser::ofGraphType() {
  OfGraphTypeContext *_localctx = _tracker.createInstance<OfGraphTypeContext>(_ctx, getState());
  enterRule(_localctx, 112, GQLParser::RuleOfGraphType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1512);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1497);
      graphTypeLikeGraph();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1499);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::TYPED || _la == GQLParser::DOUBLE_COLON) {
        setState(1498);
        typed();
      }
      setState(1501);
      graphTypeReference();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1503);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::TYPED || _la == GQLParser::DOUBLE_COLON) {
        setState(1502);
        typed();
      }
      setState(1509);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::GRAPH

      || _la == GQLParser::PROPERTY) {
        setState(1506);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::PROPERTY) {
          setState(1505);
          match(GQLParser::PROPERTY);
        }
        setState(1508);
        match(GQLParser::GRAPH);
      }
      setState(1511);
      nestedGraphTypeSpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphTypeLikeGraphContext ------------------------------------------------------------------

GQLParser::GraphTypeLikeGraphContext::GraphTypeLikeGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GraphTypeLikeGraphContext::LIKE() {
  return getToken(GQLParser::LIKE, 0);
}

GQLParser::GraphExpressionContext* GQLParser::GraphTypeLikeGraphContext::graphExpression() {
  return getRuleContext<GQLParser::GraphExpressionContext>(0);
}


size_t GQLParser::GraphTypeLikeGraphContext::getRuleIndex() const {
  return GQLParser::RuleGraphTypeLikeGraph;
}


GQLParser::GraphTypeLikeGraphContext* GQLParser::graphTypeLikeGraph() {
  GraphTypeLikeGraphContext *_localctx = _tracker.createInstance<GraphTypeLikeGraphContext>(_ctx, getState());
  enterRule(_localctx, 114, GQLParser::RuleGraphTypeLikeGraph);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1514);
    match(GQLParser::LIKE);
    setState(1515);
    graphExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphSourceContext ------------------------------------------------------------------

GQLParser::GraphSourceContext::GraphSourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GraphSourceContext::AS() {
  return getToken(GQLParser::AS, 0);
}

tree::TerminalNode* GQLParser::GraphSourceContext::COPY() {
  return getToken(GQLParser::COPY, 0);
}

tree::TerminalNode* GQLParser::GraphSourceContext::OF() {
  return getToken(GQLParser::OF, 0);
}

GQLParser::GraphExpressionContext* GQLParser::GraphSourceContext::graphExpression() {
  return getRuleContext<GQLParser::GraphExpressionContext>(0);
}


size_t GQLParser::GraphSourceContext::getRuleIndex() const {
  return GQLParser::RuleGraphSource;
}


GQLParser::GraphSourceContext* GQLParser::graphSource() {
  GraphSourceContext *_localctx = _tracker.createInstance<GraphSourceContext>(_ctx, getState());
  enterRule(_localctx, 116, GQLParser::RuleGraphSource);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1517);
    match(GQLParser::AS);
    setState(1518);
    match(GQLParser::COPY);
    setState(1519);
    match(GQLParser::OF);
    setState(1520);
    graphExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropGraphStatementContext ------------------------------------------------------------------

GQLParser::DropGraphStatementContext::DropGraphStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DropGraphStatementContext::DROP() {
  return getToken(GQLParser::DROP, 0);
}

tree::TerminalNode* GQLParser::DropGraphStatementContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

GQLParser::CatalogGraphParentAndNameContext* GQLParser::DropGraphStatementContext::catalogGraphParentAndName() {
  return getRuleContext<GQLParser::CatalogGraphParentAndNameContext>(0);
}

tree::TerminalNode* GQLParser::DropGraphStatementContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

tree::TerminalNode* GQLParser::DropGraphStatementContext::IF() {
  return getToken(GQLParser::IF, 0);
}

tree::TerminalNode* GQLParser::DropGraphStatementContext::EXISTS() {
  return getToken(GQLParser::EXISTS, 0);
}


size_t GQLParser::DropGraphStatementContext::getRuleIndex() const {
  return GQLParser::RuleDropGraphStatement;
}


GQLParser::DropGraphStatementContext* GQLParser::dropGraphStatement() {
  DropGraphStatementContext *_localctx = _tracker.createInstance<DropGraphStatementContext>(_ctx, getState());
  enterRule(_localctx, 118, GQLParser::RuleDropGraphStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1522);
    match(GQLParser::DROP);
    setState(1524);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::PROPERTY) {
      setState(1523);
      match(GQLParser::PROPERTY);
    }
    setState(1526);
    match(GQLParser::GRAPH);
    setState(1529);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::IF) {
      setState(1527);
      match(GQLParser::IF);
      setState(1528);
      match(GQLParser::EXISTS);
    }
    setState(1531);
    catalogGraphParentAndName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateGraphTypeStatementContext ------------------------------------------------------------------

GQLParser::CreateGraphTypeStatementContext::CreateGraphTypeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CreateGraphTypeStatementContext::CREATE() {
  return getToken(GQLParser::CREATE, 0);
}

GQLParser::CatalogGraphTypeParentAndNameContext* GQLParser::CreateGraphTypeStatementContext::catalogGraphTypeParentAndName() {
  return getRuleContext<GQLParser::CatalogGraphTypeParentAndNameContext>(0);
}

GQLParser::GraphTypeSourceContext* GQLParser::CreateGraphTypeStatementContext::graphTypeSource() {
  return getRuleContext<GQLParser::GraphTypeSourceContext>(0);
}

tree::TerminalNode* GQLParser::CreateGraphTypeStatementContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

tree::TerminalNode* GQLParser::CreateGraphTypeStatementContext::TYPE() {
  return getToken(GQLParser::TYPE, 0);
}

tree::TerminalNode* GQLParser::CreateGraphTypeStatementContext::OR() {
  return getToken(GQLParser::OR, 0);
}

tree::TerminalNode* GQLParser::CreateGraphTypeStatementContext::REPLACE() {
  return getToken(GQLParser::REPLACE, 0);
}

tree::TerminalNode* GQLParser::CreateGraphTypeStatementContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

tree::TerminalNode* GQLParser::CreateGraphTypeStatementContext::IF() {
  return getToken(GQLParser::IF, 0);
}

tree::TerminalNode* GQLParser::CreateGraphTypeStatementContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}

tree::TerminalNode* GQLParser::CreateGraphTypeStatementContext::EXISTS() {
  return getToken(GQLParser::EXISTS, 0);
}


size_t GQLParser::CreateGraphTypeStatementContext::getRuleIndex() const {
  return GQLParser::RuleCreateGraphTypeStatement;
}


GQLParser::CreateGraphTypeStatementContext* GQLParser::createGraphTypeStatement() {
  CreateGraphTypeStatementContext *_localctx = _tracker.createInstance<CreateGraphTypeStatementContext>(_ctx, getState());
  enterRule(_localctx, 120, GQLParser::RuleCreateGraphTypeStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1533);
    match(GQLParser::CREATE);
    setState(1551);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::GRAPH:
      case GQLParser::PROPERTY: {
        setState(1535);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::PROPERTY) {
          setState(1534);
          match(GQLParser::PROPERTY);
        }
        setState(1537);
        match(GQLParser::GRAPH);
        setState(1538);
        match(GQLParser::TYPE);
        setState(1542);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::IF) {
          setState(1539);
          match(GQLParser::IF);
          setState(1540);
          match(GQLParser::NOT);
          setState(1541);
          match(GQLParser::EXISTS);
        }
        break;
      }

      case GQLParser::OR: {
        setState(1544);
        match(GQLParser::OR);
        setState(1545);
        match(GQLParser::REPLACE);
        setState(1547);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::PROPERTY) {
          setState(1546);
          match(GQLParser::PROPERTY);
        }
        setState(1549);
        match(GQLParser::GRAPH);
        setState(1550);
        match(GQLParser::TYPE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1553);
    catalogGraphTypeParentAndName();
    setState(1554);
    graphTypeSource();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphTypeSourceContext ------------------------------------------------------------------

GQLParser::GraphTypeSourceContext::GraphTypeSourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CopyOfGraphTypeContext* GQLParser::GraphTypeSourceContext::copyOfGraphType() {
  return getRuleContext<GQLParser::CopyOfGraphTypeContext>(0);
}

tree::TerminalNode* GQLParser::GraphTypeSourceContext::AS() {
  return getToken(GQLParser::AS, 0);
}

GQLParser::GraphTypeLikeGraphContext* GQLParser::GraphTypeSourceContext::graphTypeLikeGraph() {
  return getRuleContext<GQLParser::GraphTypeLikeGraphContext>(0);
}

GQLParser::NestedGraphTypeSpecificationContext* GQLParser::GraphTypeSourceContext::nestedGraphTypeSpecification() {
  return getRuleContext<GQLParser::NestedGraphTypeSpecificationContext>(0);
}


size_t GQLParser::GraphTypeSourceContext::getRuleIndex() const {
  return GQLParser::RuleGraphTypeSource;
}


GQLParser::GraphTypeSourceContext* GQLParser::graphTypeSource() {
  GraphTypeSourceContext *_localctx = _tracker.createInstance<GraphTypeSourceContext>(_ctx, getState());
  enterRule(_localctx, 122, GQLParser::RuleGraphTypeSource);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1565);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1557);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::AS) {
        setState(1556);
        match(GQLParser::AS);
      }
      setState(1559);
      copyOfGraphType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1560);
      graphTypeLikeGraph();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1562);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::AS) {
        setState(1561);
        match(GQLParser::AS);
      }
      setState(1564);
      nestedGraphTypeSpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CopyOfGraphTypeContext ------------------------------------------------------------------

GQLParser::CopyOfGraphTypeContext::CopyOfGraphTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CopyOfGraphTypeContext::COPY() {
  return getToken(GQLParser::COPY, 0);
}

tree::TerminalNode* GQLParser::CopyOfGraphTypeContext::OF() {
  return getToken(GQLParser::OF, 0);
}

GQLParser::GraphTypeReferenceContext* GQLParser::CopyOfGraphTypeContext::graphTypeReference() {
  return getRuleContext<GQLParser::GraphTypeReferenceContext>(0);
}


size_t GQLParser::CopyOfGraphTypeContext::getRuleIndex() const {
  return GQLParser::RuleCopyOfGraphType;
}


GQLParser::CopyOfGraphTypeContext* GQLParser::copyOfGraphType() {
  CopyOfGraphTypeContext *_localctx = _tracker.createInstance<CopyOfGraphTypeContext>(_ctx, getState());
  enterRule(_localctx, 124, GQLParser::RuleCopyOfGraphType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1567);
    match(GQLParser::COPY);
    setState(1568);
    match(GQLParser::OF);
    setState(1569);
    graphTypeReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DropGraphTypeStatementContext ------------------------------------------------------------------

GQLParser::DropGraphTypeStatementContext::DropGraphTypeStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DropGraphTypeStatementContext::DROP() {
  return getToken(GQLParser::DROP, 0);
}

tree::TerminalNode* GQLParser::DropGraphTypeStatementContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

tree::TerminalNode* GQLParser::DropGraphTypeStatementContext::TYPE() {
  return getToken(GQLParser::TYPE, 0);
}

GQLParser::CatalogGraphTypeParentAndNameContext* GQLParser::DropGraphTypeStatementContext::catalogGraphTypeParentAndName() {
  return getRuleContext<GQLParser::CatalogGraphTypeParentAndNameContext>(0);
}

tree::TerminalNode* GQLParser::DropGraphTypeStatementContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

tree::TerminalNode* GQLParser::DropGraphTypeStatementContext::IF() {
  return getToken(GQLParser::IF, 0);
}

tree::TerminalNode* GQLParser::DropGraphTypeStatementContext::EXISTS() {
  return getToken(GQLParser::EXISTS, 0);
}


size_t GQLParser::DropGraphTypeStatementContext::getRuleIndex() const {
  return GQLParser::RuleDropGraphTypeStatement;
}


GQLParser::DropGraphTypeStatementContext* GQLParser::dropGraphTypeStatement() {
  DropGraphTypeStatementContext *_localctx = _tracker.createInstance<DropGraphTypeStatementContext>(_ctx, getState());
  enterRule(_localctx, 126, GQLParser::RuleDropGraphTypeStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1571);
    match(GQLParser::DROP);
    setState(1573);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::PROPERTY) {
      setState(1572);
      match(GQLParser::PROPERTY);
    }
    setState(1575);
    match(GQLParser::GRAPH);
    setState(1576);
    match(GQLParser::TYPE);
    setState(1579);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::IF) {
      setState(1577);
      match(GQLParser::IF);
      setState(1578);
      match(GQLParser::EXISTS);
    }
    setState(1581);
    catalogGraphTypeParentAndName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallCatalogModifyingProcedureStatementContext ------------------------------------------------------------------

GQLParser::CallCatalogModifyingProcedureStatementContext::CallCatalogModifyingProcedureStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CallProcedureStatementContext* GQLParser::CallCatalogModifyingProcedureStatementContext::callProcedureStatement() {
  return getRuleContext<GQLParser::CallProcedureStatementContext>(0);
}


size_t GQLParser::CallCatalogModifyingProcedureStatementContext::getRuleIndex() const {
  return GQLParser::RuleCallCatalogModifyingProcedureStatement;
}


GQLParser::CallCatalogModifyingProcedureStatementContext* GQLParser::callCatalogModifyingProcedureStatement() {
  CallCatalogModifyingProcedureStatementContext *_localctx = _tracker.createInstance<CallCatalogModifyingProcedureStatementContext>(_ctx, getState());
  enterRule(_localctx, 128, GQLParser::RuleCallCatalogModifyingProcedureStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1583);
    callProcedureStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinearDataModifyingStatementContext ------------------------------------------------------------------

GQLParser::LinearDataModifyingStatementContext::LinearDataModifyingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FocusedLinearDataModifyingStatementContext* GQLParser::LinearDataModifyingStatementContext::focusedLinearDataModifyingStatement() {
  return getRuleContext<GQLParser::FocusedLinearDataModifyingStatementContext>(0);
}

GQLParser::AmbientLinearDataModifyingStatementContext* GQLParser::LinearDataModifyingStatementContext::ambientLinearDataModifyingStatement() {
  return getRuleContext<GQLParser::AmbientLinearDataModifyingStatementContext>(0);
}


size_t GQLParser::LinearDataModifyingStatementContext::getRuleIndex() const {
  return GQLParser::RuleLinearDataModifyingStatement;
}


GQLParser::LinearDataModifyingStatementContext* GQLParser::linearDataModifyingStatement() {
  LinearDataModifyingStatementContext *_localctx = _tracker.createInstance<LinearDataModifyingStatementContext>(_ctx, getState());
  enterRule(_localctx, 130, GQLParser::RuleLinearDataModifyingStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1587);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::USE: {
        enterOuterAlt(_localctx, 1);
        setState(1585);
        focusedLinearDataModifyingStatement();
        break;
      }

      case GQLParser::CALL:
      case GQLParser::DELETE:
      case GQLParser::DETACH:
      case GQLParser::FILTER:
      case GQLParser::FOR:
      case GQLParser::INSERT:
      case GQLParser::LET:
      case GQLParser::LIMIT:
      case GQLParser::MATCH:
      case GQLParser::NODETACH:
      case GQLParser::OFFSET:
      case GQLParser::OPTIONAL:
      case GQLParser::ORDER:
      case GQLParser::REMOVE:
      case GQLParser::SET:
      case GQLParser::SKIP_RESERVED_WORD:
      case GQLParser::LEFT_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1586);
        ambientLinearDataModifyingStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FocusedLinearDataModifyingStatementContext ------------------------------------------------------------------

GQLParser::FocusedLinearDataModifyingStatementContext::FocusedLinearDataModifyingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FocusedLinearDataModifyingStatementBodyContext* GQLParser::FocusedLinearDataModifyingStatementContext::focusedLinearDataModifyingStatementBody() {
  return getRuleContext<GQLParser::FocusedLinearDataModifyingStatementBodyContext>(0);
}

GQLParser::FocusedNestedDataModifyingProcedureSpecificationContext* GQLParser::FocusedLinearDataModifyingStatementContext::focusedNestedDataModifyingProcedureSpecification() {
  return getRuleContext<GQLParser::FocusedNestedDataModifyingProcedureSpecificationContext>(0);
}


size_t GQLParser::FocusedLinearDataModifyingStatementContext::getRuleIndex() const {
  return GQLParser::RuleFocusedLinearDataModifyingStatement;
}


GQLParser::FocusedLinearDataModifyingStatementContext* GQLParser::focusedLinearDataModifyingStatement() {
  FocusedLinearDataModifyingStatementContext *_localctx = _tracker.createInstance<FocusedLinearDataModifyingStatementContext>(_ctx, getState());
  enterRule(_localctx, 132, GQLParser::RuleFocusedLinearDataModifyingStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1591);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1589);
      focusedLinearDataModifyingStatementBody();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1590);
      focusedNestedDataModifyingProcedureSpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FocusedLinearDataModifyingStatementBodyContext ------------------------------------------------------------------

GQLParser::FocusedLinearDataModifyingStatementBodyContext::FocusedLinearDataModifyingStatementBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UseGraphClauseContext* GQLParser::FocusedLinearDataModifyingStatementBodyContext::useGraphClause() {
  return getRuleContext<GQLParser::UseGraphClauseContext>(0);
}

GQLParser::SimpleLinearDataAccessingStatementContext* GQLParser::FocusedLinearDataModifyingStatementBodyContext::simpleLinearDataAccessingStatement() {
  return getRuleContext<GQLParser::SimpleLinearDataAccessingStatementContext>(0);
}

GQLParser::PrimitiveResultStatementContext* GQLParser::FocusedLinearDataModifyingStatementBodyContext::primitiveResultStatement() {
  return getRuleContext<GQLParser::PrimitiveResultStatementContext>(0);
}


size_t GQLParser::FocusedLinearDataModifyingStatementBodyContext::getRuleIndex() const {
  return GQLParser::RuleFocusedLinearDataModifyingStatementBody;
}


GQLParser::FocusedLinearDataModifyingStatementBodyContext* GQLParser::focusedLinearDataModifyingStatementBody() {
  FocusedLinearDataModifyingStatementBodyContext *_localctx = _tracker.createInstance<FocusedLinearDataModifyingStatementBodyContext>(_ctx, getState());
  enterRule(_localctx, 134, GQLParser::RuleFocusedLinearDataModifyingStatementBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1593);
    useGraphClause();
    setState(1594);
    simpleLinearDataAccessingStatement();
    setState(1596);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::FINISH || _la == GQLParser::RETURN) {
      setState(1595);
      primitiveResultStatement();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FocusedNestedDataModifyingProcedureSpecificationContext ------------------------------------------------------------------

GQLParser::FocusedNestedDataModifyingProcedureSpecificationContext::FocusedNestedDataModifyingProcedureSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UseGraphClauseContext* GQLParser::FocusedNestedDataModifyingProcedureSpecificationContext::useGraphClause() {
  return getRuleContext<GQLParser::UseGraphClauseContext>(0);
}

GQLParser::NestedDataModifyingProcedureSpecificationContext* GQLParser::FocusedNestedDataModifyingProcedureSpecificationContext::nestedDataModifyingProcedureSpecification() {
  return getRuleContext<GQLParser::NestedDataModifyingProcedureSpecificationContext>(0);
}


size_t GQLParser::FocusedNestedDataModifyingProcedureSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleFocusedNestedDataModifyingProcedureSpecification;
}


GQLParser::FocusedNestedDataModifyingProcedureSpecificationContext* GQLParser::focusedNestedDataModifyingProcedureSpecification() {
  FocusedNestedDataModifyingProcedureSpecificationContext *_localctx = _tracker.createInstance<FocusedNestedDataModifyingProcedureSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 136, GQLParser::RuleFocusedNestedDataModifyingProcedureSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1598);
    useGraphClause();
    setState(1599);
    nestedDataModifyingProcedureSpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AmbientLinearDataModifyingStatementContext ------------------------------------------------------------------

GQLParser::AmbientLinearDataModifyingStatementContext::AmbientLinearDataModifyingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::AmbientLinearDataModifyingStatementBodyContext* GQLParser::AmbientLinearDataModifyingStatementContext::ambientLinearDataModifyingStatementBody() {
  return getRuleContext<GQLParser::AmbientLinearDataModifyingStatementBodyContext>(0);
}

GQLParser::NestedDataModifyingProcedureSpecificationContext* GQLParser::AmbientLinearDataModifyingStatementContext::nestedDataModifyingProcedureSpecification() {
  return getRuleContext<GQLParser::NestedDataModifyingProcedureSpecificationContext>(0);
}


size_t GQLParser::AmbientLinearDataModifyingStatementContext::getRuleIndex() const {
  return GQLParser::RuleAmbientLinearDataModifyingStatement;
}


GQLParser::AmbientLinearDataModifyingStatementContext* GQLParser::ambientLinearDataModifyingStatement() {
  AmbientLinearDataModifyingStatementContext *_localctx = _tracker.createInstance<AmbientLinearDataModifyingStatementContext>(_ctx, getState());
  enterRule(_localctx, 138, GQLParser::RuleAmbientLinearDataModifyingStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1603);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::CALL:
      case GQLParser::DELETE:
      case GQLParser::DETACH:
      case GQLParser::FILTER:
      case GQLParser::FOR:
      case GQLParser::INSERT:
      case GQLParser::LET:
      case GQLParser::LIMIT:
      case GQLParser::MATCH:
      case GQLParser::NODETACH:
      case GQLParser::OFFSET:
      case GQLParser::OPTIONAL:
      case GQLParser::ORDER:
      case GQLParser::REMOVE:
      case GQLParser::SET:
      case GQLParser::SKIP_RESERVED_WORD: {
        enterOuterAlt(_localctx, 1);
        setState(1601);
        ambientLinearDataModifyingStatementBody();
        break;
      }

      case GQLParser::LEFT_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1602);
        nestedDataModifyingProcedureSpecification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AmbientLinearDataModifyingStatementBodyContext ------------------------------------------------------------------

GQLParser::AmbientLinearDataModifyingStatementBodyContext::AmbientLinearDataModifyingStatementBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimpleLinearDataAccessingStatementContext* GQLParser::AmbientLinearDataModifyingStatementBodyContext::simpleLinearDataAccessingStatement() {
  return getRuleContext<GQLParser::SimpleLinearDataAccessingStatementContext>(0);
}

GQLParser::PrimitiveResultStatementContext* GQLParser::AmbientLinearDataModifyingStatementBodyContext::primitiveResultStatement() {
  return getRuleContext<GQLParser::PrimitiveResultStatementContext>(0);
}


size_t GQLParser::AmbientLinearDataModifyingStatementBodyContext::getRuleIndex() const {
  return GQLParser::RuleAmbientLinearDataModifyingStatementBody;
}


GQLParser::AmbientLinearDataModifyingStatementBodyContext* GQLParser::ambientLinearDataModifyingStatementBody() {
  AmbientLinearDataModifyingStatementBodyContext *_localctx = _tracker.createInstance<AmbientLinearDataModifyingStatementBodyContext>(_ctx, getState());
  enterRule(_localctx, 140, GQLParser::RuleAmbientLinearDataModifyingStatementBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1605);
    simpleLinearDataAccessingStatement();
    setState(1607);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::FINISH || _la == GQLParser::RETURN) {
      setState(1606);
      primitiveResultStatement();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleLinearDataAccessingStatementContext ------------------------------------------------------------------

GQLParser::SimpleLinearDataAccessingStatementContext::SimpleLinearDataAccessingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SimpleDataAccessingStatementContext *> GQLParser::SimpleLinearDataAccessingStatementContext::simpleDataAccessingStatement() {
  return getRuleContexts<GQLParser::SimpleDataAccessingStatementContext>();
}

GQLParser::SimpleDataAccessingStatementContext* GQLParser::SimpleLinearDataAccessingStatementContext::simpleDataAccessingStatement(size_t i) {
  return getRuleContext<GQLParser::SimpleDataAccessingStatementContext>(i);
}


size_t GQLParser::SimpleLinearDataAccessingStatementContext::getRuleIndex() const {
  return GQLParser::RuleSimpleLinearDataAccessingStatement;
}


GQLParser::SimpleLinearDataAccessingStatementContext* GQLParser::simpleLinearDataAccessingStatement() {
  SimpleLinearDataAccessingStatementContext *_localctx = _tracker.createInstance<SimpleLinearDataAccessingStatementContext>(_ctx, getState());
  enterRule(_localctx, 142, GQLParser::RuleSimpleLinearDataAccessingStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1610); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1609);
      simpleDataAccessingStatement();
      setState(1612); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GQLParser::CALL || ((((_la - 76) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 76)) & 90072009744089097) != 0) || ((((_la - 143) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 143)) & 4644354296316033) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleDataAccessingStatementContext ------------------------------------------------------------------

GQLParser::SimpleDataAccessingStatementContext::SimpleDataAccessingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimpleQueryStatementContext* GQLParser::SimpleDataAccessingStatementContext::simpleQueryStatement() {
  return getRuleContext<GQLParser::SimpleQueryStatementContext>(0);
}

GQLParser::SimpleDataModifyingStatementContext* GQLParser::SimpleDataAccessingStatementContext::simpleDataModifyingStatement() {
  return getRuleContext<GQLParser::SimpleDataModifyingStatementContext>(0);
}


size_t GQLParser::SimpleDataAccessingStatementContext::getRuleIndex() const {
  return GQLParser::RuleSimpleDataAccessingStatement;
}


GQLParser::SimpleDataAccessingStatementContext* GQLParser::simpleDataAccessingStatement() {
  SimpleDataAccessingStatementContext *_localctx = _tracker.createInstance<SimpleDataAccessingStatementContext>(_ctx, getState());
  enterRule(_localctx, 144, GQLParser::RuleSimpleDataAccessingStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1616);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1614);
      simpleQueryStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1615);
      simpleDataModifyingStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleDataModifyingStatementContext ------------------------------------------------------------------

GQLParser::SimpleDataModifyingStatementContext::SimpleDataModifyingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PrimitiveDataModifyingStatementContext* GQLParser::SimpleDataModifyingStatementContext::primitiveDataModifyingStatement() {
  return getRuleContext<GQLParser::PrimitiveDataModifyingStatementContext>(0);
}

GQLParser::CallDataModifyingProcedureStatementContext* GQLParser::SimpleDataModifyingStatementContext::callDataModifyingProcedureStatement() {
  return getRuleContext<GQLParser::CallDataModifyingProcedureStatementContext>(0);
}


size_t GQLParser::SimpleDataModifyingStatementContext::getRuleIndex() const {
  return GQLParser::RuleSimpleDataModifyingStatement;
}


GQLParser::SimpleDataModifyingStatementContext* GQLParser::simpleDataModifyingStatement() {
  SimpleDataModifyingStatementContext *_localctx = _tracker.createInstance<SimpleDataModifyingStatementContext>(_ctx, getState());
  enterRule(_localctx, 146, GQLParser::RuleSimpleDataModifyingStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1620);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DELETE:
      case GQLParser::DETACH:
      case GQLParser::INSERT:
      case GQLParser::NODETACH:
      case GQLParser::REMOVE:
      case GQLParser::SET: {
        enterOuterAlt(_localctx, 1);
        setState(1618);
        primitiveDataModifyingStatement();
        break;
      }

      case GQLParser::CALL:
      case GQLParser::OPTIONAL: {
        enterOuterAlt(_localctx, 2);
        setState(1619);
        callDataModifyingProcedureStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimitiveDataModifyingStatementContext ------------------------------------------------------------------

GQLParser::PrimitiveDataModifyingStatementContext::PrimitiveDataModifyingStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::InsertStatementContext* GQLParser::PrimitiveDataModifyingStatementContext::insertStatement() {
  return getRuleContext<GQLParser::InsertStatementContext>(0);
}

GQLParser::SetStatementContext* GQLParser::PrimitiveDataModifyingStatementContext::setStatement() {
  return getRuleContext<GQLParser::SetStatementContext>(0);
}

GQLParser::RemoveStatementContext* GQLParser::PrimitiveDataModifyingStatementContext::removeStatement() {
  return getRuleContext<GQLParser::RemoveStatementContext>(0);
}

GQLParser::DeleteStatementContext* GQLParser::PrimitiveDataModifyingStatementContext::deleteStatement() {
  return getRuleContext<GQLParser::DeleteStatementContext>(0);
}


size_t GQLParser::PrimitiveDataModifyingStatementContext::getRuleIndex() const {
  return GQLParser::RulePrimitiveDataModifyingStatement;
}


GQLParser::PrimitiveDataModifyingStatementContext* GQLParser::primitiveDataModifyingStatement() {
  PrimitiveDataModifyingStatementContext *_localctx = _tracker.createInstance<PrimitiveDataModifyingStatementContext>(_ctx, getState());
  enterRule(_localctx, 148, GQLParser::RulePrimitiveDataModifyingStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1626);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::INSERT: {
        enterOuterAlt(_localctx, 1);
        setState(1622);
        insertStatement();
        break;
      }

      case GQLParser::SET: {
        enterOuterAlt(_localctx, 2);
        setState(1623);
        setStatement();
        break;
      }

      case GQLParser::REMOVE: {
        enterOuterAlt(_localctx, 3);
        setState(1624);
        removeStatement();
        break;
      }

      case GQLParser::DELETE:
      case GQLParser::DETACH:
      case GQLParser::NODETACH: {
        enterOuterAlt(_localctx, 4);
        setState(1625);
        deleteStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertStatementContext ------------------------------------------------------------------

GQLParser::InsertStatementContext::InsertStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::InsertStatementContext::INSERT() {
  return getToken(GQLParser::INSERT, 0);
}

GQLParser::InsertGraphPatternContext* GQLParser::InsertStatementContext::insertGraphPattern() {
  return getRuleContext<GQLParser::InsertGraphPatternContext>(0);
}


size_t GQLParser::InsertStatementContext::getRuleIndex() const {
  return GQLParser::RuleInsertStatement;
}


GQLParser::InsertStatementContext* GQLParser::insertStatement() {
  InsertStatementContext *_localctx = _tracker.createInstance<InsertStatementContext>(_ctx, getState());
  enterRule(_localctx, 150, GQLParser::RuleInsertStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1628);
    match(GQLParser::INSERT);
    setState(1629);
    insertGraphPattern();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetStatementContext ------------------------------------------------------------------

GQLParser::SetStatementContext::SetStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SetStatementContext::SET() {
  return getToken(GQLParser::SET, 0);
}

GQLParser::SetItemListContext* GQLParser::SetStatementContext::setItemList() {
  return getRuleContext<GQLParser::SetItemListContext>(0);
}


size_t GQLParser::SetStatementContext::getRuleIndex() const {
  return GQLParser::RuleSetStatement;
}


GQLParser::SetStatementContext* GQLParser::setStatement() {
  SetStatementContext *_localctx = _tracker.createInstance<SetStatementContext>(_ctx, getState());
  enterRule(_localctx, 152, GQLParser::RuleSetStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1631);
    match(GQLParser::SET);
    setState(1632);
    setItemList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetItemListContext ------------------------------------------------------------------

GQLParser::SetItemListContext::SetItemListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SetItemContext *> GQLParser::SetItemListContext::setItem() {
  return getRuleContexts<GQLParser::SetItemContext>();
}

GQLParser::SetItemContext* GQLParser::SetItemListContext::setItem(size_t i) {
  return getRuleContext<GQLParser::SetItemContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::SetItemListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::SetItemListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::SetItemListContext::getRuleIndex() const {
  return GQLParser::RuleSetItemList;
}


GQLParser::SetItemListContext* GQLParser::setItemList() {
  SetItemListContext *_localctx = _tracker.createInstance<SetItemListContext>(_ctx, getState());
  enterRule(_localctx, 154, GQLParser::RuleSetItemList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1634);
    setItem();
    setState(1639);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(1635);
      match(GQLParser::COMMA);
      setState(1636);
      setItem();
      setState(1641);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetItemContext ------------------------------------------------------------------

GQLParser::SetItemContext::SetItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SetPropertyItemContext* GQLParser::SetItemContext::setPropertyItem() {
  return getRuleContext<GQLParser::SetPropertyItemContext>(0);
}

GQLParser::SetAllPropertiesItemContext* GQLParser::SetItemContext::setAllPropertiesItem() {
  return getRuleContext<GQLParser::SetAllPropertiesItemContext>(0);
}

GQLParser::SetLabelItemContext* GQLParser::SetItemContext::setLabelItem() {
  return getRuleContext<GQLParser::SetLabelItemContext>(0);
}


size_t GQLParser::SetItemContext::getRuleIndex() const {
  return GQLParser::RuleSetItem;
}


GQLParser::SetItemContext* GQLParser::setItem() {
  SetItemContext *_localctx = _tracker.createInstance<SetItemContext>(_ctx, getState());
  enterRule(_localctx, 156, GQLParser::RuleSetItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1645);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1642);
      setPropertyItem();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1643);
      setAllPropertiesItem();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1644);
      setLabelItem();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetPropertyItemContext ------------------------------------------------------------------

GQLParser::SetPropertyItemContext::SetPropertyItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableReferenceContext* GQLParser::SetPropertyItemContext::bindingVariableReference() {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(0);
}

tree::TerminalNode* GQLParser::SetPropertyItemContext::PERIOD() {
  return getToken(GQLParser::PERIOD, 0);
}

GQLParser::PropertyNameContext* GQLParser::SetPropertyItemContext::propertyName() {
  return getRuleContext<GQLParser::PropertyNameContext>(0);
}

tree::TerminalNode* GQLParser::SetPropertyItemContext::EQUALS_OPERATOR() {
  return getToken(GQLParser::EQUALS_OPERATOR, 0);
}

GQLParser::ValueExpressionContext* GQLParser::SetPropertyItemContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::SetPropertyItemContext::getRuleIndex() const {
  return GQLParser::RuleSetPropertyItem;
}


GQLParser::SetPropertyItemContext* GQLParser::setPropertyItem() {
  SetPropertyItemContext *_localctx = _tracker.createInstance<SetPropertyItemContext>(_ctx, getState());
  enterRule(_localctx, 158, GQLParser::RuleSetPropertyItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1647);
    bindingVariableReference();
    setState(1648);
    match(GQLParser::PERIOD);
    setState(1649);
    propertyName();
    setState(1650);
    match(GQLParser::EQUALS_OPERATOR);
    setState(1651);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetAllPropertiesItemContext ------------------------------------------------------------------

GQLParser::SetAllPropertiesItemContext::SetAllPropertiesItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableReferenceContext* GQLParser::SetAllPropertiesItemContext::bindingVariableReference() {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(0);
}

tree::TerminalNode* GQLParser::SetAllPropertiesItemContext::EQUALS_OPERATOR() {
  return getToken(GQLParser::EQUALS_OPERATOR, 0);
}

tree::TerminalNode* GQLParser::SetAllPropertiesItemContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

tree::TerminalNode* GQLParser::SetAllPropertiesItemContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}

GQLParser::PropertyKeyValuePairListContext* GQLParser::SetAllPropertiesItemContext::propertyKeyValuePairList() {
  return getRuleContext<GQLParser::PropertyKeyValuePairListContext>(0);
}


size_t GQLParser::SetAllPropertiesItemContext::getRuleIndex() const {
  return GQLParser::RuleSetAllPropertiesItem;
}


GQLParser::SetAllPropertiesItemContext* GQLParser::setAllPropertiesItem() {
  SetAllPropertiesItemContext *_localctx = _tracker.createInstance<SetAllPropertiesItemContext>(_ctx, getState());
  enterRule(_localctx, 160, GQLParser::RuleSetAllPropertiesItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1653);
    bindingVariableReference();
    setState(1654);
    match(GQLParser::EQUALS_OPERATOR);
    setState(1655);
    match(GQLParser::LEFT_BRACE);
    setState(1657);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE

    || _la == GQLParser::ACCENT_QUOTED_CHARACTER_SEQUENCE || ((((_la - 277) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 277)) & 281474976710655) != 0)) {
      setState(1656);
      propertyKeyValuePairList();
    }
    setState(1659);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetLabelItemContext ------------------------------------------------------------------

GQLParser::SetLabelItemContext::SetLabelItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableReferenceContext* GQLParser::SetLabelItemContext::bindingVariableReference() {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(0);
}

GQLParser::IsOrColonContext* GQLParser::SetLabelItemContext::isOrColon() {
  return getRuleContext<GQLParser::IsOrColonContext>(0);
}

GQLParser::LabelNameContext* GQLParser::SetLabelItemContext::labelName() {
  return getRuleContext<GQLParser::LabelNameContext>(0);
}


size_t GQLParser::SetLabelItemContext::getRuleIndex() const {
  return GQLParser::RuleSetLabelItem;
}


GQLParser::SetLabelItemContext* GQLParser::setLabelItem() {
  SetLabelItemContext *_localctx = _tracker.createInstance<SetLabelItemContext>(_ctx, getState());
  enterRule(_localctx, 162, GQLParser::RuleSetLabelItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1661);
    bindingVariableReference();
    setState(1662);
    isOrColon();
    setState(1663);
    labelName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RemoveStatementContext ------------------------------------------------------------------

GQLParser::RemoveStatementContext::RemoveStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::RemoveStatementContext::REMOVE() {
  return getToken(GQLParser::REMOVE, 0);
}

GQLParser::RemoveItemListContext* GQLParser::RemoveStatementContext::removeItemList() {
  return getRuleContext<GQLParser::RemoveItemListContext>(0);
}


size_t GQLParser::RemoveStatementContext::getRuleIndex() const {
  return GQLParser::RuleRemoveStatement;
}


GQLParser::RemoveStatementContext* GQLParser::removeStatement() {
  RemoveStatementContext *_localctx = _tracker.createInstance<RemoveStatementContext>(_ctx, getState());
  enterRule(_localctx, 164, GQLParser::RuleRemoveStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1665);
    match(GQLParser::REMOVE);
    setState(1666);
    removeItemList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RemoveItemListContext ------------------------------------------------------------------

GQLParser::RemoveItemListContext::RemoveItemListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::RemoveItemContext *> GQLParser::RemoveItemListContext::removeItem() {
  return getRuleContexts<GQLParser::RemoveItemContext>();
}

GQLParser::RemoveItemContext* GQLParser::RemoveItemListContext::removeItem(size_t i) {
  return getRuleContext<GQLParser::RemoveItemContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::RemoveItemListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::RemoveItemListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::RemoveItemListContext::getRuleIndex() const {
  return GQLParser::RuleRemoveItemList;
}


GQLParser::RemoveItemListContext* GQLParser::removeItemList() {
  RemoveItemListContext *_localctx = _tracker.createInstance<RemoveItemListContext>(_ctx, getState());
  enterRule(_localctx, 166, GQLParser::RuleRemoveItemList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1668);
    removeItem();
    setState(1673);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(1669);
      match(GQLParser::COMMA);
      setState(1670);
      removeItem();
      setState(1675);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RemoveItemContext ------------------------------------------------------------------

GQLParser::RemoveItemContext::RemoveItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::RemovePropertyItemContext* GQLParser::RemoveItemContext::removePropertyItem() {
  return getRuleContext<GQLParser::RemovePropertyItemContext>(0);
}

GQLParser::RemoveLabelItemContext* GQLParser::RemoveItemContext::removeLabelItem() {
  return getRuleContext<GQLParser::RemoveLabelItemContext>(0);
}


size_t GQLParser::RemoveItemContext::getRuleIndex() const {
  return GQLParser::RuleRemoveItem;
}


GQLParser::RemoveItemContext* GQLParser::removeItem() {
  RemoveItemContext *_localctx = _tracker.createInstance<RemoveItemContext>(_ctx, getState());
  enterRule(_localctx, 168, GQLParser::RuleRemoveItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1678);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1676);
      removePropertyItem();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1677);
      removeLabelItem();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RemovePropertyItemContext ------------------------------------------------------------------

GQLParser::RemovePropertyItemContext::RemovePropertyItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableReferenceContext* GQLParser::RemovePropertyItemContext::bindingVariableReference() {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(0);
}

tree::TerminalNode* GQLParser::RemovePropertyItemContext::PERIOD() {
  return getToken(GQLParser::PERIOD, 0);
}

GQLParser::PropertyNameContext* GQLParser::RemovePropertyItemContext::propertyName() {
  return getRuleContext<GQLParser::PropertyNameContext>(0);
}


size_t GQLParser::RemovePropertyItemContext::getRuleIndex() const {
  return GQLParser::RuleRemovePropertyItem;
}


GQLParser::RemovePropertyItemContext* GQLParser::removePropertyItem() {
  RemovePropertyItemContext *_localctx = _tracker.createInstance<RemovePropertyItemContext>(_ctx, getState());
  enterRule(_localctx, 170, GQLParser::RuleRemovePropertyItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1680);
    bindingVariableReference();
    setState(1681);
    match(GQLParser::PERIOD);
    setState(1682);
    propertyName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RemoveLabelItemContext ------------------------------------------------------------------

GQLParser::RemoveLabelItemContext::RemoveLabelItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableReferenceContext* GQLParser::RemoveLabelItemContext::bindingVariableReference() {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(0);
}

GQLParser::IsOrColonContext* GQLParser::RemoveLabelItemContext::isOrColon() {
  return getRuleContext<GQLParser::IsOrColonContext>(0);
}

GQLParser::LabelNameContext* GQLParser::RemoveLabelItemContext::labelName() {
  return getRuleContext<GQLParser::LabelNameContext>(0);
}


size_t GQLParser::RemoveLabelItemContext::getRuleIndex() const {
  return GQLParser::RuleRemoveLabelItem;
}


GQLParser::RemoveLabelItemContext* GQLParser::removeLabelItem() {
  RemoveLabelItemContext *_localctx = _tracker.createInstance<RemoveLabelItemContext>(_ctx, getState());
  enterRule(_localctx, 172, GQLParser::RuleRemoveLabelItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1684);
    bindingVariableReference();
    setState(1685);
    isOrColon();
    setState(1686);
    labelName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeleteStatementContext ------------------------------------------------------------------

GQLParser::DeleteStatementContext::DeleteStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DeleteStatementContext::DELETE() {
  return getToken(GQLParser::DELETE, 0);
}

GQLParser::DeleteItemListContext* GQLParser::DeleteStatementContext::deleteItemList() {
  return getRuleContext<GQLParser::DeleteItemListContext>(0);
}

tree::TerminalNode* GQLParser::DeleteStatementContext::DETACH() {
  return getToken(GQLParser::DETACH, 0);
}

tree::TerminalNode* GQLParser::DeleteStatementContext::NODETACH() {
  return getToken(GQLParser::NODETACH, 0);
}


size_t GQLParser::DeleteStatementContext::getRuleIndex() const {
  return GQLParser::RuleDeleteStatement;
}


GQLParser::DeleteStatementContext* GQLParser::deleteStatement() {
  DeleteStatementContext *_localctx = _tracker.createInstance<DeleteStatementContext>(_ctx, getState());
  enterRule(_localctx, 174, GQLParser::RuleDeleteStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1689);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::DETACH || _la == GQLParser::NODETACH) {
      setState(1688);
      _la = _input->LA(1);
      if (!(_la == GQLParser::DETACH || _la == GQLParser::NODETACH)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(1691);
    match(GQLParser::DELETE);
    setState(1692);
    deleteItemList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeleteItemListContext ------------------------------------------------------------------

GQLParser::DeleteItemListContext::DeleteItemListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::DeleteItemContext *> GQLParser::DeleteItemListContext::deleteItem() {
  return getRuleContexts<GQLParser::DeleteItemContext>();
}

GQLParser::DeleteItemContext* GQLParser::DeleteItemListContext::deleteItem(size_t i) {
  return getRuleContext<GQLParser::DeleteItemContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::DeleteItemListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::DeleteItemListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::DeleteItemListContext::getRuleIndex() const {
  return GQLParser::RuleDeleteItemList;
}


GQLParser::DeleteItemListContext* GQLParser::deleteItemList() {
  DeleteItemListContext *_localctx = _tracker.createInstance<DeleteItemListContext>(_ctx, getState());
  enterRule(_localctx, 176, GQLParser::RuleDeleteItemList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1694);
    deleteItem();
    setState(1699);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(1695);
      match(GQLParser::COMMA);
      setState(1696);
      deleteItem();
      setState(1701);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeleteItemContext ------------------------------------------------------------------

GQLParser::DeleteItemContext::DeleteItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionContext* GQLParser::DeleteItemContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::DeleteItemContext::getRuleIndex() const {
  return GQLParser::RuleDeleteItem;
}


GQLParser::DeleteItemContext* GQLParser::deleteItem() {
  DeleteItemContext *_localctx = _tracker.createInstance<DeleteItemContext>(_ctx, getState());
  enterRule(_localctx, 178, GQLParser::RuleDeleteItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1702);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallDataModifyingProcedureStatementContext ------------------------------------------------------------------

GQLParser::CallDataModifyingProcedureStatementContext::CallDataModifyingProcedureStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CallProcedureStatementContext* GQLParser::CallDataModifyingProcedureStatementContext::callProcedureStatement() {
  return getRuleContext<GQLParser::CallProcedureStatementContext>(0);
}


size_t GQLParser::CallDataModifyingProcedureStatementContext::getRuleIndex() const {
  return GQLParser::RuleCallDataModifyingProcedureStatement;
}


GQLParser::CallDataModifyingProcedureStatementContext* GQLParser::callDataModifyingProcedureStatement() {
  CallDataModifyingProcedureStatementContext *_localctx = _tracker.createInstance<CallDataModifyingProcedureStatementContext>(_ctx, getState());
  enterRule(_localctx, 180, GQLParser::RuleCallDataModifyingProcedureStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1704);
    callProcedureStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompositeQueryStatementContext ------------------------------------------------------------------

GQLParser::CompositeQueryStatementContext::CompositeQueryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CompositeQueryExpressionContext* GQLParser::CompositeQueryStatementContext::compositeQueryExpression() {
  return getRuleContext<GQLParser::CompositeQueryExpressionContext>(0);
}


size_t GQLParser::CompositeQueryStatementContext::getRuleIndex() const {
  return GQLParser::RuleCompositeQueryStatement;
}


GQLParser::CompositeQueryStatementContext* GQLParser::compositeQueryStatement() {
  CompositeQueryStatementContext *_localctx = _tracker.createInstance<CompositeQueryStatementContext>(_ctx, getState());
  enterRule(_localctx, 182, GQLParser::RuleCompositeQueryStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1706);
    compositeQueryExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompositeQueryExpressionContext ------------------------------------------------------------------

GQLParser::CompositeQueryExpressionContext::CompositeQueryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CompositeQueryPrimaryContext* GQLParser::CompositeQueryExpressionContext::compositeQueryPrimary() {
  return getRuleContext<GQLParser::CompositeQueryPrimaryContext>(0);
}

GQLParser::CompositeQueryExpressionContext* GQLParser::CompositeQueryExpressionContext::compositeQueryExpression() {
  return getRuleContext<GQLParser::CompositeQueryExpressionContext>(0);
}

GQLParser::QueryConjunctionContext* GQLParser::CompositeQueryExpressionContext::queryConjunction() {
  return getRuleContext<GQLParser::QueryConjunctionContext>(0);
}


size_t GQLParser::CompositeQueryExpressionContext::getRuleIndex() const {
  return GQLParser::RuleCompositeQueryExpression;
}



GQLParser::CompositeQueryExpressionContext* GQLParser::compositeQueryExpression() {
   return compositeQueryExpression(0);
}

GQLParser::CompositeQueryExpressionContext* GQLParser::compositeQueryExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  GQLParser::CompositeQueryExpressionContext *_localctx = _tracker.createInstance<CompositeQueryExpressionContext>(_ctx, parentState);
  GQLParser::CompositeQueryExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 184;
  enterRecursionRule(_localctx, 184, GQLParser::RuleCompositeQueryExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1709);
    compositeQueryPrimary();
    _ctx->stop = _input->LT(-1);
    setState(1717);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<CompositeQueryExpressionContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleCompositeQueryExpression);
        setState(1711);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(1712);
        queryConjunction();
        setState(1713);
        compositeQueryPrimary(); 
      }
      setState(1719);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- QueryConjunctionContext ------------------------------------------------------------------

GQLParser::QueryConjunctionContext::QueryConjunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SetOperatorContext* GQLParser::QueryConjunctionContext::setOperator() {
  return getRuleContext<GQLParser::SetOperatorContext>(0);
}

tree::TerminalNode* GQLParser::QueryConjunctionContext::OTHERWISE() {
  return getToken(GQLParser::OTHERWISE, 0);
}


size_t GQLParser::QueryConjunctionContext::getRuleIndex() const {
  return GQLParser::RuleQueryConjunction;
}


GQLParser::QueryConjunctionContext* GQLParser::queryConjunction() {
  QueryConjunctionContext *_localctx = _tracker.createInstance<QueryConjunctionContext>(_ctx, getState());
  enterRule(_localctx, 186, GQLParser::RuleQueryConjunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1722);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::EXCEPT:
      case GQLParser::INTERSECT:
      case GQLParser::UNION: {
        enterOuterAlt(_localctx, 1);
        setState(1720);
        setOperator();
        break;
      }

      case GQLParser::OTHERWISE: {
        enterOuterAlt(_localctx, 2);
        setState(1721);
        match(GQLParser::OTHERWISE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetOperatorContext ------------------------------------------------------------------

GQLParser::SetOperatorContext::SetOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SetOperatorContext::UNION() {
  return getToken(GQLParser::UNION, 0);
}

GQLParser::SetQuantifierContext* GQLParser::SetOperatorContext::setQuantifier() {
  return getRuleContext<GQLParser::SetQuantifierContext>(0);
}

tree::TerminalNode* GQLParser::SetOperatorContext::EXCEPT() {
  return getToken(GQLParser::EXCEPT, 0);
}

tree::TerminalNode* GQLParser::SetOperatorContext::INTERSECT() {
  return getToken(GQLParser::INTERSECT, 0);
}


size_t GQLParser::SetOperatorContext::getRuleIndex() const {
  return GQLParser::RuleSetOperator;
}


GQLParser::SetOperatorContext* GQLParser::setOperator() {
  SetOperatorContext *_localctx = _tracker.createInstance<SetOperatorContext>(_ctx, getState());
  enterRule(_localctx, 188, GQLParser::RuleSetOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1736);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::UNION: {
        enterOuterAlt(_localctx, 1);
        setState(1724);
        match(GQLParser::UNION);
        setState(1726);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::ALL

        || _la == GQLParser::DISTINCT) {
          setState(1725);
          setQuantifier();
        }
        break;
      }

      case GQLParser::EXCEPT: {
        enterOuterAlt(_localctx, 2);
        setState(1728);
        match(GQLParser::EXCEPT);
        setState(1730);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::ALL

        || _la == GQLParser::DISTINCT) {
          setState(1729);
          setQuantifier();
        }
        break;
      }

      case GQLParser::INTERSECT: {
        enterOuterAlt(_localctx, 3);
        setState(1732);
        match(GQLParser::INTERSECT);
        setState(1734);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::ALL

        || _la == GQLParser::DISTINCT) {
          setState(1733);
          setQuantifier();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompositeQueryPrimaryContext ------------------------------------------------------------------

GQLParser::CompositeQueryPrimaryContext::CompositeQueryPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::LinearQueryStatementContext* GQLParser::CompositeQueryPrimaryContext::linearQueryStatement() {
  return getRuleContext<GQLParser::LinearQueryStatementContext>(0);
}


size_t GQLParser::CompositeQueryPrimaryContext::getRuleIndex() const {
  return GQLParser::RuleCompositeQueryPrimary;
}


GQLParser::CompositeQueryPrimaryContext* GQLParser::compositeQueryPrimary() {
  CompositeQueryPrimaryContext *_localctx = _tracker.createInstance<CompositeQueryPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 190, GQLParser::RuleCompositeQueryPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1738);
    linearQueryStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinearQueryStatementContext ------------------------------------------------------------------

GQLParser::LinearQueryStatementContext::LinearQueryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FocusedLinearQueryStatementContext* GQLParser::LinearQueryStatementContext::focusedLinearQueryStatement() {
  return getRuleContext<GQLParser::FocusedLinearQueryStatementContext>(0);
}

GQLParser::AmbientLinearQueryStatementContext* GQLParser::LinearQueryStatementContext::ambientLinearQueryStatement() {
  return getRuleContext<GQLParser::AmbientLinearQueryStatementContext>(0);
}


size_t GQLParser::LinearQueryStatementContext::getRuleIndex() const {
  return GQLParser::RuleLinearQueryStatement;
}


GQLParser::LinearQueryStatementContext* GQLParser::linearQueryStatement() {
  LinearQueryStatementContext *_localctx = _tracker.createInstance<LinearQueryStatementContext>(_ctx, getState());
  enterRule(_localctx, 192, GQLParser::RuleLinearQueryStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1742);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::SELECT:
      case GQLParser::USE: {
        enterOuterAlt(_localctx, 1);
        setState(1740);
        focusedLinearQueryStatement();
        break;
      }

      case GQLParser::CALL:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FOR:
      case GQLParser::LET:
      case GQLParser::LIMIT:
      case GQLParser::MATCH:
      case GQLParser::OFFSET:
      case GQLParser::OPTIONAL:
      case GQLParser::ORDER:
      case GQLParser::RETURN:
      case GQLParser::SKIP_RESERVED_WORD:
      case GQLParser::LEFT_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1741);
        ambientLinearQueryStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FocusedLinearQueryStatementContext ------------------------------------------------------------------

GQLParser::FocusedLinearQueryStatementContext::FocusedLinearQueryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FocusedLinearQueryAndPrimitiveResultStatementPartContext* GQLParser::FocusedLinearQueryStatementContext::focusedLinearQueryAndPrimitiveResultStatementPart() {
  return getRuleContext<GQLParser::FocusedLinearQueryAndPrimitiveResultStatementPartContext>(0);
}

std::vector<GQLParser::FocusedLinearQueryStatementPartContext *> GQLParser::FocusedLinearQueryStatementContext::focusedLinearQueryStatementPart() {
  return getRuleContexts<GQLParser::FocusedLinearQueryStatementPartContext>();
}

GQLParser::FocusedLinearQueryStatementPartContext* GQLParser::FocusedLinearQueryStatementContext::focusedLinearQueryStatementPart(size_t i) {
  return getRuleContext<GQLParser::FocusedLinearQueryStatementPartContext>(i);
}

GQLParser::FocusedPrimitiveResultStatementContext* GQLParser::FocusedLinearQueryStatementContext::focusedPrimitiveResultStatement() {
  return getRuleContext<GQLParser::FocusedPrimitiveResultStatementContext>(0);
}

GQLParser::FocusedNestedQuerySpecificationContext* GQLParser::FocusedLinearQueryStatementContext::focusedNestedQuerySpecification() {
  return getRuleContext<GQLParser::FocusedNestedQuerySpecificationContext>(0);
}

GQLParser::SelectStatementContext* GQLParser::FocusedLinearQueryStatementContext::selectStatement() {
  return getRuleContext<GQLParser::SelectStatementContext>(0);
}


size_t GQLParser::FocusedLinearQueryStatementContext::getRuleIndex() const {
  return GQLParser::RuleFocusedLinearQueryStatement;
}


GQLParser::FocusedLinearQueryStatementContext* GQLParser::focusedLinearQueryStatement() {
  FocusedLinearQueryStatementContext *_localctx = _tracker.createInstance<FocusedLinearQueryStatementContext>(_ctx, getState());
  enterRule(_localctx, 194, GQLParser::RuleFocusedLinearQueryStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1754);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1747);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1744);
          focusedLinearQueryStatementPart(); 
        }
        setState(1749);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
      }
      setState(1750);
      focusedLinearQueryAndPrimitiveResultStatementPart();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1751);
      focusedPrimitiveResultStatement();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1752);
      focusedNestedQuerySpecification();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1753);
      selectStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FocusedLinearQueryStatementPartContext ------------------------------------------------------------------

GQLParser::FocusedLinearQueryStatementPartContext::FocusedLinearQueryStatementPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UseGraphClauseContext* GQLParser::FocusedLinearQueryStatementPartContext::useGraphClause() {
  return getRuleContext<GQLParser::UseGraphClauseContext>(0);
}

GQLParser::SimpleLinearQueryStatementContext* GQLParser::FocusedLinearQueryStatementPartContext::simpleLinearQueryStatement() {
  return getRuleContext<GQLParser::SimpleLinearQueryStatementContext>(0);
}


size_t GQLParser::FocusedLinearQueryStatementPartContext::getRuleIndex() const {
  return GQLParser::RuleFocusedLinearQueryStatementPart;
}


GQLParser::FocusedLinearQueryStatementPartContext* GQLParser::focusedLinearQueryStatementPart() {
  FocusedLinearQueryStatementPartContext *_localctx = _tracker.createInstance<FocusedLinearQueryStatementPartContext>(_ctx, getState());
  enterRule(_localctx, 196, GQLParser::RuleFocusedLinearQueryStatementPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1756);
    useGraphClause();
    setState(1757);
    simpleLinearQueryStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FocusedLinearQueryAndPrimitiveResultStatementPartContext ------------------------------------------------------------------

GQLParser::FocusedLinearQueryAndPrimitiveResultStatementPartContext::FocusedLinearQueryAndPrimitiveResultStatementPartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UseGraphClauseContext* GQLParser::FocusedLinearQueryAndPrimitiveResultStatementPartContext::useGraphClause() {
  return getRuleContext<GQLParser::UseGraphClauseContext>(0);
}

GQLParser::SimpleLinearQueryStatementContext* GQLParser::FocusedLinearQueryAndPrimitiveResultStatementPartContext::simpleLinearQueryStatement() {
  return getRuleContext<GQLParser::SimpleLinearQueryStatementContext>(0);
}

GQLParser::PrimitiveResultStatementContext* GQLParser::FocusedLinearQueryAndPrimitiveResultStatementPartContext::primitiveResultStatement() {
  return getRuleContext<GQLParser::PrimitiveResultStatementContext>(0);
}


size_t GQLParser::FocusedLinearQueryAndPrimitiveResultStatementPartContext::getRuleIndex() const {
  return GQLParser::RuleFocusedLinearQueryAndPrimitiveResultStatementPart;
}


GQLParser::FocusedLinearQueryAndPrimitiveResultStatementPartContext* GQLParser::focusedLinearQueryAndPrimitiveResultStatementPart() {
  FocusedLinearQueryAndPrimitiveResultStatementPartContext *_localctx = _tracker.createInstance<FocusedLinearQueryAndPrimitiveResultStatementPartContext>(_ctx, getState());
  enterRule(_localctx, 198, GQLParser::RuleFocusedLinearQueryAndPrimitiveResultStatementPart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1759);
    useGraphClause();
    setState(1760);
    simpleLinearQueryStatement();
    setState(1761);
    primitiveResultStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FocusedPrimitiveResultStatementContext ------------------------------------------------------------------

GQLParser::FocusedPrimitiveResultStatementContext::FocusedPrimitiveResultStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UseGraphClauseContext* GQLParser::FocusedPrimitiveResultStatementContext::useGraphClause() {
  return getRuleContext<GQLParser::UseGraphClauseContext>(0);
}

GQLParser::PrimitiveResultStatementContext* GQLParser::FocusedPrimitiveResultStatementContext::primitiveResultStatement() {
  return getRuleContext<GQLParser::PrimitiveResultStatementContext>(0);
}


size_t GQLParser::FocusedPrimitiveResultStatementContext::getRuleIndex() const {
  return GQLParser::RuleFocusedPrimitiveResultStatement;
}


GQLParser::FocusedPrimitiveResultStatementContext* GQLParser::focusedPrimitiveResultStatement() {
  FocusedPrimitiveResultStatementContext *_localctx = _tracker.createInstance<FocusedPrimitiveResultStatementContext>(_ctx, getState());
  enterRule(_localctx, 200, GQLParser::RuleFocusedPrimitiveResultStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1763);
    useGraphClause();
    setState(1764);
    primitiveResultStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FocusedNestedQuerySpecificationContext ------------------------------------------------------------------

GQLParser::FocusedNestedQuerySpecificationContext::FocusedNestedQuerySpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UseGraphClauseContext* GQLParser::FocusedNestedQuerySpecificationContext::useGraphClause() {
  return getRuleContext<GQLParser::UseGraphClauseContext>(0);
}

GQLParser::NestedQuerySpecificationContext* GQLParser::FocusedNestedQuerySpecificationContext::nestedQuerySpecification() {
  return getRuleContext<GQLParser::NestedQuerySpecificationContext>(0);
}


size_t GQLParser::FocusedNestedQuerySpecificationContext::getRuleIndex() const {
  return GQLParser::RuleFocusedNestedQuerySpecification;
}


GQLParser::FocusedNestedQuerySpecificationContext* GQLParser::focusedNestedQuerySpecification() {
  FocusedNestedQuerySpecificationContext *_localctx = _tracker.createInstance<FocusedNestedQuerySpecificationContext>(_ctx, getState());
  enterRule(_localctx, 202, GQLParser::RuleFocusedNestedQuerySpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1766);
    useGraphClause();
    setState(1767);
    nestedQuerySpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AmbientLinearQueryStatementContext ------------------------------------------------------------------

GQLParser::AmbientLinearQueryStatementContext::AmbientLinearQueryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PrimitiveResultStatementContext* GQLParser::AmbientLinearQueryStatementContext::primitiveResultStatement() {
  return getRuleContext<GQLParser::PrimitiveResultStatementContext>(0);
}

GQLParser::SimpleLinearQueryStatementContext* GQLParser::AmbientLinearQueryStatementContext::simpleLinearQueryStatement() {
  return getRuleContext<GQLParser::SimpleLinearQueryStatementContext>(0);
}

GQLParser::NestedQuerySpecificationContext* GQLParser::AmbientLinearQueryStatementContext::nestedQuerySpecification() {
  return getRuleContext<GQLParser::NestedQuerySpecificationContext>(0);
}


size_t GQLParser::AmbientLinearQueryStatementContext::getRuleIndex() const {
  return GQLParser::RuleAmbientLinearQueryStatement;
}


GQLParser::AmbientLinearQueryStatementContext* GQLParser::ambientLinearQueryStatement() {
  AmbientLinearQueryStatementContext *_localctx = _tracker.createInstance<AmbientLinearQueryStatementContext>(_ctx, getState());
  enterRule(_localctx, 204, GQLParser::RuleAmbientLinearQueryStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1774);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::CALL:
      case GQLParser::FILTER:
      case GQLParser::FINISH:
      case GQLParser::FOR:
      case GQLParser::LET:
      case GQLParser::LIMIT:
      case GQLParser::MATCH:
      case GQLParser::OFFSET:
      case GQLParser::OPTIONAL:
      case GQLParser::ORDER:
      case GQLParser::RETURN:
      case GQLParser::SKIP_RESERVED_WORD: {
        enterOuterAlt(_localctx, 1);
        setState(1770);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::CALL || ((((_la - 91) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 91)) & 4506348406440449) != 0) || ((((_la - 159) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 159)) & 68719476747) != 0)) {
          setState(1769);
          simpleLinearQueryStatement();
        }
        setState(1772);
        primitiveResultStatement();
        break;
      }

      case GQLParser::LEFT_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1773);
        nestedQuerySpecification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleLinearQueryStatementContext ------------------------------------------------------------------

GQLParser::SimpleLinearQueryStatementContext::SimpleLinearQueryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SimpleQueryStatementContext *> GQLParser::SimpleLinearQueryStatementContext::simpleQueryStatement() {
  return getRuleContexts<GQLParser::SimpleQueryStatementContext>();
}

GQLParser::SimpleQueryStatementContext* GQLParser::SimpleLinearQueryStatementContext::simpleQueryStatement(size_t i) {
  return getRuleContext<GQLParser::SimpleQueryStatementContext>(i);
}


size_t GQLParser::SimpleLinearQueryStatementContext::getRuleIndex() const {
  return GQLParser::RuleSimpleLinearQueryStatement;
}


GQLParser::SimpleLinearQueryStatementContext* GQLParser::simpleLinearQueryStatement() {
  SimpleLinearQueryStatementContext *_localctx = _tracker.createInstance<SimpleLinearQueryStatementContext>(_ctx, getState());
  enterRule(_localctx, 206, GQLParser::RuleSimpleLinearQueryStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1777); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1776);
      simpleQueryStatement();
      setState(1779); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GQLParser::CALL || ((((_la - 91) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 91)) & 4506348406440449) != 0) || ((((_la - 159) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 159)) & 68719476747) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleQueryStatementContext ------------------------------------------------------------------

GQLParser::SimpleQueryStatementContext::SimpleQueryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PrimitiveQueryStatementContext* GQLParser::SimpleQueryStatementContext::primitiveQueryStatement() {
  return getRuleContext<GQLParser::PrimitiveQueryStatementContext>(0);
}

GQLParser::CallQueryStatementContext* GQLParser::SimpleQueryStatementContext::callQueryStatement() {
  return getRuleContext<GQLParser::CallQueryStatementContext>(0);
}


size_t GQLParser::SimpleQueryStatementContext::getRuleIndex() const {
  return GQLParser::RuleSimpleQueryStatement;
}


GQLParser::SimpleQueryStatementContext* GQLParser::simpleQueryStatement() {
  SimpleQueryStatementContext *_localctx = _tracker.createInstance<SimpleQueryStatementContext>(_ctx, getState());
  enterRule(_localctx, 208, GQLParser::RuleSimpleQueryStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1783);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1781);
      primitiveQueryStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1782);
      callQueryStatement();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimitiveQueryStatementContext ------------------------------------------------------------------

GQLParser::PrimitiveQueryStatementContext::PrimitiveQueryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::MatchStatementContext* GQLParser::PrimitiveQueryStatementContext::matchStatement() {
  return getRuleContext<GQLParser::MatchStatementContext>(0);
}

GQLParser::LetStatementContext* GQLParser::PrimitiveQueryStatementContext::letStatement() {
  return getRuleContext<GQLParser::LetStatementContext>(0);
}

GQLParser::ForStatementContext* GQLParser::PrimitiveQueryStatementContext::forStatement() {
  return getRuleContext<GQLParser::ForStatementContext>(0);
}

GQLParser::FilterStatementContext* GQLParser::PrimitiveQueryStatementContext::filterStatement() {
  return getRuleContext<GQLParser::FilterStatementContext>(0);
}

GQLParser::OrderByAndPageStatementContext* GQLParser::PrimitiveQueryStatementContext::orderByAndPageStatement() {
  return getRuleContext<GQLParser::OrderByAndPageStatementContext>(0);
}


size_t GQLParser::PrimitiveQueryStatementContext::getRuleIndex() const {
  return GQLParser::RulePrimitiveQueryStatement;
}


GQLParser::PrimitiveQueryStatementContext* GQLParser::primitiveQueryStatement() {
  PrimitiveQueryStatementContext *_localctx = _tracker.createInstance<PrimitiveQueryStatementContext>(_ctx, getState());
  enterRule(_localctx, 210, GQLParser::RulePrimitiveQueryStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1790);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::MATCH:
      case GQLParser::OPTIONAL: {
        enterOuterAlt(_localctx, 1);
        setState(1785);
        matchStatement();
        break;
      }

      case GQLParser::LET: {
        enterOuterAlt(_localctx, 2);
        setState(1786);
        letStatement();
        break;
      }

      case GQLParser::FOR: {
        enterOuterAlt(_localctx, 3);
        setState(1787);
        forStatement();
        break;
      }

      case GQLParser::FILTER: {
        enterOuterAlt(_localctx, 4);
        setState(1788);
        filterStatement();
        break;
      }

      case GQLParser::LIMIT:
      case GQLParser::OFFSET:
      case GQLParser::ORDER:
      case GQLParser::SKIP_RESERVED_WORD: {
        enterOuterAlt(_localctx, 5);
        setState(1789);
        orderByAndPageStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MatchStatementContext ------------------------------------------------------------------

GQLParser::MatchStatementContext::MatchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimpleMatchStatementContext* GQLParser::MatchStatementContext::simpleMatchStatement() {
  return getRuleContext<GQLParser::SimpleMatchStatementContext>(0);
}

GQLParser::OptionalMatchStatementContext* GQLParser::MatchStatementContext::optionalMatchStatement() {
  return getRuleContext<GQLParser::OptionalMatchStatementContext>(0);
}


size_t GQLParser::MatchStatementContext::getRuleIndex() const {
  return GQLParser::RuleMatchStatement;
}


GQLParser::MatchStatementContext* GQLParser::matchStatement() {
  MatchStatementContext *_localctx = _tracker.createInstance<MatchStatementContext>(_ctx, getState());
  enterRule(_localctx, 212, GQLParser::RuleMatchStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1794);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::MATCH: {
        enterOuterAlt(_localctx, 1);
        setState(1792);
        simpleMatchStatement();
        break;
      }

      case GQLParser::OPTIONAL: {
        enterOuterAlt(_localctx, 2);
        setState(1793);
        optionalMatchStatement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleMatchStatementContext ------------------------------------------------------------------

GQLParser::SimpleMatchStatementContext::SimpleMatchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimpleMatchStatementContext::MATCH() {
  return getToken(GQLParser::MATCH, 0);
}

GQLParser::GraphPatternBindingTableContext* GQLParser::SimpleMatchStatementContext::graphPatternBindingTable() {
  return getRuleContext<GQLParser::GraphPatternBindingTableContext>(0);
}


size_t GQLParser::SimpleMatchStatementContext::getRuleIndex() const {
  return GQLParser::RuleSimpleMatchStatement;
}


GQLParser::SimpleMatchStatementContext* GQLParser::simpleMatchStatement() {
  SimpleMatchStatementContext *_localctx = _tracker.createInstance<SimpleMatchStatementContext>(_ctx, getState());
  enterRule(_localctx, 214, GQLParser::RuleSimpleMatchStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1796);
    match(GQLParser::MATCH);
    setState(1797);
    graphPatternBindingTable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionalMatchStatementContext ------------------------------------------------------------------

GQLParser::OptionalMatchStatementContext::OptionalMatchStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::OptionalMatchStatementContext::OPTIONAL() {
  return getToken(GQLParser::OPTIONAL, 0);
}

GQLParser::OptionalOperandContext* GQLParser::OptionalMatchStatementContext::optionalOperand() {
  return getRuleContext<GQLParser::OptionalOperandContext>(0);
}


size_t GQLParser::OptionalMatchStatementContext::getRuleIndex() const {
  return GQLParser::RuleOptionalMatchStatement;
}


GQLParser::OptionalMatchStatementContext* GQLParser::optionalMatchStatement() {
  OptionalMatchStatementContext *_localctx = _tracker.createInstance<OptionalMatchStatementContext>(_ctx, getState());
  enterRule(_localctx, 216, GQLParser::RuleOptionalMatchStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1799);
    match(GQLParser::OPTIONAL);
    setState(1800);
    optionalOperand();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionalOperandContext ------------------------------------------------------------------

GQLParser::OptionalOperandContext::OptionalOperandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimpleMatchStatementContext* GQLParser::OptionalOperandContext::simpleMatchStatement() {
  return getRuleContext<GQLParser::SimpleMatchStatementContext>(0);
}

tree::TerminalNode* GQLParser::OptionalOperandContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

GQLParser::MatchStatementBlockContext* GQLParser::OptionalOperandContext::matchStatementBlock() {
  return getRuleContext<GQLParser::MatchStatementBlockContext>(0);
}

tree::TerminalNode* GQLParser::OptionalOperandContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}

tree::TerminalNode* GQLParser::OptionalOperandContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::OptionalOperandContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::OptionalOperandContext::getRuleIndex() const {
  return GQLParser::RuleOptionalOperand;
}


GQLParser::OptionalOperandContext* GQLParser::optionalOperand() {
  OptionalOperandContext *_localctx = _tracker.createInstance<OptionalOperandContext>(_ctx, getState());
  enterRule(_localctx, 218, GQLParser::RuleOptionalOperand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1811);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::MATCH: {
        enterOuterAlt(_localctx, 1);
        setState(1802);
        simpleMatchStatement();
        break;
      }

      case GQLParser::LEFT_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(1803);
        match(GQLParser::LEFT_BRACE);
        setState(1804);
        matchStatementBlock();
        setState(1805);
        match(GQLParser::RIGHT_BRACE);
        break;
      }

      case GQLParser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 3);
        setState(1807);
        match(GQLParser::LEFT_PAREN);
        setState(1808);
        matchStatementBlock();
        setState(1809);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MatchStatementBlockContext ------------------------------------------------------------------

GQLParser::MatchStatementBlockContext::MatchStatementBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::MatchStatementContext *> GQLParser::MatchStatementBlockContext::matchStatement() {
  return getRuleContexts<GQLParser::MatchStatementContext>();
}

GQLParser::MatchStatementContext* GQLParser::MatchStatementBlockContext::matchStatement(size_t i) {
  return getRuleContext<GQLParser::MatchStatementContext>(i);
}


size_t GQLParser::MatchStatementBlockContext::getRuleIndex() const {
  return GQLParser::RuleMatchStatementBlock;
}


GQLParser::MatchStatementBlockContext* GQLParser::matchStatementBlock() {
  MatchStatementBlockContext *_localctx = _tracker.createInstance<MatchStatementBlockContext>(_ctx, getState());
  enterRule(_localctx, 220, GQLParser::RuleMatchStatementBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1814); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1813);
      matchStatement();
      setState(1816); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GQLParser::MATCH

    || _la == GQLParser::OPTIONAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallQueryStatementContext ------------------------------------------------------------------

GQLParser::CallQueryStatementContext::CallQueryStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CallProcedureStatementContext* GQLParser::CallQueryStatementContext::callProcedureStatement() {
  return getRuleContext<GQLParser::CallProcedureStatementContext>(0);
}


size_t GQLParser::CallQueryStatementContext::getRuleIndex() const {
  return GQLParser::RuleCallQueryStatement;
}


GQLParser::CallQueryStatementContext* GQLParser::callQueryStatement() {
  CallQueryStatementContext *_localctx = _tracker.createInstance<CallQueryStatementContext>(_ctx, getState());
  enterRule(_localctx, 222, GQLParser::RuleCallQueryStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1818);
    callProcedureStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FilterStatementContext ------------------------------------------------------------------

GQLParser::FilterStatementContext::FilterStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FilterStatementContext::FILTER() {
  return getToken(GQLParser::FILTER, 0);
}

GQLParser::WhereClauseContext* GQLParser::FilterStatementContext::whereClause() {
  return getRuleContext<GQLParser::WhereClauseContext>(0);
}

GQLParser::SearchConditionContext* GQLParser::FilterStatementContext::searchCondition() {
  return getRuleContext<GQLParser::SearchConditionContext>(0);
}


size_t GQLParser::FilterStatementContext::getRuleIndex() const {
  return GQLParser::RuleFilterStatement;
}


GQLParser::FilterStatementContext* GQLParser::filterStatement() {
  FilterStatementContext *_localctx = _tracker.createInstance<FilterStatementContext>(_ctx, getState());
  enterRule(_localctx, 224, GQLParser::RuleFilterStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1820);
    match(GQLParser::FILTER);
    setState(1823);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::WHERE: {
        setState(1821);
        whereClause();
        break;
      }

      case GQLParser::BOOLEAN_LITERAL:
      case GQLParser::SINGLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::BYTE_STRING_LITERAL:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER:
      case GQLParser::UNSIGNED_HEXADECIMAL_INTEGER:
      case GQLParser::UNSIGNED_OCTAL_INTEGER:
      case GQLParser::UNSIGNED_BINARY_INTEGER:
      case GQLParser::ABS:
      case GQLParser::ACOS:
      case GQLParser::ALL_DIFFERENT:
      case GQLParser::ARRAY:
      case GQLParser::ASIN:
      case GQLParser::ATAN:
      case GQLParser::AVG:
      case GQLParser::BTRIM:
      case GQLParser::BYTE_LENGTH:
      case GQLParser::CARDINALITY:
      case GQLParser::CASE:
      case GQLParser::CAST:
      case GQLParser::CEIL:
      case GQLParser::CEILING:
      case GQLParser::CHAR_LENGTH:
      case GQLParser::CHARACTER_LENGTH:
      case GQLParser::COALESCE:
      case GQLParser::COLLECT_LIST:
      case GQLParser::COS:
      case GQLParser::COSH:
      case GQLParser::COT:
      case GQLParser::COUNT:
      case GQLParser::CURRENT_DATE:
      case GQLParser::CURRENT_TIME:
      case GQLParser::CURRENT_TIMESTAMP:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DEGREES:
      case GQLParser::DURATION:
      case GQLParser::DURATION_BETWEEN:
      case GQLParser::ELEMENT_ID:
      case GQLParser::EXISTS:
      case GQLParser::EXP:
      case GQLParser::FLOOR:
      case GQLParser::LEFT:
      case GQLParser::LET:
      case GQLParser::LIST:
      case GQLParser::LN:
      case GQLParser::LOCAL_DATETIME:
      case GQLParser::LOCAL_TIME:
      case GQLParser::LOCAL_TIMESTAMP:
      case GQLParser::LOG_KW:
      case GQLParser::LOG10:
      case GQLParser::LOWER:
      case GQLParser::LTRIM:
      case GQLParser::MAX:
      case GQLParser::MIN:
      case GQLParser::MOD:
      case GQLParser::NORMALIZE:
      case GQLParser::NOT:
      case GQLParser::NULL_KW:
      case GQLParser::NULLIF:
      case GQLParser::OCTET_LENGTH:
      case GQLParser::PATH:
      case GQLParser::PATH_LENGTH:
      case GQLParser::PERCENTILE_CONT:
      case GQLParser::PERCENTILE_DISC:
      case GQLParser::POWER:
      case GQLParser::PROPERTY_EXISTS:
      case GQLParser::RADIANS:
      case GQLParser::RECORD:
      case GQLParser::RIGHT:
      case GQLParser::RTRIM:
      case GQLParser::SAME:
      case GQLParser::SESSION_USER:
      case GQLParser::SIN:
      case GQLParser::SINH:
      case GQLParser::SIZE:
      case GQLParser::SQRT:
      case GQLParser::STDDEV_POP:
      case GQLParser::STDDEV_SAMP:
      case GQLParser::SUM:
      case GQLParser::TAN:
      case GQLParser::TANH:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::TRIM:
      case GQLParser::UPPER:
      case GQLParser::VALUE:
      case GQLParser::ZONED_DATETIME:
      case GQLParser::ZONED_TIME:
      case GQLParser::ACYCLIC:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::CONNECTING:
      case GQLParser::DESTINATION:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::EDGE:
      case GQLParser::EDGES:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENTS:
      case GQLParser::FIRST:
      case GQLParser::GRAPH:
      case GQLParser::GROUPS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODE:
      case GQLParser::NORMALIZED:
      case GQLParser::ONLY:
      case GQLParser::ORDINALITY:
      case GQLParser::PROPERTY:
      case GQLParser::READ:
      case GQLParser::RELATIONSHIP:
      case GQLParser::RELATIONSHIPS:
      case GQLParser::REPEATABLE:
      case GQLParser::SHORTEST:
      case GQLParser::SIMPLE:
      case GQLParser::SOURCE:
      case GQLParser::TABLE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRANSACTION:
      case GQLParser::TYPE:
      case GQLParser::UNDIRECTED:
      case GQLParser::VERTEX:
      case GQLParser::WALK:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::ZONE:
      case GQLParser::REGULAR_IDENTIFIER:
      case GQLParser::GENERAL_PARAMETER_REFERENCE:
      case GQLParser::LEFT_BRACE:
      case GQLParser::LEFT_BRACKET:
      case GQLParser::LEFT_PAREN:
      case GQLParser::MINUS_SIGN:
      case GQLParser::PLUS_SIGN: {
        setState(1822);
        searchCondition();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LetStatementContext ------------------------------------------------------------------

GQLParser::LetStatementContext::LetStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::LetStatementContext::LET() {
  return getToken(GQLParser::LET, 0);
}

GQLParser::LetVariableDefinitionListContext* GQLParser::LetStatementContext::letVariableDefinitionList() {
  return getRuleContext<GQLParser::LetVariableDefinitionListContext>(0);
}


size_t GQLParser::LetStatementContext::getRuleIndex() const {
  return GQLParser::RuleLetStatement;
}


GQLParser::LetStatementContext* GQLParser::letStatement() {
  LetStatementContext *_localctx = _tracker.createInstance<LetStatementContext>(_ctx, getState());
  enterRule(_localctx, 226, GQLParser::RuleLetStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1825);
    match(GQLParser::LET);
    setState(1826);
    letVariableDefinitionList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LetVariableDefinitionListContext ------------------------------------------------------------------

GQLParser::LetVariableDefinitionListContext::LetVariableDefinitionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::LetVariableDefinitionContext *> GQLParser::LetVariableDefinitionListContext::letVariableDefinition() {
  return getRuleContexts<GQLParser::LetVariableDefinitionContext>();
}

GQLParser::LetVariableDefinitionContext* GQLParser::LetVariableDefinitionListContext::letVariableDefinition(size_t i) {
  return getRuleContext<GQLParser::LetVariableDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::LetVariableDefinitionListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::LetVariableDefinitionListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::LetVariableDefinitionListContext::getRuleIndex() const {
  return GQLParser::RuleLetVariableDefinitionList;
}


GQLParser::LetVariableDefinitionListContext* GQLParser::letVariableDefinitionList() {
  LetVariableDefinitionListContext *_localctx = _tracker.createInstance<LetVariableDefinitionListContext>(_ctx, getState());
  enterRule(_localctx, 228, GQLParser::RuleLetVariableDefinitionList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1828);
    letVariableDefinition();
    setState(1833);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(1829);
      match(GQLParser::COMMA);
      setState(1830);
      letVariableDefinition();
      setState(1835);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LetVariableDefinitionContext ------------------------------------------------------------------

GQLParser::LetVariableDefinitionContext::LetVariableDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueVariableDefinitionContext* GQLParser::LetVariableDefinitionContext::valueVariableDefinition() {
  return getRuleContext<GQLParser::ValueVariableDefinitionContext>(0);
}

GQLParser::BindingVariableContext* GQLParser::LetVariableDefinitionContext::bindingVariable() {
  return getRuleContext<GQLParser::BindingVariableContext>(0);
}

tree::TerminalNode* GQLParser::LetVariableDefinitionContext::EQUALS_OPERATOR() {
  return getToken(GQLParser::EQUALS_OPERATOR, 0);
}

GQLParser::ValueExpressionContext* GQLParser::LetVariableDefinitionContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::LetVariableDefinitionContext::getRuleIndex() const {
  return GQLParser::RuleLetVariableDefinition;
}


GQLParser::LetVariableDefinitionContext* GQLParser::letVariableDefinition() {
  LetVariableDefinitionContext *_localctx = _tracker.createInstance<LetVariableDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 230, GQLParser::RuleLetVariableDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1841);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::VALUE: {
        enterOuterAlt(_localctx, 1);
        setState(1836);
        valueVariableDefinition();
        break;
      }

      case GQLParser::ACYCLIC:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::CONNECTING:
      case GQLParser::DESTINATION:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::EDGE:
      case GQLParser::EDGES:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENTS:
      case GQLParser::FIRST:
      case GQLParser::GRAPH:
      case GQLParser::GROUPS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODE:
      case GQLParser::NORMALIZED:
      case GQLParser::ONLY:
      case GQLParser::ORDINALITY:
      case GQLParser::PROPERTY:
      case GQLParser::READ:
      case GQLParser::RELATIONSHIP:
      case GQLParser::RELATIONSHIPS:
      case GQLParser::REPEATABLE:
      case GQLParser::SHORTEST:
      case GQLParser::SIMPLE:
      case GQLParser::SOURCE:
      case GQLParser::TABLE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRANSACTION:
      case GQLParser::TYPE:
      case GQLParser::UNDIRECTED:
      case GQLParser::VERTEX:
      case GQLParser::WALK:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::ZONE:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(1837);
        bindingVariable();
        setState(1838);
        match(GQLParser::EQUALS_OPERATOR);
        setState(1839);
        valueExpression(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForStatementContext ------------------------------------------------------------------

GQLParser::ForStatementContext::ForStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ForStatementContext::FOR() {
  return getToken(GQLParser::FOR, 0);
}

GQLParser::ForItemContext* GQLParser::ForStatementContext::forItem() {
  return getRuleContext<GQLParser::ForItemContext>(0);
}

GQLParser::ForOrdinalityOrOffsetContext* GQLParser::ForStatementContext::forOrdinalityOrOffset() {
  return getRuleContext<GQLParser::ForOrdinalityOrOffsetContext>(0);
}


size_t GQLParser::ForStatementContext::getRuleIndex() const {
  return GQLParser::RuleForStatement;
}


GQLParser::ForStatementContext* GQLParser::forStatement() {
  ForStatementContext *_localctx = _tracker.createInstance<ForStatementContext>(_ctx, getState());
  enterRule(_localctx, 232, GQLParser::RuleForStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1843);
    match(GQLParser::FOR);
    setState(1844);
    forItem();
    setState(1846);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::WITH) {
      setState(1845);
      forOrdinalityOrOffset();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForItemContext ------------------------------------------------------------------

GQLParser::ForItemContext::ForItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ForItemAliasContext* GQLParser::ForItemContext::forItemAlias() {
  return getRuleContext<GQLParser::ForItemAliasContext>(0);
}

GQLParser::ForItemSourceContext* GQLParser::ForItemContext::forItemSource() {
  return getRuleContext<GQLParser::ForItemSourceContext>(0);
}


size_t GQLParser::ForItemContext::getRuleIndex() const {
  return GQLParser::RuleForItem;
}


GQLParser::ForItemContext* GQLParser::forItem() {
  ForItemContext *_localctx = _tracker.createInstance<ForItemContext>(_ctx, getState());
  enterRule(_localctx, 234, GQLParser::RuleForItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1848);
    forItemAlias();
    setState(1849);
    forItemSource();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForItemAliasContext ------------------------------------------------------------------

GQLParser::ForItemAliasContext::ForItemAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableContext* GQLParser::ForItemAliasContext::bindingVariable() {
  return getRuleContext<GQLParser::BindingVariableContext>(0);
}

tree::TerminalNode* GQLParser::ForItemAliasContext::IN() {
  return getToken(GQLParser::IN, 0);
}


size_t GQLParser::ForItemAliasContext::getRuleIndex() const {
  return GQLParser::RuleForItemAlias;
}


GQLParser::ForItemAliasContext* GQLParser::forItemAlias() {
  ForItemAliasContext *_localctx = _tracker.createInstance<ForItemAliasContext>(_ctx, getState());
  enterRule(_localctx, 236, GQLParser::RuleForItemAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1851);
    bindingVariable();
    setState(1852);
    match(GQLParser::IN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForItemSourceContext ------------------------------------------------------------------

GQLParser::ForItemSourceContext::ForItemSourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionContext* GQLParser::ForItemSourceContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::ForItemSourceContext::getRuleIndex() const {
  return GQLParser::RuleForItemSource;
}


GQLParser::ForItemSourceContext* GQLParser::forItemSource() {
  ForItemSourceContext *_localctx = _tracker.createInstance<ForItemSourceContext>(_ctx, getState());
  enterRule(_localctx, 238, GQLParser::RuleForItemSource);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1854);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForOrdinalityOrOffsetContext ------------------------------------------------------------------

GQLParser::ForOrdinalityOrOffsetContext::ForOrdinalityOrOffsetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ForOrdinalityOrOffsetContext::WITH() {
  return getToken(GQLParser::WITH, 0);
}

GQLParser::BindingVariableContext* GQLParser::ForOrdinalityOrOffsetContext::bindingVariable() {
  return getRuleContext<GQLParser::BindingVariableContext>(0);
}

tree::TerminalNode* GQLParser::ForOrdinalityOrOffsetContext::ORDINALITY() {
  return getToken(GQLParser::ORDINALITY, 0);
}

tree::TerminalNode* GQLParser::ForOrdinalityOrOffsetContext::OFFSET() {
  return getToken(GQLParser::OFFSET, 0);
}


size_t GQLParser::ForOrdinalityOrOffsetContext::getRuleIndex() const {
  return GQLParser::RuleForOrdinalityOrOffset;
}


GQLParser::ForOrdinalityOrOffsetContext* GQLParser::forOrdinalityOrOffset() {
  ForOrdinalityOrOffsetContext *_localctx = _tracker.createInstance<ForOrdinalityOrOffsetContext>(_ctx, getState());
  enterRule(_localctx, 240, GQLParser::RuleForOrdinalityOrOffset);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1856);
    match(GQLParser::WITH);
    setState(1857);
    _la = _input->LA(1);
    if (!(_la == GQLParser::OFFSET || _la == GQLParser::ORDINALITY)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1858);
    bindingVariable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderByAndPageStatementContext ------------------------------------------------------------------

GQLParser::OrderByAndPageStatementContext::OrderByAndPageStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::OrderByClauseContext* GQLParser::OrderByAndPageStatementContext::orderByClause() {
  return getRuleContext<GQLParser::OrderByClauseContext>(0);
}

GQLParser::OffsetClauseContext* GQLParser::OrderByAndPageStatementContext::offsetClause() {
  return getRuleContext<GQLParser::OffsetClauseContext>(0);
}

GQLParser::LimitClauseContext* GQLParser::OrderByAndPageStatementContext::limitClause() {
  return getRuleContext<GQLParser::LimitClauseContext>(0);
}


size_t GQLParser::OrderByAndPageStatementContext::getRuleIndex() const {
  return GQLParser::RuleOrderByAndPageStatement;
}


GQLParser::OrderByAndPageStatementContext* GQLParser::orderByAndPageStatement() {
  OrderByAndPageStatementContext *_localctx = _tracker.createInstance<OrderByAndPageStatementContext>(_ctx, getState());
  enterRule(_localctx, 242, GQLParser::RuleOrderByAndPageStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1872);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ORDER: {
        enterOuterAlt(_localctx, 1);
        setState(1860);
        orderByClause();
        setState(1862);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx)) {
        case 1: {
          setState(1861);
          offsetClause();
          break;
        }

        default:
          break;
        }
        setState(1865);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx)) {
        case 1: {
          setState(1864);
          limitClause();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::OFFSET:
      case GQLParser::SKIP_RESERVED_WORD: {
        enterOuterAlt(_localctx, 2);
        setState(1867);
        offsetClause();
        setState(1869);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx)) {
        case 1: {
          setState(1868);
          limitClause();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::LIMIT: {
        enterOuterAlt(_localctx, 3);
        setState(1871);
        limitClause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimitiveResultStatementContext ------------------------------------------------------------------

GQLParser::PrimitiveResultStatementContext::PrimitiveResultStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ReturnStatementContext* GQLParser::PrimitiveResultStatementContext::returnStatement() {
  return getRuleContext<GQLParser::ReturnStatementContext>(0);
}

GQLParser::OrderByAndPageStatementContext* GQLParser::PrimitiveResultStatementContext::orderByAndPageStatement() {
  return getRuleContext<GQLParser::OrderByAndPageStatementContext>(0);
}

tree::TerminalNode* GQLParser::PrimitiveResultStatementContext::FINISH() {
  return getToken(GQLParser::FINISH, 0);
}


size_t GQLParser::PrimitiveResultStatementContext::getRuleIndex() const {
  return GQLParser::RulePrimitiveResultStatement;
}


GQLParser::PrimitiveResultStatementContext* GQLParser::primitiveResultStatement() {
  PrimitiveResultStatementContext *_localctx = _tracker.createInstance<PrimitiveResultStatementContext>(_ctx, getState());
  enterRule(_localctx, 244, GQLParser::RulePrimitiveResultStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1879);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::RETURN: {
        enterOuterAlt(_localctx, 1);
        setState(1874);
        returnStatement();
        setState(1876);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
        case 1: {
          setState(1875);
          orderByAndPageStatement();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::FINISH: {
        enterOuterAlt(_localctx, 2);
        setState(1878);
        match(GQLParser::FINISH);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStatementContext ------------------------------------------------------------------

GQLParser::ReturnStatementContext::ReturnStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ReturnStatementContext::RETURN() {
  return getToken(GQLParser::RETURN, 0);
}

GQLParser::ReturnStatementBodyContext* GQLParser::ReturnStatementContext::returnStatementBody() {
  return getRuleContext<GQLParser::ReturnStatementBodyContext>(0);
}


size_t GQLParser::ReturnStatementContext::getRuleIndex() const {
  return GQLParser::RuleReturnStatement;
}


GQLParser::ReturnStatementContext* GQLParser::returnStatement() {
  ReturnStatementContext *_localctx = _tracker.createInstance<ReturnStatementContext>(_ctx, getState());
  enterRule(_localctx, 246, GQLParser::RuleReturnStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1881);
    match(GQLParser::RETURN);
    setState(1882);
    returnStatementBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnStatementBodyContext ------------------------------------------------------------------

GQLParser::ReturnStatementBodyContext::ReturnStatementBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ReturnStatementBodyContext::ASTERISK() {
  return getToken(GQLParser::ASTERISK, 0);
}

GQLParser::ReturnItemListContext* GQLParser::ReturnStatementBodyContext::returnItemList() {
  return getRuleContext<GQLParser::ReturnItemListContext>(0);
}

GQLParser::SetQuantifierContext* GQLParser::ReturnStatementBodyContext::setQuantifier() {
  return getRuleContext<GQLParser::SetQuantifierContext>(0);
}

GQLParser::GroupByClauseContext* GQLParser::ReturnStatementBodyContext::groupByClause() {
  return getRuleContext<GQLParser::GroupByClauseContext>(0);
}


size_t GQLParser::ReturnStatementBodyContext::getRuleIndex() const {
  return GQLParser::RuleReturnStatementBody;
}


GQLParser::ReturnStatementBodyContext* GQLParser::returnStatementBody() {
  ReturnStatementBodyContext *_localctx = _tracker.createInstance<ReturnStatementBodyContext>(_ctx, getState());
  enterRule(_localctx, 248, GQLParser::RuleReturnStatementBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1885);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::ALL

    || _la == GQLParser::DISTINCT) {
      setState(1884);
      setQuantifier();
    }
    setState(1889);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ASTERISK: {
        setState(1887);
        match(GQLParser::ASTERISK);
        break;
      }

      case GQLParser::BOOLEAN_LITERAL:
      case GQLParser::SINGLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::BYTE_STRING_LITERAL:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER:
      case GQLParser::UNSIGNED_HEXADECIMAL_INTEGER:
      case GQLParser::UNSIGNED_OCTAL_INTEGER:
      case GQLParser::UNSIGNED_BINARY_INTEGER:
      case GQLParser::ABS:
      case GQLParser::ACOS:
      case GQLParser::ALL_DIFFERENT:
      case GQLParser::ARRAY:
      case GQLParser::ASIN:
      case GQLParser::ATAN:
      case GQLParser::AVG:
      case GQLParser::BTRIM:
      case GQLParser::BYTE_LENGTH:
      case GQLParser::CARDINALITY:
      case GQLParser::CASE:
      case GQLParser::CAST:
      case GQLParser::CEIL:
      case GQLParser::CEILING:
      case GQLParser::CHAR_LENGTH:
      case GQLParser::CHARACTER_LENGTH:
      case GQLParser::COALESCE:
      case GQLParser::COLLECT_LIST:
      case GQLParser::COS:
      case GQLParser::COSH:
      case GQLParser::COT:
      case GQLParser::COUNT:
      case GQLParser::CURRENT_DATE:
      case GQLParser::CURRENT_TIME:
      case GQLParser::CURRENT_TIMESTAMP:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DEGREES:
      case GQLParser::DURATION:
      case GQLParser::DURATION_BETWEEN:
      case GQLParser::ELEMENT_ID:
      case GQLParser::EXISTS:
      case GQLParser::EXP:
      case GQLParser::FLOOR:
      case GQLParser::LEFT:
      case GQLParser::LET:
      case GQLParser::LIST:
      case GQLParser::LN:
      case GQLParser::LOCAL_DATETIME:
      case GQLParser::LOCAL_TIME:
      case GQLParser::LOCAL_TIMESTAMP:
      case GQLParser::LOG_KW:
      case GQLParser::LOG10:
      case GQLParser::LOWER:
      case GQLParser::LTRIM:
      case GQLParser::MAX:
      case GQLParser::MIN:
      case GQLParser::MOD:
      case GQLParser::NORMALIZE:
      case GQLParser::NOT:
      case GQLParser::NULL_KW:
      case GQLParser::NULLIF:
      case GQLParser::OCTET_LENGTH:
      case GQLParser::PATH:
      case GQLParser::PATH_LENGTH:
      case GQLParser::PERCENTILE_CONT:
      case GQLParser::PERCENTILE_DISC:
      case GQLParser::POWER:
      case GQLParser::PROPERTY_EXISTS:
      case GQLParser::RADIANS:
      case GQLParser::RECORD:
      case GQLParser::RIGHT:
      case GQLParser::RTRIM:
      case GQLParser::SAME:
      case GQLParser::SESSION_USER:
      case GQLParser::SIN:
      case GQLParser::SINH:
      case GQLParser::SIZE:
      case GQLParser::SQRT:
      case GQLParser::STDDEV_POP:
      case GQLParser::STDDEV_SAMP:
      case GQLParser::SUM:
      case GQLParser::TAN:
      case GQLParser::TANH:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::TRIM:
      case GQLParser::UPPER:
      case GQLParser::VALUE:
      case GQLParser::ZONED_DATETIME:
      case GQLParser::ZONED_TIME:
      case GQLParser::ACYCLIC:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::CONNECTING:
      case GQLParser::DESTINATION:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::EDGE:
      case GQLParser::EDGES:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENTS:
      case GQLParser::FIRST:
      case GQLParser::GRAPH:
      case GQLParser::GROUPS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODE:
      case GQLParser::NORMALIZED:
      case GQLParser::ONLY:
      case GQLParser::ORDINALITY:
      case GQLParser::PROPERTY:
      case GQLParser::READ:
      case GQLParser::RELATIONSHIP:
      case GQLParser::RELATIONSHIPS:
      case GQLParser::REPEATABLE:
      case GQLParser::SHORTEST:
      case GQLParser::SIMPLE:
      case GQLParser::SOURCE:
      case GQLParser::TABLE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRANSACTION:
      case GQLParser::TYPE:
      case GQLParser::UNDIRECTED:
      case GQLParser::VERTEX:
      case GQLParser::WALK:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::ZONE:
      case GQLParser::REGULAR_IDENTIFIER:
      case GQLParser::GENERAL_PARAMETER_REFERENCE:
      case GQLParser::LEFT_BRACE:
      case GQLParser::LEFT_BRACKET:
      case GQLParser::LEFT_PAREN:
      case GQLParser::MINUS_SIGN:
      case GQLParser::PLUS_SIGN: {
        setState(1888);
        returnItemList();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1892);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
    case 1: {
      setState(1891);
      groupByClause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnItemListContext ------------------------------------------------------------------

GQLParser::ReturnItemListContext::ReturnItemListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::ReturnItemContext *> GQLParser::ReturnItemListContext::returnItem() {
  return getRuleContexts<GQLParser::ReturnItemContext>();
}

GQLParser::ReturnItemContext* GQLParser::ReturnItemListContext::returnItem(size_t i) {
  return getRuleContext<GQLParser::ReturnItemContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::ReturnItemListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::ReturnItemListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::ReturnItemListContext::getRuleIndex() const {
  return GQLParser::RuleReturnItemList;
}


GQLParser::ReturnItemListContext* GQLParser::returnItemList() {
  ReturnItemListContext *_localctx = _tracker.createInstance<ReturnItemListContext>(_ctx, getState());
  enterRule(_localctx, 250, GQLParser::RuleReturnItemList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1894);
    returnItem();
    setState(1899);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1895);
        match(GQLParser::COMMA);
        setState(1896);
        returnItem(); 
      }
      setState(1901);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnItemContext ------------------------------------------------------------------

GQLParser::ReturnItemContext::ReturnItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::AggregatingValueExpressionContext* GQLParser::ReturnItemContext::aggregatingValueExpression() {
  return getRuleContext<GQLParser::AggregatingValueExpressionContext>(0);
}

GQLParser::ReturnItemAliasContext* GQLParser::ReturnItemContext::returnItemAlias() {
  return getRuleContext<GQLParser::ReturnItemAliasContext>(0);
}


size_t GQLParser::ReturnItemContext::getRuleIndex() const {
  return GQLParser::RuleReturnItem;
}


GQLParser::ReturnItemContext* GQLParser::returnItem() {
  ReturnItemContext *_localctx = _tracker.createInstance<ReturnItemContext>(_ctx, getState());
  enterRule(_localctx, 252, GQLParser::RuleReturnItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1902);
    aggregatingValueExpression();
    setState(1904);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      setState(1903);
      returnItemAlias();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnItemAliasContext ------------------------------------------------------------------

GQLParser::ReturnItemAliasContext::ReturnItemAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ReturnItemAliasContext::AS() {
  return getToken(GQLParser::AS, 0);
}

GQLParser::IdentifierContext* GQLParser::ReturnItemAliasContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::ReturnItemAliasContext::getRuleIndex() const {
  return GQLParser::RuleReturnItemAlias;
}


GQLParser::ReturnItemAliasContext* GQLParser::returnItemAlias() {
  ReturnItemAliasContext *_localctx = _tracker.createInstance<ReturnItemAliasContext>(_ctx, getState());
  enterRule(_localctx, 254, GQLParser::RuleReturnItemAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1906);
    match(GQLParser::AS);
    setState(1907);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectStatementContext ------------------------------------------------------------------

GQLParser::SelectStatementContext::SelectStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SelectStatementContext::SELECT() {
  return getToken(GQLParser::SELECT, 0);
}

tree::TerminalNode* GQLParser::SelectStatementContext::ASTERISK() {
  return getToken(GQLParser::ASTERISK, 0);
}

GQLParser::SelectItemListContext* GQLParser::SelectStatementContext::selectItemList() {
  return getRuleContext<GQLParser::SelectItemListContext>(0);
}

GQLParser::SetQuantifierContext* GQLParser::SelectStatementContext::setQuantifier() {
  return getRuleContext<GQLParser::SetQuantifierContext>(0);
}

GQLParser::SelectStatementBodyContext* GQLParser::SelectStatementContext::selectStatementBody() {
  return getRuleContext<GQLParser::SelectStatementBodyContext>(0);
}

GQLParser::WhereClauseContext* GQLParser::SelectStatementContext::whereClause() {
  return getRuleContext<GQLParser::WhereClauseContext>(0);
}

GQLParser::GroupByClauseContext* GQLParser::SelectStatementContext::groupByClause() {
  return getRuleContext<GQLParser::GroupByClauseContext>(0);
}

GQLParser::HavingClauseContext* GQLParser::SelectStatementContext::havingClause() {
  return getRuleContext<GQLParser::HavingClauseContext>(0);
}

GQLParser::OrderByClauseContext* GQLParser::SelectStatementContext::orderByClause() {
  return getRuleContext<GQLParser::OrderByClauseContext>(0);
}

GQLParser::OffsetClauseContext* GQLParser::SelectStatementContext::offsetClause() {
  return getRuleContext<GQLParser::OffsetClauseContext>(0);
}

GQLParser::LimitClauseContext* GQLParser::SelectStatementContext::limitClause() {
  return getRuleContext<GQLParser::LimitClauseContext>(0);
}


size_t GQLParser::SelectStatementContext::getRuleIndex() const {
  return GQLParser::RuleSelectStatement;
}


GQLParser::SelectStatementContext* GQLParser::selectStatement() {
  SelectStatementContext *_localctx = _tracker.createInstance<SelectStatementContext>(_ctx, getState());
  enterRule(_localctx, 256, GQLParser::RuleSelectStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1909);
    match(GQLParser::SELECT);
    setState(1911);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::ALL

    || _la == GQLParser::DISTINCT) {
      setState(1910);
      setQuantifier();
    }
    setState(1915);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ASTERISK: {
        setState(1913);
        match(GQLParser::ASTERISK);
        break;
      }

      case GQLParser::BOOLEAN_LITERAL:
      case GQLParser::SINGLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::BYTE_STRING_LITERAL:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER:
      case GQLParser::UNSIGNED_HEXADECIMAL_INTEGER:
      case GQLParser::UNSIGNED_OCTAL_INTEGER:
      case GQLParser::UNSIGNED_BINARY_INTEGER:
      case GQLParser::ABS:
      case GQLParser::ACOS:
      case GQLParser::ALL_DIFFERENT:
      case GQLParser::ARRAY:
      case GQLParser::ASIN:
      case GQLParser::ATAN:
      case GQLParser::AVG:
      case GQLParser::BTRIM:
      case GQLParser::BYTE_LENGTH:
      case GQLParser::CARDINALITY:
      case GQLParser::CASE:
      case GQLParser::CAST:
      case GQLParser::CEIL:
      case GQLParser::CEILING:
      case GQLParser::CHAR_LENGTH:
      case GQLParser::CHARACTER_LENGTH:
      case GQLParser::COALESCE:
      case GQLParser::COLLECT_LIST:
      case GQLParser::COS:
      case GQLParser::COSH:
      case GQLParser::COT:
      case GQLParser::COUNT:
      case GQLParser::CURRENT_DATE:
      case GQLParser::CURRENT_TIME:
      case GQLParser::CURRENT_TIMESTAMP:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DEGREES:
      case GQLParser::DURATION:
      case GQLParser::DURATION_BETWEEN:
      case GQLParser::ELEMENT_ID:
      case GQLParser::EXISTS:
      case GQLParser::EXP:
      case GQLParser::FLOOR:
      case GQLParser::LEFT:
      case GQLParser::LET:
      case GQLParser::LIST:
      case GQLParser::LN:
      case GQLParser::LOCAL_DATETIME:
      case GQLParser::LOCAL_TIME:
      case GQLParser::LOCAL_TIMESTAMP:
      case GQLParser::LOG_KW:
      case GQLParser::LOG10:
      case GQLParser::LOWER:
      case GQLParser::LTRIM:
      case GQLParser::MAX:
      case GQLParser::MIN:
      case GQLParser::MOD:
      case GQLParser::NORMALIZE:
      case GQLParser::NOT:
      case GQLParser::NULL_KW:
      case GQLParser::NULLIF:
      case GQLParser::OCTET_LENGTH:
      case GQLParser::PATH:
      case GQLParser::PATH_LENGTH:
      case GQLParser::PERCENTILE_CONT:
      case GQLParser::PERCENTILE_DISC:
      case GQLParser::POWER:
      case GQLParser::PROPERTY_EXISTS:
      case GQLParser::RADIANS:
      case GQLParser::RECORD:
      case GQLParser::RIGHT:
      case GQLParser::RTRIM:
      case GQLParser::SAME:
      case GQLParser::SESSION_USER:
      case GQLParser::SIN:
      case GQLParser::SINH:
      case GQLParser::SIZE:
      case GQLParser::SQRT:
      case GQLParser::STDDEV_POP:
      case GQLParser::STDDEV_SAMP:
      case GQLParser::SUM:
      case GQLParser::TAN:
      case GQLParser::TANH:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::TRIM:
      case GQLParser::UPPER:
      case GQLParser::VALUE:
      case GQLParser::ZONED_DATETIME:
      case GQLParser::ZONED_TIME:
      case GQLParser::ACYCLIC:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::CONNECTING:
      case GQLParser::DESTINATION:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::EDGE:
      case GQLParser::EDGES:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENTS:
      case GQLParser::FIRST:
      case GQLParser::GRAPH:
      case GQLParser::GROUPS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODE:
      case GQLParser::NORMALIZED:
      case GQLParser::ONLY:
      case GQLParser::ORDINALITY:
      case GQLParser::PROPERTY:
      case GQLParser::READ:
      case GQLParser::RELATIONSHIP:
      case GQLParser::RELATIONSHIPS:
      case GQLParser::REPEATABLE:
      case GQLParser::SHORTEST:
      case GQLParser::SIMPLE:
      case GQLParser::SOURCE:
      case GQLParser::TABLE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRANSACTION:
      case GQLParser::TYPE:
      case GQLParser::UNDIRECTED:
      case GQLParser::VERTEX:
      case GQLParser::WALK:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::ZONE:
      case GQLParser::REGULAR_IDENTIFIER:
      case GQLParser::GENERAL_PARAMETER_REFERENCE:
      case GQLParser::LEFT_BRACE:
      case GQLParser::LEFT_BRACKET:
      case GQLParser::LEFT_PAREN:
      case GQLParser::MINUS_SIGN:
      case GQLParser::PLUS_SIGN: {
        setState(1914);
        selectItemList();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1936);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
    case 1: {
      setState(1917);
      selectStatementBody();
      setState(1919);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
      case 1: {
        setState(1918);
        whereClause();
        break;
      }

      default:
        break;
      }
      setState(1922);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
      case 1: {
        setState(1921);
        groupByClause();
        break;
      }

      default:
        break;
      }
      setState(1925);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx)) {
      case 1: {
        setState(1924);
        havingClause();
        break;
      }

      default:
        break;
      }
      setState(1928);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
      case 1: {
        setState(1927);
        orderByClause();
        break;
      }

      default:
        break;
      }
      setState(1931);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx)) {
      case 1: {
        setState(1930);
        offsetClause();
        break;
      }

      default:
        break;
      }
      setState(1934);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx)) {
      case 1: {
        setState(1933);
        limitClause();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectItemListContext ------------------------------------------------------------------

GQLParser::SelectItemListContext::SelectItemListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SelectItemContext *> GQLParser::SelectItemListContext::selectItem() {
  return getRuleContexts<GQLParser::SelectItemContext>();
}

GQLParser::SelectItemContext* GQLParser::SelectItemListContext::selectItem(size_t i) {
  return getRuleContext<GQLParser::SelectItemContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::SelectItemListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::SelectItemListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::SelectItemListContext::getRuleIndex() const {
  return GQLParser::RuleSelectItemList;
}


GQLParser::SelectItemListContext* GQLParser::selectItemList() {
  SelectItemListContext *_localctx = _tracker.createInstance<SelectItemListContext>(_ctx, getState());
  enterRule(_localctx, 258, GQLParser::RuleSelectItemList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1938);
    selectItem();
    setState(1943);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1939);
        match(GQLParser::COMMA);
        setState(1940);
        selectItem(); 
      }
      setState(1945);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 131, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectItemContext ------------------------------------------------------------------

GQLParser::SelectItemContext::SelectItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::AggregatingValueExpressionContext* GQLParser::SelectItemContext::aggregatingValueExpression() {
  return getRuleContext<GQLParser::AggregatingValueExpressionContext>(0);
}

GQLParser::SelectItemAliasContext* GQLParser::SelectItemContext::selectItemAlias() {
  return getRuleContext<GQLParser::SelectItemAliasContext>(0);
}


size_t GQLParser::SelectItemContext::getRuleIndex() const {
  return GQLParser::RuleSelectItem;
}


GQLParser::SelectItemContext* GQLParser::selectItem() {
  SelectItemContext *_localctx = _tracker.createInstance<SelectItemContext>(_ctx, getState());
  enterRule(_localctx, 260, GQLParser::RuleSelectItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1946);
    aggregatingValueExpression();
    setState(1948);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
    case 1: {
      setState(1947);
      selectItemAlias();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectItemAliasContext ------------------------------------------------------------------

GQLParser::SelectItemAliasContext::SelectItemAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SelectItemAliasContext::AS() {
  return getToken(GQLParser::AS, 0);
}

GQLParser::IdentifierContext* GQLParser::SelectItemAliasContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::SelectItemAliasContext::getRuleIndex() const {
  return GQLParser::RuleSelectItemAlias;
}


GQLParser::SelectItemAliasContext* GQLParser::selectItemAlias() {
  SelectItemAliasContext *_localctx = _tracker.createInstance<SelectItemAliasContext>(_ctx, getState());
  enterRule(_localctx, 262, GQLParser::RuleSelectItemAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1950);
    match(GQLParser::AS);
    setState(1951);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HavingClauseContext ------------------------------------------------------------------

GQLParser::HavingClauseContext::HavingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::HavingClauseContext::HAVING() {
  return getToken(GQLParser::HAVING, 0);
}

GQLParser::SearchConditionContext* GQLParser::HavingClauseContext::searchCondition() {
  return getRuleContext<GQLParser::SearchConditionContext>(0);
}


size_t GQLParser::HavingClauseContext::getRuleIndex() const {
  return GQLParser::RuleHavingClause;
}


GQLParser::HavingClauseContext* GQLParser::havingClause() {
  HavingClauseContext *_localctx = _tracker.createInstance<HavingClauseContext>(_ctx, getState());
  enterRule(_localctx, 264, GQLParser::RuleHavingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1953);
    match(GQLParser::HAVING);
    setState(1954);
    searchCondition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectStatementBodyContext ------------------------------------------------------------------

GQLParser::SelectStatementBodyContext::SelectStatementBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SelectStatementBodyContext::FROM() {
  return getToken(GQLParser::FROM, 0);
}

GQLParser::SelectGraphMatchListContext* GQLParser::SelectStatementBodyContext::selectGraphMatchList() {
  return getRuleContext<GQLParser::SelectGraphMatchListContext>(0);
}

GQLParser::SelectQuerySpecificationContext* GQLParser::SelectStatementBodyContext::selectQuerySpecification() {
  return getRuleContext<GQLParser::SelectQuerySpecificationContext>(0);
}


size_t GQLParser::SelectStatementBodyContext::getRuleIndex() const {
  return GQLParser::RuleSelectStatementBody;
}


GQLParser::SelectStatementBodyContext* GQLParser::selectStatementBody() {
  SelectStatementBodyContext *_localctx = _tracker.createInstance<SelectStatementBodyContext>(_ctx, getState());
  enterRule(_localctx, 266, GQLParser::RuleSelectStatementBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1956);
    match(GQLParser::FROM);
    setState(1959);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
    case 1: {
      setState(1957);
      selectGraphMatchList();
      break;
    }

    case 2: {
      setState(1958);
      selectQuerySpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectGraphMatchListContext ------------------------------------------------------------------

GQLParser::SelectGraphMatchListContext::SelectGraphMatchListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SelectGraphMatchContext *> GQLParser::SelectGraphMatchListContext::selectGraphMatch() {
  return getRuleContexts<GQLParser::SelectGraphMatchContext>();
}

GQLParser::SelectGraphMatchContext* GQLParser::SelectGraphMatchListContext::selectGraphMatch(size_t i) {
  return getRuleContext<GQLParser::SelectGraphMatchContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::SelectGraphMatchListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::SelectGraphMatchListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::SelectGraphMatchListContext::getRuleIndex() const {
  return GQLParser::RuleSelectGraphMatchList;
}


GQLParser::SelectGraphMatchListContext* GQLParser::selectGraphMatchList() {
  SelectGraphMatchListContext *_localctx = _tracker.createInstance<SelectGraphMatchListContext>(_ctx, getState());
  enterRule(_localctx, 268, GQLParser::RuleSelectGraphMatchList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1961);
    selectGraphMatch();
    setState(1966);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1962);
        match(GQLParser::COMMA);
        setState(1963);
        selectGraphMatch(); 
      }
      setState(1968);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectGraphMatchContext ------------------------------------------------------------------

GQLParser::SelectGraphMatchContext::SelectGraphMatchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::GraphExpressionContext* GQLParser::SelectGraphMatchContext::graphExpression() {
  return getRuleContext<GQLParser::GraphExpressionContext>(0);
}

GQLParser::MatchStatementContext* GQLParser::SelectGraphMatchContext::matchStatement() {
  return getRuleContext<GQLParser::MatchStatementContext>(0);
}


size_t GQLParser::SelectGraphMatchContext::getRuleIndex() const {
  return GQLParser::RuleSelectGraphMatch;
}


GQLParser::SelectGraphMatchContext* GQLParser::selectGraphMatch() {
  SelectGraphMatchContext *_localctx = _tracker.createInstance<SelectGraphMatchContext>(_ctx, getState());
  enterRule(_localctx, 270, GQLParser::RuleSelectGraphMatch);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1969);
    graphExpression();
    setState(1970);
    matchStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectQuerySpecificationContext ------------------------------------------------------------------

GQLParser::SelectQuerySpecificationContext::SelectQuerySpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NestedQuerySpecificationContext* GQLParser::SelectQuerySpecificationContext::nestedQuerySpecification() {
  return getRuleContext<GQLParser::NestedQuerySpecificationContext>(0);
}

GQLParser::GraphExpressionContext* GQLParser::SelectQuerySpecificationContext::graphExpression() {
  return getRuleContext<GQLParser::GraphExpressionContext>(0);
}


size_t GQLParser::SelectQuerySpecificationContext::getRuleIndex() const {
  return GQLParser::RuleSelectQuerySpecification;
}


GQLParser::SelectQuerySpecificationContext* GQLParser::selectQuerySpecification() {
  SelectQuerySpecificationContext *_localctx = _tracker.createInstance<SelectQuerySpecificationContext>(_ctx, getState());
  enterRule(_localctx, 272, GQLParser::RuleSelectQuerySpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1976);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1972);
      nestedQuerySpecification();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1973);
      graphExpression();
      setState(1974);
      nestedQuerySpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallProcedureStatementContext ------------------------------------------------------------------

GQLParser::CallProcedureStatementContext::CallProcedureStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CallProcedureStatementContext::CALL() {
  return getToken(GQLParser::CALL, 0);
}

GQLParser::ProcedureCallContext* GQLParser::CallProcedureStatementContext::procedureCall() {
  return getRuleContext<GQLParser::ProcedureCallContext>(0);
}

tree::TerminalNode* GQLParser::CallProcedureStatementContext::OPTIONAL() {
  return getToken(GQLParser::OPTIONAL, 0);
}


size_t GQLParser::CallProcedureStatementContext::getRuleIndex() const {
  return GQLParser::RuleCallProcedureStatement;
}


GQLParser::CallProcedureStatementContext* GQLParser::callProcedureStatement() {
  CallProcedureStatementContext *_localctx = _tracker.createInstance<CallProcedureStatementContext>(_ctx, getState());
  enterRule(_localctx, 274, GQLParser::RuleCallProcedureStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1979);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::OPTIONAL) {
      setState(1978);
      match(GQLParser::OPTIONAL);
    }
    setState(1981);
    match(GQLParser::CALL);
    setState(1982);
    procedureCall();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureCallContext ------------------------------------------------------------------

GQLParser::ProcedureCallContext::ProcedureCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::InlineProcedureCallContext* GQLParser::ProcedureCallContext::inlineProcedureCall() {
  return getRuleContext<GQLParser::InlineProcedureCallContext>(0);
}

GQLParser::NamedProcedureCallContext* GQLParser::ProcedureCallContext::namedProcedureCall() {
  return getRuleContext<GQLParser::NamedProcedureCallContext>(0);
}


size_t GQLParser::ProcedureCallContext::getRuleIndex() const {
  return GQLParser::RuleProcedureCall;
}


GQLParser::ProcedureCallContext* GQLParser::procedureCall() {
  ProcedureCallContext *_localctx = _tracker.createInstance<ProcedureCallContext>(_ctx, getState());
  enterRule(_localctx, 276, GQLParser::RuleProcedureCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1986);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LEFT_BRACE:
      case GQLParser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 1);
        setState(1984);
        inlineProcedureCall();
        break;
      }

      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::ACCENT_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::CURRENT_SCHEMA:
      case GQLParser::HOME_SCHEMA:
      case GQLParser::ACYCLIC:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::CONNECTING:
      case GQLParser::DESTINATION:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::EDGE:
      case GQLParser::EDGES:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENTS:
      case GQLParser::FIRST:
      case GQLParser::GRAPH:
      case GQLParser::GROUPS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODE:
      case GQLParser::NORMALIZED:
      case GQLParser::ONLY:
      case GQLParser::ORDINALITY:
      case GQLParser::PROPERTY:
      case GQLParser::READ:
      case GQLParser::RELATIONSHIP:
      case GQLParser::RELATIONSHIPS:
      case GQLParser::REPEATABLE:
      case GQLParser::SHORTEST:
      case GQLParser::SIMPLE:
      case GQLParser::SOURCE:
      case GQLParser::TABLE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRANSACTION:
      case GQLParser::TYPE:
      case GQLParser::UNDIRECTED:
      case GQLParser::VERTEX:
      case GQLParser::WALK:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::ZONE:
      case GQLParser::REGULAR_IDENTIFIER:
      case GQLParser::SUBSTITUTED_PARAMETER_REFERENCE:
      case GQLParser::DOUBLE_PERIOD:
      case GQLParser::PERIOD:
      case GQLParser::SOLIDUS: {
        enterOuterAlt(_localctx, 2);
        setState(1985);
        namedProcedureCall();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InlineProcedureCallContext ------------------------------------------------------------------

GQLParser::InlineProcedureCallContext::InlineProcedureCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NestedProcedureSpecificationContext* GQLParser::InlineProcedureCallContext::nestedProcedureSpecification() {
  return getRuleContext<GQLParser::NestedProcedureSpecificationContext>(0);
}

GQLParser::VariableScopeClauseContext* GQLParser::InlineProcedureCallContext::variableScopeClause() {
  return getRuleContext<GQLParser::VariableScopeClauseContext>(0);
}


size_t GQLParser::InlineProcedureCallContext::getRuleIndex() const {
  return GQLParser::RuleInlineProcedureCall;
}


GQLParser::InlineProcedureCallContext* GQLParser::inlineProcedureCall() {
  InlineProcedureCallContext *_localctx = _tracker.createInstance<InlineProcedureCallContext>(_ctx, getState());
  enterRule(_localctx, 278, GQLParser::RuleInlineProcedureCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1989);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::LEFT_PAREN) {
      setState(1988);
      variableScopeClause();
    }
    setState(1991);
    nestedProcedureSpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableScopeClauseContext ------------------------------------------------------------------

GQLParser::VariableScopeClauseContext::VariableScopeClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::VariableScopeClauseContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::VariableScopeClauseContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::BindingVariableReferenceListContext* GQLParser::VariableScopeClauseContext::bindingVariableReferenceList() {
  return getRuleContext<GQLParser::BindingVariableReferenceListContext>(0);
}


size_t GQLParser::VariableScopeClauseContext::getRuleIndex() const {
  return GQLParser::RuleVariableScopeClause;
}


GQLParser::VariableScopeClauseContext* GQLParser::variableScopeClause() {
  VariableScopeClauseContext *_localctx = _tracker.createInstance<VariableScopeClauseContext>(_ctx, getState());
  enterRule(_localctx, 280, GQLParser::RuleVariableScopeClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1993);
    match(GQLParser::LEFT_PAREN);
    setState(1995);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 277) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 277)) & 281474976710655) != 0)) {
      setState(1994);
      bindingVariableReferenceList();
    }
    setState(1997);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingVariableReferenceListContext ------------------------------------------------------------------

GQLParser::BindingVariableReferenceListContext::BindingVariableReferenceListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::BindingVariableReferenceContext *> GQLParser::BindingVariableReferenceListContext::bindingVariableReference() {
  return getRuleContexts<GQLParser::BindingVariableReferenceContext>();
}

GQLParser::BindingVariableReferenceContext* GQLParser::BindingVariableReferenceListContext::bindingVariableReference(size_t i) {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::BindingVariableReferenceListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::BindingVariableReferenceListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::BindingVariableReferenceListContext::getRuleIndex() const {
  return GQLParser::RuleBindingVariableReferenceList;
}


GQLParser::BindingVariableReferenceListContext* GQLParser::bindingVariableReferenceList() {
  BindingVariableReferenceListContext *_localctx = _tracker.createInstance<BindingVariableReferenceListContext>(_ctx, getState());
  enterRule(_localctx, 282, GQLParser::RuleBindingVariableReferenceList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1999);
    bindingVariableReference();
    setState(2004);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(2000);
      match(GQLParser::COMMA);
      setState(2001);
      bindingVariableReference();
      setState(2006);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedProcedureCallContext ------------------------------------------------------------------

GQLParser::NamedProcedureCallContext::NamedProcedureCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ProcedureReferenceContext* GQLParser::NamedProcedureCallContext::procedureReference() {
  return getRuleContext<GQLParser::ProcedureReferenceContext>(0);
}

tree::TerminalNode* GQLParser::NamedProcedureCallContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::NamedProcedureCallContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::ProcedureArgumentListContext* GQLParser::NamedProcedureCallContext::procedureArgumentList() {
  return getRuleContext<GQLParser::ProcedureArgumentListContext>(0);
}

GQLParser::YieldClauseContext* GQLParser::NamedProcedureCallContext::yieldClause() {
  return getRuleContext<GQLParser::YieldClauseContext>(0);
}


size_t GQLParser::NamedProcedureCallContext::getRuleIndex() const {
  return GQLParser::RuleNamedProcedureCall;
}


GQLParser::NamedProcedureCallContext* GQLParser::namedProcedureCall() {
  NamedProcedureCallContext *_localctx = _tracker.createInstance<NamedProcedureCallContext>(_ctx, getState());
  enterRule(_localctx, 284, GQLParser::RuleNamedProcedureCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2007);
    procedureReference();
    setState(2008);
    match(GQLParser::LEFT_PAREN);
    setState(2010);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 8762849302180528028) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 34464073969) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & -8011702113698201677) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 193)) & 26393111092643) != 0) || ((((_la - 277) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 277)) & 844424930131967) != 0) || ((((_la - 368) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 368)) & 151) != 0)) {
      setState(2009);
      procedureArgumentList();
    }
    setState(2012);
    match(GQLParser::RIGHT_PAREN);
    setState(2014);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::YIELD) {
      setState(2013);
      yieldClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureArgumentListContext ------------------------------------------------------------------

GQLParser::ProcedureArgumentListContext::ProcedureArgumentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::ProcedureArgumentContext *> GQLParser::ProcedureArgumentListContext::procedureArgument() {
  return getRuleContexts<GQLParser::ProcedureArgumentContext>();
}

GQLParser::ProcedureArgumentContext* GQLParser::ProcedureArgumentListContext::procedureArgument(size_t i) {
  return getRuleContext<GQLParser::ProcedureArgumentContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::ProcedureArgumentListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::ProcedureArgumentListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::ProcedureArgumentListContext::getRuleIndex() const {
  return GQLParser::RuleProcedureArgumentList;
}


GQLParser::ProcedureArgumentListContext* GQLParser::procedureArgumentList() {
  ProcedureArgumentListContext *_localctx = _tracker.createInstance<ProcedureArgumentListContext>(_ctx, getState());
  enterRule(_localctx, 286, GQLParser::RuleProcedureArgumentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2016);
    procedureArgument();
    setState(2021);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(2017);
      match(GQLParser::COMMA);
      setState(2018);
      procedureArgument();
      setState(2023);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureArgumentContext ------------------------------------------------------------------

GQLParser::ProcedureArgumentContext::ProcedureArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionContext* GQLParser::ProcedureArgumentContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::ProcedureArgumentContext::getRuleIndex() const {
  return GQLParser::RuleProcedureArgument;
}


GQLParser::ProcedureArgumentContext* GQLParser::procedureArgument() {
  ProcedureArgumentContext *_localctx = _tracker.createInstance<ProcedureArgumentContext>(_ctx, getState());
  enterRule(_localctx, 288, GQLParser::RuleProcedureArgument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2024);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtSchemaClauseContext ------------------------------------------------------------------

GQLParser::AtSchemaClauseContext::AtSchemaClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::AtSchemaClauseContext::AT() {
  return getToken(GQLParser::AT, 0);
}

GQLParser::SchemaReferenceContext* GQLParser::AtSchemaClauseContext::schemaReference() {
  return getRuleContext<GQLParser::SchemaReferenceContext>(0);
}


size_t GQLParser::AtSchemaClauseContext::getRuleIndex() const {
  return GQLParser::RuleAtSchemaClause;
}


GQLParser::AtSchemaClauseContext* GQLParser::atSchemaClause() {
  AtSchemaClauseContext *_localctx = _tracker.createInstance<AtSchemaClauseContext>(_ctx, getState());
  enterRule(_localctx, 290, GQLParser::RuleAtSchemaClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2026);
    match(GQLParser::AT);
    setState(2027);
    schemaReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UseGraphClauseContext ------------------------------------------------------------------

GQLParser::UseGraphClauseContext::UseGraphClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::UseGraphClauseContext::USE() {
  return getToken(GQLParser::USE, 0);
}

GQLParser::GraphExpressionContext* GQLParser::UseGraphClauseContext::graphExpression() {
  return getRuleContext<GQLParser::GraphExpressionContext>(0);
}


size_t GQLParser::UseGraphClauseContext::getRuleIndex() const {
  return GQLParser::RuleUseGraphClause;
}


GQLParser::UseGraphClauseContext* GQLParser::useGraphClause() {
  UseGraphClauseContext *_localctx = _tracker.createInstance<UseGraphClauseContext>(_ctx, getState());
  enterRule(_localctx, 292, GQLParser::RuleUseGraphClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2029);
    match(GQLParser::USE);
    setState(2030);
    graphExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphPatternBindingTableContext ------------------------------------------------------------------

GQLParser::GraphPatternBindingTableContext::GraphPatternBindingTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::GraphPatternContext* GQLParser::GraphPatternBindingTableContext::graphPattern() {
  return getRuleContext<GQLParser::GraphPatternContext>(0);
}

GQLParser::GraphPatternYieldClauseContext* GQLParser::GraphPatternBindingTableContext::graphPatternYieldClause() {
  return getRuleContext<GQLParser::GraphPatternYieldClauseContext>(0);
}


size_t GQLParser::GraphPatternBindingTableContext::getRuleIndex() const {
  return GQLParser::RuleGraphPatternBindingTable;
}


GQLParser::GraphPatternBindingTableContext* GQLParser::graphPatternBindingTable() {
  GraphPatternBindingTableContext *_localctx = _tracker.createInstance<GraphPatternBindingTableContext>(_ctx, getState());
  enterRule(_localctx, 294, GQLParser::RuleGraphPatternBindingTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2032);
    graphPattern();
    setState(2034);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 144, _ctx)) {
    case 1: {
      setState(2033);
      graphPatternYieldClause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphPatternYieldClauseContext ------------------------------------------------------------------

GQLParser::GraphPatternYieldClauseContext::GraphPatternYieldClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GraphPatternYieldClauseContext::YIELD() {
  return getToken(GQLParser::YIELD, 0);
}

GQLParser::GraphPatternYieldItemListContext* GQLParser::GraphPatternYieldClauseContext::graphPatternYieldItemList() {
  return getRuleContext<GQLParser::GraphPatternYieldItemListContext>(0);
}


size_t GQLParser::GraphPatternYieldClauseContext::getRuleIndex() const {
  return GQLParser::RuleGraphPatternYieldClause;
}


GQLParser::GraphPatternYieldClauseContext* GQLParser::graphPatternYieldClause() {
  GraphPatternYieldClauseContext *_localctx = _tracker.createInstance<GraphPatternYieldClauseContext>(_ctx, getState());
  enterRule(_localctx, 296, GQLParser::RuleGraphPatternYieldClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2036);
    match(GQLParser::YIELD);
    setState(2037);
    graphPatternYieldItemList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphPatternYieldItemListContext ------------------------------------------------------------------

GQLParser::GraphPatternYieldItemListContext::GraphPatternYieldItemListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::GraphPatternYieldItemContext *> GQLParser::GraphPatternYieldItemListContext::graphPatternYieldItem() {
  return getRuleContexts<GQLParser::GraphPatternYieldItemContext>();
}

GQLParser::GraphPatternYieldItemContext* GQLParser::GraphPatternYieldItemListContext::graphPatternYieldItem(size_t i) {
  return getRuleContext<GQLParser::GraphPatternYieldItemContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::GraphPatternYieldItemListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::GraphPatternYieldItemListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::GraphPatternYieldItemListContext::getRuleIndex() const {
  return GQLParser::RuleGraphPatternYieldItemList;
}


GQLParser::GraphPatternYieldItemListContext* GQLParser::graphPatternYieldItemList() {
  GraphPatternYieldItemListContext *_localctx = _tracker.createInstance<GraphPatternYieldItemListContext>(_ctx, getState());
  enterRule(_localctx, 298, GQLParser::RuleGraphPatternYieldItemList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2039);
    graphPatternYieldItem();
    setState(2044);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2040);
        match(GQLParser::COMMA);
        setState(2041);
        graphPatternYieldItem(); 
      }
      setState(2046);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphPatternYieldItemContext ------------------------------------------------------------------

GQLParser::GraphPatternYieldItemContext::GraphPatternYieldItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableReferenceContext* GQLParser::GraphPatternYieldItemContext::bindingVariableReference() {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(0);
}


size_t GQLParser::GraphPatternYieldItemContext::getRuleIndex() const {
  return GQLParser::RuleGraphPatternYieldItem;
}


GQLParser::GraphPatternYieldItemContext* GQLParser::graphPatternYieldItem() {
  GraphPatternYieldItemContext *_localctx = _tracker.createInstance<GraphPatternYieldItemContext>(_ctx, getState());
  enterRule(_localctx, 300, GQLParser::RuleGraphPatternYieldItem);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2047);
    bindingVariableReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphPatternContext ------------------------------------------------------------------

GQLParser::GraphPatternContext::GraphPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PathPatternListContext* GQLParser::GraphPatternContext::pathPatternList() {
  return getRuleContext<GQLParser::PathPatternListContext>(0);
}

GQLParser::MatchModeContext* GQLParser::GraphPatternContext::matchMode() {
  return getRuleContext<GQLParser::MatchModeContext>(0);
}

GQLParser::KeepClauseContext* GQLParser::GraphPatternContext::keepClause() {
  return getRuleContext<GQLParser::KeepClauseContext>(0);
}

GQLParser::GraphPatternWhereClauseContext* GQLParser::GraphPatternContext::graphPatternWhereClause() {
  return getRuleContext<GQLParser::GraphPatternWhereClauseContext>(0);
}


size_t GQLParser::GraphPatternContext::getRuleIndex() const {
  return GQLParser::RuleGraphPattern;
}


GQLParser::GraphPatternContext* GQLParser::graphPattern() {
  GraphPatternContext *_localctx = _tracker.createInstance<GraphPatternContext>(_ctx, getState());
  enterRule(_localctx, 302, GQLParser::RuleGraphPattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2050);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx)) {
    case 1: {
      setState(2049);
      matchMode();
      break;
    }

    default:
      break;
    }
    setState(2052);
    pathPatternList();
    setState(2054);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx)) {
    case 1: {
      setState(2053);
      keepClause();
      break;
    }

    default:
      break;
    }
    setState(2057);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx)) {
    case 1: {
      setState(2056);
      graphPatternWhereClause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MatchModeContext ------------------------------------------------------------------

GQLParser::MatchModeContext::MatchModeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::RepeatableElementsMatchModeContext* GQLParser::MatchModeContext::repeatableElementsMatchMode() {
  return getRuleContext<GQLParser::RepeatableElementsMatchModeContext>(0);
}

GQLParser::DifferentEdgesMatchModeContext* GQLParser::MatchModeContext::differentEdgesMatchMode() {
  return getRuleContext<GQLParser::DifferentEdgesMatchModeContext>(0);
}


size_t GQLParser::MatchModeContext::getRuleIndex() const {
  return GQLParser::RuleMatchMode;
}


GQLParser::MatchModeContext* GQLParser::matchMode() {
  MatchModeContext *_localctx = _tracker.createInstance<MatchModeContext>(_ctx, getState());
  enterRule(_localctx, 304, GQLParser::RuleMatchMode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2061);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::REPEATABLE: {
        enterOuterAlt(_localctx, 1);
        setState(2059);
        repeatableElementsMatchMode();
        break;
      }

      case GQLParser::DIFFERENT: {
        enterOuterAlt(_localctx, 2);
        setState(2060);
        differentEdgesMatchMode();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RepeatableElementsMatchModeContext ------------------------------------------------------------------

GQLParser::RepeatableElementsMatchModeContext::RepeatableElementsMatchModeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::RepeatableElementsMatchModeContext::REPEATABLE() {
  return getToken(GQLParser::REPEATABLE, 0);
}

GQLParser::ElementBindingsOrElementsContext* GQLParser::RepeatableElementsMatchModeContext::elementBindingsOrElements() {
  return getRuleContext<GQLParser::ElementBindingsOrElementsContext>(0);
}


size_t GQLParser::RepeatableElementsMatchModeContext::getRuleIndex() const {
  return GQLParser::RuleRepeatableElementsMatchMode;
}


GQLParser::RepeatableElementsMatchModeContext* GQLParser::repeatableElementsMatchMode() {
  RepeatableElementsMatchModeContext *_localctx = _tracker.createInstance<RepeatableElementsMatchModeContext>(_ctx, getState());
  enterRule(_localctx, 306, GQLParser::RuleRepeatableElementsMatchMode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2063);
    match(GQLParser::REPEATABLE);
    setState(2064);
    elementBindingsOrElements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DifferentEdgesMatchModeContext ------------------------------------------------------------------

GQLParser::DifferentEdgesMatchModeContext::DifferentEdgesMatchModeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DifferentEdgesMatchModeContext::DIFFERENT() {
  return getToken(GQLParser::DIFFERENT, 0);
}

GQLParser::EdgeBindingsOrEdgesContext* GQLParser::DifferentEdgesMatchModeContext::edgeBindingsOrEdges() {
  return getRuleContext<GQLParser::EdgeBindingsOrEdgesContext>(0);
}


size_t GQLParser::DifferentEdgesMatchModeContext::getRuleIndex() const {
  return GQLParser::RuleDifferentEdgesMatchMode;
}


GQLParser::DifferentEdgesMatchModeContext* GQLParser::differentEdgesMatchMode() {
  DifferentEdgesMatchModeContext *_localctx = _tracker.createInstance<DifferentEdgesMatchModeContext>(_ctx, getState());
  enterRule(_localctx, 308, GQLParser::RuleDifferentEdgesMatchMode);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2066);
    match(GQLParser::DIFFERENT);
    setState(2067);
    edgeBindingsOrEdges();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementBindingsOrElementsContext ------------------------------------------------------------------

GQLParser::ElementBindingsOrElementsContext::ElementBindingsOrElementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ElementBindingsOrElementsContext::ELEMENT() {
  return getToken(GQLParser::ELEMENT, 0);
}

tree::TerminalNode* GQLParser::ElementBindingsOrElementsContext::BINDINGS() {
  return getToken(GQLParser::BINDINGS, 0);
}

tree::TerminalNode* GQLParser::ElementBindingsOrElementsContext::ELEMENTS() {
  return getToken(GQLParser::ELEMENTS, 0);
}


size_t GQLParser::ElementBindingsOrElementsContext::getRuleIndex() const {
  return GQLParser::RuleElementBindingsOrElements;
}


GQLParser::ElementBindingsOrElementsContext* GQLParser::elementBindingsOrElements() {
  ElementBindingsOrElementsContext *_localctx = _tracker.createInstance<ElementBindingsOrElementsContext>(_ctx, getState());
  enterRule(_localctx, 310, GQLParser::RuleElementBindingsOrElements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2074);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ELEMENT: {
        enterOuterAlt(_localctx, 1);
        setState(2069);
        match(GQLParser::ELEMENT);
        setState(2071);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx)) {
        case 1: {
          setState(2070);
          match(GQLParser::BINDINGS);
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::ELEMENTS: {
        enterOuterAlt(_localctx, 2);
        setState(2073);
        match(GQLParser::ELEMENTS);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeBindingsOrEdgesContext ------------------------------------------------------------------

GQLParser::EdgeBindingsOrEdgesContext::EdgeBindingsOrEdgesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::EdgeSynonymContext* GQLParser::EdgeBindingsOrEdgesContext::edgeSynonym() {
  return getRuleContext<GQLParser::EdgeSynonymContext>(0);
}

tree::TerminalNode* GQLParser::EdgeBindingsOrEdgesContext::BINDINGS() {
  return getToken(GQLParser::BINDINGS, 0);
}

GQLParser::EdgesSynonymContext* GQLParser::EdgeBindingsOrEdgesContext::edgesSynonym() {
  return getRuleContext<GQLParser::EdgesSynonymContext>(0);
}


size_t GQLParser::EdgeBindingsOrEdgesContext::getRuleIndex() const {
  return GQLParser::RuleEdgeBindingsOrEdges;
}


GQLParser::EdgeBindingsOrEdgesContext* GQLParser::edgeBindingsOrEdges() {
  EdgeBindingsOrEdgesContext *_localctx = _tracker.createInstance<EdgeBindingsOrEdgesContext>(_ctx, getState());
  enterRule(_localctx, 312, GQLParser::RuleEdgeBindingsOrEdges);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2081);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::EDGE:
      case GQLParser::RELATIONSHIP: {
        enterOuterAlt(_localctx, 1);
        setState(2076);
        edgeSynonym();
        setState(2078);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
        case 1: {
          setState(2077);
          match(GQLParser::BINDINGS);
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::EDGES:
      case GQLParser::RELATIONSHIPS: {
        enterOuterAlt(_localctx, 2);
        setState(2080);
        edgesSynonym();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathPatternListContext ------------------------------------------------------------------

GQLParser::PathPatternListContext::PathPatternListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::PathPatternContext *> GQLParser::PathPatternListContext::pathPattern() {
  return getRuleContexts<GQLParser::PathPatternContext>();
}

GQLParser::PathPatternContext* GQLParser::PathPatternListContext::pathPattern(size_t i) {
  return getRuleContext<GQLParser::PathPatternContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::PathPatternListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::PathPatternListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::PathPatternListContext::getRuleIndex() const {
  return GQLParser::RulePathPatternList;
}


GQLParser::PathPatternListContext* GQLParser::pathPatternList() {
  PathPatternListContext *_localctx = _tracker.createInstance<PathPatternListContext>(_ctx, getState());
  enterRule(_localctx, 314, GQLParser::RulePathPatternList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2083);
    pathPattern();
    setState(2088);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2084);
        match(GQLParser::COMMA);
        setState(2085);
        pathPattern(); 
      }
      setState(2090);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathPatternContext ------------------------------------------------------------------

GQLParser::PathPatternContext::PathPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PathPatternExpressionContext* GQLParser::PathPatternContext::pathPatternExpression() {
  return getRuleContext<GQLParser::PathPatternExpressionContext>(0);
}

GQLParser::PathVariableDeclarationContext* GQLParser::PathPatternContext::pathVariableDeclaration() {
  return getRuleContext<GQLParser::PathVariableDeclarationContext>(0);
}

GQLParser::PathPatternPrefixContext* GQLParser::PathPatternContext::pathPatternPrefix() {
  return getRuleContext<GQLParser::PathPatternPrefixContext>(0);
}


size_t GQLParser::PathPatternContext::getRuleIndex() const {
  return GQLParser::RulePathPattern;
}


GQLParser::PathPatternContext* GQLParser::pathPattern() {
  PathPatternContext *_localctx = _tracker.createInstance<PathPatternContext>(_ctx, getState());
  enterRule(_localctx, 316, GQLParser::RulePathPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2092);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx)) {
    case 1: {
      setState(2091);
      pathVariableDeclaration();
      break;
    }

    default:
      break;
    }
    setState(2095);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::ALL

    || _la == GQLParser::ANY || ((((_la - 277) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 277)) & 9096740732929) != 0)) {
      setState(2094);
      pathPatternPrefix();
    }
    setState(2097);
    pathPatternExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathVariableDeclarationContext ------------------------------------------------------------------

GQLParser::PathVariableDeclarationContext::PathVariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PathVariableContext* GQLParser::PathVariableDeclarationContext::pathVariable() {
  return getRuleContext<GQLParser::PathVariableContext>(0);
}

tree::TerminalNode* GQLParser::PathVariableDeclarationContext::EQUALS_OPERATOR() {
  return getToken(GQLParser::EQUALS_OPERATOR, 0);
}


size_t GQLParser::PathVariableDeclarationContext::getRuleIndex() const {
  return GQLParser::RulePathVariableDeclaration;
}


GQLParser::PathVariableDeclarationContext* GQLParser::pathVariableDeclaration() {
  PathVariableDeclarationContext *_localctx = _tracker.createInstance<PathVariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 318, GQLParser::RulePathVariableDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2099);
    pathVariable();
    setState(2100);
    match(GQLParser::EQUALS_OPERATOR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- KeepClauseContext ------------------------------------------------------------------

GQLParser::KeepClauseContext::KeepClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::KeepClauseContext::KEEP() {
  return getToken(GQLParser::KEEP, 0);
}

GQLParser::PathPatternPrefixContext* GQLParser::KeepClauseContext::pathPatternPrefix() {
  return getRuleContext<GQLParser::PathPatternPrefixContext>(0);
}


size_t GQLParser::KeepClauseContext::getRuleIndex() const {
  return GQLParser::RuleKeepClause;
}


GQLParser::KeepClauseContext* GQLParser::keepClause() {
  KeepClauseContext *_localctx = _tracker.createInstance<KeepClauseContext>(_ctx, getState());
  enterRule(_localctx, 320, GQLParser::RuleKeepClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2102);
    match(GQLParser::KEEP);
    setState(2103);
    pathPatternPrefix();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphPatternWhereClauseContext ------------------------------------------------------------------

GQLParser::GraphPatternWhereClauseContext::GraphPatternWhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GraphPatternWhereClauseContext::WHERE() {
  return getToken(GQLParser::WHERE, 0);
}

GQLParser::SearchConditionContext* GQLParser::GraphPatternWhereClauseContext::searchCondition() {
  return getRuleContext<GQLParser::SearchConditionContext>(0);
}


size_t GQLParser::GraphPatternWhereClauseContext::getRuleIndex() const {
  return GQLParser::RuleGraphPatternWhereClause;
}


GQLParser::GraphPatternWhereClauseContext* GQLParser::graphPatternWhereClause() {
  GraphPatternWhereClauseContext *_localctx = _tracker.createInstance<GraphPatternWhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 322, GQLParser::RuleGraphPatternWhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2105);
    match(GQLParser::WHERE);
    setState(2106);
    searchCondition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertGraphPatternContext ------------------------------------------------------------------

GQLParser::InsertGraphPatternContext::InsertGraphPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::InsertPathPatternListContext* GQLParser::InsertGraphPatternContext::insertPathPatternList() {
  return getRuleContext<GQLParser::InsertPathPatternListContext>(0);
}


size_t GQLParser::InsertGraphPatternContext::getRuleIndex() const {
  return GQLParser::RuleInsertGraphPattern;
}


GQLParser::InsertGraphPatternContext* GQLParser::insertGraphPattern() {
  InsertGraphPatternContext *_localctx = _tracker.createInstance<InsertGraphPatternContext>(_ctx, getState());
  enterRule(_localctx, 324, GQLParser::RuleInsertGraphPattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2108);
    insertPathPatternList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertPathPatternListContext ------------------------------------------------------------------

GQLParser::InsertPathPatternListContext::InsertPathPatternListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::InsertPathPatternContext *> GQLParser::InsertPathPatternListContext::insertPathPattern() {
  return getRuleContexts<GQLParser::InsertPathPatternContext>();
}

GQLParser::InsertPathPatternContext* GQLParser::InsertPathPatternListContext::insertPathPattern(size_t i) {
  return getRuleContext<GQLParser::InsertPathPatternContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::InsertPathPatternListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::InsertPathPatternListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::InsertPathPatternListContext::getRuleIndex() const {
  return GQLParser::RuleInsertPathPatternList;
}


GQLParser::InsertPathPatternListContext* GQLParser::insertPathPatternList() {
  InsertPathPatternListContext *_localctx = _tracker.createInstance<InsertPathPatternListContext>(_ctx, getState());
  enterRule(_localctx, 326, GQLParser::RuleInsertPathPatternList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2110);
    insertPathPattern();
    setState(2115);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(2111);
      match(GQLParser::COMMA);
      setState(2112);
      insertPathPattern();
      setState(2117);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertPathPatternContext ------------------------------------------------------------------

GQLParser::InsertPathPatternContext::InsertPathPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::InsertNodePatternContext *> GQLParser::InsertPathPatternContext::insertNodePattern() {
  return getRuleContexts<GQLParser::InsertNodePatternContext>();
}

GQLParser::InsertNodePatternContext* GQLParser::InsertPathPatternContext::insertNodePattern(size_t i) {
  return getRuleContext<GQLParser::InsertNodePatternContext>(i);
}

std::vector<GQLParser::InsertEdgePatternContext *> GQLParser::InsertPathPatternContext::insertEdgePattern() {
  return getRuleContexts<GQLParser::InsertEdgePatternContext>();
}

GQLParser::InsertEdgePatternContext* GQLParser::InsertPathPatternContext::insertEdgePattern(size_t i) {
  return getRuleContext<GQLParser::InsertEdgePatternContext>(i);
}


size_t GQLParser::InsertPathPatternContext::getRuleIndex() const {
  return GQLParser::RuleInsertPathPattern;
}


GQLParser::InsertPathPatternContext* GQLParser::insertPathPattern() {
  InsertPathPatternContext *_localctx = _tracker.createInstance<InsertPathPatternContext>(_ctx, getState());
  enterRule(_localctx, 328, GQLParser::RuleInsertPathPattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2118);
    insertNodePattern();
    setState(2124);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 337) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 337)) & 131137) != 0)) {
      setState(2119);
      insertEdgePattern();
      setState(2120);
      insertNodePattern();
      setState(2126);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertNodePatternContext ------------------------------------------------------------------

GQLParser::InsertNodePatternContext::InsertNodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::InsertNodePatternContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::InsertNodePatternContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::InsertElementPatternFillerContext* GQLParser::InsertNodePatternContext::insertElementPatternFiller() {
  return getRuleContext<GQLParser::InsertElementPatternFillerContext>(0);
}


size_t GQLParser::InsertNodePatternContext::getRuleIndex() const {
  return GQLParser::RuleInsertNodePattern;
}


GQLParser::InsertNodePatternContext* GQLParser::insertNodePattern() {
  InsertNodePatternContext *_localctx = _tracker.createInstance<InsertNodePatternContext>(_ctx, getState());
  enterRule(_localctx, 330, GQLParser::RuleInsertNodePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2127);
    match(GQLParser::LEFT_PAREN);
    setState(2129);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::IS || ((((_la - 277) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 277)) & 281474976710655) != 0) || _la == GQLParser::COLON

    || _la == GQLParser::LEFT_BRACE) {
      setState(2128);
      insertElementPatternFiller();
    }
    setState(2131);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertEdgePatternContext ------------------------------------------------------------------

GQLParser::InsertEdgePatternContext::InsertEdgePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::InsertEdgePointingLeftContext* GQLParser::InsertEdgePatternContext::insertEdgePointingLeft() {
  return getRuleContext<GQLParser::InsertEdgePointingLeftContext>(0);
}

GQLParser::InsertEdgePointingRightContext* GQLParser::InsertEdgePatternContext::insertEdgePointingRight() {
  return getRuleContext<GQLParser::InsertEdgePointingRightContext>(0);
}

GQLParser::InsertEdgeUndirectedContext* GQLParser::InsertEdgePatternContext::insertEdgeUndirected() {
  return getRuleContext<GQLParser::InsertEdgeUndirectedContext>(0);
}


size_t GQLParser::InsertEdgePatternContext::getRuleIndex() const {
  return GQLParser::RuleInsertEdgePattern;
}


GQLParser::InsertEdgePatternContext* GQLParser::insertEdgePattern() {
  InsertEdgePatternContext *_localctx = _tracker.createInstance<InsertEdgePatternContext>(_ctx, getState());
  enterRule(_localctx, 332, GQLParser::RuleInsertEdgePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2136);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LEFT_ARROW_BRACKET: {
        enterOuterAlt(_localctx, 1);
        setState(2133);
        insertEdgePointingLeft();
        break;
      }

      case GQLParser::MINUS_LEFT_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(2134);
        insertEdgePointingRight();
        break;
      }

      case GQLParser::TILDE_LEFT_BRACKET: {
        enterOuterAlt(_localctx, 3);
        setState(2135);
        insertEdgeUndirected();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertEdgePointingLeftContext ------------------------------------------------------------------

GQLParser::InsertEdgePointingLeftContext::InsertEdgePointingLeftContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::InsertEdgePointingLeftContext::LEFT_ARROW_BRACKET() {
  return getToken(GQLParser::LEFT_ARROW_BRACKET, 0);
}

tree::TerminalNode* GQLParser::InsertEdgePointingLeftContext::RIGHT_BRACKET_MINUS() {
  return getToken(GQLParser::RIGHT_BRACKET_MINUS, 0);
}

GQLParser::InsertElementPatternFillerContext* GQLParser::InsertEdgePointingLeftContext::insertElementPatternFiller() {
  return getRuleContext<GQLParser::InsertElementPatternFillerContext>(0);
}


size_t GQLParser::InsertEdgePointingLeftContext::getRuleIndex() const {
  return GQLParser::RuleInsertEdgePointingLeft;
}


GQLParser::InsertEdgePointingLeftContext* GQLParser::insertEdgePointingLeft() {
  InsertEdgePointingLeftContext *_localctx = _tracker.createInstance<InsertEdgePointingLeftContext>(_ctx, getState());
  enterRule(_localctx, 334, GQLParser::RuleInsertEdgePointingLeft);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2138);
    match(GQLParser::LEFT_ARROW_BRACKET);
    setState(2140);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::IS || ((((_la - 277) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 277)) & 281474976710655) != 0) || _la == GQLParser::COLON

    || _la == GQLParser::LEFT_BRACE) {
      setState(2139);
      insertElementPatternFiller();
    }
    setState(2142);
    match(GQLParser::RIGHT_BRACKET_MINUS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertEdgePointingRightContext ------------------------------------------------------------------

GQLParser::InsertEdgePointingRightContext::InsertEdgePointingRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::InsertEdgePointingRightContext::MINUS_LEFT_BRACKET() {
  return getToken(GQLParser::MINUS_LEFT_BRACKET, 0);
}

tree::TerminalNode* GQLParser::InsertEdgePointingRightContext::BRACKET_RIGHT_ARROW() {
  return getToken(GQLParser::BRACKET_RIGHT_ARROW, 0);
}

GQLParser::InsertElementPatternFillerContext* GQLParser::InsertEdgePointingRightContext::insertElementPatternFiller() {
  return getRuleContext<GQLParser::InsertElementPatternFillerContext>(0);
}


size_t GQLParser::InsertEdgePointingRightContext::getRuleIndex() const {
  return GQLParser::RuleInsertEdgePointingRight;
}


GQLParser::InsertEdgePointingRightContext* GQLParser::insertEdgePointingRight() {
  InsertEdgePointingRightContext *_localctx = _tracker.createInstance<InsertEdgePointingRightContext>(_ctx, getState());
  enterRule(_localctx, 336, GQLParser::RuleInsertEdgePointingRight);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2144);
    match(GQLParser::MINUS_LEFT_BRACKET);
    setState(2146);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::IS || ((((_la - 277) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 277)) & 281474976710655) != 0) || _la == GQLParser::COLON

    || _la == GQLParser::LEFT_BRACE) {
      setState(2145);
      insertElementPatternFiller();
    }
    setState(2148);
    match(GQLParser::BRACKET_RIGHT_ARROW);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertEdgeUndirectedContext ------------------------------------------------------------------

GQLParser::InsertEdgeUndirectedContext::InsertEdgeUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::InsertEdgeUndirectedContext::TILDE_LEFT_BRACKET() {
  return getToken(GQLParser::TILDE_LEFT_BRACKET, 0);
}

tree::TerminalNode* GQLParser::InsertEdgeUndirectedContext::RIGHT_BRACKET_TILDE() {
  return getToken(GQLParser::RIGHT_BRACKET_TILDE, 0);
}

GQLParser::InsertElementPatternFillerContext* GQLParser::InsertEdgeUndirectedContext::insertElementPatternFiller() {
  return getRuleContext<GQLParser::InsertElementPatternFillerContext>(0);
}


size_t GQLParser::InsertEdgeUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleInsertEdgeUndirected;
}


GQLParser::InsertEdgeUndirectedContext* GQLParser::insertEdgeUndirected() {
  InsertEdgeUndirectedContext *_localctx = _tracker.createInstance<InsertEdgeUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 338, GQLParser::RuleInsertEdgeUndirected);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2150);
    match(GQLParser::TILDE_LEFT_BRACKET);
    setState(2152);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::IS || ((((_la - 277) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 277)) & 281474976710655) != 0) || _la == GQLParser::COLON

    || _la == GQLParser::LEFT_BRACE) {
      setState(2151);
      insertElementPatternFiller();
    }
    setState(2154);
    match(GQLParser::RIGHT_BRACKET_TILDE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertElementPatternFillerContext ------------------------------------------------------------------

GQLParser::InsertElementPatternFillerContext::InsertElementPatternFillerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementVariableDeclarationContext* GQLParser::InsertElementPatternFillerContext::elementVariableDeclaration() {
  return getRuleContext<GQLParser::ElementVariableDeclarationContext>(0);
}

GQLParser::LabelAndPropertySetSpecificationContext* GQLParser::InsertElementPatternFillerContext::labelAndPropertySetSpecification() {
  return getRuleContext<GQLParser::LabelAndPropertySetSpecificationContext>(0);
}


size_t GQLParser::InsertElementPatternFillerContext::getRuleIndex() const {
  return GQLParser::RuleInsertElementPatternFiller;
}


GQLParser::InsertElementPatternFillerContext* GQLParser::insertElementPatternFiller() {
  InsertElementPatternFillerContext *_localctx = _tracker.createInstance<InsertElementPatternFillerContext>(_ctx, getState());
  enterRule(_localctx, 340, GQLParser::RuleInsertElementPatternFiller);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2164);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2156);
      elementVariableDeclaration();
      setState(2158);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::IS || _la == GQLParser::COLON

      || _la == GQLParser::LEFT_BRACE) {
        setState(2157);
        labelAndPropertySetSpecification();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2161);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 277) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 277)) & 281474976710655) != 0)) {
        setState(2160);
        elementVariableDeclaration();
      }
      setState(2163);
      labelAndPropertySetSpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelAndPropertySetSpecificationContext ------------------------------------------------------------------

GQLParser::LabelAndPropertySetSpecificationContext::LabelAndPropertySetSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IsOrColonContext* GQLParser::LabelAndPropertySetSpecificationContext::isOrColon() {
  return getRuleContext<GQLParser::IsOrColonContext>(0);
}

GQLParser::LabelSetSpecificationContext* GQLParser::LabelAndPropertySetSpecificationContext::labelSetSpecification() {
  return getRuleContext<GQLParser::LabelSetSpecificationContext>(0);
}

GQLParser::ElementPropertySpecificationContext* GQLParser::LabelAndPropertySetSpecificationContext::elementPropertySpecification() {
  return getRuleContext<GQLParser::ElementPropertySpecificationContext>(0);
}


size_t GQLParser::LabelAndPropertySetSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleLabelAndPropertySetSpecification;
}


GQLParser::LabelAndPropertySetSpecificationContext* GQLParser::labelAndPropertySetSpecification() {
  LabelAndPropertySetSpecificationContext *_localctx = _tracker.createInstance<LabelAndPropertySetSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 342, GQLParser::RuleLabelAndPropertySetSpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2177);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2166);
      isOrColon();
      setState(2167);
      labelSetSpecification();
      setState(2169);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::LEFT_BRACE) {
        setState(2168);
        elementPropertySpecification();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2174);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::IS || _la == GQLParser::COLON) {
        setState(2171);
        isOrColon();
        setState(2172);
        labelSetSpecification();
      }
      setState(2176);
      elementPropertySpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathPatternPrefixContext ------------------------------------------------------------------

GQLParser::PathPatternPrefixContext::PathPatternPrefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PathModePrefixContext* GQLParser::PathPatternPrefixContext::pathModePrefix() {
  return getRuleContext<GQLParser::PathModePrefixContext>(0);
}

GQLParser::PathSearchPrefixContext* GQLParser::PathPatternPrefixContext::pathSearchPrefix() {
  return getRuleContext<GQLParser::PathSearchPrefixContext>(0);
}


size_t GQLParser::PathPatternPrefixContext::getRuleIndex() const {
  return GQLParser::RulePathPatternPrefix;
}


GQLParser::PathPatternPrefixContext* GQLParser::pathPatternPrefix() {
  PathPatternPrefixContext *_localctx = _tracker.createInstance<PathPatternPrefixContext>(_ctx, getState());
  enterRule(_localctx, 344, GQLParser::RulePathPatternPrefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2181);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ACYCLIC:
      case GQLParser::SIMPLE:
      case GQLParser::TRAIL:
      case GQLParser::WALK: {
        enterOuterAlt(_localctx, 1);
        setState(2179);
        pathModePrefix();
        break;
      }

      case GQLParser::ALL:
      case GQLParser::ANY:
      case GQLParser::SHORTEST: {
        enterOuterAlt(_localctx, 2);
        setState(2180);
        pathSearchPrefix();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathModePrefixContext ------------------------------------------------------------------

GQLParser::PathModePrefixContext::PathModePrefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PathModeContext* GQLParser::PathModePrefixContext::pathMode() {
  return getRuleContext<GQLParser::PathModeContext>(0);
}

GQLParser::PathOrPathsContext* GQLParser::PathModePrefixContext::pathOrPaths() {
  return getRuleContext<GQLParser::PathOrPathsContext>(0);
}


size_t GQLParser::PathModePrefixContext::getRuleIndex() const {
  return GQLParser::RulePathModePrefix;
}


GQLParser::PathModePrefixContext* GQLParser::pathModePrefix() {
  PathModePrefixContext *_localctx = _tracker.createInstance<PathModePrefixContext>(_ctx, getState());
  enterRule(_localctx, 346, GQLParser::RulePathModePrefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2183);
    pathMode();
    setState(2185);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx)) {
    case 1: {
      setState(2184);
      pathOrPaths();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathModeContext ------------------------------------------------------------------

GQLParser::PathModeContext::PathModeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::PathModeContext::WALK() {
  return getToken(GQLParser::WALK, 0);
}

tree::TerminalNode* GQLParser::PathModeContext::TRAIL() {
  return getToken(GQLParser::TRAIL, 0);
}

tree::TerminalNode* GQLParser::PathModeContext::SIMPLE() {
  return getToken(GQLParser::SIMPLE, 0);
}

tree::TerminalNode* GQLParser::PathModeContext::ACYCLIC() {
  return getToken(GQLParser::ACYCLIC, 0);
}


size_t GQLParser::PathModeContext::getRuleIndex() const {
  return GQLParser::RulePathMode;
}


GQLParser::PathModeContext* GQLParser::pathMode() {
  PathModeContext *_localctx = _tracker.createInstance<PathModeContext>(_ctx, getState());
  enterRule(_localctx, 348, GQLParser::RulePathMode);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2187);
    _la = _input->LA(1);
    if (!(((((_la - 277) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 277)) & 9088150798337) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathSearchPrefixContext ------------------------------------------------------------------

GQLParser::PathSearchPrefixContext::PathSearchPrefixContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::AllPathSearchContext* GQLParser::PathSearchPrefixContext::allPathSearch() {
  return getRuleContext<GQLParser::AllPathSearchContext>(0);
}

GQLParser::AnyPathSearchContext* GQLParser::PathSearchPrefixContext::anyPathSearch() {
  return getRuleContext<GQLParser::AnyPathSearchContext>(0);
}

GQLParser::ShortestPathSearchContext* GQLParser::PathSearchPrefixContext::shortestPathSearch() {
  return getRuleContext<GQLParser::ShortestPathSearchContext>(0);
}


size_t GQLParser::PathSearchPrefixContext::getRuleIndex() const {
  return GQLParser::RulePathSearchPrefix;
}


GQLParser::PathSearchPrefixContext* GQLParser::pathSearchPrefix() {
  PathSearchPrefixContext *_localctx = _tracker.createInstance<PathSearchPrefixContext>(_ctx, getState());
  enterRule(_localctx, 350, GQLParser::RulePathSearchPrefix);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2192);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2189);
      allPathSearch();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2190);
      anyPathSearch();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2191);
      shortestPathSearch();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllPathSearchContext ------------------------------------------------------------------

GQLParser::AllPathSearchContext::AllPathSearchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::AllPathSearchContext::ALL() {
  return getToken(GQLParser::ALL, 0);
}

GQLParser::PathModeContext* GQLParser::AllPathSearchContext::pathMode() {
  return getRuleContext<GQLParser::PathModeContext>(0);
}

GQLParser::PathOrPathsContext* GQLParser::AllPathSearchContext::pathOrPaths() {
  return getRuleContext<GQLParser::PathOrPathsContext>(0);
}


size_t GQLParser::AllPathSearchContext::getRuleIndex() const {
  return GQLParser::RuleAllPathSearch;
}


GQLParser::AllPathSearchContext* GQLParser::allPathSearch() {
  AllPathSearchContext *_localctx = _tracker.createInstance<AllPathSearchContext>(_ctx, getState());
  enterRule(_localctx, 352, GQLParser::RuleAllPathSearch);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2194);
    match(GQLParser::ALL);
    setState(2196);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx)) {
    case 1: {
      setState(2195);
      pathMode();
      break;
    }

    default:
      break;
    }
    setState(2199);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx)) {
    case 1: {
      setState(2198);
      pathOrPaths();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathOrPathsContext ------------------------------------------------------------------

GQLParser::PathOrPathsContext::PathOrPathsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::PathOrPathsContext::PATH() {
  return getToken(GQLParser::PATH, 0);
}

tree::TerminalNode* GQLParser::PathOrPathsContext::PATHS() {
  return getToken(GQLParser::PATHS, 0);
}


size_t GQLParser::PathOrPathsContext::getRuleIndex() const {
  return GQLParser::RulePathOrPaths;
}


GQLParser::PathOrPathsContext* GQLParser::pathOrPaths() {
  PathOrPathsContext *_localctx = _tracker.createInstance<PathOrPathsContext>(_ctx, getState());
  enterRule(_localctx, 354, GQLParser::RulePathOrPaths);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2201);
    _la = _input->LA(1);
    if (!(_la == GQLParser::PATH

    || _la == GQLParser::PATHS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnyPathSearchContext ------------------------------------------------------------------

GQLParser::AnyPathSearchContext::AnyPathSearchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::AnyPathSearchContext::ANY() {
  return getToken(GQLParser::ANY, 0);
}

GQLParser::NumberOfPathsContext* GQLParser::AnyPathSearchContext::numberOfPaths() {
  return getRuleContext<GQLParser::NumberOfPathsContext>(0);
}

GQLParser::PathModeContext* GQLParser::AnyPathSearchContext::pathMode() {
  return getRuleContext<GQLParser::PathModeContext>(0);
}

GQLParser::PathOrPathsContext* GQLParser::AnyPathSearchContext::pathOrPaths() {
  return getRuleContext<GQLParser::PathOrPathsContext>(0);
}


size_t GQLParser::AnyPathSearchContext::getRuleIndex() const {
  return GQLParser::RuleAnyPathSearch;
}


GQLParser::AnyPathSearchContext* GQLParser::anyPathSearch() {
  AnyPathSearchContext *_localctx = _tracker.createInstance<AnyPathSearchContext>(_ctx, getState());
  enterRule(_localctx, 356, GQLParser::RuleAnyPathSearch);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2203);
    match(GQLParser::ANY);
    setState(2205);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
    case 1: {
      setState(2204);
      numberOfPaths();
      break;
    }

    default:
      break;
    }
    setState(2208);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
    case 1: {
      setState(2207);
      pathMode();
      break;
    }

    default:
      break;
    }
    setState(2211);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx)) {
    case 1: {
      setState(2210);
      pathOrPaths();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberOfPathsContext ------------------------------------------------------------------

GQLParser::NumberOfPathsContext::NumberOfPathsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NonNegativeIntegerSpecificationContext* GQLParser::NumberOfPathsContext::nonNegativeIntegerSpecification() {
  return getRuleContext<GQLParser::NonNegativeIntegerSpecificationContext>(0);
}


size_t GQLParser::NumberOfPathsContext::getRuleIndex() const {
  return GQLParser::RuleNumberOfPaths;
}


GQLParser::NumberOfPathsContext* GQLParser::numberOfPaths() {
  NumberOfPathsContext *_localctx = _tracker.createInstance<NumberOfPathsContext>(_ctx, getState());
  enterRule(_localctx, 358, GQLParser::RuleNumberOfPaths);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2213);
    nonNegativeIntegerSpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShortestPathSearchContext ------------------------------------------------------------------

GQLParser::ShortestPathSearchContext::ShortestPathSearchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::AllShortestPathSearchContext* GQLParser::ShortestPathSearchContext::allShortestPathSearch() {
  return getRuleContext<GQLParser::AllShortestPathSearchContext>(0);
}

GQLParser::AnyShortestPathSearchContext* GQLParser::ShortestPathSearchContext::anyShortestPathSearch() {
  return getRuleContext<GQLParser::AnyShortestPathSearchContext>(0);
}

GQLParser::CountedShortestPathSearchContext* GQLParser::ShortestPathSearchContext::countedShortestPathSearch() {
  return getRuleContext<GQLParser::CountedShortestPathSearchContext>(0);
}

GQLParser::CountedShortestGroupSearchContext* GQLParser::ShortestPathSearchContext::countedShortestGroupSearch() {
  return getRuleContext<GQLParser::CountedShortestGroupSearchContext>(0);
}


size_t GQLParser::ShortestPathSearchContext::getRuleIndex() const {
  return GQLParser::RuleShortestPathSearch;
}


GQLParser::ShortestPathSearchContext* GQLParser::shortestPathSearch() {
  ShortestPathSearchContext *_localctx = _tracker.createInstance<ShortestPathSearchContext>(_ctx, getState());
  enterRule(_localctx, 360, GQLParser::RuleShortestPathSearch);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2219);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2215);
      allShortestPathSearch();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2216);
      anyShortestPathSearch();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2217);
      countedShortestPathSearch();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2218);
      countedShortestGroupSearch();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AllShortestPathSearchContext ------------------------------------------------------------------

GQLParser::AllShortestPathSearchContext::AllShortestPathSearchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::AllShortestPathSearchContext::ALL() {
  return getToken(GQLParser::ALL, 0);
}

tree::TerminalNode* GQLParser::AllShortestPathSearchContext::SHORTEST() {
  return getToken(GQLParser::SHORTEST, 0);
}

GQLParser::PathModeContext* GQLParser::AllShortestPathSearchContext::pathMode() {
  return getRuleContext<GQLParser::PathModeContext>(0);
}

GQLParser::PathOrPathsContext* GQLParser::AllShortestPathSearchContext::pathOrPaths() {
  return getRuleContext<GQLParser::PathOrPathsContext>(0);
}


size_t GQLParser::AllShortestPathSearchContext::getRuleIndex() const {
  return GQLParser::RuleAllShortestPathSearch;
}


GQLParser::AllShortestPathSearchContext* GQLParser::allShortestPathSearch() {
  AllShortestPathSearchContext *_localctx = _tracker.createInstance<AllShortestPathSearchContext>(_ctx, getState());
  enterRule(_localctx, 362, GQLParser::RuleAllShortestPathSearch);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2221);
    match(GQLParser::ALL);
    setState(2222);
    match(GQLParser::SHORTEST);
    setState(2224);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
    case 1: {
      setState(2223);
      pathMode();
      break;
    }

    default:
      break;
    }
    setState(2227);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx)) {
    case 1: {
      setState(2226);
      pathOrPaths();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnyShortestPathSearchContext ------------------------------------------------------------------

GQLParser::AnyShortestPathSearchContext::AnyShortestPathSearchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::AnyShortestPathSearchContext::ANY() {
  return getToken(GQLParser::ANY, 0);
}

tree::TerminalNode* GQLParser::AnyShortestPathSearchContext::SHORTEST() {
  return getToken(GQLParser::SHORTEST, 0);
}

GQLParser::PathModeContext* GQLParser::AnyShortestPathSearchContext::pathMode() {
  return getRuleContext<GQLParser::PathModeContext>(0);
}

GQLParser::PathOrPathsContext* GQLParser::AnyShortestPathSearchContext::pathOrPaths() {
  return getRuleContext<GQLParser::PathOrPathsContext>(0);
}


size_t GQLParser::AnyShortestPathSearchContext::getRuleIndex() const {
  return GQLParser::RuleAnyShortestPathSearch;
}


GQLParser::AnyShortestPathSearchContext* GQLParser::anyShortestPathSearch() {
  AnyShortestPathSearchContext *_localctx = _tracker.createInstance<AnyShortestPathSearchContext>(_ctx, getState());
  enterRule(_localctx, 364, GQLParser::RuleAnyShortestPathSearch);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2229);
    match(GQLParser::ANY);
    setState(2230);
    match(GQLParser::SHORTEST);
    setState(2232);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 181, _ctx)) {
    case 1: {
      setState(2231);
      pathMode();
      break;
    }

    default:
      break;
    }
    setState(2235);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx)) {
    case 1: {
      setState(2234);
      pathOrPaths();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CountedShortestPathSearchContext ------------------------------------------------------------------

GQLParser::CountedShortestPathSearchContext::CountedShortestPathSearchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CountedShortestPathSearchContext::SHORTEST() {
  return getToken(GQLParser::SHORTEST, 0);
}

GQLParser::NumberOfPathsContext* GQLParser::CountedShortestPathSearchContext::numberOfPaths() {
  return getRuleContext<GQLParser::NumberOfPathsContext>(0);
}

GQLParser::PathModeContext* GQLParser::CountedShortestPathSearchContext::pathMode() {
  return getRuleContext<GQLParser::PathModeContext>(0);
}

GQLParser::PathOrPathsContext* GQLParser::CountedShortestPathSearchContext::pathOrPaths() {
  return getRuleContext<GQLParser::PathOrPathsContext>(0);
}


size_t GQLParser::CountedShortestPathSearchContext::getRuleIndex() const {
  return GQLParser::RuleCountedShortestPathSearch;
}


GQLParser::CountedShortestPathSearchContext* GQLParser::countedShortestPathSearch() {
  CountedShortestPathSearchContext *_localctx = _tracker.createInstance<CountedShortestPathSearchContext>(_ctx, getState());
  enterRule(_localctx, 366, GQLParser::RuleCountedShortestPathSearch);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2237);
    match(GQLParser::SHORTEST);
    setState(2238);
    numberOfPaths();
    setState(2240);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 183, _ctx)) {
    case 1: {
      setState(2239);
      pathMode();
      break;
    }

    default:
      break;
    }
    setState(2243);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx)) {
    case 1: {
      setState(2242);
      pathOrPaths();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CountedShortestGroupSearchContext ------------------------------------------------------------------

GQLParser::CountedShortestGroupSearchContext::CountedShortestGroupSearchContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CountedShortestGroupSearchContext::SHORTEST() {
  return getToken(GQLParser::SHORTEST, 0);
}

tree::TerminalNode* GQLParser::CountedShortestGroupSearchContext::GROUP() {
  return getToken(GQLParser::GROUP, 0);
}

tree::TerminalNode* GQLParser::CountedShortestGroupSearchContext::GROUPS() {
  return getToken(GQLParser::GROUPS, 0);
}

GQLParser::NumberOfGroupsContext* GQLParser::CountedShortestGroupSearchContext::numberOfGroups() {
  return getRuleContext<GQLParser::NumberOfGroupsContext>(0);
}

GQLParser::PathModeContext* GQLParser::CountedShortestGroupSearchContext::pathMode() {
  return getRuleContext<GQLParser::PathModeContext>(0);
}

GQLParser::PathOrPathsContext* GQLParser::CountedShortestGroupSearchContext::pathOrPaths() {
  return getRuleContext<GQLParser::PathOrPathsContext>(0);
}


size_t GQLParser::CountedShortestGroupSearchContext::getRuleIndex() const {
  return GQLParser::RuleCountedShortestGroupSearch;
}


GQLParser::CountedShortestGroupSearchContext* GQLParser::countedShortestGroupSearch() {
  CountedShortestGroupSearchContext *_localctx = _tracker.createInstance<CountedShortestGroupSearchContext>(_ctx, getState());
  enterRule(_localctx, 368, GQLParser::RuleCountedShortestGroupSearch);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2245);
    match(GQLParser::SHORTEST);
    setState(2247);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 983040) != 0) || _la == GQLParser::GENERAL_PARAMETER_REFERENCE) {
      setState(2246);
      numberOfGroups();
    }
    setState(2250);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 277) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 277)) & 9088150798337) != 0)) {
      setState(2249);
      pathMode();
    }
    setState(2253);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::PATH

    || _la == GQLParser::PATHS) {
      setState(2252);
      pathOrPaths();
    }
    setState(2255);
    _la = _input->LA(1);
    if (!(_la == GQLParser::GROUP || _la == GQLParser::GROUPS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberOfGroupsContext ------------------------------------------------------------------

GQLParser::NumberOfGroupsContext::NumberOfGroupsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NonNegativeIntegerSpecificationContext* GQLParser::NumberOfGroupsContext::nonNegativeIntegerSpecification() {
  return getRuleContext<GQLParser::NonNegativeIntegerSpecificationContext>(0);
}


size_t GQLParser::NumberOfGroupsContext::getRuleIndex() const {
  return GQLParser::RuleNumberOfGroups;
}


GQLParser::NumberOfGroupsContext* GQLParser::numberOfGroups() {
  NumberOfGroupsContext *_localctx = _tracker.createInstance<NumberOfGroupsContext>(_ctx, getState());
  enterRule(_localctx, 370, GQLParser::RuleNumberOfGroups);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2257);
    nonNegativeIntegerSpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathPatternExpressionContext ------------------------------------------------------------------

GQLParser::PathPatternExpressionContext::PathPatternExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GQLParser::PathPatternExpressionContext::getRuleIndex() const {
  return GQLParser::RulePathPatternExpression;
}

void GQLParser::PathPatternExpressionContext::copyFrom(PathPatternExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PpePatternUnionContext ------------------------------------------------------------------

std::vector<GQLParser::PathTermContext *> GQLParser::PpePatternUnionContext::pathTerm() {
  return getRuleContexts<GQLParser::PathTermContext>();
}

GQLParser::PathTermContext* GQLParser::PpePatternUnionContext::pathTerm(size_t i) {
  return getRuleContext<GQLParser::PathTermContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::PpePatternUnionContext::VERTICAL_BAR() {
  return getTokens(GQLParser::VERTICAL_BAR);
}

tree::TerminalNode* GQLParser::PpePatternUnionContext::VERTICAL_BAR(size_t i) {
  return getToken(GQLParser::VERTICAL_BAR, i);
}

GQLParser::PpePatternUnionContext::PpePatternUnionContext(PathPatternExpressionContext *ctx) { copyFrom(ctx); }


//----------------- PpePathTermContext ------------------------------------------------------------------

GQLParser::PathTermContext* GQLParser::PpePathTermContext::pathTerm() {
  return getRuleContext<GQLParser::PathTermContext>(0);
}

GQLParser::PpePathTermContext::PpePathTermContext(PathPatternExpressionContext *ctx) { copyFrom(ctx); }


//----------------- PpeMultisetAlternationContext ------------------------------------------------------------------

std::vector<GQLParser::PathTermContext *> GQLParser::PpeMultisetAlternationContext::pathTerm() {
  return getRuleContexts<GQLParser::PathTermContext>();
}

GQLParser::PathTermContext* GQLParser::PpeMultisetAlternationContext::pathTerm(size_t i) {
  return getRuleContext<GQLParser::PathTermContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::PpeMultisetAlternationContext::MULTISET_ALTERNATION_OPERATOR() {
  return getTokens(GQLParser::MULTISET_ALTERNATION_OPERATOR);
}

tree::TerminalNode* GQLParser::PpeMultisetAlternationContext::MULTISET_ALTERNATION_OPERATOR(size_t i) {
  return getToken(GQLParser::MULTISET_ALTERNATION_OPERATOR, i);
}

GQLParser::PpeMultisetAlternationContext::PpeMultisetAlternationContext(PathPatternExpressionContext *ctx) { copyFrom(ctx); }


GQLParser::PathPatternExpressionContext* GQLParser::pathPatternExpression() {
  PathPatternExpressionContext *_localctx = _tracker.createInstance<PathPatternExpressionContext>(_ctx, getState());
  enterRule(_localctx, 372, GQLParser::RulePathPatternExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2274);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<GQLParser::PpePathTermContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(2259);
      pathTerm();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<GQLParser::PpeMultisetAlternationContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(2260);
      pathTerm();
      setState(2263); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2261);
                match(GQLParser::MULTISET_ALTERNATION_OPERATOR);
                setState(2262);
                pathTerm();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2265); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<GQLParser::PpePatternUnionContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(2267);
      pathTerm();
      setState(2270); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2268);
                match(GQLParser::VERTICAL_BAR);
                setState(2269);
                pathTerm();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2272); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathTermContext ------------------------------------------------------------------

GQLParser::PathTermContext::PathTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::PathFactorContext *> GQLParser::PathTermContext::pathFactor() {
  return getRuleContexts<GQLParser::PathFactorContext>();
}

GQLParser::PathFactorContext* GQLParser::PathTermContext::pathFactor(size_t i) {
  return getRuleContext<GQLParser::PathFactorContext>(i);
}


size_t GQLParser::PathTermContext::getRuleIndex() const {
  return GQLParser::RulePathTerm;
}


GQLParser::PathTermContext* GQLParser::pathTerm() {
  PathTermContext *_localctx = _tracker.createInstance<PathTermContext>(_ctx, getState());
  enterRule(_localctx, 374, GQLParser::RulePathTerm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2277); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2276);
              pathFactor();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2279); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathFactorContext ------------------------------------------------------------------

GQLParser::PathFactorContext::PathFactorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GQLParser::PathFactorContext::getRuleIndex() const {
  return GQLParser::RulePathFactor;
}

void GQLParser::PathFactorContext::copyFrom(PathFactorContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PfQuantifiedPathPrimaryContext ------------------------------------------------------------------

GQLParser::PathPrimaryContext* GQLParser::PfQuantifiedPathPrimaryContext::pathPrimary() {
  return getRuleContext<GQLParser::PathPrimaryContext>(0);
}

GQLParser::GraphPatternQuantifierContext* GQLParser::PfQuantifiedPathPrimaryContext::graphPatternQuantifier() {
  return getRuleContext<GQLParser::GraphPatternQuantifierContext>(0);
}

GQLParser::PfQuantifiedPathPrimaryContext::PfQuantifiedPathPrimaryContext(PathFactorContext *ctx) { copyFrom(ctx); }


//----------------- PfQuestionedPathPrimaryContext ------------------------------------------------------------------

GQLParser::PathPrimaryContext* GQLParser::PfQuestionedPathPrimaryContext::pathPrimary() {
  return getRuleContext<GQLParser::PathPrimaryContext>(0);
}

tree::TerminalNode* GQLParser::PfQuestionedPathPrimaryContext::QUESTION_MARK() {
  return getToken(GQLParser::QUESTION_MARK, 0);
}

GQLParser::PfQuestionedPathPrimaryContext::PfQuestionedPathPrimaryContext(PathFactorContext *ctx) { copyFrom(ctx); }


//----------------- PfPathPrimaryContext ------------------------------------------------------------------

GQLParser::PathPrimaryContext* GQLParser::PfPathPrimaryContext::pathPrimary() {
  return getRuleContext<GQLParser::PathPrimaryContext>(0);
}

GQLParser::PfPathPrimaryContext::PfPathPrimaryContext(PathFactorContext *ctx) { copyFrom(ctx); }


GQLParser::PathFactorContext* GQLParser::pathFactor() {
  PathFactorContext *_localctx = _tracker.createInstance<PathFactorContext>(_ctx, getState());
  enterRule(_localctx, 376, GQLParser::RulePathFactor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2288);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<GQLParser::PfPathPrimaryContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(2281);
      pathPrimary();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<GQLParser::PfQuantifiedPathPrimaryContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(2282);
      pathPrimary();
      setState(2283);
      graphPatternQuantifier();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<GQLParser::PfQuestionedPathPrimaryContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(2285);
      pathPrimary();
      setState(2286);
      match(GQLParser::QUESTION_MARK);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathPrimaryContext ------------------------------------------------------------------

GQLParser::PathPrimaryContext::PathPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GQLParser::PathPrimaryContext::getRuleIndex() const {
  return GQLParser::RulePathPrimary;
}

void GQLParser::PathPrimaryContext::copyFrom(PathPrimaryContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PpParenthesizedPathPatternExpressionContext ------------------------------------------------------------------

GQLParser::ParenthesizedPathPatternExpressionContext* GQLParser::PpParenthesizedPathPatternExpressionContext::parenthesizedPathPatternExpression() {
  return getRuleContext<GQLParser::ParenthesizedPathPatternExpressionContext>(0);
}

GQLParser::PpParenthesizedPathPatternExpressionContext::PpParenthesizedPathPatternExpressionContext(PathPrimaryContext *ctx) { copyFrom(ctx); }


//----------------- PpElementPatternContext ------------------------------------------------------------------

GQLParser::ElementPatternContext* GQLParser::PpElementPatternContext::elementPattern() {
  return getRuleContext<GQLParser::ElementPatternContext>(0);
}

GQLParser::PpElementPatternContext::PpElementPatternContext(PathPrimaryContext *ctx) { copyFrom(ctx); }


//----------------- PpSimplifiedPathPatternExpressionContext ------------------------------------------------------------------

GQLParser::SimplifiedPathPatternExpressionContext* GQLParser::PpSimplifiedPathPatternExpressionContext::simplifiedPathPatternExpression() {
  return getRuleContext<GQLParser::SimplifiedPathPatternExpressionContext>(0);
}

GQLParser::PpSimplifiedPathPatternExpressionContext::PpSimplifiedPathPatternExpressionContext(PathPrimaryContext *ctx) { copyFrom(ctx); }


GQLParser::PathPrimaryContext* GQLParser::pathPrimary() {
  PathPrimaryContext *_localctx = _tracker.createInstance<PathPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 378, GQLParser::RulePathPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2293);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<GQLParser::PpElementPatternContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(2290);
      elementPattern();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<GQLParser::PpParenthesizedPathPatternExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(2291);
      parenthesizedPathPatternExpression();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<GQLParser::PpSimplifiedPathPatternExpressionContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(2292);
      simplifiedPathPatternExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementPatternContext ------------------------------------------------------------------

GQLParser::ElementPatternContext::ElementPatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NodePatternContext* GQLParser::ElementPatternContext::nodePattern() {
  return getRuleContext<GQLParser::NodePatternContext>(0);
}

GQLParser::EdgePatternContext* GQLParser::ElementPatternContext::edgePattern() {
  return getRuleContext<GQLParser::EdgePatternContext>(0);
}


size_t GQLParser::ElementPatternContext::getRuleIndex() const {
  return GQLParser::RuleElementPattern;
}


GQLParser::ElementPatternContext* GQLParser::elementPattern() {
  ElementPatternContext *_localctx = _tracker.createInstance<ElementPatternContext>(_ctx, getState());
  enterRule(_localctx, 380, GQLParser::RuleElementPattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2297);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 1);
        setState(2295);
        nodePattern();
        break;
      }

      case GQLParser::LEFT_ARROW:
      case GQLParser::LEFT_ARROW_TILDE:
      case GQLParser::LEFT_ARROW_BRACKET:
      case GQLParser::LEFT_ARROW_TILDE_BRACKET:
      case GQLParser::LEFT_MINUS_RIGHT:
      case GQLParser::MINUS_LEFT_BRACKET:
      case GQLParser::RIGHT_ARROW:
      case GQLParser::TILDE_LEFT_BRACKET:
      case GQLParser::TILDE_RIGHT_ARROW:
      case GQLParser::MINUS_SIGN:
      case GQLParser::TILDE: {
        enterOuterAlt(_localctx, 2);
        setState(2296);
        edgePattern();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodePatternContext ------------------------------------------------------------------

GQLParser::NodePatternContext::NodePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NodePatternContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ElementPatternFillerContext* GQLParser::NodePatternContext::elementPatternFiller() {
  return getRuleContext<GQLParser::ElementPatternFillerContext>(0);
}

tree::TerminalNode* GQLParser::NodePatternContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::NodePatternContext::getRuleIndex() const {
  return GQLParser::RuleNodePattern;
}


GQLParser::NodePatternContext* GQLParser::nodePattern() {
  NodePatternContext *_localctx = _tracker.createInstance<NodePatternContext>(_ctx, getState());
  enterRule(_localctx, 382, GQLParser::RuleNodePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2299);
    match(GQLParser::LEFT_PAREN);
    setState(2300);
    elementPatternFiller();
    setState(2301);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementPatternFillerContext ------------------------------------------------------------------

GQLParser::ElementPatternFillerContext::ElementPatternFillerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementVariableDeclarationContext* GQLParser::ElementPatternFillerContext::elementVariableDeclaration() {
  return getRuleContext<GQLParser::ElementVariableDeclarationContext>(0);
}

GQLParser::IsLabelExpressionContext* GQLParser::ElementPatternFillerContext::isLabelExpression() {
  return getRuleContext<GQLParser::IsLabelExpressionContext>(0);
}

GQLParser::ElementPatternPredicateContext* GQLParser::ElementPatternFillerContext::elementPatternPredicate() {
  return getRuleContext<GQLParser::ElementPatternPredicateContext>(0);
}


size_t GQLParser::ElementPatternFillerContext::getRuleIndex() const {
  return GQLParser::RuleElementPatternFiller;
}


GQLParser::ElementPatternFillerContext* GQLParser::elementPatternFiller() {
  ElementPatternFillerContext *_localctx = _tracker.createInstance<ElementPatternFillerContext>(_ctx, getState());
  enterRule(_localctx, 384, GQLParser::RuleElementPatternFiller);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2304);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 277) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 277)) & 281474976710655) != 0)) {
      setState(2303);
      elementVariableDeclaration();
    }
    setState(2307);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::IS || _la == GQLParser::COLON) {
      setState(2306);
      isLabelExpression();
    }
    setState(2310);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::WHERE || _la == GQLParser::LEFT_BRACE) {
      setState(2309);
      elementPatternPredicate();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementVariableDeclarationContext ------------------------------------------------------------------

GQLParser::ElementVariableDeclarationContext::ElementVariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementVariableContext* GQLParser::ElementVariableDeclarationContext::elementVariable() {
  return getRuleContext<GQLParser::ElementVariableContext>(0);
}


size_t GQLParser::ElementVariableDeclarationContext::getRuleIndex() const {
  return GQLParser::RuleElementVariableDeclaration;
}


GQLParser::ElementVariableDeclarationContext* GQLParser::elementVariableDeclaration() {
  ElementVariableDeclarationContext *_localctx = _tracker.createInstance<ElementVariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 386, GQLParser::RuleElementVariableDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2312);
    elementVariable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsLabelExpressionContext ------------------------------------------------------------------

GQLParser::IsLabelExpressionContext::IsLabelExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IsOrColonContext* GQLParser::IsLabelExpressionContext::isOrColon() {
  return getRuleContext<GQLParser::IsOrColonContext>(0);
}

GQLParser::LabelExpressionContext* GQLParser::IsLabelExpressionContext::labelExpression() {
  return getRuleContext<GQLParser::LabelExpressionContext>(0);
}


size_t GQLParser::IsLabelExpressionContext::getRuleIndex() const {
  return GQLParser::RuleIsLabelExpression;
}


GQLParser::IsLabelExpressionContext* GQLParser::isLabelExpression() {
  IsLabelExpressionContext *_localctx = _tracker.createInstance<IsLabelExpressionContext>(_ctx, getState());
  enterRule(_localctx, 388, GQLParser::RuleIsLabelExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2314);
    isOrColon();
    setState(2315);
    labelExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsOrColonContext ------------------------------------------------------------------

GQLParser::IsOrColonContext::IsOrColonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::IsOrColonContext::IS() {
  return getToken(GQLParser::IS, 0);
}

tree::TerminalNode* GQLParser::IsOrColonContext::COLON() {
  return getToken(GQLParser::COLON, 0);
}


size_t GQLParser::IsOrColonContext::getRuleIndex() const {
  return GQLParser::RuleIsOrColon;
}


GQLParser::IsOrColonContext* GQLParser::isOrColon() {
  IsOrColonContext *_localctx = _tracker.createInstance<IsOrColonContext>(_ctx, getState());
  enterRule(_localctx, 390, GQLParser::RuleIsOrColon);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2317);
    _la = _input->LA(1);
    if (!(_la == GQLParser::IS || _la == GQLParser::COLON)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementPatternPredicateContext ------------------------------------------------------------------

GQLParser::ElementPatternPredicateContext::ElementPatternPredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementPatternWhereClauseContext* GQLParser::ElementPatternPredicateContext::elementPatternWhereClause() {
  return getRuleContext<GQLParser::ElementPatternWhereClauseContext>(0);
}

GQLParser::ElementPropertySpecificationContext* GQLParser::ElementPatternPredicateContext::elementPropertySpecification() {
  return getRuleContext<GQLParser::ElementPropertySpecificationContext>(0);
}


size_t GQLParser::ElementPatternPredicateContext::getRuleIndex() const {
  return GQLParser::RuleElementPatternPredicate;
}


GQLParser::ElementPatternPredicateContext* GQLParser::elementPatternPredicate() {
  ElementPatternPredicateContext *_localctx = _tracker.createInstance<ElementPatternPredicateContext>(_ctx, getState());
  enterRule(_localctx, 392, GQLParser::RuleElementPatternPredicate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2321);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::WHERE: {
        enterOuterAlt(_localctx, 1);
        setState(2319);
        elementPatternWhereClause();
        break;
      }

      case GQLParser::LEFT_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(2320);
        elementPropertySpecification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementPatternWhereClauseContext ------------------------------------------------------------------

GQLParser::ElementPatternWhereClauseContext::ElementPatternWhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ElementPatternWhereClauseContext::WHERE() {
  return getToken(GQLParser::WHERE, 0);
}

GQLParser::SearchConditionContext* GQLParser::ElementPatternWhereClauseContext::searchCondition() {
  return getRuleContext<GQLParser::SearchConditionContext>(0);
}


size_t GQLParser::ElementPatternWhereClauseContext::getRuleIndex() const {
  return GQLParser::RuleElementPatternWhereClause;
}


GQLParser::ElementPatternWhereClauseContext* GQLParser::elementPatternWhereClause() {
  ElementPatternWhereClauseContext *_localctx = _tracker.createInstance<ElementPatternWhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 394, GQLParser::RuleElementPatternWhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2323);
    match(GQLParser::WHERE);
    setState(2324);
    searchCondition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementPropertySpecificationContext ------------------------------------------------------------------

GQLParser::ElementPropertySpecificationContext::ElementPropertySpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ElementPropertySpecificationContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

GQLParser::PropertyKeyValuePairListContext* GQLParser::ElementPropertySpecificationContext::propertyKeyValuePairList() {
  return getRuleContext<GQLParser::PropertyKeyValuePairListContext>(0);
}

tree::TerminalNode* GQLParser::ElementPropertySpecificationContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}


size_t GQLParser::ElementPropertySpecificationContext::getRuleIndex() const {
  return GQLParser::RuleElementPropertySpecification;
}


GQLParser::ElementPropertySpecificationContext* GQLParser::elementPropertySpecification() {
  ElementPropertySpecificationContext *_localctx = _tracker.createInstance<ElementPropertySpecificationContext>(_ctx, getState());
  enterRule(_localctx, 396, GQLParser::RuleElementPropertySpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2326);
    match(GQLParser::LEFT_BRACE);
    setState(2327);
    propertyKeyValuePairList();
    setState(2328);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyKeyValuePairListContext ------------------------------------------------------------------

GQLParser::PropertyKeyValuePairListContext::PropertyKeyValuePairListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::PropertyKeyValuePairContext *> GQLParser::PropertyKeyValuePairListContext::propertyKeyValuePair() {
  return getRuleContexts<GQLParser::PropertyKeyValuePairContext>();
}

GQLParser::PropertyKeyValuePairContext* GQLParser::PropertyKeyValuePairListContext::propertyKeyValuePair(size_t i) {
  return getRuleContext<GQLParser::PropertyKeyValuePairContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::PropertyKeyValuePairListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::PropertyKeyValuePairListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::PropertyKeyValuePairListContext::getRuleIndex() const {
  return GQLParser::RulePropertyKeyValuePairList;
}


GQLParser::PropertyKeyValuePairListContext* GQLParser::propertyKeyValuePairList() {
  PropertyKeyValuePairListContext *_localctx = _tracker.createInstance<PropertyKeyValuePairListContext>(_ctx, getState());
  enterRule(_localctx, 398, GQLParser::RulePropertyKeyValuePairList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2330);
    propertyKeyValuePair();
    setState(2335);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(2331);
      match(GQLParser::COMMA);
      setState(2332);
      propertyKeyValuePair();
      setState(2337);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyKeyValuePairContext ------------------------------------------------------------------

GQLParser::PropertyKeyValuePairContext::PropertyKeyValuePairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PropertyNameContext* GQLParser::PropertyKeyValuePairContext::propertyName() {
  return getRuleContext<GQLParser::PropertyNameContext>(0);
}

tree::TerminalNode* GQLParser::PropertyKeyValuePairContext::COLON() {
  return getToken(GQLParser::COLON, 0);
}

GQLParser::ValueExpressionContext* GQLParser::PropertyKeyValuePairContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::PropertyKeyValuePairContext::getRuleIndex() const {
  return GQLParser::RulePropertyKeyValuePair;
}


GQLParser::PropertyKeyValuePairContext* GQLParser::propertyKeyValuePair() {
  PropertyKeyValuePairContext *_localctx = _tracker.createInstance<PropertyKeyValuePairContext>(_ctx, getState());
  enterRule(_localctx, 400, GQLParser::RulePropertyKeyValuePair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2338);
    propertyName();
    setState(2339);
    match(GQLParser::COLON);
    setState(2340);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgePatternContext ------------------------------------------------------------------

GQLParser::EdgePatternContext::EdgePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FullEdgePatternContext* GQLParser::EdgePatternContext::fullEdgePattern() {
  return getRuleContext<GQLParser::FullEdgePatternContext>(0);
}

GQLParser::AbbreviatedEdgePatternContext* GQLParser::EdgePatternContext::abbreviatedEdgePattern() {
  return getRuleContext<GQLParser::AbbreviatedEdgePatternContext>(0);
}


size_t GQLParser::EdgePatternContext::getRuleIndex() const {
  return GQLParser::RuleEdgePattern;
}


GQLParser::EdgePatternContext* GQLParser::edgePattern() {
  EdgePatternContext *_localctx = _tracker.createInstance<EdgePatternContext>(_ctx, getState());
  enterRule(_localctx, 402, GQLParser::RuleEdgePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2344);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LEFT_ARROW_BRACKET:
      case GQLParser::LEFT_ARROW_TILDE_BRACKET:
      case GQLParser::MINUS_LEFT_BRACKET:
      case GQLParser::TILDE_LEFT_BRACKET: {
        enterOuterAlt(_localctx, 1);
        setState(2342);
        fullEdgePattern();
        break;
      }

      case GQLParser::LEFT_ARROW:
      case GQLParser::LEFT_ARROW_TILDE:
      case GQLParser::LEFT_MINUS_RIGHT:
      case GQLParser::RIGHT_ARROW:
      case GQLParser::TILDE_RIGHT_ARROW:
      case GQLParser::MINUS_SIGN:
      case GQLParser::TILDE: {
        enterOuterAlt(_localctx, 2);
        setState(2343);
        abbreviatedEdgePattern();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgePatternContext ------------------------------------------------------------------

GQLParser::FullEdgePatternContext::FullEdgePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FullEdgePointingLeftContext* GQLParser::FullEdgePatternContext::fullEdgePointingLeft() {
  return getRuleContext<GQLParser::FullEdgePointingLeftContext>(0);
}

GQLParser::FullEdgeUndirectedContext* GQLParser::FullEdgePatternContext::fullEdgeUndirected() {
  return getRuleContext<GQLParser::FullEdgeUndirectedContext>(0);
}

GQLParser::FullEdgePointingRightContext* GQLParser::FullEdgePatternContext::fullEdgePointingRight() {
  return getRuleContext<GQLParser::FullEdgePointingRightContext>(0);
}

GQLParser::FullEdgeLeftOrUndirectedContext* GQLParser::FullEdgePatternContext::fullEdgeLeftOrUndirected() {
  return getRuleContext<GQLParser::FullEdgeLeftOrUndirectedContext>(0);
}

GQLParser::FullEdgeUndirectedOrRightContext* GQLParser::FullEdgePatternContext::fullEdgeUndirectedOrRight() {
  return getRuleContext<GQLParser::FullEdgeUndirectedOrRightContext>(0);
}

GQLParser::FullEdgeLeftOrRightContext* GQLParser::FullEdgePatternContext::fullEdgeLeftOrRight() {
  return getRuleContext<GQLParser::FullEdgeLeftOrRightContext>(0);
}

GQLParser::FullEdgeAnyDirectionContext* GQLParser::FullEdgePatternContext::fullEdgeAnyDirection() {
  return getRuleContext<GQLParser::FullEdgeAnyDirectionContext>(0);
}


size_t GQLParser::FullEdgePatternContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgePattern;
}


GQLParser::FullEdgePatternContext* GQLParser::fullEdgePattern() {
  FullEdgePatternContext *_localctx = _tracker.createInstance<FullEdgePatternContext>(_ctx, getState());
  enterRule(_localctx, 404, GQLParser::RuleFullEdgePattern);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2353);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2346);
      fullEdgePointingLeft();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2347);
      fullEdgeUndirected();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2348);
      fullEdgePointingRight();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2349);
      fullEdgeLeftOrUndirected();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2350);
      fullEdgeUndirectedOrRight();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2351);
      fullEdgeLeftOrRight();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2352);
      fullEdgeAnyDirection();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgePointingLeftContext ------------------------------------------------------------------

GQLParser::FullEdgePointingLeftContext::FullEdgePointingLeftContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FullEdgePointingLeftContext::LEFT_ARROW_BRACKET() {
  return getToken(GQLParser::LEFT_ARROW_BRACKET, 0);
}

GQLParser::ElementPatternFillerContext* GQLParser::FullEdgePointingLeftContext::elementPatternFiller() {
  return getRuleContext<GQLParser::ElementPatternFillerContext>(0);
}

tree::TerminalNode* GQLParser::FullEdgePointingLeftContext::RIGHT_BRACKET_MINUS() {
  return getToken(GQLParser::RIGHT_BRACKET_MINUS, 0);
}


size_t GQLParser::FullEdgePointingLeftContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgePointingLeft;
}


GQLParser::FullEdgePointingLeftContext* GQLParser::fullEdgePointingLeft() {
  FullEdgePointingLeftContext *_localctx = _tracker.createInstance<FullEdgePointingLeftContext>(_ctx, getState());
  enterRule(_localctx, 406, GQLParser::RuleFullEdgePointingLeft);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2355);
    match(GQLParser::LEFT_ARROW_BRACKET);
    setState(2356);
    elementPatternFiller();
    setState(2357);
    match(GQLParser::RIGHT_BRACKET_MINUS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgeUndirectedContext ------------------------------------------------------------------

GQLParser::FullEdgeUndirectedContext::FullEdgeUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FullEdgeUndirectedContext::TILDE_LEFT_BRACKET() {
  return getToken(GQLParser::TILDE_LEFT_BRACKET, 0);
}

GQLParser::ElementPatternFillerContext* GQLParser::FullEdgeUndirectedContext::elementPatternFiller() {
  return getRuleContext<GQLParser::ElementPatternFillerContext>(0);
}

tree::TerminalNode* GQLParser::FullEdgeUndirectedContext::RIGHT_BRACKET_TILDE() {
  return getToken(GQLParser::RIGHT_BRACKET_TILDE, 0);
}


size_t GQLParser::FullEdgeUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgeUndirected;
}


GQLParser::FullEdgeUndirectedContext* GQLParser::fullEdgeUndirected() {
  FullEdgeUndirectedContext *_localctx = _tracker.createInstance<FullEdgeUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 408, GQLParser::RuleFullEdgeUndirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2359);
    match(GQLParser::TILDE_LEFT_BRACKET);
    setState(2360);
    elementPatternFiller();
    setState(2361);
    match(GQLParser::RIGHT_BRACKET_TILDE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgePointingRightContext ------------------------------------------------------------------

GQLParser::FullEdgePointingRightContext::FullEdgePointingRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FullEdgePointingRightContext::MINUS_LEFT_BRACKET() {
  return getToken(GQLParser::MINUS_LEFT_BRACKET, 0);
}

GQLParser::ElementPatternFillerContext* GQLParser::FullEdgePointingRightContext::elementPatternFiller() {
  return getRuleContext<GQLParser::ElementPatternFillerContext>(0);
}

tree::TerminalNode* GQLParser::FullEdgePointingRightContext::BRACKET_RIGHT_ARROW() {
  return getToken(GQLParser::BRACKET_RIGHT_ARROW, 0);
}


size_t GQLParser::FullEdgePointingRightContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgePointingRight;
}


GQLParser::FullEdgePointingRightContext* GQLParser::fullEdgePointingRight() {
  FullEdgePointingRightContext *_localctx = _tracker.createInstance<FullEdgePointingRightContext>(_ctx, getState());
  enterRule(_localctx, 410, GQLParser::RuleFullEdgePointingRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2363);
    match(GQLParser::MINUS_LEFT_BRACKET);
    setState(2364);
    elementPatternFiller();
    setState(2365);
    match(GQLParser::BRACKET_RIGHT_ARROW);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgeLeftOrUndirectedContext ------------------------------------------------------------------

GQLParser::FullEdgeLeftOrUndirectedContext::FullEdgeLeftOrUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FullEdgeLeftOrUndirectedContext::LEFT_ARROW_TILDE_BRACKET() {
  return getToken(GQLParser::LEFT_ARROW_TILDE_BRACKET, 0);
}

GQLParser::ElementPatternFillerContext* GQLParser::FullEdgeLeftOrUndirectedContext::elementPatternFiller() {
  return getRuleContext<GQLParser::ElementPatternFillerContext>(0);
}

tree::TerminalNode* GQLParser::FullEdgeLeftOrUndirectedContext::RIGHT_BRACKET_TILDE() {
  return getToken(GQLParser::RIGHT_BRACKET_TILDE, 0);
}


size_t GQLParser::FullEdgeLeftOrUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgeLeftOrUndirected;
}


GQLParser::FullEdgeLeftOrUndirectedContext* GQLParser::fullEdgeLeftOrUndirected() {
  FullEdgeLeftOrUndirectedContext *_localctx = _tracker.createInstance<FullEdgeLeftOrUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 412, GQLParser::RuleFullEdgeLeftOrUndirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2367);
    match(GQLParser::LEFT_ARROW_TILDE_BRACKET);
    setState(2368);
    elementPatternFiller();
    setState(2369);
    match(GQLParser::RIGHT_BRACKET_TILDE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgeUndirectedOrRightContext ------------------------------------------------------------------

GQLParser::FullEdgeUndirectedOrRightContext::FullEdgeUndirectedOrRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FullEdgeUndirectedOrRightContext::TILDE_LEFT_BRACKET() {
  return getToken(GQLParser::TILDE_LEFT_BRACKET, 0);
}

GQLParser::ElementPatternFillerContext* GQLParser::FullEdgeUndirectedOrRightContext::elementPatternFiller() {
  return getRuleContext<GQLParser::ElementPatternFillerContext>(0);
}

tree::TerminalNode* GQLParser::FullEdgeUndirectedOrRightContext::BRACKET_TILDE_RIGHT_ARROW() {
  return getToken(GQLParser::BRACKET_TILDE_RIGHT_ARROW, 0);
}


size_t GQLParser::FullEdgeUndirectedOrRightContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgeUndirectedOrRight;
}


GQLParser::FullEdgeUndirectedOrRightContext* GQLParser::fullEdgeUndirectedOrRight() {
  FullEdgeUndirectedOrRightContext *_localctx = _tracker.createInstance<FullEdgeUndirectedOrRightContext>(_ctx, getState());
  enterRule(_localctx, 414, GQLParser::RuleFullEdgeUndirectedOrRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2371);
    match(GQLParser::TILDE_LEFT_BRACKET);
    setState(2372);
    elementPatternFiller();
    setState(2373);
    match(GQLParser::BRACKET_TILDE_RIGHT_ARROW);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgeLeftOrRightContext ------------------------------------------------------------------

GQLParser::FullEdgeLeftOrRightContext::FullEdgeLeftOrRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FullEdgeLeftOrRightContext::LEFT_ARROW_BRACKET() {
  return getToken(GQLParser::LEFT_ARROW_BRACKET, 0);
}

GQLParser::ElementPatternFillerContext* GQLParser::FullEdgeLeftOrRightContext::elementPatternFiller() {
  return getRuleContext<GQLParser::ElementPatternFillerContext>(0);
}

tree::TerminalNode* GQLParser::FullEdgeLeftOrRightContext::BRACKET_RIGHT_ARROW() {
  return getToken(GQLParser::BRACKET_RIGHT_ARROW, 0);
}


size_t GQLParser::FullEdgeLeftOrRightContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgeLeftOrRight;
}


GQLParser::FullEdgeLeftOrRightContext* GQLParser::fullEdgeLeftOrRight() {
  FullEdgeLeftOrRightContext *_localctx = _tracker.createInstance<FullEdgeLeftOrRightContext>(_ctx, getState());
  enterRule(_localctx, 416, GQLParser::RuleFullEdgeLeftOrRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2375);
    match(GQLParser::LEFT_ARROW_BRACKET);
    setState(2376);
    elementPatternFiller();
    setState(2377);
    match(GQLParser::BRACKET_RIGHT_ARROW);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FullEdgeAnyDirectionContext ------------------------------------------------------------------

GQLParser::FullEdgeAnyDirectionContext::FullEdgeAnyDirectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FullEdgeAnyDirectionContext::MINUS_LEFT_BRACKET() {
  return getToken(GQLParser::MINUS_LEFT_BRACKET, 0);
}

GQLParser::ElementPatternFillerContext* GQLParser::FullEdgeAnyDirectionContext::elementPatternFiller() {
  return getRuleContext<GQLParser::ElementPatternFillerContext>(0);
}

tree::TerminalNode* GQLParser::FullEdgeAnyDirectionContext::RIGHT_BRACKET_MINUS() {
  return getToken(GQLParser::RIGHT_BRACKET_MINUS, 0);
}


size_t GQLParser::FullEdgeAnyDirectionContext::getRuleIndex() const {
  return GQLParser::RuleFullEdgeAnyDirection;
}


GQLParser::FullEdgeAnyDirectionContext* GQLParser::fullEdgeAnyDirection() {
  FullEdgeAnyDirectionContext *_localctx = _tracker.createInstance<FullEdgeAnyDirectionContext>(_ctx, getState());
  enterRule(_localctx, 418, GQLParser::RuleFullEdgeAnyDirection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2379);
    match(GQLParser::MINUS_LEFT_BRACKET);
    setState(2380);
    elementPatternFiller();
    setState(2381);
    match(GQLParser::RIGHT_BRACKET_MINUS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AbbreviatedEdgePatternContext ------------------------------------------------------------------

GQLParser::AbbreviatedEdgePatternContext::AbbreviatedEdgePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::AbbreviatedEdgePatternContext::LEFT_ARROW() {
  return getToken(GQLParser::LEFT_ARROW, 0);
}

tree::TerminalNode* GQLParser::AbbreviatedEdgePatternContext::TILDE() {
  return getToken(GQLParser::TILDE, 0);
}

tree::TerminalNode* GQLParser::AbbreviatedEdgePatternContext::RIGHT_ARROW() {
  return getToken(GQLParser::RIGHT_ARROW, 0);
}

tree::TerminalNode* GQLParser::AbbreviatedEdgePatternContext::LEFT_ARROW_TILDE() {
  return getToken(GQLParser::LEFT_ARROW_TILDE, 0);
}

tree::TerminalNode* GQLParser::AbbreviatedEdgePatternContext::TILDE_RIGHT_ARROW() {
  return getToken(GQLParser::TILDE_RIGHT_ARROW, 0);
}

tree::TerminalNode* GQLParser::AbbreviatedEdgePatternContext::LEFT_MINUS_RIGHT() {
  return getToken(GQLParser::LEFT_MINUS_RIGHT, 0);
}

tree::TerminalNode* GQLParser::AbbreviatedEdgePatternContext::MINUS_SIGN() {
  return getToken(GQLParser::MINUS_SIGN, 0);
}


size_t GQLParser::AbbreviatedEdgePatternContext::getRuleIndex() const {
  return GQLParser::RuleAbbreviatedEdgePattern;
}


GQLParser::AbbreviatedEdgePatternContext* GQLParser::abbreviatedEdgePattern() {
  AbbreviatedEdgePatternContext *_localctx = _tracker.createInstance<AbbreviatedEdgePatternContext>(_ctx, getState());
  enterRule(_localctx, 420, GQLParser::RuleAbbreviatedEdgePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2383);
    _la = _input->LA(1);
    if (!(((((_la - 335) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 335)) & 281612416714771) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParenthesizedPathPatternExpressionContext ------------------------------------------------------------------

GQLParser::ParenthesizedPathPatternExpressionContext::ParenthesizedPathPatternExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ParenthesizedPathPatternExpressionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::PathPatternExpressionContext* GQLParser::ParenthesizedPathPatternExpressionContext::pathPatternExpression() {
  return getRuleContext<GQLParser::PathPatternExpressionContext>(0);
}

tree::TerminalNode* GQLParser::ParenthesizedPathPatternExpressionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::SubpathVariableDeclarationContext* GQLParser::ParenthesizedPathPatternExpressionContext::subpathVariableDeclaration() {
  return getRuleContext<GQLParser::SubpathVariableDeclarationContext>(0);
}

GQLParser::PathModePrefixContext* GQLParser::ParenthesizedPathPatternExpressionContext::pathModePrefix() {
  return getRuleContext<GQLParser::PathModePrefixContext>(0);
}

GQLParser::ParenthesizedPathPatternWhereClauseContext* GQLParser::ParenthesizedPathPatternExpressionContext::parenthesizedPathPatternWhereClause() {
  return getRuleContext<GQLParser::ParenthesizedPathPatternWhereClauseContext>(0);
}


size_t GQLParser::ParenthesizedPathPatternExpressionContext::getRuleIndex() const {
  return GQLParser::RuleParenthesizedPathPatternExpression;
}


GQLParser::ParenthesizedPathPatternExpressionContext* GQLParser::parenthesizedPathPatternExpression() {
  ParenthesizedPathPatternExpressionContext *_localctx = _tracker.createInstance<ParenthesizedPathPatternExpressionContext>(_ctx, getState());
  enterRule(_localctx, 422, GQLParser::RuleParenthesizedPathPatternExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2385);
    match(GQLParser::LEFT_PAREN);
    setState(2387);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
    case 1: {
      setState(2386);
      subpathVariableDeclaration();
      break;
    }

    default:
      break;
    }
    setState(2390);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 277) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 277)) & 9088150798337) != 0)) {
      setState(2389);
      pathModePrefix();
    }
    setState(2392);
    pathPatternExpression();
    setState(2394);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::WHERE) {
      setState(2393);
      parenthesizedPathPatternWhereClause();
    }
    setState(2396);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubpathVariableDeclarationContext ------------------------------------------------------------------

GQLParser::SubpathVariableDeclarationContext::SubpathVariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SubpathVariableContext* GQLParser::SubpathVariableDeclarationContext::subpathVariable() {
  return getRuleContext<GQLParser::SubpathVariableContext>(0);
}

tree::TerminalNode* GQLParser::SubpathVariableDeclarationContext::EQUALS_OPERATOR() {
  return getToken(GQLParser::EQUALS_OPERATOR, 0);
}


size_t GQLParser::SubpathVariableDeclarationContext::getRuleIndex() const {
  return GQLParser::RuleSubpathVariableDeclaration;
}


GQLParser::SubpathVariableDeclarationContext* GQLParser::subpathVariableDeclaration() {
  SubpathVariableDeclarationContext *_localctx = _tracker.createInstance<SubpathVariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 424, GQLParser::RuleSubpathVariableDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2398);
    subpathVariable();
    setState(2399);
    match(GQLParser::EQUALS_OPERATOR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParenthesizedPathPatternWhereClauseContext ------------------------------------------------------------------

GQLParser::ParenthesizedPathPatternWhereClauseContext::ParenthesizedPathPatternWhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ParenthesizedPathPatternWhereClauseContext::WHERE() {
  return getToken(GQLParser::WHERE, 0);
}

GQLParser::SearchConditionContext* GQLParser::ParenthesizedPathPatternWhereClauseContext::searchCondition() {
  return getRuleContext<GQLParser::SearchConditionContext>(0);
}


size_t GQLParser::ParenthesizedPathPatternWhereClauseContext::getRuleIndex() const {
  return GQLParser::RuleParenthesizedPathPatternWhereClause;
}


GQLParser::ParenthesizedPathPatternWhereClauseContext* GQLParser::parenthesizedPathPatternWhereClause() {
  ParenthesizedPathPatternWhereClauseContext *_localctx = _tracker.createInstance<ParenthesizedPathPatternWhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 426, GQLParser::RuleParenthesizedPathPatternWhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2401);
    match(GQLParser::WHERE);
    setState(2402);
    searchCondition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelExpressionContext ------------------------------------------------------------------

GQLParser::LabelExpressionContext::LabelExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GQLParser::LabelExpressionContext::getRuleIndex() const {
  return GQLParser::RuleLabelExpression;
}

void GQLParser::LabelExpressionContext::copyFrom(LabelExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LabelExpressionNegationContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::LabelExpressionNegationContext::EXCLAMATION_MARK() {
  return getToken(GQLParser::EXCLAMATION_MARK, 0);
}

GQLParser::LabelExpressionContext* GQLParser::LabelExpressionNegationContext::labelExpression() {
  return getRuleContext<GQLParser::LabelExpressionContext>(0);
}

GQLParser::LabelExpressionNegationContext::LabelExpressionNegationContext(LabelExpressionContext *ctx) { copyFrom(ctx); }


//----------------- LabelExpressionDisjunctionContext ------------------------------------------------------------------

std::vector<GQLParser::LabelExpressionContext *> GQLParser::LabelExpressionDisjunctionContext::labelExpression() {
  return getRuleContexts<GQLParser::LabelExpressionContext>();
}

GQLParser::LabelExpressionContext* GQLParser::LabelExpressionDisjunctionContext::labelExpression(size_t i) {
  return getRuleContext<GQLParser::LabelExpressionContext>(i);
}

tree::TerminalNode* GQLParser::LabelExpressionDisjunctionContext::VERTICAL_BAR() {
  return getToken(GQLParser::VERTICAL_BAR, 0);
}

GQLParser::LabelExpressionDisjunctionContext::LabelExpressionDisjunctionContext(LabelExpressionContext *ctx) { copyFrom(ctx); }


//----------------- LabelExpressionParenthesizedContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::LabelExpressionParenthesizedContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::LabelExpressionContext* GQLParser::LabelExpressionParenthesizedContext::labelExpression() {
  return getRuleContext<GQLParser::LabelExpressionContext>(0);
}

tree::TerminalNode* GQLParser::LabelExpressionParenthesizedContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::LabelExpressionParenthesizedContext::LabelExpressionParenthesizedContext(LabelExpressionContext *ctx) { copyFrom(ctx); }


//----------------- LabelExpressionWildcardContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::LabelExpressionWildcardContext::PERCENT() {
  return getToken(GQLParser::PERCENT, 0);
}

GQLParser::LabelExpressionWildcardContext::LabelExpressionWildcardContext(LabelExpressionContext *ctx) { copyFrom(ctx); }


//----------------- LabelExpressionConjunctionContext ------------------------------------------------------------------

std::vector<GQLParser::LabelExpressionContext *> GQLParser::LabelExpressionConjunctionContext::labelExpression() {
  return getRuleContexts<GQLParser::LabelExpressionContext>();
}

GQLParser::LabelExpressionContext* GQLParser::LabelExpressionConjunctionContext::labelExpression(size_t i) {
  return getRuleContext<GQLParser::LabelExpressionContext>(i);
}

tree::TerminalNode* GQLParser::LabelExpressionConjunctionContext::AMPERSAND() {
  return getToken(GQLParser::AMPERSAND, 0);
}

GQLParser::LabelExpressionConjunctionContext::LabelExpressionConjunctionContext(LabelExpressionContext *ctx) { copyFrom(ctx); }


//----------------- LabelExpressionNameContext ------------------------------------------------------------------

GQLParser::LabelNameContext* GQLParser::LabelExpressionNameContext::labelName() {
  return getRuleContext<GQLParser::LabelNameContext>(0);
}

GQLParser::LabelExpressionNameContext::LabelExpressionNameContext(LabelExpressionContext *ctx) { copyFrom(ctx); }



GQLParser::LabelExpressionContext* GQLParser::labelExpression() {
   return labelExpression(0);
}

GQLParser::LabelExpressionContext* GQLParser::labelExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  GQLParser::LabelExpressionContext *_localctx = _tracker.createInstance<LabelExpressionContext>(_ctx, parentState);
  GQLParser::LabelExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 428;
  enterRecursionRule(_localctx, 428, GQLParser::RuleLabelExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2413);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::EXCLAMATION_MARK: {
        _localctx = _tracker.createInstance<LabelExpressionNegationContext>(_localctx);
        _ctx = _localctx;
        previousContext = _localctx;

        setState(2405);
        match(GQLParser::EXCLAMATION_MARK);
        setState(2406);
        labelExpression(6);
        break;
      }

      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::ACCENT_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::ACYCLIC:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::CONNECTING:
      case GQLParser::DESTINATION:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::EDGE:
      case GQLParser::EDGES:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENTS:
      case GQLParser::FIRST:
      case GQLParser::GRAPH:
      case GQLParser::GROUPS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODE:
      case GQLParser::NORMALIZED:
      case GQLParser::ONLY:
      case GQLParser::ORDINALITY:
      case GQLParser::PROPERTY:
      case GQLParser::READ:
      case GQLParser::RELATIONSHIP:
      case GQLParser::RELATIONSHIPS:
      case GQLParser::REPEATABLE:
      case GQLParser::SHORTEST:
      case GQLParser::SIMPLE:
      case GQLParser::SOURCE:
      case GQLParser::TABLE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRANSACTION:
      case GQLParser::TYPE:
      case GQLParser::UNDIRECTED:
      case GQLParser::VERTEX:
      case GQLParser::WALK:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::ZONE:
      case GQLParser::REGULAR_IDENTIFIER: {
        _localctx = _tracker.createInstance<LabelExpressionNameContext>(_localctx);
        _ctx = _localctx;
        previousContext = _localctx;
        setState(2407);
        labelName();
        break;
      }

      case GQLParser::PERCENT: {
        _localctx = _tracker.createInstance<LabelExpressionWildcardContext>(_localctx);
        _ctx = _localctx;
        previousContext = _localctx;
        setState(2408);
        match(GQLParser::PERCENT);
        break;
      }

      case GQLParser::LEFT_PAREN: {
        _localctx = _tracker.createInstance<LabelExpressionParenthesizedContext>(_localctx);
        _ctx = _localctx;
        previousContext = _localctx;
        setState(2409);
        match(GQLParser::LEFT_PAREN);
        setState(2410);
        labelExpression(0);
        setState(2411);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(2423);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2421);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<LabelExpressionConjunctionContext>(_tracker.createInstance<LabelExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLabelExpression);
          setState(2415);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(2416);
          match(GQLParser::AMPERSAND);
          setState(2417);
          labelExpression(6);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<LabelExpressionDisjunctionContext>(_tracker.createInstance<LabelExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLabelExpression);
          setState(2418);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(2419);
          match(GQLParser::VERTICAL_BAR);
          setState(2420);
          labelExpression(5);
          break;
        }

        default:
          break;
        } 
      }
      setState(2425);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PathVariableReferenceContext ------------------------------------------------------------------

GQLParser::PathVariableReferenceContext::PathVariableReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableReferenceContext* GQLParser::PathVariableReferenceContext::bindingVariableReference() {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(0);
}


size_t GQLParser::PathVariableReferenceContext::getRuleIndex() const {
  return GQLParser::RulePathVariableReference;
}


GQLParser::PathVariableReferenceContext* GQLParser::pathVariableReference() {
  PathVariableReferenceContext *_localctx = _tracker.createInstance<PathVariableReferenceContext>(_ctx, getState());
  enterRule(_localctx, 430, GQLParser::RulePathVariableReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2426);
    bindingVariableReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementVariableReferenceContext ------------------------------------------------------------------

GQLParser::ElementVariableReferenceContext::ElementVariableReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableReferenceContext* GQLParser::ElementVariableReferenceContext::bindingVariableReference() {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(0);
}


size_t GQLParser::ElementVariableReferenceContext::getRuleIndex() const {
  return GQLParser::RuleElementVariableReference;
}


GQLParser::ElementVariableReferenceContext* GQLParser::elementVariableReference() {
  ElementVariableReferenceContext *_localctx = _tracker.createInstance<ElementVariableReferenceContext>(_ctx, getState());
  enterRule(_localctx, 432, GQLParser::RuleElementVariableReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2428);
    bindingVariableReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphPatternQuantifierContext ------------------------------------------------------------------

GQLParser::GraphPatternQuantifierContext::GraphPatternQuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GraphPatternQuantifierContext::ASTERISK() {
  return getToken(GQLParser::ASTERISK, 0);
}

tree::TerminalNode* GQLParser::GraphPatternQuantifierContext::PLUS_SIGN() {
  return getToken(GQLParser::PLUS_SIGN, 0);
}

GQLParser::FixedQuantifierContext* GQLParser::GraphPatternQuantifierContext::fixedQuantifier() {
  return getRuleContext<GQLParser::FixedQuantifierContext>(0);
}

GQLParser::GeneralQuantifierContext* GQLParser::GraphPatternQuantifierContext::generalQuantifier() {
  return getRuleContext<GQLParser::GeneralQuantifierContext>(0);
}


size_t GQLParser::GraphPatternQuantifierContext::getRuleIndex() const {
  return GQLParser::RuleGraphPatternQuantifier;
}


GQLParser::GraphPatternQuantifierContext* GQLParser::graphPatternQuantifier() {
  GraphPatternQuantifierContext *_localctx = _tracker.createInstance<GraphPatternQuantifierContext>(_ctx, getState());
  enterRule(_localctx, 434, GQLParser::RuleGraphPatternQuantifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2434);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2430);
      match(GQLParser::ASTERISK);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2431);
      match(GQLParser::PLUS_SIGN);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2432);
      fixedQuantifier();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2433);
      generalQuantifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FixedQuantifierContext ------------------------------------------------------------------

GQLParser::FixedQuantifierContext::FixedQuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FixedQuantifierContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

GQLParser::UnsignedIntegerContext* GQLParser::FixedQuantifierContext::unsignedInteger() {
  return getRuleContext<GQLParser::UnsignedIntegerContext>(0);
}

tree::TerminalNode* GQLParser::FixedQuantifierContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}


size_t GQLParser::FixedQuantifierContext::getRuleIndex() const {
  return GQLParser::RuleFixedQuantifier;
}


GQLParser::FixedQuantifierContext* GQLParser::fixedQuantifier() {
  FixedQuantifierContext *_localctx = _tracker.createInstance<FixedQuantifierContext>(_ctx, getState());
  enterRule(_localctx, 436, GQLParser::RuleFixedQuantifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2436);
    match(GQLParser::LEFT_BRACE);
    setState(2437);
    unsignedInteger();
    setState(2438);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GeneralQuantifierContext ------------------------------------------------------------------

GQLParser::GeneralQuantifierContext::GeneralQuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GeneralQuantifierContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

tree::TerminalNode* GQLParser::GeneralQuantifierContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

tree::TerminalNode* GQLParser::GeneralQuantifierContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}

GQLParser::LowerBoundContext* GQLParser::GeneralQuantifierContext::lowerBound() {
  return getRuleContext<GQLParser::LowerBoundContext>(0);
}

GQLParser::UpperBoundContext* GQLParser::GeneralQuantifierContext::upperBound() {
  return getRuleContext<GQLParser::UpperBoundContext>(0);
}


size_t GQLParser::GeneralQuantifierContext::getRuleIndex() const {
  return GQLParser::RuleGeneralQuantifier;
}


GQLParser::GeneralQuantifierContext* GQLParser::generalQuantifier() {
  GeneralQuantifierContext *_localctx = _tracker.createInstance<GeneralQuantifierContext>(_ctx, getState());
  enterRule(_localctx, 438, GQLParser::RuleGeneralQuantifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2440);
    match(GQLParser::LEFT_BRACE);
    setState(2442);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 983040) != 0)) {
      setState(2441);
      lowerBound();
    }
    setState(2444);
    match(GQLParser::COMMA);
    setState(2446);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 983040) != 0)) {
      setState(2445);
      upperBound();
    }
    setState(2448);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LowerBoundContext ------------------------------------------------------------------

GQLParser::LowerBoundContext::LowerBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnsignedIntegerContext* GQLParser::LowerBoundContext::unsignedInteger() {
  return getRuleContext<GQLParser::UnsignedIntegerContext>(0);
}


size_t GQLParser::LowerBoundContext::getRuleIndex() const {
  return GQLParser::RuleLowerBound;
}


GQLParser::LowerBoundContext* GQLParser::lowerBound() {
  LowerBoundContext *_localctx = _tracker.createInstance<LowerBoundContext>(_ctx, getState());
  enterRule(_localctx, 440, GQLParser::RuleLowerBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2450);
    unsignedInteger();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UpperBoundContext ------------------------------------------------------------------

GQLParser::UpperBoundContext::UpperBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnsignedIntegerContext* GQLParser::UpperBoundContext::unsignedInteger() {
  return getRuleContext<GQLParser::UnsignedIntegerContext>(0);
}


size_t GQLParser::UpperBoundContext::getRuleIndex() const {
  return GQLParser::RuleUpperBound;
}


GQLParser::UpperBoundContext* GQLParser::upperBound() {
  UpperBoundContext *_localctx = _tracker.createInstance<UpperBoundContext>(_ctx, getState());
  enterRule(_localctx, 442, GQLParser::RuleUpperBound);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2452);
    unsignedInteger();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedPathPatternExpressionContext ------------------------------------------------------------------

GQLParser::SimplifiedPathPatternExpressionContext::SimplifiedPathPatternExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimplifiedDefaultingLeftContext* GQLParser::SimplifiedPathPatternExpressionContext::simplifiedDefaultingLeft() {
  return getRuleContext<GQLParser::SimplifiedDefaultingLeftContext>(0);
}

GQLParser::SimplifiedDefaultingUndirectedContext* GQLParser::SimplifiedPathPatternExpressionContext::simplifiedDefaultingUndirected() {
  return getRuleContext<GQLParser::SimplifiedDefaultingUndirectedContext>(0);
}

GQLParser::SimplifiedDefaultingRightContext* GQLParser::SimplifiedPathPatternExpressionContext::simplifiedDefaultingRight() {
  return getRuleContext<GQLParser::SimplifiedDefaultingRightContext>(0);
}

GQLParser::SimplifiedDefaultingLeftOrUndirectedContext* GQLParser::SimplifiedPathPatternExpressionContext::simplifiedDefaultingLeftOrUndirected() {
  return getRuleContext<GQLParser::SimplifiedDefaultingLeftOrUndirectedContext>(0);
}

GQLParser::SimplifiedDefaultingUndirectedOrRightContext* GQLParser::SimplifiedPathPatternExpressionContext::simplifiedDefaultingUndirectedOrRight() {
  return getRuleContext<GQLParser::SimplifiedDefaultingUndirectedOrRightContext>(0);
}

GQLParser::SimplifiedDefaultingLeftOrRightContext* GQLParser::SimplifiedPathPatternExpressionContext::simplifiedDefaultingLeftOrRight() {
  return getRuleContext<GQLParser::SimplifiedDefaultingLeftOrRightContext>(0);
}

GQLParser::SimplifiedDefaultingAnyDirectionContext* GQLParser::SimplifiedPathPatternExpressionContext::simplifiedDefaultingAnyDirection() {
  return getRuleContext<GQLParser::SimplifiedDefaultingAnyDirectionContext>(0);
}


size_t GQLParser::SimplifiedPathPatternExpressionContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedPathPatternExpression;
}


GQLParser::SimplifiedPathPatternExpressionContext* GQLParser::simplifiedPathPatternExpression() {
  SimplifiedPathPatternExpressionContext *_localctx = _tracker.createInstance<SimplifiedPathPatternExpressionContext>(_ctx, getState());
  enterRule(_localctx, 444, GQLParser::RuleSimplifiedPathPatternExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2461);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2454);
      simplifiedDefaultingLeft();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2455);
      simplifiedDefaultingUndirected();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2456);
      simplifiedDefaultingRight();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2457);
      simplifiedDefaultingLeftOrUndirected();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2458);
      simplifiedDefaultingUndirectedOrRight();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2459);
      simplifiedDefaultingLeftOrRight();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2460);
      simplifiedDefaultingAnyDirection();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedDefaultingLeftContext ------------------------------------------------------------------

GQLParser::SimplifiedDefaultingLeftContext::SimplifiedDefaultingLeftContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingLeftContext::LEFT_MINUS_SLASH() {
  return getToken(GQLParser::LEFT_MINUS_SLASH, 0);
}

GQLParser::SimplifiedContentsContext* GQLParser::SimplifiedDefaultingLeftContext::simplifiedContents() {
  return getRuleContext<GQLParser::SimplifiedContentsContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingLeftContext::SLASH_MINUS() {
  return getToken(GQLParser::SLASH_MINUS, 0);
}


size_t GQLParser::SimplifiedDefaultingLeftContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedDefaultingLeft;
}


GQLParser::SimplifiedDefaultingLeftContext* GQLParser::simplifiedDefaultingLeft() {
  SimplifiedDefaultingLeftContext *_localctx = _tracker.createInstance<SimplifiedDefaultingLeftContext>(_ctx, getState());
  enterRule(_localctx, 446, GQLParser::RuleSimplifiedDefaultingLeft);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2463);
    match(GQLParser::LEFT_MINUS_SLASH);
    setState(2464);
    simplifiedContents();
    setState(2465);
    match(GQLParser::SLASH_MINUS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedDefaultingUndirectedContext ------------------------------------------------------------------

GQLParser::SimplifiedDefaultingUndirectedContext::SimplifiedDefaultingUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingUndirectedContext::TILDE_SLASH() {
  return getToken(GQLParser::TILDE_SLASH, 0);
}

GQLParser::SimplifiedContentsContext* GQLParser::SimplifiedDefaultingUndirectedContext::simplifiedContents() {
  return getRuleContext<GQLParser::SimplifiedContentsContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingUndirectedContext::SLASH_TILDE() {
  return getToken(GQLParser::SLASH_TILDE, 0);
}


size_t GQLParser::SimplifiedDefaultingUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedDefaultingUndirected;
}


GQLParser::SimplifiedDefaultingUndirectedContext* GQLParser::simplifiedDefaultingUndirected() {
  SimplifiedDefaultingUndirectedContext *_localctx = _tracker.createInstance<SimplifiedDefaultingUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 448, GQLParser::RuleSimplifiedDefaultingUndirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2467);
    match(GQLParser::TILDE_SLASH);
    setState(2468);
    simplifiedContents();
    setState(2469);
    match(GQLParser::SLASH_TILDE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedDefaultingRightContext ------------------------------------------------------------------

GQLParser::SimplifiedDefaultingRightContext::SimplifiedDefaultingRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingRightContext::MINUS_SLASH() {
  return getToken(GQLParser::MINUS_SLASH, 0);
}

GQLParser::SimplifiedContentsContext* GQLParser::SimplifiedDefaultingRightContext::simplifiedContents() {
  return getRuleContext<GQLParser::SimplifiedContentsContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingRightContext::SLASH_MINUS_RIGHT() {
  return getToken(GQLParser::SLASH_MINUS_RIGHT, 0);
}


size_t GQLParser::SimplifiedDefaultingRightContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedDefaultingRight;
}


GQLParser::SimplifiedDefaultingRightContext* GQLParser::simplifiedDefaultingRight() {
  SimplifiedDefaultingRightContext *_localctx = _tracker.createInstance<SimplifiedDefaultingRightContext>(_ctx, getState());
  enterRule(_localctx, 450, GQLParser::RuleSimplifiedDefaultingRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2471);
    match(GQLParser::MINUS_SLASH);
    setState(2472);
    simplifiedContents();
    setState(2473);
    match(GQLParser::SLASH_MINUS_RIGHT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedDefaultingLeftOrUndirectedContext ------------------------------------------------------------------

GQLParser::SimplifiedDefaultingLeftOrUndirectedContext::SimplifiedDefaultingLeftOrUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingLeftOrUndirectedContext::LEFT_TILDE_SLASH() {
  return getToken(GQLParser::LEFT_TILDE_SLASH, 0);
}

GQLParser::SimplifiedContentsContext* GQLParser::SimplifiedDefaultingLeftOrUndirectedContext::simplifiedContents() {
  return getRuleContext<GQLParser::SimplifiedContentsContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingLeftOrUndirectedContext::SLASH_TILDE() {
  return getToken(GQLParser::SLASH_TILDE, 0);
}


size_t GQLParser::SimplifiedDefaultingLeftOrUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedDefaultingLeftOrUndirected;
}


GQLParser::SimplifiedDefaultingLeftOrUndirectedContext* GQLParser::simplifiedDefaultingLeftOrUndirected() {
  SimplifiedDefaultingLeftOrUndirectedContext *_localctx = _tracker.createInstance<SimplifiedDefaultingLeftOrUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 452, GQLParser::RuleSimplifiedDefaultingLeftOrUndirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2475);
    match(GQLParser::LEFT_TILDE_SLASH);
    setState(2476);
    simplifiedContents();
    setState(2477);
    match(GQLParser::SLASH_TILDE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedDefaultingUndirectedOrRightContext ------------------------------------------------------------------

GQLParser::SimplifiedDefaultingUndirectedOrRightContext::SimplifiedDefaultingUndirectedOrRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingUndirectedOrRightContext::TILDE_SLASH() {
  return getToken(GQLParser::TILDE_SLASH, 0);
}

GQLParser::SimplifiedContentsContext* GQLParser::SimplifiedDefaultingUndirectedOrRightContext::simplifiedContents() {
  return getRuleContext<GQLParser::SimplifiedContentsContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingUndirectedOrRightContext::SLASH_TILDE_RIGHT() {
  return getToken(GQLParser::SLASH_TILDE_RIGHT, 0);
}


size_t GQLParser::SimplifiedDefaultingUndirectedOrRightContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedDefaultingUndirectedOrRight;
}


GQLParser::SimplifiedDefaultingUndirectedOrRightContext* GQLParser::simplifiedDefaultingUndirectedOrRight() {
  SimplifiedDefaultingUndirectedOrRightContext *_localctx = _tracker.createInstance<SimplifiedDefaultingUndirectedOrRightContext>(_ctx, getState());
  enterRule(_localctx, 454, GQLParser::RuleSimplifiedDefaultingUndirectedOrRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2479);
    match(GQLParser::TILDE_SLASH);
    setState(2480);
    simplifiedContents();
    setState(2481);
    match(GQLParser::SLASH_TILDE_RIGHT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedDefaultingLeftOrRightContext ------------------------------------------------------------------

GQLParser::SimplifiedDefaultingLeftOrRightContext::SimplifiedDefaultingLeftOrRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingLeftOrRightContext::LEFT_MINUS_SLASH() {
  return getToken(GQLParser::LEFT_MINUS_SLASH, 0);
}

GQLParser::SimplifiedContentsContext* GQLParser::SimplifiedDefaultingLeftOrRightContext::simplifiedContents() {
  return getRuleContext<GQLParser::SimplifiedContentsContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingLeftOrRightContext::SLASH_MINUS_RIGHT() {
  return getToken(GQLParser::SLASH_MINUS_RIGHT, 0);
}


size_t GQLParser::SimplifiedDefaultingLeftOrRightContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedDefaultingLeftOrRight;
}


GQLParser::SimplifiedDefaultingLeftOrRightContext* GQLParser::simplifiedDefaultingLeftOrRight() {
  SimplifiedDefaultingLeftOrRightContext *_localctx = _tracker.createInstance<SimplifiedDefaultingLeftOrRightContext>(_ctx, getState());
  enterRule(_localctx, 456, GQLParser::RuleSimplifiedDefaultingLeftOrRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2483);
    match(GQLParser::LEFT_MINUS_SLASH);
    setState(2484);
    simplifiedContents();
    setState(2485);
    match(GQLParser::SLASH_MINUS_RIGHT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedDefaultingAnyDirectionContext ------------------------------------------------------------------

GQLParser::SimplifiedDefaultingAnyDirectionContext::SimplifiedDefaultingAnyDirectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingAnyDirectionContext::MINUS_SLASH() {
  return getToken(GQLParser::MINUS_SLASH, 0);
}

GQLParser::SimplifiedContentsContext* GQLParser::SimplifiedDefaultingAnyDirectionContext::simplifiedContents() {
  return getRuleContext<GQLParser::SimplifiedContentsContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedDefaultingAnyDirectionContext::SLASH_MINUS() {
  return getToken(GQLParser::SLASH_MINUS, 0);
}


size_t GQLParser::SimplifiedDefaultingAnyDirectionContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedDefaultingAnyDirection;
}


GQLParser::SimplifiedDefaultingAnyDirectionContext* GQLParser::simplifiedDefaultingAnyDirection() {
  SimplifiedDefaultingAnyDirectionContext *_localctx = _tracker.createInstance<SimplifiedDefaultingAnyDirectionContext>(_ctx, getState());
  enterRule(_localctx, 458, GQLParser::RuleSimplifiedDefaultingAnyDirection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2487);
    match(GQLParser::MINUS_SLASH);
    setState(2488);
    simplifiedContents();
    setState(2489);
    match(GQLParser::SLASH_MINUS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedContentsContext ------------------------------------------------------------------

GQLParser::SimplifiedContentsContext::SimplifiedContentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimplifiedTermContext* GQLParser::SimplifiedContentsContext::simplifiedTerm() {
  return getRuleContext<GQLParser::SimplifiedTermContext>(0);
}

GQLParser::SimplifiedPathUnionContext* GQLParser::SimplifiedContentsContext::simplifiedPathUnion() {
  return getRuleContext<GQLParser::SimplifiedPathUnionContext>(0);
}

GQLParser::SimplifiedMultisetAlternationContext* GQLParser::SimplifiedContentsContext::simplifiedMultisetAlternation() {
  return getRuleContext<GQLParser::SimplifiedMultisetAlternationContext>(0);
}


size_t GQLParser::SimplifiedContentsContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedContents;
}


GQLParser::SimplifiedContentsContext* GQLParser::simplifiedContents() {
  SimplifiedContentsContext *_localctx = _tracker.createInstance<SimplifiedContentsContext>(_ctx, getState());
  enterRule(_localctx, 460, GQLParser::RuleSimplifiedContents);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2494);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2491);
      simplifiedTerm(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2492);
      simplifiedPathUnion();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2493);
      simplifiedMultisetAlternation();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedPathUnionContext ------------------------------------------------------------------

GQLParser::SimplifiedPathUnionContext::SimplifiedPathUnionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SimplifiedTermContext *> GQLParser::SimplifiedPathUnionContext::simplifiedTerm() {
  return getRuleContexts<GQLParser::SimplifiedTermContext>();
}

GQLParser::SimplifiedTermContext* GQLParser::SimplifiedPathUnionContext::simplifiedTerm(size_t i) {
  return getRuleContext<GQLParser::SimplifiedTermContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::SimplifiedPathUnionContext::VERTICAL_BAR() {
  return getTokens(GQLParser::VERTICAL_BAR);
}

tree::TerminalNode* GQLParser::SimplifiedPathUnionContext::VERTICAL_BAR(size_t i) {
  return getToken(GQLParser::VERTICAL_BAR, i);
}


size_t GQLParser::SimplifiedPathUnionContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedPathUnion;
}


GQLParser::SimplifiedPathUnionContext* GQLParser::simplifiedPathUnion() {
  SimplifiedPathUnionContext *_localctx = _tracker.createInstance<SimplifiedPathUnionContext>(_ctx, getState());
  enterRule(_localctx, 462, GQLParser::RuleSimplifiedPathUnion);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2496);
    simplifiedTerm(0);
    setState(2497);
    match(GQLParser::VERTICAL_BAR);
    setState(2498);
    simplifiedTerm(0);
    setState(2503);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::VERTICAL_BAR) {
      setState(2499);
      match(GQLParser::VERTICAL_BAR);
      setState(2500);
      simplifiedTerm(0);
      setState(2505);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedMultisetAlternationContext ------------------------------------------------------------------

GQLParser::SimplifiedMultisetAlternationContext::SimplifiedMultisetAlternationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SimplifiedTermContext *> GQLParser::SimplifiedMultisetAlternationContext::simplifiedTerm() {
  return getRuleContexts<GQLParser::SimplifiedTermContext>();
}

GQLParser::SimplifiedTermContext* GQLParser::SimplifiedMultisetAlternationContext::simplifiedTerm(size_t i) {
  return getRuleContext<GQLParser::SimplifiedTermContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::SimplifiedMultisetAlternationContext::MULTISET_ALTERNATION_OPERATOR() {
  return getTokens(GQLParser::MULTISET_ALTERNATION_OPERATOR);
}

tree::TerminalNode* GQLParser::SimplifiedMultisetAlternationContext::MULTISET_ALTERNATION_OPERATOR(size_t i) {
  return getToken(GQLParser::MULTISET_ALTERNATION_OPERATOR, i);
}


size_t GQLParser::SimplifiedMultisetAlternationContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedMultisetAlternation;
}


GQLParser::SimplifiedMultisetAlternationContext* GQLParser::simplifiedMultisetAlternation() {
  SimplifiedMultisetAlternationContext *_localctx = _tracker.createInstance<SimplifiedMultisetAlternationContext>(_ctx, getState());
  enterRule(_localctx, 464, GQLParser::RuleSimplifiedMultisetAlternation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2506);
    simplifiedTerm(0);
    setState(2507);
    match(GQLParser::MULTISET_ALTERNATION_OPERATOR);
    setState(2508);
    simplifiedTerm(0);
    setState(2513);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::MULTISET_ALTERNATION_OPERATOR) {
      setState(2509);
      match(GQLParser::MULTISET_ALTERNATION_OPERATOR);
      setState(2510);
      simplifiedTerm(0);
      setState(2515);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedTermContext ------------------------------------------------------------------

GQLParser::SimplifiedTermContext::SimplifiedTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GQLParser::SimplifiedTermContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedTerm;
}

void GQLParser::SimplifiedTermContext::copyFrom(SimplifiedTermContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SimplifiedFactorLowLabelContext ------------------------------------------------------------------

GQLParser::SimplifiedFactorLowContext* GQLParser::SimplifiedFactorLowLabelContext::simplifiedFactorLow() {
  return getRuleContext<GQLParser::SimplifiedFactorLowContext>(0);
}

GQLParser::SimplifiedFactorLowLabelContext::SimplifiedFactorLowLabelContext(SimplifiedTermContext *ctx) { copyFrom(ctx); }


//----------------- SimplifiedConcatenationLabelContext ------------------------------------------------------------------

GQLParser::SimplifiedTermContext* GQLParser::SimplifiedConcatenationLabelContext::simplifiedTerm() {
  return getRuleContext<GQLParser::SimplifiedTermContext>(0);
}

GQLParser::SimplifiedFactorLowContext* GQLParser::SimplifiedConcatenationLabelContext::simplifiedFactorLow() {
  return getRuleContext<GQLParser::SimplifiedFactorLowContext>(0);
}

GQLParser::SimplifiedConcatenationLabelContext::SimplifiedConcatenationLabelContext(SimplifiedTermContext *ctx) { copyFrom(ctx); }



GQLParser::SimplifiedTermContext* GQLParser::simplifiedTerm() {
   return simplifiedTerm(0);
}

GQLParser::SimplifiedTermContext* GQLParser::simplifiedTerm(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  GQLParser::SimplifiedTermContext *_localctx = _tracker.createInstance<SimplifiedTermContext>(_ctx, parentState);
  GQLParser::SimplifiedTermContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 466;
  enterRecursionRule(_localctx, 466, GQLParser::RuleSimplifiedTerm, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<SimplifiedFactorLowLabelContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(2517);
    simplifiedFactorLow(0);
    _ctx->stop = _input->LT(-1);
    setState(2523);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<SimplifiedConcatenationLabelContext>(_tracker.createInstance<SimplifiedTermContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RuleSimplifiedTerm);
        setState(2519);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2520);
        simplifiedFactorLow(0); 
      }
      setState(2525);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SimplifiedFactorLowContext ------------------------------------------------------------------

GQLParser::SimplifiedFactorLowContext::SimplifiedFactorLowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GQLParser::SimplifiedFactorLowContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedFactorLow;
}

void GQLParser::SimplifiedFactorLowContext::copyFrom(SimplifiedFactorLowContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SimplifiedConjunctionLabelContext ------------------------------------------------------------------

GQLParser::SimplifiedFactorLowContext* GQLParser::SimplifiedConjunctionLabelContext::simplifiedFactorLow() {
  return getRuleContext<GQLParser::SimplifiedFactorLowContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedConjunctionLabelContext::AMPERSAND() {
  return getToken(GQLParser::AMPERSAND, 0);
}

GQLParser::SimplifiedFactorHighContext* GQLParser::SimplifiedConjunctionLabelContext::simplifiedFactorHigh() {
  return getRuleContext<GQLParser::SimplifiedFactorHighContext>(0);
}

GQLParser::SimplifiedConjunctionLabelContext::SimplifiedConjunctionLabelContext(SimplifiedFactorLowContext *ctx) { copyFrom(ctx); }


//----------------- SimplifiedFactorHighLabelContext ------------------------------------------------------------------

GQLParser::SimplifiedFactorHighContext* GQLParser::SimplifiedFactorHighLabelContext::simplifiedFactorHigh() {
  return getRuleContext<GQLParser::SimplifiedFactorHighContext>(0);
}

GQLParser::SimplifiedFactorHighLabelContext::SimplifiedFactorHighLabelContext(SimplifiedFactorLowContext *ctx) { copyFrom(ctx); }



GQLParser::SimplifiedFactorLowContext* GQLParser::simplifiedFactorLow() {
   return simplifiedFactorLow(0);
}

GQLParser::SimplifiedFactorLowContext* GQLParser::simplifiedFactorLow(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  GQLParser::SimplifiedFactorLowContext *_localctx = _tracker.createInstance<SimplifiedFactorLowContext>(_ctx, parentState);
  GQLParser::SimplifiedFactorLowContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 468;
  enterRecursionRule(_localctx, 468, GQLParser::RuleSimplifiedFactorLow, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<SimplifiedFactorHighLabelContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(2527);
    simplifiedFactorHigh();
    _ctx->stop = _input->LT(-1);
    setState(2534);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<SimplifiedConjunctionLabelContext>(_tracker.createInstance<SimplifiedFactorLowContext>(parentContext, parentState));
        _localctx = newContext;
        pushNewRecursionContext(newContext, startState, RuleSimplifiedFactorLow);
        setState(2529);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(2530);
        match(GQLParser::AMPERSAND);
        setState(2531);
        simplifiedFactorHigh(); 
      }
      setState(2536);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- SimplifiedFactorHighContext ------------------------------------------------------------------

GQLParser::SimplifiedFactorHighContext::SimplifiedFactorHighContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimplifiedTertiaryContext* GQLParser::SimplifiedFactorHighContext::simplifiedTertiary() {
  return getRuleContext<GQLParser::SimplifiedTertiaryContext>(0);
}

GQLParser::SimplifiedQuantifiedContext* GQLParser::SimplifiedFactorHighContext::simplifiedQuantified() {
  return getRuleContext<GQLParser::SimplifiedQuantifiedContext>(0);
}

GQLParser::SimplifiedQuestionedContext* GQLParser::SimplifiedFactorHighContext::simplifiedQuestioned() {
  return getRuleContext<GQLParser::SimplifiedQuestionedContext>(0);
}


size_t GQLParser::SimplifiedFactorHighContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedFactorHigh;
}


GQLParser::SimplifiedFactorHighContext* GQLParser::simplifiedFactorHigh() {
  SimplifiedFactorHighContext *_localctx = _tracker.createInstance<SimplifiedFactorHighContext>(_ctx, getState());
  enterRule(_localctx, 470, GQLParser::RuleSimplifiedFactorHigh);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2540);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2537);
      simplifiedTertiary();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2538);
      simplifiedQuantified();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2539);
      simplifiedQuestioned();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedQuantifiedContext ------------------------------------------------------------------

GQLParser::SimplifiedQuantifiedContext::SimplifiedQuantifiedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimplifiedTertiaryContext* GQLParser::SimplifiedQuantifiedContext::simplifiedTertiary() {
  return getRuleContext<GQLParser::SimplifiedTertiaryContext>(0);
}

GQLParser::GraphPatternQuantifierContext* GQLParser::SimplifiedQuantifiedContext::graphPatternQuantifier() {
  return getRuleContext<GQLParser::GraphPatternQuantifierContext>(0);
}


size_t GQLParser::SimplifiedQuantifiedContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedQuantified;
}


GQLParser::SimplifiedQuantifiedContext* GQLParser::simplifiedQuantified() {
  SimplifiedQuantifiedContext *_localctx = _tracker.createInstance<SimplifiedQuantifiedContext>(_ctx, getState());
  enterRule(_localctx, 472, GQLParser::RuleSimplifiedQuantified);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2542);
    simplifiedTertiary();
    setState(2543);
    graphPatternQuantifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedQuestionedContext ------------------------------------------------------------------

GQLParser::SimplifiedQuestionedContext::SimplifiedQuestionedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimplifiedTertiaryContext* GQLParser::SimplifiedQuestionedContext::simplifiedTertiary() {
  return getRuleContext<GQLParser::SimplifiedTertiaryContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedQuestionedContext::QUESTION_MARK() {
  return getToken(GQLParser::QUESTION_MARK, 0);
}


size_t GQLParser::SimplifiedQuestionedContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedQuestioned;
}


GQLParser::SimplifiedQuestionedContext* GQLParser::simplifiedQuestioned() {
  SimplifiedQuestionedContext *_localctx = _tracker.createInstance<SimplifiedQuestionedContext>(_ctx, getState());
  enterRule(_localctx, 474, GQLParser::RuleSimplifiedQuestioned);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2545);
    simplifiedTertiary();
    setState(2546);
    match(GQLParser::QUESTION_MARK);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedTertiaryContext ------------------------------------------------------------------

GQLParser::SimplifiedTertiaryContext::SimplifiedTertiaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimplifiedDirectionOverrideContext* GQLParser::SimplifiedTertiaryContext::simplifiedDirectionOverride() {
  return getRuleContext<GQLParser::SimplifiedDirectionOverrideContext>(0);
}

GQLParser::SimplifiedSecondaryContext* GQLParser::SimplifiedTertiaryContext::simplifiedSecondary() {
  return getRuleContext<GQLParser::SimplifiedSecondaryContext>(0);
}


size_t GQLParser::SimplifiedTertiaryContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedTertiary;
}


GQLParser::SimplifiedTertiaryContext* GQLParser::simplifiedTertiary() {
  SimplifiedTertiaryContext *_localctx = _tracker.createInstance<SimplifiedTertiaryContext>(_ctx, getState());
  enterRule(_localctx, 476, GQLParser::RuleSimplifiedTertiary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2550);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 218, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2548);
      simplifiedDirectionOverride();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2549);
      simplifiedSecondary();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedDirectionOverrideContext ------------------------------------------------------------------

GQLParser::SimplifiedDirectionOverrideContext::SimplifiedDirectionOverrideContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimplifiedOverrideLeftContext* GQLParser::SimplifiedDirectionOverrideContext::simplifiedOverrideLeft() {
  return getRuleContext<GQLParser::SimplifiedOverrideLeftContext>(0);
}

GQLParser::SimplifiedOverrideUndirectedContext* GQLParser::SimplifiedDirectionOverrideContext::simplifiedOverrideUndirected() {
  return getRuleContext<GQLParser::SimplifiedOverrideUndirectedContext>(0);
}

GQLParser::SimplifiedOverrideRightContext* GQLParser::SimplifiedDirectionOverrideContext::simplifiedOverrideRight() {
  return getRuleContext<GQLParser::SimplifiedOverrideRightContext>(0);
}

GQLParser::SimplifiedOverrideLeftOrUndirectedContext* GQLParser::SimplifiedDirectionOverrideContext::simplifiedOverrideLeftOrUndirected() {
  return getRuleContext<GQLParser::SimplifiedOverrideLeftOrUndirectedContext>(0);
}

GQLParser::SimplifiedOverrideUndirectedOrRightContext* GQLParser::SimplifiedDirectionOverrideContext::simplifiedOverrideUndirectedOrRight() {
  return getRuleContext<GQLParser::SimplifiedOverrideUndirectedOrRightContext>(0);
}

GQLParser::SimplifiedOverrideLeftOrRightContext* GQLParser::SimplifiedDirectionOverrideContext::simplifiedOverrideLeftOrRight() {
  return getRuleContext<GQLParser::SimplifiedOverrideLeftOrRightContext>(0);
}

GQLParser::SimplifiedOverrideAnyDirectionContext* GQLParser::SimplifiedDirectionOverrideContext::simplifiedOverrideAnyDirection() {
  return getRuleContext<GQLParser::SimplifiedOverrideAnyDirectionContext>(0);
}


size_t GQLParser::SimplifiedDirectionOverrideContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedDirectionOverride;
}


GQLParser::SimplifiedDirectionOverrideContext* GQLParser::simplifiedDirectionOverride() {
  SimplifiedDirectionOverrideContext *_localctx = _tracker.createInstance<SimplifiedDirectionOverrideContext>(_ctx, getState());
  enterRule(_localctx, 478, GQLParser::RuleSimplifiedDirectionOverride);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2559);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 219, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2552);
      simplifiedOverrideLeft();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2553);
      simplifiedOverrideUndirected();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2554);
      simplifiedOverrideRight();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2555);
      simplifiedOverrideLeftOrUndirected();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2556);
      simplifiedOverrideUndirectedOrRight();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2557);
      simplifiedOverrideLeftOrRight();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2558);
      simplifiedOverrideAnyDirection();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedOverrideLeftContext ------------------------------------------------------------------

GQLParser::SimplifiedOverrideLeftContext::SimplifiedOverrideLeftContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedOverrideLeftContext::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

GQLParser::SimplifiedSecondaryContext* GQLParser::SimplifiedOverrideLeftContext::simplifiedSecondary() {
  return getRuleContext<GQLParser::SimplifiedSecondaryContext>(0);
}


size_t GQLParser::SimplifiedOverrideLeftContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedOverrideLeft;
}


GQLParser::SimplifiedOverrideLeftContext* GQLParser::simplifiedOverrideLeft() {
  SimplifiedOverrideLeftContext *_localctx = _tracker.createInstance<SimplifiedOverrideLeftContext>(_ctx, getState());
  enterRule(_localctx, 480, GQLParser::RuleSimplifiedOverrideLeft);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2561);
    match(GQLParser::LEFT_ANGLE_BRACKET);
    setState(2562);
    simplifiedSecondary();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedOverrideUndirectedContext ------------------------------------------------------------------

GQLParser::SimplifiedOverrideUndirectedContext::SimplifiedOverrideUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedOverrideUndirectedContext::TILDE() {
  return getToken(GQLParser::TILDE, 0);
}

GQLParser::SimplifiedSecondaryContext* GQLParser::SimplifiedOverrideUndirectedContext::simplifiedSecondary() {
  return getRuleContext<GQLParser::SimplifiedSecondaryContext>(0);
}


size_t GQLParser::SimplifiedOverrideUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedOverrideUndirected;
}


GQLParser::SimplifiedOverrideUndirectedContext* GQLParser::simplifiedOverrideUndirected() {
  SimplifiedOverrideUndirectedContext *_localctx = _tracker.createInstance<SimplifiedOverrideUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 482, GQLParser::RuleSimplifiedOverrideUndirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2564);
    match(GQLParser::TILDE);
    setState(2565);
    simplifiedSecondary();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedOverrideRightContext ------------------------------------------------------------------

GQLParser::SimplifiedOverrideRightContext::SimplifiedOverrideRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimplifiedSecondaryContext* GQLParser::SimplifiedOverrideRightContext::simplifiedSecondary() {
  return getRuleContext<GQLParser::SimplifiedSecondaryContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedOverrideRightContext::RIGHT_ANGLE_BRACKET() {
  return getToken(GQLParser::RIGHT_ANGLE_BRACKET, 0);
}


size_t GQLParser::SimplifiedOverrideRightContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedOverrideRight;
}


GQLParser::SimplifiedOverrideRightContext* GQLParser::simplifiedOverrideRight() {
  SimplifiedOverrideRightContext *_localctx = _tracker.createInstance<SimplifiedOverrideRightContext>(_ctx, getState());
  enterRule(_localctx, 484, GQLParser::RuleSimplifiedOverrideRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2567);
    simplifiedSecondary();
    setState(2568);
    match(GQLParser::RIGHT_ANGLE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedOverrideLeftOrUndirectedContext ------------------------------------------------------------------

GQLParser::SimplifiedOverrideLeftOrUndirectedContext::SimplifiedOverrideLeftOrUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedOverrideLeftOrUndirectedContext::LEFT_ARROW_TILDE() {
  return getToken(GQLParser::LEFT_ARROW_TILDE, 0);
}

GQLParser::SimplifiedSecondaryContext* GQLParser::SimplifiedOverrideLeftOrUndirectedContext::simplifiedSecondary() {
  return getRuleContext<GQLParser::SimplifiedSecondaryContext>(0);
}


size_t GQLParser::SimplifiedOverrideLeftOrUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedOverrideLeftOrUndirected;
}


GQLParser::SimplifiedOverrideLeftOrUndirectedContext* GQLParser::simplifiedOverrideLeftOrUndirected() {
  SimplifiedOverrideLeftOrUndirectedContext *_localctx = _tracker.createInstance<SimplifiedOverrideLeftOrUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 486, GQLParser::RuleSimplifiedOverrideLeftOrUndirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2570);
    match(GQLParser::LEFT_ARROW_TILDE);
    setState(2571);
    simplifiedSecondary();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedOverrideUndirectedOrRightContext ------------------------------------------------------------------

GQLParser::SimplifiedOverrideUndirectedOrRightContext::SimplifiedOverrideUndirectedOrRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedOverrideUndirectedOrRightContext::TILDE() {
  return getToken(GQLParser::TILDE, 0);
}

GQLParser::SimplifiedSecondaryContext* GQLParser::SimplifiedOverrideUndirectedOrRightContext::simplifiedSecondary() {
  return getRuleContext<GQLParser::SimplifiedSecondaryContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedOverrideUndirectedOrRightContext::RIGHT_ANGLE_BRACKET() {
  return getToken(GQLParser::RIGHT_ANGLE_BRACKET, 0);
}


size_t GQLParser::SimplifiedOverrideUndirectedOrRightContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedOverrideUndirectedOrRight;
}


GQLParser::SimplifiedOverrideUndirectedOrRightContext* GQLParser::simplifiedOverrideUndirectedOrRight() {
  SimplifiedOverrideUndirectedOrRightContext *_localctx = _tracker.createInstance<SimplifiedOverrideUndirectedOrRightContext>(_ctx, getState());
  enterRule(_localctx, 488, GQLParser::RuleSimplifiedOverrideUndirectedOrRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2573);
    match(GQLParser::TILDE);
    setState(2574);
    simplifiedSecondary();
    setState(2575);
    match(GQLParser::RIGHT_ANGLE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedOverrideLeftOrRightContext ------------------------------------------------------------------

GQLParser::SimplifiedOverrideLeftOrRightContext::SimplifiedOverrideLeftOrRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedOverrideLeftOrRightContext::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

GQLParser::SimplifiedSecondaryContext* GQLParser::SimplifiedOverrideLeftOrRightContext::simplifiedSecondary() {
  return getRuleContext<GQLParser::SimplifiedSecondaryContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedOverrideLeftOrRightContext::RIGHT_ANGLE_BRACKET() {
  return getToken(GQLParser::RIGHT_ANGLE_BRACKET, 0);
}


size_t GQLParser::SimplifiedOverrideLeftOrRightContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedOverrideLeftOrRight;
}


GQLParser::SimplifiedOverrideLeftOrRightContext* GQLParser::simplifiedOverrideLeftOrRight() {
  SimplifiedOverrideLeftOrRightContext *_localctx = _tracker.createInstance<SimplifiedOverrideLeftOrRightContext>(_ctx, getState());
  enterRule(_localctx, 490, GQLParser::RuleSimplifiedOverrideLeftOrRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2577);
    match(GQLParser::LEFT_ANGLE_BRACKET);
    setState(2578);
    simplifiedSecondary();
    setState(2579);
    match(GQLParser::RIGHT_ANGLE_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedOverrideAnyDirectionContext ------------------------------------------------------------------

GQLParser::SimplifiedOverrideAnyDirectionContext::SimplifiedOverrideAnyDirectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedOverrideAnyDirectionContext::MINUS_SIGN() {
  return getToken(GQLParser::MINUS_SIGN, 0);
}

GQLParser::SimplifiedSecondaryContext* GQLParser::SimplifiedOverrideAnyDirectionContext::simplifiedSecondary() {
  return getRuleContext<GQLParser::SimplifiedSecondaryContext>(0);
}


size_t GQLParser::SimplifiedOverrideAnyDirectionContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedOverrideAnyDirection;
}


GQLParser::SimplifiedOverrideAnyDirectionContext* GQLParser::simplifiedOverrideAnyDirection() {
  SimplifiedOverrideAnyDirectionContext *_localctx = _tracker.createInstance<SimplifiedOverrideAnyDirectionContext>(_ctx, getState());
  enterRule(_localctx, 492, GQLParser::RuleSimplifiedOverrideAnyDirection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2581);
    match(GQLParser::MINUS_SIGN);
    setState(2582);
    simplifiedSecondary();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedSecondaryContext ------------------------------------------------------------------

GQLParser::SimplifiedSecondaryContext::SimplifiedSecondaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimplifiedPrimaryContext* GQLParser::SimplifiedSecondaryContext::simplifiedPrimary() {
  return getRuleContext<GQLParser::SimplifiedPrimaryContext>(0);
}

GQLParser::SimplifiedNegationContext* GQLParser::SimplifiedSecondaryContext::simplifiedNegation() {
  return getRuleContext<GQLParser::SimplifiedNegationContext>(0);
}


size_t GQLParser::SimplifiedSecondaryContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedSecondary;
}


GQLParser::SimplifiedSecondaryContext* GQLParser::simplifiedSecondary() {
  SimplifiedSecondaryContext *_localctx = _tracker.createInstance<SimplifiedSecondaryContext>(_ctx, getState());
  enterRule(_localctx, 494, GQLParser::RuleSimplifiedSecondary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2586);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::ACCENT_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::ACYCLIC:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::CONNECTING:
      case GQLParser::DESTINATION:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::EDGE:
      case GQLParser::EDGES:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENTS:
      case GQLParser::FIRST:
      case GQLParser::GRAPH:
      case GQLParser::GROUPS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODE:
      case GQLParser::NORMALIZED:
      case GQLParser::ONLY:
      case GQLParser::ORDINALITY:
      case GQLParser::PROPERTY:
      case GQLParser::READ:
      case GQLParser::RELATIONSHIP:
      case GQLParser::RELATIONSHIPS:
      case GQLParser::REPEATABLE:
      case GQLParser::SHORTEST:
      case GQLParser::SIMPLE:
      case GQLParser::SOURCE:
      case GQLParser::TABLE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRANSACTION:
      case GQLParser::TYPE:
      case GQLParser::UNDIRECTED:
      case GQLParser::VERTEX:
      case GQLParser::WALK:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::ZONE:
      case GQLParser::REGULAR_IDENTIFIER:
      case GQLParser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 1);
        setState(2584);
        simplifiedPrimary();
        break;
      }

      case GQLParser::EXCLAMATION_MARK: {
        enterOuterAlt(_localctx, 2);
        setState(2585);
        simplifiedNegation();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedNegationContext ------------------------------------------------------------------

GQLParser::SimplifiedNegationContext::SimplifiedNegationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimplifiedNegationContext::EXCLAMATION_MARK() {
  return getToken(GQLParser::EXCLAMATION_MARK, 0);
}

GQLParser::SimplifiedPrimaryContext* GQLParser::SimplifiedNegationContext::simplifiedPrimary() {
  return getRuleContext<GQLParser::SimplifiedPrimaryContext>(0);
}


size_t GQLParser::SimplifiedNegationContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedNegation;
}


GQLParser::SimplifiedNegationContext* GQLParser::simplifiedNegation() {
  SimplifiedNegationContext *_localctx = _tracker.createInstance<SimplifiedNegationContext>(_ctx, getState());
  enterRule(_localctx, 496, GQLParser::RuleSimplifiedNegation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2588);
    match(GQLParser::EXCLAMATION_MARK);
    setState(2589);
    simplifiedPrimary();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimplifiedPrimaryContext ------------------------------------------------------------------

GQLParser::SimplifiedPrimaryContext::SimplifiedPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::LabelNameContext* GQLParser::SimplifiedPrimaryContext::labelName() {
  return getRuleContext<GQLParser::LabelNameContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedPrimaryContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::SimplifiedContentsContext* GQLParser::SimplifiedPrimaryContext::simplifiedContents() {
  return getRuleContext<GQLParser::SimplifiedContentsContext>(0);
}

tree::TerminalNode* GQLParser::SimplifiedPrimaryContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::SimplifiedPrimaryContext::getRuleIndex() const {
  return GQLParser::RuleSimplifiedPrimary;
}


GQLParser::SimplifiedPrimaryContext* GQLParser::simplifiedPrimary() {
  SimplifiedPrimaryContext *_localctx = _tracker.createInstance<SimplifiedPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 498, GQLParser::RuleSimplifiedPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2596);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::ACCENT_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::ACYCLIC:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::CONNECTING:
      case GQLParser::DESTINATION:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::EDGE:
      case GQLParser::EDGES:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENTS:
      case GQLParser::FIRST:
      case GQLParser::GRAPH:
      case GQLParser::GROUPS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODE:
      case GQLParser::NORMALIZED:
      case GQLParser::ONLY:
      case GQLParser::ORDINALITY:
      case GQLParser::PROPERTY:
      case GQLParser::READ:
      case GQLParser::RELATIONSHIP:
      case GQLParser::RELATIONSHIPS:
      case GQLParser::REPEATABLE:
      case GQLParser::SHORTEST:
      case GQLParser::SIMPLE:
      case GQLParser::SOURCE:
      case GQLParser::TABLE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRANSACTION:
      case GQLParser::TYPE:
      case GQLParser::UNDIRECTED:
      case GQLParser::VERTEX:
      case GQLParser::WALK:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::ZONE:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(2591);
        labelName();
        break;
      }

      case GQLParser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(2592);
        match(GQLParser::LEFT_PAREN);
        setState(2593);
        simplifiedContents();
        setState(2594);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhereClauseContext ------------------------------------------------------------------

GQLParser::WhereClauseContext::WhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::WhereClauseContext::WHERE() {
  return getToken(GQLParser::WHERE, 0);
}

GQLParser::SearchConditionContext* GQLParser::WhereClauseContext::searchCondition() {
  return getRuleContext<GQLParser::SearchConditionContext>(0);
}


size_t GQLParser::WhereClauseContext::getRuleIndex() const {
  return GQLParser::RuleWhereClause;
}


GQLParser::WhereClauseContext* GQLParser::whereClause() {
  WhereClauseContext *_localctx = _tracker.createInstance<WhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 500, GQLParser::RuleWhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2598);
    match(GQLParser::WHERE);
    setState(2599);
    searchCondition();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- YieldClauseContext ------------------------------------------------------------------

GQLParser::YieldClauseContext::YieldClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::YieldClauseContext::YIELD() {
  return getToken(GQLParser::YIELD, 0);
}

GQLParser::YieldItemListContext* GQLParser::YieldClauseContext::yieldItemList() {
  return getRuleContext<GQLParser::YieldItemListContext>(0);
}


size_t GQLParser::YieldClauseContext::getRuleIndex() const {
  return GQLParser::RuleYieldClause;
}


GQLParser::YieldClauseContext* GQLParser::yieldClause() {
  YieldClauseContext *_localctx = _tracker.createInstance<YieldClauseContext>(_ctx, getState());
  enterRule(_localctx, 502, GQLParser::RuleYieldClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2601);
    match(GQLParser::YIELD);
    setState(2602);
    yieldItemList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- YieldItemListContext ------------------------------------------------------------------

GQLParser::YieldItemListContext::YieldItemListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::YieldItemContext *> GQLParser::YieldItemListContext::yieldItem() {
  return getRuleContexts<GQLParser::YieldItemContext>();
}

GQLParser::YieldItemContext* GQLParser::YieldItemListContext::yieldItem(size_t i) {
  return getRuleContext<GQLParser::YieldItemContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::YieldItemListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::YieldItemListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::YieldItemListContext::getRuleIndex() const {
  return GQLParser::RuleYieldItemList;
}


GQLParser::YieldItemListContext* GQLParser::yieldItemList() {
  YieldItemListContext *_localctx = _tracker.createInstance<YieldItemListContext>(_ctx, getState());
  enterRule(_localctx, 504, GQLParser::RuleYieldItemList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2604);
    yieldItem();
    setState(2609);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(2605);
      match(GQLParser::COMMA);
      setState(2606);
      yieldItem();
      setState(2611);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- YieldItemContext ------------------------------------------------------------------

GQLParser::YieldItemContext::YieldItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::YieldItemNameContext* GQLParser::YieldItemContext::yieldItemName() {
  return getRuleContext<GQLParser::YieldItemNameContext>(0);
}

GQLParser::YieldItemAliasContext* GQLParser::YieldItemContext::yieldItemAlias() {
  return getRuleContext<GQLParser::YieldItemAliasContext>(0);
}


size_t GQLParser::YieldItemContext::getRuleIndex() const {
  return GQLParser::RuleYieldItem;
}


GQLParser::YieldItemContext* GQLParser::yieldItem() {
  YieldItemContext *_localctx = _tracker.createInstance<YieldItemContext>(_ctx, getState());
  enterRule(_localctx, 506, GQLParser::RuleYieldItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2612);
    yieldItemName();
    setState(2614);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::AS) {
      setState(2613);
      yieldItemAlias();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- YieldItemNameContext ------------------------------------------------------------------

GQLParser::YieldItemNameContext::YieldItemNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FieldNameContext* GQLParser::YieldItemNameContext::fieldName() {
  return getRuleContext<GQLParser::FieldNameContext>(0);
}


size_t GQLParser::YieldItemNameContext::getRuleIndex() const {
  return GQLParser::RuleYieldItemName;
}


GQLParser::YieldItemNameContext* GQLParser::yieldItemName() {
  YieldItemNameContext *_localctx = _tracker.createInstance<YieldItemNameContext>(_ctx, getState());
  enterRule(_localctx, 508, GQLParser::RuleYieldItemName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2616);
    fieldName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- YieldItemAliasContext ------------------------------------------------------------------

GQLParser::YieldItemAliasContext::YieldItemAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::YieldItemAliasContext::AS() {
  return getToken(GQLParser::AS, 0);
}

GQLParser::BindingVariableContext* GQLParser::YieldItemAliasContext::bindingVariable() {
  return getRuleContext<GQLParser::BindingVariableContext>(0);
}


size_t GQLParser::YieldItemAliasContext::getRuleIndex() const {
  return GQLParser::RuleYieldItemAlias;
}


GQLParser::YieldItemAliasContext* GQLParser::yieldItemAlias() {
  YieldItemAliasContext *_localctx = _tracker.createInstance<YieldItemAliasContext>(_ctx, getState());
  enterRule(_localctx, 510, GQLParser::RuleYieldItemAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2618);
    match(GQLParser::AS);
    setState(2619);
    bindingVariable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupByClauseContext ------------------------------------------------------------------

GQLParser::GroupByClauseContext::GroupByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GroupByClauseContext::GROUP() {
  return getToken(GQLParser::GROUP, 0);
}

tree::TerminalNode* GQLParser::GroupByClauseContext::BY() {
  return getToken(GQLParser::BY, 0);
}

GQLParser::GroupingElementListContext* GQLParser::GroupByClauseContext::groupingElementList() {
  return getRuleContext<GQLParser::GroupingElementListContext>(0);
}


size_t GQLParser::GroupByClauseContext::getRuleIndex() const {
  return GQLParser::RuleGroupByClause;
}


GQLParser::GroupByClauseContext* GQLParser::groupByClause() {
  GroupByClauseContext *_localctx = _tracker.createInstance<GroupByClauseContext>(_ctx, getState());
  enterRule(_localctx, 512, GQLParser::RuleGroupByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2621);
    match(GQLParser::GROUP);
    setState(2622);
    match(GQLParser::BY);
    setState(2623);
    groupingElementList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupingElementListContext ------------------------------------------------------------------

GQLParser::GroupingElementListContext::GroupingElementListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::GroupingElementContext *> GQLParser::GroupingElementListContext::groupingElement() {
  return getRuleContexts<GQLParser::GroupingElementContext>();
}

GQLParser::GroupingElementContext* GQLParser::GroupingElementListContext::groupingElement(size_t i) {
  return getRuleContext<GQLParser::GroupingElementContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::GroupingElementListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::GroupingElementListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}

GQLParser::EmptyGroupingSetContext* GQLParser::GroupingElementListContext::emptyGroupingSet() {
  return getRuleContext<GQLParser::EmptyGroupingSetContext>(0);
}


size_t GQLParser::GroupingElementListContext::getRuleIndex() const {
  return GQLParser::RuleGroupingElementList;
}


GQLParser::GroupingElementListContext* GQLParser::groupingElementList() {
  GroupingElementListContext *_localctx = _tracker.createInstance<GroupingElementListContext>(_ctx, getState());
  enterRule(_localctx, 514, GQLParser::RuleGroupingElementList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2634);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ACYCLIC:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::CONNECTING:
      case GQLParser::DESTINATION:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::EDGE:
      case GQLParser::EDGES:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENTS:
      case GQLParser::FIRST:
      case GQLParser::GRAPH:
      case GQLParser::GROUPS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODE:
      case GQLParser::NORMALIZED:
      case GQLParser::ONLY:
      case GQLParser::ORDINALITY:
      case GQLParser::PROPERTY:
      case GQLParser::READ:
      case GQLParser::RELATIONSHIP:
      case GQLParser::RELATIONSHIPS:
      case GQLParser::REPEATABLE:
      case GQLParser::SHORTEST:
      case GQLParser::SIMPLE:
      case GQLParser::SOURCE:
      case GQLParser::TABLE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRANSACTION:
      case GQLParser::TYPE:
      case GQLParser::UNDIRECTED:
      case GQLParser::VERTEX:
      case GQLParser::WALK:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::ZONE:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(2625);
        groupingElement();
        setState(2630);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(2626);
            match(GQLParser::COMMA);
            setState(2627);
            groupingElement(); 
          }
          setState(2632);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx);
        }
        break;
      }

      case GQLParser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 2);
        setState(2633);
        emptyGroupingSet();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupingElementContext ------------------------------------------------------------------

GQLParser::GroupingElementContext::GroupingElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableReferenceContext* GQLParser::GroupingElementContext::bindingVariableReference() {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(0);
}


size_t GQLParser::GroupingElementContext::getRuleIndex() const {
  return GQLParser::RuleGroupingElement;
}


GQLParser::GroupingElementContext* GQLParser::groupingElement() {
  GroupingElementContext *_localctx = _tracker.createInstance<GroupingElementContext>(_ctx, getState());
  enterRule(_localctx, 516, GQLParser::RuleGroupingElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2636);
    bindingVariableReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyGroupingSetContext ------------------------------------------------------------------

GQLParser::EmptyGroupingSetContext::EmptyGroupingSetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::EmptyGroupingSetContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::EmptyGroupingSetContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::EmptyGroupingSetContext::getRuleIndex() const {
  return GQLParser::RuleEmptyGroupingSet;
}


GQLParser::EmptyGroupingSetContext* GQLParser::emptyGroupingSet() {
  EmptyGroupingSetContext *_localctx = _tracker.createInstance<EmptyGroupingSetContext>(_ctx, getState());
  enterRule(_localctx, 518, GQLParser::RuleEmptyGroupingSet);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2638);
    match(GQLParser::LEFT_PAREN);
    setState(2639);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderByClauseContext ------------------------------------------------------------------

GQLParser::OrderByClauseContext::OrderByClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::OrderByClauseContext::ORDER() {
  return getToken(GQLParser::ORDER, 0);
}

tree::TerminalNode* GQLParser::OrderByClauseContext::BY() {
  return getToken(GQLParser::BY, 0);
}

GQLParser::SortSpecificationListContext* GQLParser::OrderByClauseContext::sortSpecificationList() {
  return getRuleContext<GQLParser::SortSpecificationListContext>(0);
}


size_t GQLParser::OrderByClauseContext::getRuleIndex() const {
  return GQLParser::RuleOrderByClause;
}


GQLParser::OrderByClauseContext* GQLParser::orderByClause() {
  OrderByClauseContext *_localctx = _tracker.createInstance<OrderByClauseContext>(_ctx, getState());
  enterRule(_localctx, 520, GQLParser::RuleOrderByClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2641);
    match(GQLParser::ORDER);
    setState(2642);
    match(GQLParser::BY);
    setState(2643);
    sortSpecificationList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortSpecificationListContext ------------------------------------------------------------------

GQLParser::SortSpecificationListContext::SortSpecificationListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::SortSpecificationContext *> GQLParser::SortSpecificationListContext::sortSpecification() {
  return getRuleContexts<GQLParser::SortSpecificationContext>();
}

GQLParser::SortSpecificationContext* GQLParser::SortSpecificationListContext::sortSpecification(size_t i) {
  return getRuleContext<GQLParser::SortSpecificationContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::SortSpecificationListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::SortSpecificationListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::SortSpecificationListContext::getRuleIndex() const {
  return GQLParser::RuleSortSpecificationList;
}


GQLParser::SortSpecificationListContext* GQLParser::sortSpecificationList() {
  SortSpecificationListContext *_localctx = _tracker.createInstance<SortSpecificationListContext>(_ctx, getState());
  enterRule(_localctx, 522, GQLParser::RuleSortSpecificationList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2645);
    sortSpecification();
    setState(2650);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2646);
        match(GQLParser::COMMA);
        setState(2647);
        sortSpecification(); 
      }
      setState(2652);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortSpecificationContext ------------------------------------------------------------------

GQLParser::SortSpecificationContext::SortSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SortKeyContext* GQLParser::SortSpecificationContext::sortKey() {
  return getRuleContext<GQLParser::SortKeyContext>(0);
}

GQLParser::OrderingSpecificationContext* GQLParser::SortSpecificationContext::orderingSpecification() {
  return getRuleContext<GQLParser::OrderingSpecificationContext>(0);
}

GQLParser::NullOrderingContext* GQLParser::SortSpecificationContext::nullOrdering() {
  return getRuleContext<GQLParser::NullOrderingContext>(0);
}


size_t GQLParser::SortSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleSortSpecification;
}


GQLParser::SortSpecificationContext* GQLParser::sortSpecification() {
  SortSpecificationContext *_localctx = _tracker.createInstance<SortSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 524, GQLParser::RuleSortSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2653);
    sortKey();
    setState(2655);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx)) {
    case 1: {
      setState(2654);
      orderingSpecification();
      break;
    }

    default:
      break;
    }
    setState(2658);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx)) {
    case 1: {
      setState(2657);
      nullOrdering();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortKeyContext ------------------------------------------------------------------

GQLParser::SortKeyContext::SortKeyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::AggregatingValueExpressionContext* GQLParser::SortKeyContext::aggregatingValueExpression() {
  return getRuleContext<GQLParser::AggregatingValueExpressionContext>(0);
}


size_t GQLParser::SortKeyContext::getRuleIndex() const {
  return GQLParser::RuleSortKey;
}


GQLParser::SortKeyContext* GQLParser::sortKey() {
  SortKeyContext *_localctx = _tracker.createInstance<SortKeyContext>(_ctx, getState());
  enterRule(_localctx, 526, GQLParser::RuleSortKey);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2660);
    aggregatingValueExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderingSpecificationContext ------------------------------------------------------------------

GQLParser::OrderingSpecificationContext::OrderingSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::OrderingSpecificationContext::ASC() {
  return getToken(GQLParser::ASC, 0);
}

tree::TerminalNode* GQLParser::OrderingSpecificationContext::ASCENDING() {
  return getToken(GQLParser::ASCENDING, 0);
}

tree::TerminalNode* GQLParser::OrderingSpecificationContext::DESC() {
  return getToken(GQLParser::DESC, 0);
}

tree::TerminalNode* GQLParser::OrderingSpecificationContext::DESCENDING() {
  return getToken(GQLParser::DESCENDING, 0);
}


size_t GQLParser::OrderingSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleOrderingSpecification;
}


GQLParser::OrderingSpecificationContext* GQLParser::orderingSpecification() {
  OrderingSpecificationContext *_localctx = _tracker.createInstance<OrderingSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 528, GQLParser::RuleOrderingSpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2662);
    _la = _input->LA(1);
    if (!(((((_la - 28) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 28)) & 1688849860263939) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NullOrderingContext ------------------------------------------------------------------

GQLParser::NullOrderingContext::NullOrderingContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NullOrderingContext::NULLS() {
  return getToken(GQLParser::NULLS, 0);
}

tree::TerminalNode* GQLParser::NullOrderingContext::FIRST() {
  return getToken(GQLParser::FIRST, 0);
}

tree::TerminalNode* GQLParser::NullOrderingContext::LAST() {
  return getToken(GQLParser::LAST, 0);
}


size_t GQLParser::NullOrderingContext::getRuleIndex() const {
  return GQLParser::RuleNullOrdering;
}


GQLParser::NullOrderingContext* GQLParser::nullOrdering() {
  NullOrderingContext *_localctx = _tracker.createInstance<NullOrderingContext>(_ctx, getState());
  enterRule(_localctx, 530, GQLParser::RuleNullOrdering);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2668);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2664);
      match(GQLParser::NULLS);
      setState(2665);
      match(GQLParser::FIRST);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2666);
      match(GQLParser::NULLS);
      setState(2667);
      match(GQLParser::LAST);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LimitClauseContext ------------------------------------------------------------------

GQLParser::LimitClauseContext::LimitClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::LimitClauseContext::LIMIT() {
  return getToken(GQLParser::LIMIT, 0);
}

GQLParser::NonNegativeIntegerSpecificationContext* GQLParser::LimitClauseContext::nonNegativeIntegerSpecification() {
  return getRuleContext<GQLParser::NonNegativeIntegerSpecificationContext>(0);
}


size_t GQLParser::LimitClauseContext::getRuleIndex() const {
  return GQLParser::RuleLimitClause;
}


GQLParser::LimitClauseContext* GQLParser::limitClause() {
  LimitClauseContext *_localctx = _tracker.createInstance<LimitClauseContext>(_ctx, getState());
  enterRule(_localctx, 532, GQLParser::RuleLimitClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2670);
    match(GQLParser::LIMIT);
    setState(2671);
    nonNegativeIntegerSpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OffsetClauseContext ------------------------------------------------------------------

GQLParser::OffsetClauseContext::OffsetClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::OffsetSynonymContext* GQLParser::OffsetClauseContext::offsetSynonym() {
  return getRuleContext<GQLParser::OffsetSynonymContext>(0);
}

GQLParser::NonNegativeIntegerSpecificationContext* GQLParser::OffsetClauseContext::nonNegativeIntegerSpecification() {
  return getRuleContext<GQLParser::NonNegativeIntegerSpecificationContext>(0);
}


size_t GQLParser::OffsetClauseContext::getRuleIndex() const {
  return GQLParser::RuleOffsetClause;
}


GQLParser::OffsetClauseContext* GQLParser::offsetClause() {
  OffsetClauseContext *_localctx = _tracker.createInstance<OffsetClauseContext>(_ctx, getState());
  enterRule(_localctx, 534, GQLParser::RuleOffsetClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2673);
    offsetSynonym();
    setState(2674);
    nonNegativeIntegerSpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OffsetSynonymContext ------------------------------------------------------------------

GQLParser::OffsetSynonymContext::OffsetSynonymContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::OffsetSynonymContext::OFFSET() {
  return getToken(GQLParser::OFFSET, 0);
}

tree::TerminalNode* GQLParser::OffsetSynonymContext::SKIP_RESERVED_WORD() {
  return getToken(GQLParser::SKIP_RESERVED_WORD, 0);
}


size_t GQLParser::OffsetSynonymContext::getRuleIndex() const {
  return GQLParser::RuleOffsetSynonym;
}


GQLParser::OffsetSynonymContext* GQLParser::offsetSynonym() {
  OffsetSynonymContext *_localctx = _tracker.createInstance<OffsetSynonymContext>(_ctx, getState());
  enterRule(_localctx, 536, GQLParser::RuleOffsetSynonym);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2676);
    _la = _input->LA(1);
    if (!(_la == GQLParser::OFFSET

    || _la == GQLParser::SKIP_RESERVED_WORD)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SchemaReferenceContext ------------------------------------------------------------------

GQLParser::SchemaReferenceContext::SchemaReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::AbsoluteCatalogSchemaReferenceContext* GQLParser::SchemaReferenceContext::absoluteCatalogSchemaReference() {
  return getRuleContext<GQLParser::AbsoluteCatalogSchemaReferenceContext>(0);
}

GQLParser::RelativeCatalogSchemaReferenceContext* GQLParser::SchemaReferenceContext::relativeCatalogSchemaReference() {
  return getRuleContext<GQLParser::RelativeCatalogSchemaReferenceContext>(0);
}

GQLParser::ReferenceParameterSpecificationContext* GQLParser::SchemaReferenceContext::referenceParameterSpecification() {
  return getRuleContext<GQLParser::ReferenceParameterSpecificationContext>(0);
}


size_t GQLParser::SchemaReferenceContext::getRuleIndex() const {
  return GQLParser::RuleSchemaReference;
}


GQLParser::SchemaReferenceContext* GQLParser::schemaReference() {
  SchemaReferenceContext *_localctx = _tracker.createInstance<SchemaReferenceContext>(_ctx, getState());
  enterRule(_localctx, 538, GQLParser::RuleSchemaReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2681);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::SOLIDUS: {
        enterOuterAlt(_localctx, 1);
        setState(2678);
        absoluteCatalogSchemaReference();
        break;
      }

      case GQLParser::CURRENT_SCHEMA:
      case GQLParser::HOME_SCHEMA:
      case GQLParser::DOUBLE_PERIOD:
      case GQLParser::PERIOD: {
        enterOuterAlt(_localctx, 2);
        setState(2679);
        relativeCatalogSchemaReference();
        break;
      }

      case GQLParser::SUBSTITUTED_PARAMETER_REFERENCE: {
        enterOuterAlt(_localctx, 3);
        setState(2680);
        referenceParameterSpecification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AbsoluteCatalogSchemaReferenceContext ------------------------------------------------------------------

GQLParser::AbsoluteCatalogSchemaReferenceContext::AbsoluteCatalogSchemaReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::AbsoluteCatalogSchemaReferenceContext::SOLIDUS() {
  return getToken(GQLParser::SOLIDUS, 0);
}

GQLParser::AbsoluteDirectoryPathContext* GQLParser::AbsoluteCatalogSchemaReferenceContext::absoluteDirectoryPath() {
  return getRuleContext<GQLParser::AbsoluteDirectoryPathContext>(0);
}

GQLParser::SchemaNameContext* GQLParser::AbsoluteCatalogSchemaReferenceContext::schemaName() {
  return getRuleContext<GQLParser::SchemaNameContext>(0);
}


size_t GQLParser::AbsoluteCatalogSchemaReferenceContext::getRuleIndex() const {
  return GQLParser::RuleAbsoluteCatalogSchemaReference;
}


GQLParser::AbsoluteCatalogSchemaReferenceContext* GQLParser::absoluteCatalogSchemaReference() {
  AbsoluteCatalogSchemaReferenceContext *_localctx = _tracker.createInstance<AbsoluteCatalogSchemaReferenceContext>(_ctx, getState());
  enterRule(_localctx, 540, GQLParser::RuleAbsoluteCatalogSchemaReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2687);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2683);
      match(GQLParser::SOLIDUS);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2684);
      absoluteDirectoryPath();
      setState(2685);
      schemaName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatalogSchemaParentAndNameContext ------------------------------------------------------------------

GQLParser::CatalogSchemaParentAndNameContext::CatalogSchemaParentAndNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::AbsoluteDirectoryPathContext* GQLParser::CatalogSchemaParentAndNameContext::absoluteDirectoryPath() {
  return getRuleContext<GQLParser::AbsoluteDirectoryPathContext>(0);
}

GQLParser::SchemaNameContext* GQLParser::CatalogSchemaParentAndNameContext::schemaName() {
  return getRuleContext<GQLParser::SchemaNameContext>(0);
}


size_t GQLParser::CatalogSchemaParentAndNameContext::getRuleIndex() const {
  return GQLParser::RuleCatalogSchemaParentAndName;
}


GQLParser::CatalogSchemaParentAndNameContext* GQLParser::catalogSchemaParentAndName() {
  CatalogSchemaParentAndNameContext *_localctx = _tracker.createInstance<CatalogSchemaParentAndNameContext>(_ctx, getState());
  enterRule(_localctx, 542, GQLParser::RuleCatalogSchemaParentAndName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2689);
    absoluteDirectoryPath();
    setState(2690);
    schemaName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelativeCatalogSchemaReferenceContext ------------------------------------------------------------------

GQLParser::RelativeCatalogSchemaReferenceContext::RelativeCatalogSchemaReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PredefinedSchemaReferenceContext* GQLParser::RelativeCatalogSchemaReferenceContext::predefinedSchemaReference() {
  return getRuleContext<GQLParser::PredefinedSchemaReferenceContext>(0);
}

GQLParser::RelativeDirectoryPathContext* GQLParser::RelativeCatalogSchemaReferenceContext::relativeDirectoryPath() {
  return getRuleContext<GQLParser::RelativeDirectoryPathContext>(0);
}

GQLParser::SchemaNameContext* GQLParser::RelativeCatalogSchemaReferenceContext::schemaName() {
  return getRuleContext<GQLParser::SchemaNameContext>(0);
}


size_t GQLParser::RelativeCatalogSchemaReferenceContext::getRuleIndex() const {
  return GQLParser::RuleRelativeCatalogSchemaReference;
}


GQLParser::RelativeCatalogSchemaReferenceContext* GQLParser::relativeCatalogSchemaReference() {
  RelativeCatalogSchemaReferenceContext *_localctx = _tracker.createInstance<RelativeCatalogSchemaReferenceContext>(_ctx, getState());
  enterRule(_localctx, 544, GQLParser::RuleRelativeCatalogSchemaReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2696);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::CURRENT_SCHEMA:
      case GQLParser::HOME_SCHEMA:
      case GQLParser::PERIOD: {
        enterOuterAlt(_localctx, 1);
        setState(2692);
        predefinedSchemaReference();
        break;
      }

      case GQLParser::DOUBLE_PERIOD: {
        enterOuterAlt(_localctx, 2);
        setState(2693);
        relativeDirectoryPath();
        setState(2694);
        schemaName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PredefinedSchemaReferenceContext ------------------------------------------------------------------

GQLParser::PredefinedSchemaReferenceContext::PredefinedSchemaReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::PredefinedSchemaReferenceContext::HOME_SCHEMA() {
  return getToken(GQLParser::HOME_SCHEMA, 0);
}

tree::TerminalNode* GQLParser::PredefinedSchemaReferenceContext::CURRENT_SCHEMA() {
  return getToken(GQLParser::CURRENT_SCHEMA, 0);
}

tree::TerminalNode* GQLParser::PredefinedSchemaReferenceContext::PERIOD() {
  return getToken(GQLParser::PERIOD, 0);
}


size_t GQLParser::PredefinedSchemaReferenceContext::getRuleIndex() const {
  return GQLParser::RulePredefinedSchemaReference;
}


GQLParser::PredefinedSchemaReferenceContext* GQLParser::predefinedSchemaReference() {
  PredefinedSchemaReferenceContext *_localctx = _tracker.createInstance<PredefinedSchemaReferenceContext>(_ctx, getState());
  enterRule(_localctx, 546, GQLParser::RulePredefinedSchemaReference);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2698);
    _la = _input->LA(1);
    if (!(_la == GQLParser::CURRENT_SCHEMA

    || _la == GQLParser::HOME_SCHEMA || _la == GQLParser::PERIOD)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AbsoluteDirectoryPathContext ------------------------------------------------------------------

GQLParser::AbsoluteDirectoryPathContext::AbsoluteDirectoryPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::AbsoluteDirectoryPathContext::SOLIDUS() {
  return getToken(GQLParser::SOLIDUS, 0);
}

GQLParser::SimpleDirectoryPathContext* GQLParser::AbsoluteDirectoryPathContext::simpleDirectoryPath() {
  return getRuleContext<GQLParser::SimpleDirectoryPathContext>(0);
}


size_t GQLParser::AbsoluteDirectoryPathContext::getRuleIndex() const {
  return GQLParser::RuleAbsoluteDirectoryPath;
}


GQLParser::AbsoluteDirectoryPathContext* GQLParser::absoluteDirectoryPath() {
  AbsoluteDirectoryPathContext *_localctx = _tracker.createInstance<AbsoluteDirectoryPathContext>(_ctx, getState());
  enterRule(_localctx, 548, GQLParser::RuleAbsoluteDirectoryPath);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2700);
    match(GQLParser::SOLIDUS);
    setState(2702);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx)) {
    case 1: {
      setState(2701);
      simpleDirectoryPath();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelativeDirectoryPathContext ------------------------------------------------------------------

GQLParser::RelativeDirectoryPathContext::RelativeDirectoryPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GQLParser::RelativeDirectoryPathContext::DOUBLE_PERIOD() {
  return getTokens(GQLParser::DOUBLE_PERIOD);
}

tree::TerminalNode* GQLParser::RelativeDirectoryPathContext::DOUBLE_PERIOD(size_t i) {
  return getToken(GQLParser::DOUBLE_PERIOD, i);
}

std::vector<tree::TerminalNode *> GQLParser::RelativeDirectoryPathContext::SOLIDUS() {
  return getTokens(GQLParser::SOLIDUS);
}

tree::TerminalNode* GQLParser::RelativeDirectoryPathContext::SOLIDUS(size_t i) {
  return getToken(GQLParser::SOLIDUS, i);
}

GQLParser::SimpleDirectoryPathContext* GQLParser::RelativeDirectoryPathContext::simpleDirectoryPath() {
  return getRuleContext<GQLParser::SimpleDirectoryPathContext>(0);
}


size_t GQLParser::RelativeDirectoryPathContext::getRuleIndex() const {
  return GQLParser::RuleRelativeDirectoryPath;
}


GQLParser::RelativeDirectoryPathContext* GQLParser::relativeDirectoryPath() {
  RelativeDirectoryPathContext *_localctx = _tracker.createInstance<RelativeDirectoryPathContext>(_ctx, getState());
  enterRule(_localctx, 550, GQLParser::RuleRelativeDirectoryPath);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2704);
    match(GQLParser::DOUBLE_PERIOD);
    setState(2709);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 234, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2705);
        match(GQLParser::SOLIDUS);
        setState(2706);
        match(GQLParser::DOUBLE_PERIOD); 
      }
      setState(2711);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 234, _ctx);
    }
    setState(2712);
    match(GQLParser::SOLIDUS);
    setState(2714);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 235, _ctx)) {
    case 1: {
      setState(2713);
      simpleDirectoryPath();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleDirectoryPathContext ------------------------------------------------------------------

GQLParser::SimpleDirectoryPathContext::SimpleDirectoryPathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::DirectoryNameContext *> GQLParser::SimpleDirectoryPathContext::directoryName() {
  return getRuleContexts<GQLParser::DirectoryNameContext>();
}

GQLParser::DirectoryNameContext* GQLParser::SimpleDirectoryPathContext::directoryName(size_t i) {
  return getRuleContext<GQLParser::DirectoryNameContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::SimpleDirectoryPathContext::SOLIDUS() {
  return getTokens(GQLParser::SOLIDUS);
}

tree::TerminalNode* GQLParser::SimpleDirectoryPathContext::SOLIDUS(size_t i) {
  return getToken(GQLParser::SOLIDUS, i);
}


size_t GQLParser::SimpleDirectoryPathContext::getRuleIndex() const {
  return GQLParser::RuleSimpleDirectoryPath;
}


GQLParser::SimpleDirectoryPathContext* GQLParser::simpleDirectoryPath() {
  SimpleDirectoryPathContext *_localctx = _tracker.createInstance<SimpleDirectoryPathContext>(_ctx, getState());
  enterRule(_localctx, 552, GQLParser::RuleSimpleDirectoryPath);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2719); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2716);
              directoryName();
              setState(2717);
              match(GQLParser::SOLIDUS);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2721); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 236, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphReferenceContext ------------------------------------------------------------------

GQLParser::GraphReferenceContext::GraphReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CatalogObjectParentReferenceContext* GQLParser::GraphReferenceContext::catalogObjectParentReference() {
  return getRuleContext<GQLParser::CatalogObjectParentReferenceContext>(0);
}

GQLParser::GraphNameContext* GQLParser::GraphReferenceContext::graphName() {
  return getRuleContext<GQLParser::GraphNameContext>(0);
}

GQLParser::DelimitedGraphNameContext* GQLParser::GraphReferenceContext::delimitedGraphName() {
  return getRuleContext<GQLParser::DelimitedGraphNameContext>(0);
}

GQLParser::HomeGraphContext* GQLParser::GraphReferenceContext::homeGraph() {
  return getRuleContext<GQLParser::HomeGraphContext>(0);
}

GQLParser::ReferenceParameterSpecificationContext* GQLParser::GraphReferenceContext::referenceParameterSpecification() {
  return getRuleContext<GQLParser::ReferenceParameterSpecificationContext>(0);
}


size_t GQLParser::GraphReferenceContext::getRuleIndex() const {
  return GQLParser::RuleGraphReference;
}


GQLParser::GraphReferenceContext* GQLParser::graphReference() {
  GraphReferenceContext *_localctx = _tracker.createInstance<GraphReferenceContext>(_ctx, getState());
  enterRule(_localctx, 554, GQLParser::RuleGraphReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2729);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 237, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2723);
      catalogObjectParentReference();
      setState(2724);
      graphName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2726);
      delimitedGraphName();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2727);
      homeGraph();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2728);
      referenceParameterSpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatalogGraphParentAndNameContext ------------------------------------------------------------------

GQLParser::CatalogGraphParentAndNameContext::CatalogGraphParentAndNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::GraphNameContext* GQLParser::CatalogGraphParentAndNameContext::graphName() {
  return getRuleContext<GQLParser::GraphNameContext>(0);
}

GQLParser::CatalogObjectParentReferenceContext* GQLParser::CatalogGraphParentAndNameContext::catalogObjectParentReference() {
  return getRuleContext<GQLParser::CatalogObjectParentReferenceContext>(0);
}


size_t GQLParser::CatalogGraphParentAndNameContext::getRuleIndex() const {
  return GQLParser::RuleCatalogGraphParentAndName;
}


GQLParser::CatalogGraphParentAndNameContext* GQLParser::catalogGraphParentAndName() {
  CatalogGraphParentAndNameContext *_localctx = _tracker.createInstance<CatalogGraphParentAndNameContext>(_ctx, getState());
  enterRule(_localctx, 556, GQLParser::RuleCatalogGraphParentAndName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2732);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx)) {
    case 1: {
      setState(2731);
      catalogObjectParentReference();
      break;
    }

    default:
      break;
    }
    setState(2734);
    graphName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HomeGraphContext ------------------------------------------------------------------

GQLParser::HomeGraphContext::HomeGraphContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::HomeGraphContext::HOME_PROPERTY_GRAPH() {
  return getToken(GQLParser::HOME_PROPERTY_GRAPH, 0);
}

tree::TerminalNode* GQLParser::HomeGraphContext::HOME_GRAPH() {
  return getToken(GQLParser::HOME_GRAPH, 0);
}


size_t GQLParser::HomeGraphContext::getRuleIndex() const {
  return GQLParser::RuleHomeGraph;
}


GQLParser::HomeGraphContext* GQLParser::homeGraph() {
  HomeGraphContext *_localctx = _tracker.createInstance<HomeGraphContext>(_ctx, getState());
  enterRule(_localctx, 558, GQLParser::RuleHomeGraph);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2736);
    _la = _input->LA(1);
    if (!(_la == GQLParser::HOME_GRAPH

    || _la == GQLParser::HOME_PROPERTY_GRAPH)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphTypeReferenceContext ------------------------------------------------------------------

GQLParser::GraphTypeReferenceContext::GraphTypeReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CatalogGraphTypeParentAndNameContext* GQLParser::GraphTypeReferenceContext::catalogGraphTypeParentAndName() {
  return getRuleContext<GQLParser::CatalogGraphTypeParentAndNameContext>(0);
}

GQLParser::ReferenceParameterSpecificationContext* GQLParser::GraphTypeReferenceContext::referenceParameterSpecification() {
  return getRuleContext<GQLParser::ReferenceParameterSpecificationContext>(0);
}


size_t GQLParser::GraphTypeReferenceContext::getRuleIndex() const {
  return GQLParser::RuleGraphTypeReference;
}


GQLParser::GraphTypeReferenceContext* GQLParser::graphTypeReference() {
  GraphTypeReferenceContext *_localctx = _tracker.createInstance<GraphTypeReferenceContext>(_ctx, getState());
  enterRule(_localctx, 560, GQLParser::RuleGraphTypeReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2740);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 239, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2738);
      catalogGraphTypeParentAndName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2739);
      referenceParameterSpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatalogGraphTypeParentAndNameContext ------------------------------------------------------------------

GQLParser::CatalogGraphTypeParentAndNameContext::CatalogGraphTypeParentAndNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::GraphTypeNameContext* GQLParser::CatalogGraphTypeParentAndNameContext::graphTypeName() {
  return getRuleContext<GQLParser::GraphTypeNameContext>(0);
}

GQLParser::CatalogObjectParentReferenceContext* GQLParser::CatalogGraphTypeParentAndNameContext::catalogObjectParentReference() {
  return getRuleContext<GQLParser::CatalogObjectParentReferenceContext>(0);
}


size_t GQLParser::CatalogGraphTypeParentAndNameContext::getRuleIndex() const {
  return GQLParser::RuleCatalogGraphTypeParentAndName;
}


GQLParser::CatalogGraphTypeParentAndNameContext* GQLParser::catalogGraphTypeParentAndName() {
  CatalogGraphTypeParentAndNameContext *_localctx = _tracker.createInstance<CatalogGraphTypeParentAndNameContext>(_ctx, getState());
  enterRule(_localctx, 562, GQLParser::RuleCatalogGraphTypeParentAndName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2743);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 240, _ctx)) {
    case 1: {
      setState(2742);
      catalogObjectParentReference();
      break;
    }

    default:
      break;
    }
    setState(2745);
    graphTypeName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingTableReferenceContext ------------------------------------------------------------------

GQLParser::BindingTableReferenceContext::BindingTableReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CatalogObjectParentReferenceContext* GQLParser::BindingTableReferenceContext::catalogObjectParentReference() {
  return getRuleContext<GQLParser::CatalogObjectParentReferenceContext>(0);
}

GQLParser::BindingTableNameContext* GQLParser::BindingTableReferenceContext::bindingTableName() {
  return getRuleContext<GQLParser::BindingTableNameContext>(0);
}

GQLParser::DelimitedBindingTableNameContext* GQLParser::BindingTableReferenceContext::delimitedBindingTableName() {
  return getRuleContext<GQLParser::DelimitedBindingTableNameContext>(0);
}

GQLParser::ReferenceParameterSpecificationContext* GQLParser::BindingTableReferenceContext::referenceParameterSpecification() {
  return getRuleContext<GQLParser::ReferenceParameterSpecificationContext>(0);
}


size_t GQLParser::BindingTableReferenceContext::getRuleIndex() const {
  return GQLParser::RuleBindingTableReference;
}


GQLParser::BindingTableReferenceContext* GQLParser::bindingTableReference() {
  BindingTableReferenceContext *_localctx = _tracker.createInstance<BindingTableReferenceContext>(_ctx, getState());
  enterRule(_localctx, 564, GQLParser::RuleBindingTableReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2752);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 241, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2747);
      catalogObjectParentReference();
      setState(2748);
      bindingTableName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2750);
      delimitedBindingTableName();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2751);
      referenceParameterSpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureReferenceContext ------------------------------------------------------------------

GQLParser::ProcedureReferenceContext::ProcedureReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CatalogProcedureParentAndNameContext* GQLParser::ProcedureReferenceContext::catalogProcedureParentAndName() {
  return getRuleContext<GQLParser::CatalogProcedureParentAndNameContext>(0);
}

GQLParser::ReferenceParameterSpecificationContext* GQLParser::ProcedureReferenceContext::referenceParameterSpecification() {
  return getRuleContext<GQLParser::ReferenceParameterSpecificationContext>(0);
}


size_t GQLParser::ProcedureReferenceContext::getRuleIndex() const {
  return GQLParser::RuleProcedureReference;
}


GQLParser::ProcedureReferenceContext* GQLParser::procedureReference() {
  ProcedureReferenceContext *_localctx = _tracker.createInstance<ProcedureReferenceContext>(_ctx, getState());
  enterRule(_localctx, 566, GQLParser::RuleProcedureReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2756);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 242, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2754);
      catalogProcedureParentAndName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2755);
      referenceParameterSpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatalogProcedureParentAndNameContext ------------------------------------------------------------------

GQLParser::CatalogProcedureParentAndNameContext::CatalogProcedureParentAndNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ProcedureNameContext* GQLParser::CatalogProcedureParentAndNameContext::procedureName() {
  return getRuleContext<GQLParser::ProcedureNameContext>(0);
}

GQLParser::CatalogObjectParentReferenceContext* GQLParser::CatalogProcedureParentAndNameContext::catalogObjectParentReference() {
  return getRuleContext<GQLParser::CatalogObjectParentReferenceContext>(0);
}


size_t GQLParser::CatalogProcedureParentAndNameContext::getRuleIndex() const {
  return GQLParser::RuleCatalogProcedureParentAndName;
}


GQLParser::CatalogProcedureParentAndNameContext* GQLParser::catalogProcedureParentAndName() {
  CatalogProcedureParentAndNameContext *_localctx = _tracker.createInstance<CatalogProcedureParentAndNameContext>(_ctx, getState());
  enterRule(_localctx, 568, GQLParser::RuleCatalogProcedureParentAndName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2759);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 243, _ctx)) {
    case 1: {
      setState(2758);
      catalogObjectParentReference();
      break;
    }

    default:
      break;
    }
    setState(2761);
    procedureName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CatalogObjectParentReferenceContext ------------------------------------------------------------------

GQLParser::CatalogObjectParentReferenceContext::CatalogObjectParentReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SchemaReferenceContext* GQLParser::CatalogObjectParentReferenceContext::schemaReference() {
  return getRuleContext<GQLParser::SchemaReferenceContext>(0);
}

tree::TerminalNode* GQLParser::CatalogObjectParentReferenceContext::SOLIDUS() {
  return getToken(GQLParser::SOLIDUS, 0);
}

std::vector<GQLParser::ObjectNameContext *> GQLParser::CatalogObjectParentReferenceContext::objectName() {
  return getRuleContexts<GQLParser::ObjectNameContext>();
}

GQLParser::ObjectNameContext* GQLParser::CatalogObjectParentReferenceContext::objectName(size_t i) {
  return getRuleContext<GQLParser::ObjectNameContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::CatalogObjectParentReferenceContext::PERIOD() {
  return getTokens(GQLParser::PERIOD);
}

tree::TerminalNode* GQLParser::CatalogObjectParentReferenceContext::PERIOD(size_t i) {
  return getToken(GQLParser::PERIOD, i);
}


size_t GQLParser::CatalogObjectParentReferenceContext::getRuleIndex() const {
  return GQLParser::RuleCatalogObjectParentReference;
}


GQLParser::CatalogObjectParentReferenceContext* GQLParser::catalogObjectParentReference() {
  CatalogObjectParentReferenceContext *_localctx = _tracker.createInstance<CatalogObjectParentReferenceContext>(_ctx, getState());
  enterRule(_localctx, 570, GQLParser::RuleCatalogObjectParentReference);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2782);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::CURRENT_SCHEMA:
      case GQLParser::HOME_SCHEMA:
      case GQLParser::SUBSTITUTED_PARAMETER_REFERENCE:
      case GQLParser::DOUBLE_PERIOD:
      case GQLParser::PERIOD:
      case GQLParser::SOLIDUS: {
        enterOuterAlt(_localctx, 1);
        setState(2763);
        schemaReference();
        setState(2765);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::SOLIDUS) {
          setState(2764);
          match(GQLParser::SOLIDUS);
        }
        setState(2772);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 245, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(2767);
            objectName();
            setState(2768);
            match(GQLParser::PERIOD); 
          }
          setState(2774);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 245, _ctx);
        }
        break;
      }

      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::ACCENT_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::ACYCLIC:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::CONNECTING:
      case GQLParser::DESTINATION:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::EDGE:
      case GQLParser::EDGES:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENTS:
      case GQLParser::FIRST:
      case GQLParser::GRAPH:
      case GQLParser::GROUPS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODE:
      case GQLParser::NORMALIZED:
      case GQLParser::ONLY:
      case GQLParser::ORDINALITY:
      case GQLParser::PROPERTY:
      case GQLParser::READ:
      case GQLParser::RELATIONSHIP:
      case GQLParser::RELATIONSHIPS:
      case GQLParser::REPEATABLE:
      case GQLParser::SHORTEST:
      case GQLParser::SIMPLE:
      case GQLParser::SOURCE:
      case GQLParser::TABLE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRANSACTION:
      case GQLParser::TYPE:
      case GQLParser::UNDIRECTED:
      case GQLParser::VERTEX:
      case GQLParser::WALK:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::ZONE:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(2778); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(2775);
                  objectName();
                  setState(2776);
                  match(GQLParser::PERIOD);
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(2780); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 246, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferenceParameterSpecificationContext ------------------------------------------------------------------

GQLParser::ReferenceParameterSpecificationContext::ReferenceParameterSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ReferenceParameterSpecificationContext::SUBSTITUTED_PARAMETER_REFERENCE() {
  return getToken(GQLParser::SUBSTITUTED_PARAMETER_REFERENCE, 0);
}


size_t GQLParser::ReferenceParameterSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleReferenceParameterSpecification;
}


GQLParser::ReferenceParameterSpecificationContext* GQLParser::referenceParameterSpecification() {
  ReferenceParameterSpecificationContext *_localctx = _tracker.createInstance<ReferenceParameterSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 572, GQLParser::RuleReferenceParameterSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2784);
    match(GQLParser::SUBSTITUTED_PARAMETER_REFERENCE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedGraphTypeSpecificationContext ------------------------------------------------------------------

GQLParser::NestedGraphTypeSpecificationContext::NestedGraphTypeSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NestedGraphTypeSpecificationContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

GQLParser::GraphTypeSpecificationBodyContext* GQLParser::NestedGraphTypeSpecificationContext::graphTypeSpecificationBody() {
  return getRuleContext<GQLParser::GraphTypeSpecificationBodyContext>(0);
}

tree::TerminalNode* GQLParser::NestedGraphTypeSpecificationContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}


size_t GQLParser::NestedGraphTypeSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleNestedGraphTypeSpecification;
}


GQLParser::NestedGraphTypeSpecificationContext* GQLParser::nestedGraphTypeSpecification() {
  NestedGraphTypeSpecificationContext *_localctx = _tracker.createInstance<NestedGraphTypeSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 574, GQLParser::RuleNestedGraphTypeSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2786);
    match(GQLParser::LEFT_BRACE);
    setState(2787);
    graphTypeSpecificationBody();
    setState(2788);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphTypeSpecificationBodyContext ------------------------------------------------------------------

GQLParser::GraphTypeSpecificationBodyContext::GraphTypeSpecificationBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementTypeListContext* GQLParser::GraphTypeSpecificationBodyContext::elementTypeList() {
  return getRuleContext<GQLParser::ElementTypeListContext>(0);
}


size_t GQLParser::GraphTypeSpecificationBodyContext::getRuleIndex() const {
  return GQLParser::RuleGraphTypeSpecificationBody;
}


GQLParser::GraphTypeSpecificationBodyContext* GQLParser::graphTypeSpecificationBody() {
  GraphTypeSpecificationBodyContext *_localctx = _tracker.createInstance<GraphTypeSpecificationBodyContext>(_ctx, getState());
  enterRule(_localctx, 576, GQLParser::RuleGraphTypeSpecificationBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2790);
    elementTypeList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementTypeListContext ------------------------------------------------------------------

GQLParser::ElementTypeListContext::ElementTypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::ElementTypeSpecificationContext *> GQLParser::ElementTypeListContext::elementTypeSpecification() {
  return getRuleContexts<GQLParser::ElementTypeSpecificationContext>();
}

GQLParser::ElementTypeSpecificationContext* GQLParser::ElementTypeListContext::elementTypeSpecification(size_t i) {
  return getRuleContext<GQLParser::ElementTypeSpecificationContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::ElementTypeListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::ElementTypeListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::ElementTypeListContext::getRuleIndex() const {
  return GQLParser::RuleElementTypeList;
}


GQLParser::ElementTypeListContext* GQLParser::elementTypeList() {
  ElementTypeListContext *_localctx = _tracker.createInstance<ElementTypeListContext>(_ctx, getState());
  enterRule(_localctx, 578, GQLParser::RuleElementTypeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2792);
    elementTypeSpecification();
    setState(2797);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(2793);
      match(GQLParser::COMMA);
      setState(2794);
      elementTypeSpecification();
      setState(2799);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementTypeSpecificationContext ------------------------------------------------------------------

GQLParser::ElementTypeSpecificationContext::ElementTypeSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NodeTypeSpecificationContext* GQLParser::ElementTypeSpecificationContext::nodeTypeSpecification() {
  return getRuleContext<GQLParser::NodeTypeSpecificationContext>(0);
}

GQLParser::EdgeTypeSpecificationContext* GQLParser::ElementTypeSpecificationContext::edgeTypeSpecification() {
  return getRuleContext<GQLParser::EdgeTypeSpecificationContext>(0);
}


size_t GQLParser::ElementTypeSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleElementTypeSpecification;
}


GQLParser::ElementTypeSpecificationContext* GQLParser::elementTypeSpecification() {
  ElementTypeSpecificationContext *_localctx = _tracker.createInstance<ElementTypeSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 580, GQLParser::RuleElementTypeSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2802);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 249, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2800);
      nodeTypeSpecification();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2801);
      edgeTypeSpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeTypeSpecificationContext ------------------------------------------------------------------

GQLParser::NodeTypeSpecificationContext::NodeTypeSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NodeTypePatternContext* GQLParser::NodeTypeSpecificationContext::nodeTypePattern() {
  return getRuleContext<GQLParser::NodeTypePatternContext>(0);
}

GQLParser::NodeTypePhraseContext* GQLParser::NodeTypeSpecificationContext::nodeTypePhrase() {
  return getRuleContext<GQLParser::NodeTypePhraseContext>(0);
}


size_t GQLParser::NodeTypeSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleNodeTypeSpecification;
}


GQLParser::NodeTypeSpecificationContext* GQLParser::nodeTypeSpecification() {
  NodeTypeSpecificationContext *_localctx = _tracker.createInstance<NodeTypeSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 582, GQLParser::RuleNodeTypeSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2806);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 250, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2804);
      nodeTypePattern();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2805);
      nodeTypePhrase();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeTypePatternContext ------------------------------------------------------------------

GQLParser::NodeTypePatternContext::NodeTypePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NodeTypePatternContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::NodeTypePatternContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::NodeSynonymContext* GQLParser::NodeTypePatternContext::nodeSynonym() {
  return getRuleContext<GQLParser::NodeSynonymContext>(0);
}

GQLParser::NodeTypeNameContext* GQLParser::NodeTypePatternContext::nodeTypeName() {
  return getRuleContext<GQLParser::NodeTypeNameContext>(0);
}

GQLParser::LocalNodeTypeAliasContext* GQLParser::NodeTypePatternContext::localNodeTypeAlias() {
  return getRuleContext<GQLParser::LocalNodeTypeAliasContext>(0);
}

GQLParser::NodeTypeFillerContext* GQLParser::NodeTypePatternContext::nodeTypeFiller() {
  return getRuleContext<GQLParser::NodeTypeFillerContext>(0);
}

tree::TerminalNode* GQLParser::NodeTypePatternContext::TYPE() {
  return getToken(GQLParser::TYPE, 0);
}


size_t GQLParser::NodeTypePatternContext::getRuleIndex() const {
  return GQLParser::RuleNodeTypePattern;
}


GQLParser::NodeTypePatternContext* GQLParser::nodeTypePattern() {
  NodeTypePatternContext *_localctx = _tracker.createInstance<NodeTypePatternContext>(_ctx, getState());
  enterRule(_localctx, 584, GQLParser::RuleNodeTypePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2814);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::NODE

    || _la == GQLParser::VERTEX) {
      setState(2808);
      nodeSynonym();
      setState(2810);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 251, _ctx)) {
      case 1: {
        setState(2809);
        match(GQLParser::TYPE);
        break;
      }

      default:
        break;
      }
      setState(2812);
      nodeTypeName();
    }
    setState(2816);
    match(GQLParser::LEFT_PAREN);
    setState(2818);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 253, _ctx)) {
    case 1: {
      setState(2817);
      localNodeTypeAlias();
      break;
    }

    default:
      break;
    }
    setState(2821);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::IMPLIES || _la == GQLParser::IS || _la == GQLParser::LABEL

    || _la == GQLParser::LABELS || _la == GQLParser::COLON

    || _la == GQLParser::LEFT_BRACE) {
      setState(2820);
      nodeTypeFiller();
    }
    setState(2823);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeTypePhraseContext ------------------------------------------------------------------

GQLParser::NodeTypePhraseContext::NodeTypePhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NodeSynonymContext* GQLParser::NodeTypePhraseContext::nodeSynonym() {
  return getRuleContext<GQLParser::NodeSynonymContext>(0);
}

GQLParser::NodeTypePhraseFillerContext* GQLParser::NodeTypePhraseContext::nodeTypePhraseFiller() {
  return getRuleContext<GQLParser::NodeTypePhraseFillerContext>(0);
}

tree::TerminalNode* GQLParser::NodeTypePhraseContext::TYPE() {
  return getToken(GQLParser::TYPE, 0);
}

tree::TerminalNode* GQLParser::NodeTypePhraseContext::AS() {
  return getToken(GQLParser::AS, 0);
}

GQLParser::LocalNodeTypeAliasContext* GQLParser::NodeTypePhraseContext::localNodeTypeAlias() {
  return getRuleContext<GQLParser::LocalNodeTypeAliasContext>(0);
}


size_t GQLParser::NodeTypePhraseContext::getRuleIndex() const {
  return GQLParser::RuleNodeTypePhrase;
}


GQLParser::NodeTypePhraseContext* GQLParser::nodeTypePhrase() {
  NodeTypePhraseContext *_localctx = _tracker.createInstance<NodeTypePhraseContext>(_ctx, getState());
  enterRule(_localctx, 586, GQLParser::RuleNodeTypePhrase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2825);
    nodeSynonym();
    setState(2827);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 255, _ctx)) {
    case 1: {
      setState(2826);
      match(GQLParser::TYPE);
      break;
    }

    default:
      break;
    }
    setState(2829);
    nodeTypePhraseFiller();
    setState(2832);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 256, _ctx)) {
    case 1: {
      setState(2830);
      match(GQLParser::AS);
      setState(2831);
      localNodeTypeAlias();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeTypePhraseFillerContext ------------------------------------------------------------------

GQLParser::NodeTypePhraseFillerContext::NodeTypePhraseFillerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NodeTypeNameContext* GQLParser::NodeTypePhraseFillerContext::nodeTypeName() {
  return getRuleContext<GQLParser::NodeTypeNameContext>(0);
}

GQLParser::NodeTypeFillerContext* GQLParser::NodeTypePhraseFillerContext::nodeTypeFiller() {
  return getRuleContext<GQLParser::NodeTypeFillerContext>(0);
}


size_t GQLParser::NodeTypePhraseFillerContext::getRuleIndex() const {
  return GQLParser::RuleNodeTypePhraseFiller;
}


GQLParser::NodeTypePhraseFillerContext* GQLParser::nodeTypePhraseFiller() {
  NodeTypePhraseFillerContext *_localctx = _tracker.createInstance<NodeTypePhraseFillerContext>(_ctx, getState());
  enterRule(_localctx, 588, GQLParser::RuleNodeTypePhraseFiller);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2839);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 258, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2834);
      nodeTypeName();
      setState(2836);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 257, _ctx)) {
      case 1: {
        setState(2835);
        nodeTypeFiller();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2838);
      nodeTypeFiller();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeTypeFillerContext ------------------------------------------------------------------

GQLParser::NodeTypeFillerContext::NodeTypeFillerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NodeTypeKeyLabelSetContext* GQLParser::NodeTypeFillerContext::nodeTypeKeyLabelSet() {
  return getRuleContext<GQLParser::NodeTypeKeyLabelSetContext>(0);
}

GQLParser::NodeTypeImpliedContentContext* GQLParser::NodeTypeFillerContext::nodeTypeImpliedContent() {
  return getRuleContext<GQLParser::NodeTypeImpliedContentContext>(0);
}


size_t GQLParser::NodeTypeFillerContext::getRuleIndex() const {
  return GQLParser::RuleNodeTypeFiller;
}


GQLParser::NodeTypeFillerContext* GQLParser::nodeTypeFiller() {
  NodeTypeFillerContext *_localctx = _tracker.createInstance<NodeTypeFillerContext>(_ctx, getState());
  enterRule(_localctx, 590, GQLParser::RuleNodeTypeFiller);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2846);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 260, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2841);
      nodeTypeKeyLabelSet();
      setState(2843);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 259, _ctx)) {
      case 1: {
        setState(2842);
        nodeTypeImpliedContent();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2845);
      nodeTypeImpliedContent();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocalNodeTypeAliasContext ------------------------------------------------------------------

GQLParser::LocalNodeTypeAliasContext::LocalNodeTypeAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::RegularIdentifierContext* GQLParser::LocalNodeTypeAliasContext::regularIdentifier() {
  return getRuleContext<GQLParser::RegularIdentifierContext>(0);
}


size_t GQLParser::LocalNodeTypeAliasContext::getRuleIndex() const {
  return GQLParser::RuleLocalNodeTypeAlias;
}


GQLParser::LocalNodeTypeAliasContext* GQLParser::localNodeTypeAlias() {
  LocalNodeTypeAliasContext *_localctx = _tracker.createInstance<LocalNodeTypeAliasContext>(_ctx, getState());
  enterRule(_localctx, 592, GQLParser::RuleLocalNodeTypeAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2848);
    regularIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeTypeImpliedContentContext ------------------------------------------------------------------

GQLParser::NodeTypeImpliedContentContext::NodeTypeImpliedContentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NodeTypeLabelSetContext* GQLParser::NodeTypeImpliedContentContext::nodeTypeLabelSet() {
  return getRuleContext<GQLParser::NodeTypeLabelSetContext>(0);
}

GQLParser::NodeTypePropertyTypesContext* GQLParser::NodeTypeImpliedContentContext::nodeTypePropertyTypes() {
  return getRuleContext<GQLParser::NodeTypePropertyTypesContext>(0);
}


size_t GQLParser::NodeTypeImpliedContentContext::getRuleIndex() const {
  return GQLParser::RuleNodeTypeImpliedContent;
}


GQLParser::NodeTypeImpliedContentContext* GQLParser::nodeTypeImpliedContent() {
  NodeTypeImpliedContentContext *_localctx = _tracker.createInstance<NodeTypeImpliedContentContext>(_ctx, getState());
  enterRule(_localctx, 594, GQLParser::RuleNodeTypeImpliedContent);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2855);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2850);
      nodeTypeLabelSet();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2851);
      nodeTypePropertyTypes();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2852);
      nodeTypeLabelSet();
      setState(2853);
      nodeTypePropertyTypes();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeTypeKeyLabelSetContext ------------------------------------------------------------------

GQLParser::NodeTypeKeyLabelSetContext::NodeTypeKeyLabelSetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NodeTypeKeyLabelSetContext::IMPLIES() {
  return getToken(GQLParser::IMPLIES, 0);
}

GQLParser::LabelSetPhraseContext* GQLParser::NodeTypeKeyLabelSetContext::labelSetPhrase() {
  return getRuleContext<GQLParser::LabelSetPhraseContext>(0);
}


size_t GQLParser::NodeTypeKeyLabelSetContext::getRuleIndex() const {
  return GQLParser::RuleNodeTypeKeyLabelSet;
}


GQLParser::NodeTypeKeyLabelSetContext* GQLParser::nodeTypeKeyLabelSet() {
  NodeTypeKeyLabelSetContext *_localctx = _tracker.createInstance<NodeTypeKeyLabelSetContext>(_ctx, getState());
  enterRule(_localctx, 596, GQLParser::RuleNodeTypeKeyLabelSet);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2858);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::IS || _la == GQLParser::LABEL

    || _la == GQLParser::LABELS || _la == GQLParser::COLON) {
      setState(2857);
      labelSetPhrase();
    }
    setState(2860);
    match(GQLParser::IMPLIES);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeTypeLabelSetContext ------------------------------------------------------------------

GQLParser::NodeTypeLabelSetContext::NodeTypeLabelSetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::LabelSetPhraseContext* GQLParser::NodeTypeLabelSetContext::labelSetPhrase() {
  return getRuleContext<GQLParser::LabelSetPhraseContext>(0);
}


size_t GQLParser::NodeTypeLabelSetContext::getRuleIndex() const {
  return GQLParser::RuleNodeTypeLabelSet;
}


GQLParser::NodeTypeLabelSetContext* GQLParser::nodeTypeLabelSet() {
  NodeTypeLabelSetContext *_localctx = _tracker.createInstance<NodeTypeLabelSetContext>(_ctx, getState());
  enterRule(_localctx, 598, GQLParser::RuleNodeTypeLabelSet);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2862);
    labelSetPhrase();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeTypePropertyTypesContext ------------------------------------------------------------------

GQLParser::NodeTypePropertyTypesContext::NodeTypePropertyTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PropertyTypesSpecificationContext* GQLParser::NodeTypePropertyTypesContext::propertyTypesSpecification() {
  return getRuleContext<GQLParser::PropertyTypesSpecificationContext>(0);
}


size_t GQLParser::NodeTypePropertyTypesContext::getRuleIndex() const {
  return GQLParser::RuleNodeTypePropertyTypes;
}


GQLParser::NodeTypePropertyTypesContext* GQLParser::nodeTypePropertyTypes() {
  NodeTypePropertyTypesContext *_localctx = _tracker.createInstance<NodeTypePropertyTypesContext>(_ctx, getState());
  enterRule(_localctx, 600, GQLParser::RuleNodeTypePropertyTypes);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2864);
    propertyTypesSpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypeSpecificationContext ------------------------------------------------------------------

GQLParser::EdgeTypeSpecificationContext::EdgeTypeSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::EdgeTypePatternContext* GQLParser::EdgeTypeSpecificationContext::edgeTypePattern() {
  return getRuleContext<GQLParser::EdgeTypePatternContext>(0);
}

GQLParser::EdgeTypePhraseContext* GQLParser::EdgeTypeSpecificationContext::edgeTypePhrase() {
  return getRuleContext<GQLParser::EdgeTypePhraseContext>(0);
}


size_t GQLParser::EdgeTypeSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypeSpecification;
}


GQLParser::EdgeTypeSpecificationContext* GQLParser::edgeTypeSpecification() {
  EdgeTypeSpecificationContext *_localctx = _tracker.createInstance<EdgeTypeSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 602, GQLParser::RuleEdgeTypeSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2868);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 263, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2866);
      edgeTypePattern();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2867);
      edgeTypePhrase();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypePatternContext ------------------------------------------------------------------

GQLParser::EdgeTypePatternContext::EdgeTypePatternContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::EdgeTypePatternDirectedContext* GQLParser::EdgeTypePatternContext::edgeTypePatternDirected() {
  return getRuleContext<GQLParser::EdgeTypePatternDirectedContext>(0);
}

GQLParser::EdgeTypePatternUndirectedContext* GQLParser::EdgeTypePatternContext::edgeTypePatternUndirected() {
  return getRuleContext<GQLParser::EdgeTypePatternUndirectedContext>(0);
}

GQLParser::EdgeSynonymContext* GQLParser::EdgeTypePatternContext::edgeSynonym() {
  return getRuleContext<GQLParser::EdgeSynonymContext>(0);
}

GQLParser::EdgeTypeNameContext* GQLParser::EdgeTypePatternContext::edgeTypeName() {
  return getRuleContext<GQLParser::EdgeTypeNameContext>(0);
}

GQLParser::EdgeKindContext* GQLParser::EdgeTypePatternContext::edgeKind() {
  return getRuleContext<GQLParser::EdgeKindContext>(0);
}

tree::TerminalNode* GQLParser::EdgeTypePatternContext::TYPE() {
  return getToken(GQLParser::TYPE, 0);
}


size_t GQLParser::EdgeTypePatternContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypePattern;
}


GQLParser::EdgeTypePatternContext* GQLParser::edgeTypePattern() {
  EdgeTypePatternContext *_localctx = _tracker.createInstance<EdgeTypePatternContext>(_ctx, getState());
  enterRule(_localctx, 604, GQLParser::RuleEdgeTypePattern);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2879);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 283) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 283)) & 34376515587) != 0)) {
      setState(2871);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::DIRECTED

      || _la == GQLParser::UNDIRECTED) {
        setState(2870);
        edgeKind();
      }
      setState(2873);
      edgeSynonym();
      setState(2875);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 265, _ctx)) {
      case 1: {
        setState(2874);
        match(GQLParser::TYPE);
        break;
      }

      default:
        break;
      }
      setState(2877);
      edgeTypeName();
    }
    setState(2883);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 267, _ctx)) {
    case 1: {
      setState(2881);
      edgeTypePatternDirected();
      break;
    }

    case 2: {
      setState(2882);
      edgeTypePatternUndirected();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypePhraseContext ------------------------------------------------------------------

GQLParser::EdgeTypePhraseContext::EdgeTypePhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::EdgeKindContext* GQLParser::EdgeTypePhraseContext::edgeKind() {
  return getRuleContext<GQLParser::EdgeKindContext>(0);
}

GQLParser::EdgeSynonymContext* GQLParser::EdgeTypePhraseContext::edgeSynonym() {
  return getRuleContext<GQLParser::EdgeSynonymContext>(0);
}

GQLParser::EdgeTypePhraseFillerContext* GQLParser::EdgeTypePhraseContext::edgeTypePhraseFiller() {
  return getRuleContext<GQLParser::EdgeTypePhraseFillerContext>(0);
}

GQLParser::EndpointPairPhraseContext* GQLParser::EdgeTypePhraseContext::endpointPairPhrase() {
  return getRuleContext<GQLParser::EndpointPairPhraseContext>(0);
}

tree::TerminalNode* GQLParser::EdgeTypePhraseContext::TYPE() {
  return getToken(GQLParser::TYPE, 0);
}


size_t GQLParser::EdgeTypePhraseContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypePhrase;
}


GQLParser::EdgeTypePhraseContext* GQLParser::edgeTypePhrase() {
  EdgeTypePhraseContext *_localctx = _tracker.createInstance<EdgeTypePhraseContext>(_ctx, getState());
  enterRule(_localctx, 606, GQLParser::RuleEdgeTypePhrase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2885);
    edgeKind();
    setState(2886);
    edgeSynonym();
    setState(2888);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 268, _ctx)) {
    case 1: {
      setState(2887);
      match(GQLParser::TYPE);
      break;
    }

    default:
      break;
    }
    setState(2890);
    edgeTypePhraseFiller();
    setState(2891);
    endpointPairPhrase();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypePhraseFillerContext ------------------------------------------------------------------

GQLParser::EdgeTypePhraseFillerContext::EdgeTypePhraseFillerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::EdgeTypeNameContext* GQLParser::EdgeTypePhraseFillerContext::edgeTypeName() {
  return getRuleContext<GQLParser::EdgeTypeNameContext>(0);
}

GQLParser::EdgeTypeFillerContext* GQLParser::EdgeTypePhraseFillerContext::edgeTypeFiller() {
  return getRuleContext<GQLParser::EdgeTypeFillerContext>(0);
}


size_t GQLParser::EdgeTypePhraseFillerContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypePhraseFiller;
}


GQLParser::EdgeTypePhraseFillerContext* GQLParser::edgeTypePhraseFiller() {
  EdgeTypePhraseFillerContext *_localctx = _tracker.createInstance<EdgeTypePhraseFillerContext>(_ctx, getState());
  enterRule(_localctx, 608, GQLParser::RuleEdgeTypePhraseFiller);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2898);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 270, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2893);
      edgeTypeName();
      setState(2895);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::IMPLIES || _la == GQLParser::IS || _la == GQLParser::LABEL

      || _la == GQLParser::LABELS || _la == GQLParser::COLON

      || _la == GQLParser::LEFT_BRACE) {
        setState(2894);
        edgeTypeFiller();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2897);
      edgeTypeFiller();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypeFillerContext ------------------------------------------------------------------

GQLParser::EdgeTypeFillerContext::EdgeTypeFillerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::EdgeTypeKeyLabelSetContext* GQLParser::EdgeTypeFillerContext::edgeTypeKeyLabelSet() {
  return getRuleContext<GQLParser::EdgeTypeKeyLabelSetContext>(0);
}

GQLParser::EdgeTypeImpliedContentContext* GQLParser::EdgeTypeFillerContext::edgeTypeImpliedContent() {
  return getRuleContext<GQLParser::EdgeTypeImpliedContentContext>(0);
}


size_t GQLParser::EdgeTypeFillerContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypeFiller;
}


GQLParser::EdgeTypeFillerContext* GQLParser::edgeTypeFiller() {
  EdgeTypeFillerContext *_localctx = _tracker.createInstance<EdgeTypeFillerContext>(_ctx, getState());
  enterRule(_localctx, 610, GQLParser::RuleEdgeTypeFiller);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2905);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 272, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2900);
      edgeTypeKeyLabelSet();
      setState(2902);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::IS || _la == GQLParser::LABEL

      || _la == GQLParser::LABELS || _la == GQLParser::COLON

      || _la == GQLParser::LEFT_BRACE) {
        setState(2901);
        edgeTypeImpliedContent();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2904);
      edgeTypeImpliedContent();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypeImpliedContentContext ------------------------------------------------------------------

GQLParser::EdgeTypeImpliedContentContext::EdgeTypeImpliedContentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::EdgeTypeLabelSetContext* GQLParser::EdgeTypeImpliedContentContext::edgeTypeLabelSet() {
  return getRuleContext<GQLParser::EdgeTypeLabelSetContext>(0);
}

GQLParser::EdgeTypePropertyTypesContext* GQLParser::EdgeTypeImpliedContentContext::edgeTypePropertyTypes() {
  return getRuleContext<GQLParser::EdgeTypePropertyTypesContext>(0);
}


size_t GQLParser::EdgeTypeImpliedContentContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypeImpliedContent;
}


GQLParser::EdgeTypeImpliedContentContext* GQLParser::edgeTypeImpliedContent() {
  EdgeTypeImpliedContentContext *_localctx = _tracker.createInstance<EdgeTypeImpliedContentContext>(_ctx, getState());
  enterRule(_localctx, 612, GQLParser::RuleEdgeTypeImpliedContent);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2912);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 273, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2907);
      edgeTypeLabelSet();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2908);
      edgeTypePropertyTypes();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2909);
      edgeTypeLabelSet();
      setState(2910);
      edgeTypePropertyTypes();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypeKeyLabelSetContext ------------------------------------------------------------------

GQLParser::EdgeTypeKeyLabelSetContext::EdgeTypeKeyLabelSetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::EdgeTypeKeyLabelSetContext::IMPLIES() {
  return getToken(GQLParser::IMPLIES, 0);
}

GQLParser::LabelSetPhraseContext* GQLParser::EdgeTypeKeyLabelSetContext::labelSetPhrase() {
  return getRuleContext<GQLParser::LabelSetPhraseContext>(0);
}


size_t GQLParser::EdgeTypeKeyLabelSetContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypeKeyLabelSet;
}


GQLParser::EdgeTypeKeyLabelSetContext* GQLParser::edgeTypeKeyLabelSet() {
  EdgeTypeKeyLabelSetContext *_localctx = _tracker.createInstance<EdgeTypeKeyLabelSetContext>(_ctx, getState());
  enterRule(_localctx, 614, GQLParser::RuleEdgeTypeKeyLabelSet);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2915);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::IS || _la == GQLParser::LABEL

    || _la == GQLParser::LABELS || _la == GQLParser::COLON) {
      setState(2914);
      labelSetPhrase();
    }
    setState(2917);
    match(GQLParser::IMPLIES);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypeLabelSetContext ------------------------------------------------------------------

GQLParser::EdgeTypeLabelSetContext::EdgeTypeLabelSetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::LabelSetPhraseContext* GQLParser::EdgeTypeLabelSetContext::labelSetPhrase() {
  return getRuleContext<GQLParser::LabelSetPhraseContext>(0);
}


size_t GQLParser::EdgeTypeLabelSetContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypeLabelSet;
}


GQLParser::EdgeTypeLabelSetContext* GQLParser::edgeTypeLabelSet() {
  EdgeTypeLabelSetContext *_localctx = _tracker.createInstance<EdgeTypeLabelSetContext>(_ctx, getState());
  enterRule(_localctx, 616, GQLParser::RuleEdgeTypeLabelSet);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2919);
    labelSetPhrase();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypePropertyTypesContext ------------------------------------------------------------------

GQLParser::EdgeTypePropertyTypesContext::EdgeTypePropertyTypesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PropertyTypesSpecificationContext* GQLParser::EdgeTypePropertyTypesContext::propertyTypesSpecification() {
  return getRuleContext<GQLParser::PropertyTypesSpecificationContext>(0);
}


size_t GQLParser::EdgeTypePropertyTypesContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypePropertyTypes;
}


GQLParser::EdgeTypePropertyTypesContext* GQLParser::edgeTypePropertyTypes() {
  EdgeTypePropertyTypesContext *_localctx = _tracker.createInstance<EdgeTypePropertyTypesContext>(_ctx, getState());
  enterRule(_localctx, 618, GQLParser::RuleEdgeTypePropertyTypes);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2921);
    propertyTypesSpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypePatternDirectedContext ------------------------------------------------------------------

GQLParser::EdgeTypePatternDirectedContext::EdgeTypePatternDirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::EdgeTypePatternPointingRightContext* GQLParser::EdgeTypePatternDirectedContext::edgeTypePatternPointingRight() {
  return getRuleContext<GQLParser::EdgeTypePatternPointingRightContext>(0);
}

GQLParser::EdgeTypePatternPointingLeftContext* GQLParser::EdgeTypePatternDirectedContext::edgeTypePatternPointingLeft() {
  return getRuleContext<GQLParser::EdgeTypePatternPointingLeftContext>(0);
}


size_t GQLParser::EdgeTypePatternDirectedContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypePatternDirected;
}


GQLParser::EdgeTypePatternDirectedContext* GQLParser::edgeTypePatternDirected() {
  EdgeTypePatternDirectedContext *_localctx = _tracker.createInstance<EdgeTypePatternDirectedContext>(_ctx, getState());
  enterRule(_localctx, 620, GQLParser::RuleEdgeTypePatternDirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2925);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 275, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2923);
      edgeTypePatternPointingRight();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2924);
      edgeTypePatternPointingLeft();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypePatternPointingRightContext ------------------------------------------------------------------

GQLParser::EdgeTypePatternPointingRightContext::EdgeTypePatternPointingRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SourceNodeTypeReferenceContext* GQLParser::EdgeTypePatternPointingRightContext::sourceNodeTypeReference() {
  return getRuleContext<GQLParser::SourceNodeTypeReferenceContext>(0);
}

GQLParser::ArcTypePointingRightContext* GQLParser::EdgeTypePatternPointingRightContext::arcTypePointingRight() {
  return getRuleContext<GQLParser::ArcTypePointingRightContext>(0);
}

GQLParser::DestinationNodeTypeReferenceContext* GQLParser::EdgeTypePatternPointingRightContext::destinationNodeTypeReference() {
  return getRuleContext<GQLParser::DestinationNodeTypeReferenceContext>(0);
}


size_t GQLParser::EdgeTypePatternPointingRightContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypePatternPointingRight;
}


GQLParser::EdgeTypePatternPointingRightContext* GQLParser::edgeTypePatternPointingRight() {
  EdgeTypePatternPointingRightContext *_localctx = _tracker.createInstance<EdgeTypePatternPointingRightContext>(_ctx, getState());
  enterRule(_localctx, 622, GQLParser::RuleEdgeTypePatternPointingRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2927);
    sourceNodeTypeReference();
    setState(2928);
    arcTypePointingRight();
    setState(2929);
    destinationNodeTypeReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypePatternPointingLeftContext ------------------------------------------------------------------

GQLParser::EdgeTypePatternPointingLeftContext::EdgeTypePatternPointingLeftContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DestinationNodeTypeReferenceContext* GQLParser::EdgeTypePatternPointingLeftContext::destinationNodeTypeReference() {
  return getRuleContext<GQLParser::DestinationNodeTypeReferenceContext>(0);
}

GQLParser::ArcTypePointingLeftContext* GQLParser::EdgeTypePatternPointingLeftContext::arcTypePointingLeft() {
  return getRuleContext<GQLParser::ArcTypePointingLeftContext>(0);
}

GQLParser::SourceNodeTypeReferenceContext* GQLParser::EdgeTypePatternPointingLeftContext::sourceNodeTypeReference() {
  return getRuleContext<GQLParser::SourceNodeTypeReferenceContext>(0);
}


size_t GQLParser::EdgeTypePatternPointingLeftContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypePatternPointingLeft;
}


GQLParser::EdgeTypePatternPointingLeftContext* GQLParser::edgeTypePatternPointingLeft() {
  EdgeTypePatternPointingLeftContext *_localctx = _tracker.createInstance<EdgeTypePatternPointingLeftContext>(_ctx, getState());
  enterRule(_localctx, 624, GQLParser::RuleEdgeTypePatternPointingLeft);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2931);
    destinationNodeTypeReference();
    setState(2932);
    arcTypePointingLeft();
    setState(2933);
    sourceNodeTypeReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypePatternUndirectedContext ------------------------------------------------------------------

GQLParser::EdgeTypePatternUndirectedContext::EdgeTypePatternUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SourceNodeTypeReferenceContext* GQLParser::EdgeTypePatternUndirectedContext::sourceNodeTypeReference() {
  return getRuleContext<GQLParser::SourceNodeTypeReferenceContext>(0);
}

GQLParser::ArcTypeUndirectedContext* GQLParser::EdgeTypePatternUndirectedContext::arcTypeUndirected() {
  return getRuleContext<GQLParser::ArcTypeUndirectedContext>(0);
}

GQLParser::DestinationNodeTypeReferenceContext* GQLParser::EdgeTypePatternUndirectedContext::destinationNodeTypeReference() {
  return getRuleContext<GQLParser::DestinationNodeTypeReferenceContext>(0);
}


size_t GQLParser::EdgeTypePatternUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypePatternUndirected;
}


GQLParser::EdgeTypePatternUndirectedContext* GQLParser::edgeTypePatternUndirected() {
  EdgeTypePatternUndirectedContext *_localctx = _tracker.createInstance<EdgeTypePatternUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 626, GQLParser::RuleEdgeTypePatternUndirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2935);
    sourceNodeTypeReference();
    setState(2936);
    arcTypeUndirected();
    setState(2937);
    destinationNodeTypeReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArcTypePointingRightContext ------------------------------------------------------------------

GQLParser::ArcTypePointingRightContext::ArcTypePointingRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ArcTypePointingRightContext::MINUS_LEFT_BRACKET() {
  return getToken(GQLParser::MINUS_LEFT_BRACKET, 0);
}

GQLParser::EdgeTypeFillerContext* GQLParser::ArcTypePointingRightContext::edgeTypeFiller() {
  return getRuleContext<GQLParser::EdgeTypeFillerContext>(0);
}

tree::TerminalNode* GQLParser::ArcTypePointingRightContext::BRACKET_RIGHT_ARROW() {
  return getToken(GQLParser::BRACKET_RIGHT_ARROW, 0);
}


size_t GQLParser::ArcTypePointingRightContext::getRuleIndex() const {
  return GQLParser::RuleArcTypePointingRight;
}


GQLParser::ArcTypePointingRightContext* GQLParser::arcTypePointingRight() {
  ArcTypePointingRightContext *_localctx = _tracker.createInstance<ArcTypePointingRightContext>(_ctx, getState());
  enterRule(_localctx, 628, GQLParser::RuleArcTypePointingRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2939);
    match(GQLParser::MINUS_LEFT_BRACKET);
    setState(2940);
    edgeTypeFiller();
    setState(2941);
    match(GQLParser::BRACKET_RIGHT_ARROW);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArcTypePointingLeftContext ------------------------------------------------------------------

GQLParser::ArcTypePointingLeftContext::ArcTypePointingLeftContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ArcTypePointingLeftContext::LEFT_ARROW_BRACKET() {
  return getToken(GQLParser::LEFT_ARROW_BRACKET, 0);
}

GQLParser::EdgeTypeFillerContext* GQLParser::ArcTypePointingLeftContext::edgeTypeFiller() {
  return getRuleContext<GQLParser::EdgeTypeFillerContext>(0);
}

tree::TerminalNode* GQLParser::ArcTypePointingLeftContext::RIGHT_BRACKET_MINUS() {
  return getToken(GQLParser::RIGHT_BRACKET_MINUS, 0);
}


size_t GQLParser::ArcTypePointingLeftContext::getRuleIndex() const {
  return GQLParser::RuleArcTypePointingLeft;
}


GQLParser::ArcTypePointingLeftContext* GQLParser::arcTypePointingLeft() {
  ArcTypePointingLeftContext *_localctx = _tracker.createInstance<ArcTypePointingLeftContext>(_ctx, getState());
  enterRule(_localctx, 630, GQLParser::RuleArcTypePointingLeft);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2943);
    match(GQLParser::LEFT_ARROW_BRACKET);
    setState(2944);
    edgeTypeFiller();
    setState(2945);
    match(GQLParser::RIGHT_BRACKET_MINUS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArcTypeUndirectedContext ------------------------------------------------------------------

GQLParser::ArcTypeUndirectedContext::ArcTypeUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ArcTypeUndirectedContext::TILDE_LEFT_BRACKET() {
  return getToken(GQLParser::TILDE_LEFT_BRACKET, 0);
}

GQLParser::EdgeTypeFillerContext* GQLParser::ArcTypeUndirectedContext::edgeTypeFiller() {
  return getRuleContext<GQLParser::EdgeTypeFillerContext>(0);
}

tree::TerminalNode* GQLParser::ArcTypeUndirectedContext::RIGHT_BRACKET_TILDE() {
  return getToken(GQLParser::RIGHT_BRACKET_TILDE, 0);
}


size_t GQLParser::ArcTypeUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleArcTypeUndirected;
}


GQLParser::ArcTypeUndirectedContext* GQLParser::arcTypeUndirected() {
  ArcTypeUndirectedContext *_localctx = _tracker.createInstance<ArcTypeUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 632, GQLParser::RuleArcTypeUndirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2947);
    match(GQLParser::TILDE_LEFT_BRACKET);
    setState(2948);
    edgeTypeFiller();
    setState(2949);
    match(GQLParser::RIGHT_BRACKET_TILDE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SourceNodeTypeReferenceContext ------------------------------------------------------------------

GQLParser::SourceNodeTypeReferenceContext::SourceNodeTypeReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SourceNodeTypeReferenceContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::SourceNodeTypeAliasContext* GQLParser::SourceNodeTypeReferenceContext::sourceNodeTypeAlias() {
  return getRuleContext<GQLParser::SourceNodeTypeAliasContext>(0);
}

tree::TerminalNode* GQLParser::SourceNodeTypeReferenceContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::NodeTypeFillerContext* GQLParser::SourceNodeTypeReferenceContext::nodeTypeFiller() {
  return getRuleContext<GQLParser::NodeTypeFillerContext>(0);
}


size_t GQLParser::SourceNodeTypeReferenceContext::getRuleIndex() const {
  return GQLParser::RuleSourceNodeTypeReference;
}


GQLParser::SourceNodeTypeReferenceContext* GQLParser::sourceNodeTypeReference() {
  SourceNodeTypeReferenceContext *_localctx = _tracker.createInstance<SourceNodeTypeReferenceContext>(_ctx, getState());
  enterRule(_localctx, 634, GQLParser::RuleSourceNodeTypeReference);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2960);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 277, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2951);
      match(GQLParser::LEFT_PAREN);
      setState(2952);
      sourceNodeTypeAlias();
      setState(2953);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2955);
      match(GQLParser::LEFT_PAREN);
      setState(2957);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::IMPLIES || _la == GQLParser::IS || _la == GQLParser::LABEL

      || _la == GQLParser::LABELS || _la == GQLParser::COLON

      || _la == GQLParser::LEFT_BRACE) {
        setState(2956);
        nodeTypeFiller();
      }
      setState(2959);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DestinationNodeTypeReferenceContext ------------------------------------------------------------------

GQLParser::DestinationNodeTypeReferenceContext::DestinationNodeTypeReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DestinationNodeTypeReferenceContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::DestinationNodeTypeAliasContext* GQLParser::DestinationNodeTypeReferenceContext::destinationNodeTypeAlias() {
  return getRuleContext<GQLParser::DestinationNodeTypeAliasContext>(0);
}

tree::TerminalNode* GQLParser::DestinationNodeTypeReferenceContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::NodeTypeFillerContext* GQLParser::DestinationNodeTypeReferenceContext::nodeTypeFiller() {
  return getRuleContext<GQLParser::NodeTypeFillerContext>(0);
}


size_t GQLParser::DestinationNodeTypeReferenceContext::getRuleIndex() const {
  return GQLParser::RuleDestinationNodeTypeReference;
}


GQLParser::DestinationNodeTypeReferenceContext* GQLParser::destinationNodeTypeReference() {
  DestinationNodeTypeReferenceContext *_localctx = _tracker.createInstance<DestinationNodeTypeReferenceContext>(_ctx, getState());
  enterRule(_localctx, 636, GQLParser::RuleDestinationNodeTypeReference);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2971);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 279, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2962);
      match(GQLParser::LEFT_PAREN);
      setState(2963);
      destinationNodeTypeAlias();
      setState(2964);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2966);
      match(GQLParser::LEFT_PAREN);
      setState(2968);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::IMPLIES || _la == GQLParser::IS || _la == GQLParser::LABEL

      || _la == GQLParser::LABELS || _la == GQLParser::COLON

      || _la == GQLParser::LEFT_BRACE) {
        setState(2967);
        nodeTypeFiller();
      }
      setState(2970);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeKindContext ------------------------------------------------------------------

GQLParser::EdgeKindContext::EdgeKindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::EdgeKindContext::DIRECTED() {
  return getToken(GQLParser::DIRECTED, 0);
}

tree::TerminalNode* GQLParser::EdgeKindContext::UNDIRECTED() {
  return getToken(GQLParser::UNDIRECTED, 0);
}


size_t GQLParser::EdgeKindContext::getRuleIndex() const {
  return GQLParser::RuleEdgeKind;
}


GQLParser::EdgeKindContext* GQLParser::edgeKind() {
  EdgeKindContext *_localctx = _tracker.createInstance<EdgeKindContext>(_ctx, getState());
  enterRule(_localctx, 638, GQLParser::RuleEdgeKind);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2973);
    _la = _input->LA(1);
    if (!(_la == GQLParser::DIRECTED

    || _la == GQLParser::UNDIRECTED)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndpointPairPhraseContext ------------------------------------------------------------------

GQLParser::EndpointPairPhraseContext::EndpointPairPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::EndpointPairPhraseContext::CONNECTING() {
  return getToken(GQLParser::CONNECTING, 0);
}

GQLParser::EndpointPairContext* GQLParser::EndpointPairPhraseContext::endpointPair() {
  return getRuleContext<GQLParser::EndpointPairContext>(0);
}


size_t GQLParser::EndpointPairPhraseContext::getRuleIndex() const {
  return GQLParser::RuleEndpointPairPhrase;
}


GQLParser::EndpointPairPhraseContext* GQLParser::endpointPairPhrase() {
  EndpointPairPhraseContext *_localctx = _tracker.createInstance<EndpointPairPhraseContext>(_ctx, getState());
  enterRule(_localctx, 640, GQLParser::RuleEndpointPairPhrase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2975);
    match(GQLParser::CONNECTING);
    setState(2976);
    endpointPair();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndpointPairContext ------------------------------------------------------------------

GQLParser::EndpointPairContext::EndpointPairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::EndpointPairDirectedContext* GQLParser::EndpointPairContext::endpointPairDirected() {
  return getRuleContext<GQLParser::EndpointPairDirectedContext>(0);
}

GQLParser::EndpointPairUndirectedContext* GQLParser::EndpointPairContext::endpointPairUndirected() {
  return getRuleContext<GQLParser::EndpointPairUndirectedContext>(0);
}


size_t GQLParser::EndpointPairContext::getRuleIndex() const {
  return GQLParser::RuleEndpointPair;
}


GQLParser::EndpointPairContext* GQLParser::endpointPair() {
  EndpointPairContext *_localctx = _tracker.createInstance<EndpointPairContext>(_ctx, getState());
  enterRule(_localctx, 642, GQLParser::RuleEndpointPair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2980);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 280, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2978);
      endpointPairDirected();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2979);
      endpointPairUndirected();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndpointPairDirectedContext ------------------------------------------------------------------

GQLParser::EndpointPairDirectedContext::EndpointPairDirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::EndpointPairPointingRightContext* GQLParser::EndpointPairDirectedContext::endpointPairPointingRight() {
  return getRuleContext<GQLParser::EndpointPairPointingRightContext>(0);
}

GQLParser::EndpointPairPointingLeftContext* GQLParser::EndpointPairDirectedContext::endpointPairPointingLeft() {
  return getRuleContext<GQLParser::EndpointPairPointingLeftContext>(0);
}


size_t GQLParser::EndpointPairDirectedContext::getRuleIndex() const {
  return GQLParser::RuleEndpointPairDirected;
}


GQLParser::EndpointPairDirectedContext* GQLParser::endpointPairDirected() {
  EndpointPairDirectedContext *_localctx = _tracker.createInstance<EndpointPairDirectedContext>(_ctx, getState());
  enterRule(_localctx, 644, GQLParser::RuleEndpointPairDirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2984);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 281, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2982);
      endpointPairPointingRight();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2983);
      endpointPairPointingLeft();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndpointPairPointingRightContext ------------------------------------------------------------------

GQLParser::EndpointPairPointingRightContext::EndpointPairPointingRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::EndpointPairPointingRightContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::SourceNodeTypeAliasContext* GQLParser::EndpointPairPointingRightContext::sourceNodeTypeAlias() {
  return getRuleContext<GQLParser::SourceNodeTypeAliasContext>(0);
}

GQLParser::ConnectorPointingRightContext* GQLParser::EndpointPairPointingRightContext::connectorPointingRight() {
  return getRuleContext<GQLParser::ConnectorPointingRightContext>(0);
}

GQLParser::DestinationNodeTypeAliasContext* GQLParser::EndpointPairPointingRightContext::destinationNodeTypeAlias() {
  return getRuleContext<GQLParser::DestinationNodeTypeAliasContext>(0);
}

tree::TerminalNode* GQLParser::EndpointPairPointingRightContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::EndpointPairPointingRightContext::getRuleIndex() const {
  return GQLParser::RuleEndpointPairPointingRight;
}


GQLParser::EndpointPairPointingRightContext* GQLParser::endpointPairPointingRight() {
  EndpointPairPointingRightContext *_localctx = _tracker.createInstance<EndpointPairPointingRightContext>(_ctx, getState());
  enterRule(_localctx, 646, GQLParser::RuleEndpointPairPointingRight);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2986);
    match(GQLParser::LEFT_PAREN);
    setState(2987);
    sourceNodeTypeAlias();
    setState(2988);
    connectorPointingRight();
    setState(2989);
    destinationNodeTypeAlias();
    setState(2990);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndpointPairPointingLeftContext ------------------------------------------------------------------

GQLParser::EndpointPairPointingLeftContext::EndpointPairPointingLeftContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::EndpointPairPointingLeftContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::DestinationNodeTypeAliasContext* GQLParser::EndpointPairPointingLeftContext::destinationNodeTypeAlias() {
  return getRuleContext<GQLParser::DestinationNodeTypeAliasContext>(0);
}

tree::TerminalNode* GQLParser::EndpointPairPointingLeftContext::LEFT_ARROW() {
  return getToken(GQLParser::LEFT_ARROW, 0);
}

GQLParser::SourceNodeTypeAliasContext* GQLParser::EndpointPairPointingLeftContext::sourceNodeTypeAlias() {
  return getRuleContext<GQLParser::SourceNodeTypeAliasContext>(0);
}

tree::TerminalNode* GQLParser::EndpointPairPointingLeftContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::EndpointPairPointingLeftContext::getRuleIndex() const {
  return GQLParser::RuleEndpointPairPointingLeft;
}


GQLParser::EndpointPairPointingLeftContext* GQLParser::endpointPairPointingLeft() {
  EndpointPairPointingLeftContext *_localctx = _tracker.createInstance<EndpointPairPointingLeftContext>(_ctx, getState());
  enterRule(_localctx, 648, GQLParser::RuleEndpointPairPointingLeft);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2992);
    match(GQLParser::LEFT_PAREN);
    setState(2993);
    destinationNodeTypeAlias();
    setState(2994);
    match(GQLParser::LEFT_ARROW);
    setState(2995);
    sourceNodeTypeAlias();
    setState(2996);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndpointPairUndirectedContext ------------------------------------------------------------------

GQLParser::EndpointPairUndirectedContext::EndpointPairUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::EndpointPairUndirectedContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::SourceNodeTypeAliasContext* GQLParser::EndpointPairUndirectedContext::sourceNodeTypeAlias() {
  return getRuleContext<GQLParser::SourceNodeTypeAliasContext>(0);
}

GQLParser::ConnectorUndirectedContext* GQLParser::EndpointPairUndirectedContext::connectorUndirected() {
  return getRuleContext<GQLParser::ConnectorUndirectedContext>(0);
}

GQLParser::DestinationNodeTypeAliasContext* GQLParser::EndpointPairUndirectedContext::destinationNodeTypeAlias() {
  return getRuleContext<GQLParser::DestinationNodeTypeAliasContext>(0);
}

tree::TerminalNode* GQLParser::EndpointPairUndirectedContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::EndpointPairUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleEndpointPairUndirected;
}


GQLParser::EndpointPairUndirectedContext* GQLParser::endpointPairUndirected() {
  EndpointPairUndirectedContext *_localctx = _tracker.createInstance<EndpointPairUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 650, GQLParser::RuleEndpointPairUndirected);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2998);
    match(GQLParser::LEFT_PAREN);
    setState(2999);
    sourceNodeTypeAlias();
    setState(3000);
    connectorUndirected();
    setState(3001);
    destinationNodeTypeAlias();
    setState(3002);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConnectorPointingRightContext ------------------------------------------------------------------

GQLParser::ConnectorPointingRightContext::ConnectorPointingRightContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ConnectorPointingRightContext::TO() {
  return getToken(GQLParser::TO, 0);
}

tree::TerminalNode* GQLParser::ConnectorPointingRightContext::RIGHT_ARROW() {
  return getToken(GQLParser::RIGHT_ARROW, 0);
}


size_t GQLParser::ConnectorPointingRightContext::getRuleIndex() const {
  return GQLParser::RuleConnectorPointingRight;
}


GQLParser::ConnectorPointingRightContext* GQLParser::connectorPointingRight() {
  ConnectorPointingRightContext *_localctx = _tracker.createInstance<ConnectorPointingRightContext>(_ctx, getState());
  enterRule(_localctx, 652, GQLParser::RuleConnectorPointingRight);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3004);
    _la = _input->LA(1);
    if (!(_la == GQLParser::TO

    || _la == GQLParser::RIGHT_ARROW)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConnectorUndirectedContext ------------------------------------------------------------------

GQLParser::ConnectorUndirectedContext::ConnectorUndirectedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ConnectorUndirectedContext::TO() {
  return getToken(GQLParser::TO, 0);
}

tree::TerminalNode* GQLParser::ConnectorUndirectedContext::TILDE() {
  return getToken(GQLParser::TILDE, 0);
}


size_t GQLParser::ConnectorUndirectedContext::getRuleIndex() const {
  return GQLParser::RuleConnectorUndirected;
}


GQLParser::ConnectorUndirectedContext* GQLParser::connectorUndirected() {
  ConnectorUndirectedContext *_localctx = _tracker.createInstance<ConnectorUndirectedContext>(_ctx, getState());
  enterRule(_localctx, 654, GQLParser::RuleConnectorUndirected);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3006);
    _la = _input->LA(1);
    if (!(_la == GQLParser::TO || _la == GQLParser::TILDE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SourceNodeTypeAliasContext ------------------------------------------------------------------

GQLParser::SourceNodeTypeAliasContext::SourceNodeTypeAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::RegularIdentifierContext* GQLParser::SourceNodeTypeAliasContext::regularIdentifier() {
  return getRuleContext<GQLParser::RegularIdentifierContext>(0);
}


size_t GQLParser::SourceNodeTypeAliasContext::getRuleIndex() const {
  return GQLParser::RuleSourceNodeTypeAlias;
}


GQLParser::SourceNodeTypeAliasContext* GQLParser::sourceNodeTypeAlias() {
  SourceNodeTypeAliasContext *_localctx = _tracker.createInstance<SourceNodeTypeAliasContext>(_ctx, getState());
  enterRule(_localctx, 656, GQLParser::RuleSourceNodeTypeAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3008);
    regularIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DestinationNodeTypeAliasContext ------------------------------------------------------------------

GQLParser::DestinationNodeTypeAliasContext::DestinationNodeTypeAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::RegularIdentifierContext* GQLParser::DestinationNodeTypeAliasContext::regularIdentifier() {
  return getRuleContext<GQLParser::RegularIdentifierContext>(0);
}


size_t GQLParser::DestinationNodeTypeAliasContext::getRuleIndex() const {
  return GQLParser::RuleDestinationNodeTypeAlias;
}


GQLParser::DestinationNodeTypeAliasContext* GQLParser::destinationNodeTypeAlias() {
  DestinationNodeTypeAliasContext *_localctx = _tracker.createInstance<DestinationNodeTypeAliasContext>(_ctx, getState());
  enterRule(_localctx, 658, GQLParser::RuleDestinationNodeTypeAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3010);
    regularIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelSetPhraseContext ------------------------------------------------------------------

GQLParser::LabelSetPhraseContext::LabelSetPhraseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::LabelSetPhraseContext::LABEL() {
  return getToken(GQLParser::LABEL, 0);
}

GQLParser::LabelNameContext* GQLParser::LabelSetPhraseContext::labelName() {
  return getRuleContext<GQLParser::LabelNameContext>(0);
}

tree::TerminalNode* GQLParser::LabelSetPhraseContext::LABELS() {
  return getToken(GQLParser::LABELS, 0);
}

GQLParser::LabelSetSpecificationContext* GQLParser::LabelSetPhraseContext::labelSetSpecification() {
  return getRuleContext<GQLParser::LabelSetSpecificationContext>(0);
}

GQLParser::IsOrColonContext* GQLParser::LabelSetPhraseContext::isOrColon() {
  return getRuleContext<GQLParser::IsOrColonContext>(0);
}


size_t GQLParser::LabelSetPhraseContext::getRuleIndex() const {
  return GQLParser::RuleLabelSetPhrase;
}


GQLParser::LabelSetPhraseContext* GQLParser::labelSetPhrase() {
  LabelSetPhraseContext *_localctx = _tracker.createInstance<LabelSetPhraseContext>(_ctx, getState());
  enterRule(_localctx, 660, GQLParser::RuleLabelSetPhrase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3019);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LABEL: {
        enterOuterAlt(_localctx, 1);
        setState(3012);
        match(GQLParser::LABEL);
        setState(3013);
        labelName();
        break;
      }

      case GQLParser::LABELS: {
        enterOuterAlt(_localctx, 2);
        setState(3014);
        match(GQLParser::LABELS);
        setState(3015);
        labelSetSpecification();
        break;
      }

      case GQLParser::IS:
      case GQLParser::COLON: {
        enterOuterAlt(_localctx, 3);
        setState(3016);
        isOrColon();
        setState(3017);
        labelSetSpecification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelSetSpecificationContext ------------------------------------------------------------------

GQLParser::LabelSetSpecificationContext::LabelSetSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::LabelNameContext *> GQLParser::LabelSetSpecificationContext::labelName() {
  return getRuleContexts<GQLParser::LabelNameContext>();
}

GQLParser::LabelNameContext* GQLParser::LabelSetSpecificationContext::labelName(size_t i) {
  return getRuleContext<GQLParser::LabelNameContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::LabelSetSpecificationContext::AMPERSAND() {
  return getTokens(GQLParser::AMPERSAND);
}

tree::TerminalNode* GQLParser::LabelSetSpecificationContext::AMPERSAND(size_t i) {
  return getToken(GQLParser::AMPERSAND, i);
}


size_t GQLParser::LabelSetSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleLabelSetSpecification;
}


GQLParser::LabelSetSpecificationContext* GQLParser::labelSetSpecification() {
  LabelSetSpecificationContext *_localctx = _tracker.createInstance<LabelSetSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 662, GQLParser::RuleLabelSetSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3021);
    labelName();
    setState(3026);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3022);
        match(GQLParser::AMPERSAND);
        setState(3023);
        labelName(); 
      }
      setState(3028);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyTypesSpecificationContext ------------------------------------------------------------------

GQLParser::PropertyTypesSpecificationContext::PropertyTypesSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::PropertyTypesSpecificationContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

tree::TerminalNode* GQLParser::PropertyTypesSpecificationContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}

GQLParser::PropertyTypeListContext* GQLParser::PropertyTypesSpecificationContext::propertyTypeList() {
  return getRuleContext<GQLParser::PropertyTypeListContext>(0);
}


size_t GQLParser::PropertyTypesSpecificationContext::getRuleIndex() const {
  return GQLParser::RulePropertyTypesSpecification;
}


GQLParser::PropertyTypesSpecificationContext* GQLParser::propertyTypesSpecification() {
  PropertyTypesSpecificationContext *_localctx = _tracker.createInstance<PropertyTypesSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 664, GQLParser::RulePropertyTypesSpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3029);
    match(GQLParser::LEFT_BRACE);
    setState(3031);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE

    || _la == GQLParser::ACCENT_QUOTED_CHARACTER_SEQUENCE || ((((_la - 277) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 277)) & 281474976710655) != 0)) {
      setState(3030);
      propertyTypeList();
    }
    setState(3033);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyTypeListContext ------------------------------------------------------------------

GQLParser::PropertyTypeListContext::PropertyTypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::PropertyTypeContext *> GQLParser::PropertyTypeListContext::propertyType() {
  return getRuleContexts<GQLParser::PropertyTypeContext>();
}

GQLParser::PropertyTypeContext* GQLParser::PropertyTypeListContext::propertyType(size_t i) {
  return getRuleContext<GQLParser::PropertyTypeContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::PropertyTypeListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::PropertyTypeListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::PropertyTypeListContext::getRuleIndex() const {
  return GQLParser::RulePropertyTypeList;
}


GQLParser::PropertyTypeListContext* GQLParser::propertyTypeList() {
  PropertyTypeListContext *_localctx = _tracker.createInstance<PropertyTypeListContext>(_ctx, getState());
  enterRule(_localctx, 666, GQLParser::RulePropertyTypeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3035);
    propertyType();
    setState(3040);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(3036);
      match(GQLParser::COMMA);
      setState(3037);
      propertyType();
      setState(3042);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyTypeContext ------------------------------------------------------------------

GQLParser::PropertyTypeContext::PropertyTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PropertyNameContext* GQLParser::PropertyTypeContext::propertyName() {
  return getRuleContext<GQLParser::PropertyNameContext>(0);
}

GQLParser::PropertyValueTypeContext* GQLParser::PropertyTypeContext::propertyValueType() {
  return getRuleContext<GQLParser::PropertyValueTypeContext>(0);
}

GQLParser::TypedContext* GQLParser::PropertyTypeContext::typed() {
  return getRuleContext<GQLParser::TypedContext>(0);
}


size_t GQLParser::PropertyTypeContext::getRuleIndex() const {
  return GQLParser::RulePropertyType;
}


GQLParser::PropertyTypeContext* GQLParser::propertyType() {
  PropertyTypeContext *_localctx = _tracker.createInstance<PropertyTypeContext>(_ctx, getState());
  enterRule(_localctx, 668, GQLParser::RulePropertyType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3043);
    propertyName();
    setState(3045);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::TYPED || _la == GQLParser::DOUBLE_COLON) {
      setState(3044);
      typed();
    }
    setState(3047);
    propertyValueType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyValueTypeContext ------------------------------------------------------------------

GQLParser::PropertyValueTypeContext::PropertyValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueTypeContext* GQLParser::PropertyValueTypeContext::valueType() {
  return getRuleContext<GQLParser::ValueTypeContext>(0);
}


size_t GQLParser::PropertyValueTypeContext::getRuleIndex() const {
  return GQLParser::RulePropertyValueType;
}


GQLParser::PropertyValueTypeContext* GQLParser::propertyValueType() {
  PropertyValueTypeContext *_localctx = _tracker.createInstance<PropertyValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 670, GQLParser::RulePropertyValueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3049);
    valueType(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingTableTypeContext ------------------------------------------------------------------

GQLParser::BindingTableTypeContext::BindingTableTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::BindingTableTypeContext::TABLE() {
  return getToken(GQLParser::TABLE, 0);
}

GQLParser::FieldTypesSpecificationContext* GQLParser::BindingTableTypeContext::fieldTypesSpecification() {
  return getRuleContext<GQLParser::FieldTypesSpecificationContext>(0);
}

tree::TerminalNode* GQLParser::BindingTableTypeContext::BINDING() {
  return getToken(GQLParser::BINDING, 0);
}


size_t GQLParser::BindingTableTypeContext::getRuleIndex() const {
  return GQLParser::RuleBindingTableType;
}


GQLParser::BindingTableTypeContext* GQLParser::bindingTableType() {
  BindingTableTypeContext *_localctx = _tracker.createInstance<BindingTableTypeContext>(_ctx, getState());
  enterRule(_localctx, 672, GQLParser::RuleBindingTableType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3052);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::BINDING) {
      setState(3051);
      match(GQLParser::BINDING);
    }
    setState(3054);
    match(GQLParser::TABLE);
    setState(3055);
    fieldTypesSpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueTypeContext ------------------------------------------------------------------

GQLParser::ValueTypeContext::ValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GQLParser::ValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleValueType;
}

void GQLParser::ValueTypeContext::copyFrom(ValueTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- DynamicPropertyValueTypeLabelContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::DynamicPropertyValueTypeLabelContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

tree::TerminalNode* GQLParser::DynamicPropertyValueTypeLabelContext::VALUE() {
  return getToken(GQLParser::VALUE, 0);
}

tree::TerminalNode* GQLParser::DynamicPropertyValueTypeLabelContext::ANY() {
  return getToken(GQLParser::ANY, 0);
}

GQLParser::NotNullContext* GQLParser::DynamicPropertyValueTypeLabelContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

GQLParser::DynamicPropertyValueTypeLabelContext::DynamicPropertyValueTypeLabelContext(ValueTypeContext *ctx) { copyFrom(ctx); }


//----------------- ClosedDynamicUnionTypeAtl1Context ------------------------------------------------------------------

tree::TerminalNode* GQLParser::ClosedDynamicUnionTypeAtl1Context::ANY() {
  return getToken(GQLParser::ANY, 0);
}

tree::TerminalNode* GQLParser::ClosedDynamicUnionTypeAtl1Context::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

std::vector<GQLParser::ValueTypeContext *> GQLParser::ClosedDynamicUnionTypeAtl1Context::valueType() {
  return getRuleContexts<GQLParser::ValueTypeContext>();
}

GQLParser::ValueTypeContext* GQLParser::ClosedDynamicUnionTypeAtl1Context::valueType(size_t i) {
  return getRuleContext<GQLParser::ValueTypeContext>(i);
}

tree::TerminalNode* GQLParser::ClosedDynamicUnionTypeAtl1Context::RIGHT_ANGLE_BRACKET() {
  return getToken(GQLParser::RIGHT_ANGLE_BRACKET, 0);
}

tree::TerminalNode* GQLParser::ClosedDynamicUnionTypeAtl1Context::VALUE() {
  return getToken(GQLParser::VALUE, 0);
}

std::vector<tree::TerminalNode *> GQLParser::ClosedDynamicUnionTypeAtl1Context::VERTICAL_BAR() {
  return getTokens(GQLParser::VERTICAL_BAR);
}

tree::TerminalNode* GQLParser::ClosedDynamicUnionTypeAtl1Context::VERTICAL_BAR(size_t i) {
  return getToken(GQLParser::VERTICAL_BAR, i);
}

GQLParser::ClosedDynamicUnionTypeAtl1Context::ClosedDynamicUnionTypeAtl1Context(ValueTypeContext *ctx) { copyFrom(ctx); }


//----------------- ClosedDynamicUnionTypeAtl2Context ------------------------------------------------------------------

std::vector<GQLParser::ValueTypeContext *> GQLParser::ClosedDynamicUnionTypeAtl2Context::valueType() {
  return getRuleContexts<GQLParser::ValueTypeContext>();
}

GQLParser::ValueTypeContext* GQLParser::ClosedDynamicUnionTypeAtl2Context::valueType(size_t i) {
  return getRuleContext<GQLParser::ValueTypeContext>(i);
}

tree::TerminalNode* GQLParser::ClosedDynamicUnionTypeAtl2Context::VERTICAL_BAR() {
  return getToken(GQLParser::VERTICAL_BAR, 0);
}

GQLParser::ClosedDynamicUnionTypeAtl2Context::ClosedDynamicUnionTypeAtl2Context(ValueTypeContext *ctx) { copyFrom(ctx); }


//----------------- PathValueTypeLabelContext ------------------------------------------------------------------

GQLParser::PathValueTypeContext* GQLParser::PathValueTypeLabelContext::pathValueType() {
  return getRuleContext<GQLParser::PathValueTypeContext>(0);
}

GQLParser::PathValueTypeLabelContext::PathValueTypeLabelContext(ValueTypeContext *ctx) { copyFrom(ctx); }


//----------------- ListValueTypeAlt3Context ------------------------------------------------------------------

GQLParser::ListValueTypeNameContext* GQLParser::ListValueTypeAlt3Context::listValueTypeName() {
  return getRuleContext<GQLParser::ListValueTypeNameContext>(0);
}

tree::TerminalNode* GQLParser::ListValueTypeAlt3Context::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

GQLParser::MaxLengthContext* GQLParser::ListValueTypeAlt3Context::maxLength() {
  return getRuleContext<GQLParser::MaxLengthContext>(0);
}

tree::TerminalNode* GQLParser::ListValueTypeAlt3Context::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}

GQLParser::NotNullContext* GQLParser::ListValueTypeAlt3Context::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

GQLParser::ListValueTypeAlt3Context::ListValueTypeAlt3Context(ValueTypeContext *ctx) { copyFrom(ctx); }


//----------------- ListValueTypeAlt2Context ------------------------------------------------------------------

GQLParser::ValueTypeContext* GQLParser::ListValueTypeAlt2Context::valueType() {
  return getRuleContext<GQLParser::ValueTypeContext>(0);
}

GQLParser::ListValueTypeNameContext* GQLParser::ListValueTypeAlt2Context::listValueTypeName() {
  return getRuleContext<GQLParser::ListValueTypeNameContext>(0);
}

tree::TerminalNode* GQLParser::ListValueTypeAlt2Context::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

GQLParser::MaxLengthContext* GQLParser::ListValueTypeAlt2Context::maxLength() {
  return getRuleContext<GQLParser::MaxLengthContext>(0);
}

tree::TerminalNode* GQLParser::ListValueTypeAlt2Context::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}

GQLParser::NotNullContext* GQLParser::ListValueTypeAlt2Context::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

GQLParser::ListValueTypeAlt2Context::ListValueTypeAlt2Context(ValueTypeContext *ctx) { copyFrom(ctx); }


//----------------- ListValueTypeAlt1Context ------------------------------------------------------------------

GQLParser::ListValueTypeNameContext* GQLParser::ListValueTypeAlt1Context::listValueTypeName() {
  return getRuleContext<GQLParser::ListValueTypeNameContext>(0);
}

tree::TerminalNode* GQLParser::ListValueTypeAlt1Context::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

GQLParser::ValueTypeContext* GQLParser::ListValueTypeAlt1Context::valueType() {
  return getRuleContext<GQLParser::ValueTypeContext>(0);
}

tree::TerminalNode* GQLParser::ListValueTypeAlt1Context::RIGHT_ANGLE_BRACKET() {
  return getToken(GQLParser::RIGHT_ANGLE_BRACKET, 0);
}

tree::TerminalNode* GQLParser::ListValueTypeAlt1Context::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

GQLParser::MaxLengthContext* GQLParser::ListValueTypeAlt1Context::maxLength() {
  return getRuleContext<GQLParser::MaxLengthContext>(0);
}

tree::TerminalNode* GQLParser::ListValueTypeAlt1Context::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}

GQLParser::NotNullContext* GQLParser::ListValueTypeAlt1Context::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

GQLParser::ListValueTypeAlt1Context::ListValueTypeAlt1Context(ValueTypeContext *ctx) { copyFrom(ctx); }


//----------------- PredefinedTypeLabelContext ------------------------------------------------------------------

GQLParser::PredefinedTypeContext* GQLParser::PredefinedTypeLabelContext::predefinedType() {
  return getRuleContext<GQLParser::PredefinedTypeContext>(0);
}

GQLParser::PredefinedTypeLabelContext::PredefinedTypeLabelContext(ValueTypeContext *ctx) { copyFrom(ctx); }


//----------------- RecordTypeLabelContext ------------------------------------------------------------------

GQLParser::RecordTypeContext* GQLParser::RecordTypeLabelContext::recordType() {
  return getRuleContext<GQLParser::RecordTypeContext>(0);
}

GQLParser::RecordTypeLabelContext::RecordTypeLabelContext(ValueTypeContext *ctx) { copyFrom(ctx); }


//----------------- OpenDynamicUnionTypeLabelContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::OpenDynamicUnionTypeLabelContext::ANY() {
  return getToken(GQLParser::ANY, 0);
}

tree::TerminalNode* GQLParser::OpenDynamicUnionTypeLabelContext::VALUE() {
  return getToken(GQLParser::VALUE, 0);
}

GQLParser::NotNullContext* GQLParser::OpenDynamicUnionTypeLabelContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

GQLParser::OpenDynamicUnionTypeLabelContext::OpenDynamicUnionTypeLabelContext(ValueTypeContext *ctx) { copyFrom(ctx); }



GQLParser::ValueTypeContext* GQLParser::valueType() {
   return valueType(0);
}

GQLParser::ValueTypeContext* GQLParser::valueType(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  GQLParser::ValueTypeContext *_localctx = _tracker.createInstance<ValueTypeContext>(_ctx, parentState);
  GQLParser::ValueTypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 674;
  enterRecursionRule(_localctx, 674, GQLParser::RuleValueType, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3114);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 298, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<PredefinedTypeLabelContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(3058);
      predefinedType();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<PathValueTypeLabelContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3059);
      pathValueType();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<ListValueTypeAlt1Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3060);
      listValueTypeName();
      setState(3061);
      match(GQLParser::LEFT_ANGLE_BRACKET);
      setState(3062);
      valueType(0);
      setState(3063);
      match(GQLParser::RIGHT_ANGLE_BRACKET);
      setState(3068);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 288, _ctx)) {
      case 1: {
        setState(3064);
        match(GQLParser::LEFT_BRACKET);
        setState(3065);
        maxLength();
        setState(3066);
        match(GQLParser::RIGHT_BRACKET);
        break;
      }

      default:
        break;
      }
      setState(3071);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 289, _ctx)) {
      case 1: {
        setState(3070);
        notNull();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<ListValueTypeAlt3Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3073);
      listValueTypeName();
      setState(3078);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 290, _ctx)) {
      case 1: {
        setState(3074);
        match(GQLParser::LEFT_BRACKET);
        setState(3075);
        maxLength();
        setState(3076);
        match(GQLParser::RIGHT_BRACKET);
        break;
      }

      default:
        break;
      }
      setState(3081);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx)) {
      case 1: {
        setState(3080);
        notNull();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<RecordTypeLabelContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3083);
      recordType();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<OpenDynamicUnionTypeLabelContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3084);
      match(GQLParser::ANY);
      setState(3086);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 292, _ctx)) {
      case 1: {
        setState(3085);
        match(GQLParser::VALUE);
        break;
      }

      default:
        break;
      }
      setState(3089);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx)) {
      case 1: {
        setState(3088);
        notNull();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<DynamicPropertyValueTypeLabelContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3092);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::ANY) {
        setState(3091);
        match(GQLParser::ANY);
      }
      setState(3094);
      match(GQLParser::PROPERTY);
      setState(3095);
      match(GQLParser::VALUE);
      setState(3097);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx)) {
      case 1: {
        setState(3096);
        notNull();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<ClosedDynamicUnionTypeAtl1Context>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3099);
      match(GQLParser::ANY);
      setState(3101);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::VALUE) {
        setState(3100);
        match(GQLParser::VALUE);
      }
      setState(3103);
      match(GQLParser::LEFT_ANGLE_BRACKET);
      setState(3104);
      valueType(0);
      setState(3109);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == GQLParser::VERTICAL_BAR) {
        setState(3105);
        match(GQLParser::VERTICAL_BAR);
        setState(3106);
        valueType(0);
        setState(3111);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3112);
      match(GQLParser::RIGHT_ANGLE_BRACKET);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(3132);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(3130);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 301, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<ClosedDynamicUnionTypeAtl2Context>(_tracker.createInstance<ValueTypeContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueType);
          setState(3116);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(3117);
          match(GQLParser::VERTICAL_BAR);
          setState(3118);
          valueType(2);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<ListValueTypeAlt2Context>(_tracker.createInstance<ValueTypeContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueType);
          setState(3119);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(3120);
          listValueTypeName();
          setState(3125);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 299, _ctx)) {
          case 1: {
            setState(3121);
            match(GQLParser::LEFT_BRACKET);
            setState(3122);
            maxLength();
            setState(3123);
            match(GQLParser::RIGHT_BRACKET);
            break;
          }

          default:
            break;
          }
          setState(3128);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 300, _ctx)) {
          case 1: {
            setState(3127);
            notNull();
            break;
          }

          default:
            break;
          }
          break;
        }

        default:
          break;
        } 
      }
      setState(3134);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TypedContext ------------------------------------------------------------------

GQLParser::TypedContext::TypedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TypedContext::DOUBLE_COLON() {
  return getToken(GQLParser::DOUBLE_COLON, 0);
}

tree::TerminalNode* GQLParser::TypedContext::TYPED() {
  return getToken(GQLParser::TYPED, 0);
}


size_t GQLParser::TypedContext::getRuleIndex() const {
  return GQLParser::RuleTyped;
}


GQLParser::TypedContext* GQLParser::typed() {
  TypedContext *_localctx = _tracker.createInstance<TypedContext>(_ctx, getState());
  enterRule(_localctx, 676, GQLParser::RuleTyped);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3135);
    _la = _input->LA(1);
    if (!(_la == GQLParser::TYPED || _la == GQLParser::DOUBLE_COLON)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PredefinedTypeContext ------------------------------------------------------------------

GQLParser::PredefinedTypeContext::PredefinedTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BooleanTypeContext* GQLParser::PredefinedTypeContext::booleanType() {
  return getRuleContext<GQLParser::BooleanTypeContext>(0);
}

GQLParser::CharacterStringTypeContext* GQLParser::PredefinedTypeContext::characterStringType() {
  return getRuleContext<GQLParser::CharacterStringTypeContext>(0);
}

GQLParser::ByteStringTypeContext* GQLParser::PredefinedTypeContext::byteStringType() {
  return getRuleContext<GQLParser::ByteStringTypeContext>(0);
}

GQLParser::NumericTypeContext* GQLParser::PredefinedTypeContext::numericType() {
  return getRuleContext<GQLParser::NumericTypeContext>(0);
}

GQLParser::TemporalTypeContext* GQLParser::PredefinedTypeContext::temporalType() {
  return getRuleContext<GQLParser::TemporalTypeContext>(0);
}

GQLParser::ReferenceValueTypeContext* GQLParser::PredefinedTypeContext::referenceValueType() {
  return getRuleContext<GQLParser::ReferenceValueTypeContext>(0);
}

GQLParser::ImmaterialValueTypeContext* GQLParser::PredefinedTypeContext::immaterialValueType() {
  return getRuleContext<GQLParser::ImmaterialValueTypeContext>(0);
}


size_t GQLParser::PredefinedTypeContext::getRuleIndex() const {
  return GQLParser::RulePredefinedType;
}


GQLParser::PredefinedTypeContext* GQLParser::predefinedType() {
  PredefinedTypeContext *_localctx = _tracker.createInstance<PredefinedTypeContext>(_ctx, getState());
  enterRule(_localctx, 678, GQLParser::RulePredefinedType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3144);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::BOOL:
      case GQLParser::BOOLEAN: {
        enterOuterAlt(_localctx, 1);
        setState(3137);
        booleanType();
        break;
      }

      case GQLParser::CHAR:
      case GQLParser::STRING:
      case GQLParser::VARCHAR: {
        enterOuterAlt(_localctx, 2);
        setState(3138);
        characterStringType();
        break;
      }

      case GQLParser::BINARY:
      case GQLParser::BYTES:
      case GQLParser::VARBINARY: {
        enterOuterAlt(_localctx, 3);
        setState(3139);
        byteStringType();
        break;
      }

      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::DEC:
      case GQLParser::DECIMAL:
      case GQLParser::DOUBLE:
      case GQLParser::FLOAT:
      case GQLParser::FLOAT16:
      case GQLParser::FLOAT32:
      case GQLParser::FLOAT64:
      case GQLParser::FLOAT128:
      case GQLParser::FLOAT256:
      case GQLParser::INT:
      case GQLParser::INTEGER:
      case GQLParser::INT8:
      case GQLParser::INTEGER8:
      case GQLParser::INT16:
      case GQLParser::INTEGER16:
      case GQLParser::INT32:
      case GQLParser::INTEGER32:
      case GQLParser::INT64:
      case GQLParser::INTEGER64:
      case GQLParser::INT128:
      case GQLParser::INTEGER128:
      case GQLParser::INT256:
      case GQLParser::INTEGER256:
      case GQLParser::REAL:
      case GQLParser::SIGNED:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT:
      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT8:
      case GQLParser::UINT16:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT128:
      case GQLParser::UINT256:
      case GQLParser::UNSIGNED:
      case GQLParser::USMALLINT: {
        enterOuterAlt(_localctx, 4);
        setState(3140);
        numericType();
        break;
      }

      case GQLParser::DATE:
      case GQLParser::DURATION:
      case GQLParser::LOCAL:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::ZONED: {
        enterOuterAlt(_localctx, 5);
        setState(3141);
        temporalType();
        break;
      }

      case GQLParser::ANY:
      case GQLParser::BINDING:
      case GQLParser::DIRECTED:
      case GQLParser::EDGE:
      case GQLParser::GRAPH:
      case GQLParser::NODE:
      case GQLParser::PROPERTY:
      case GQLParser::RELATIONSHIP:
      case GQLParser::TABLE:
      case GQLParser::UNDIRECTED:
      case GQLParser::VERTEX:
      case GQLParser::LEFT_PAREN: {
        enterOuterAlt(_localctx, 6);
        setState(3142);
        referenceValueType();
        break;
      }

      case GQLParser::NOTHING:
      case GQLParser::NULL_KW: {
        enterOuterAlt(_localctx, 7);
        setState(3143);
        immaterialValueType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanTypeContext ------------------------------------------------------------------

GQLParser::BooleanTypeContext::BooleanTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::BooleanTypeContext::BOOL() {
  return getToken(GQLParser::BOOL, 0);
}

tree::TerminalNode* GQLParser::BooleanTypeContext::BOOLEAN() {
  return getToken(GQLParser::BOOLEAN, 0);
}

GQLParser::NotNullContext* GQLParser::BooleanTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::BooleanTypeContext::getRuleIndex() const {
  return GQLParser::RuleBooleanType;
}


GQLParser::BooleanTypeContext* GQLParser::booleanType() {
  BooleanTypeContext *_localctx = _tracker.createInstance<BooleanTypeContext>(_ctx, getState());
  enterRule(_localctx, 680, GQLParser::RuleBooleanType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3146);
    _la = _input->LA(1);
    if (!(_la == GQLParser::BOOL

    || _la == GQLParser::BOOLEAN)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3148);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 304, _ctx)) {
    case 1: {
      setState(3147);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharacterStringTypeContext ------------------------------------------------------------------

GQLParser::CharacterStringTypeContext::CharacterStringTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CharacterStringTypeContext::STRING() {
  return getToken(GQLParser::STRING, 0);
}

tree::TerminalNode* GQLParser::CharacterStringTypeContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::MaxLengthContext* GQLParser::CharacterStringTypeContext::maxLength() {
  return getRuleContext<GQLParser::MaxLengthContext>(0);
}

tree::TerminalNode* GQLParser::CharacterStringTypeContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::NotNullContext* GQLParser::CharacterStringTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

GQLParser::MinLengthContext* GQLParser::CharacterStringTypeContext::minLength() {
  return getRuleContext<GQLParser::MinLengthContext>(0);
}

tree::TerminalNode* GQLParser::CharacterStringTypeContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

tree::TerminalNode* GQLParser::CharacterStringTypeContext::CHAR() {
  return getToken(GQLParser::CHAR, 0);
}

GQLParser::FixedLengthContext* GQLParser::CharacterStringTypeContext::fixedLength() {
  return getRuleContext<GQLParser::FixedLengthContext>(0);
}

tree::TerminalNode* GQLParser::CharacterStringTypeContext::VARCHAR() {
  return getToken(GQLParser::VARCHAR, 0);
}


size_t GQLParser::CharacterStringTypeContext::getRuleIndex() const {
  return GQLParser::RuleCharacterStringType;
}


GQLParser::CharacterStringTypeContext* GQLParser::characterStringType() {
  CharacterStringTypeContext *_localctx = _tracker.createInstance<CharacterStringTypeContext>(_ctx, getState());
  enterRule(_localctx, 682, GQLParser::RuleCharacterStringType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3185);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::STRING: {
        enterOuterAlt(_localctx, 1);
        setState(3150);
        match(GQLParser::STRING);
        setState(3160);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx)) {
        case 1: {
          setState(3151);
          match(GQLParser::LEFT_PAREN);
          setState(3155);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx)) {
          case 1: {
            setState(3152);
            minLength();
            setState(3153);
            match(GQLParser::COMMA);
            break;
          }

          default:
            break;
          }
          setState(3157);
          maxLength();
          setState(3158);
          match(GQLParser::RIGHT_PAREN);
          break;
        }

        default:
          break;
        }
        setState(3163);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx)) {
        case 1: {
          setState(3162);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::CHAR: {
        enterOuterAlt(_localctx, 2);
        setState(3165);
        match(GQLParser::CHAR);
        setState(3170);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 308, _ctx)) {
        case 1: {
          setState(3166);
          match(GQLParser::LEFT_PAREN);
          setState(3167);
          fixedLength();
          setState(3168);
          match(GQLParser::RIGHT_PAREN);
          break;
        }

        default:
          break;
        }
        setState(3173);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 309, _ctx)) {
        case 1: {
          setState(3172);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::VARCHAR: {
        enterOuterAlt(_localctx, 3);
        setState(3175);
        match(GQLParser::VARCHAR);
        setState(3180);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 310, _ctx)) {
        case 1: {
          setState(3176);
          match(GQLParser::LEFT_PAREN);
          setState(3177);
          maxLength();
          setState(3178);
          match(GQLParser::RIGHT_PAREN);
          break;
        }

        default:
          break;
        }
        setState(3183);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 311, _ctx)) {
        case 1: {
          setState(3182);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ByteStringTypeContext ------------------------------------------------------------------

GQLParser::ByteStringTypeContext::ByteStringTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ByteStringTypeContext::BYTES() {
  return getToken(GQLParser::BYTES, 0);
}

tree::TerminalNode* GQLParser::ByteStringTypeContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::MaxLengthContext* GQLParser::ByteStringTypeContext::maxLength() {
  return getRuleContext<GQLParser::MaxLengthContext>(0);
}

tree::TerminalNode* GQLParser::ByteStringTypeContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::NotNullContext* GQLParser::ByteStringTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

GQLParser::MinLengthContext* GQLParser::ByteStringTypeContext::minLength() {
  return getRuleContext<GQLParser::MinLengthContext>(0);
}

tree::TerminalNode* GQLParser::ByteStringTypeContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

tree::TerminalNode* GQLParser::ByteStringTypeContext::BINARY() {
  return getToken(GQLParser::BINARY, 0);
}

GQLParser::FixedLengthContext* GQLParser::ByteStringTypeContext::fixedLength() {
  return getRuleContext<GQLParser::FixedLengthContext>(0);
}

tree::TerminalNode* GQLParser::ByteStringTypeContext::VARBINARY() {
  return getToken(GQLParser::VARBINARY, 0);
}


size_t GQLParser::ByteStringTypeContext::getRuleIndex() const {
  return GQLParser::RuleByteStringType;
}


GQLParser::ByteStringTypeContext* GQLParser::byteStringType() {
  ByteStringTypeContext *_localctx = _tracker.createInstance<ByteStringTypeContext>(_ctx, getState());
  enterRule(_localctx, 684, GQLParser::RuleByteStringType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3222);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::BYTES: {
        enterOuterAlt(_localctx, 1);
        setState(3187);
        match(GQLParser::BYTES);
        setState(3197);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx)) {
        case 1: {
          setState(3188);
          match(GQLParser::LEFT_PAREN);
          setState(3192);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 313, _ctx)) {
          case 1: {
            setState(3189);
            minLength();
            setState(3190);
            match(GQLParser::COMMA);
            break;
          }

          default:
            break;
          }
          setState(3194);
          maxLength();
          setState(3195);
          match(GQLParser::RIGHT_PAREN);
          break;
        }

        default:
          break;
        }
        setState(3200);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 315, _ctx)) {
        case 1: {
          setState(3199);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::BINARY: {
        enterOuterAlt(_localctx, 2);
        setState(3202);
        match(GQLParser::BINARY);
        setState(3207);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 316, _ctx)) {
        case 1: {
          setState(3203);
          match(GQLParser::LEFT_PAREN);
          setState(3204);
          fixedLength();
          setState(3205);
          match(GQLParser::RIGHT_PAREN);
          break;
        }

        default:
          break;
        }
        setState(3210);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx)) {
        case 1: {
          setState(3209);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::VARBINARY: {
        enterOuterAlt(_localctx, 3);
        setState(3212);
        match(GQLParser::VARBINARY);
        setState(3217);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx)) {
        case 1: {
          setState(3213);
          match(GQLParser::LEFT_PAREN);
          setState(3214);
          maxLength();
          setState(3215);
          match(GQLParser::RIGHT_PAREN);
          break;
        }

        default:
          break;
        }
        setState(3220);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 319, _ctx)) {
        case 1: {
          setState(3219);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MinLengthContext ------------------------------------------------------------------

GQLParser::MinLengthContext::MinLengthContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnsignedIntegerContext* GQLParser::MinLengthContext::unsignedInteger() {
  return getRuleContext<GQLParser::UnsignedIntegerContext>(0);
}


size_t GQLParser::MinLengthContext::getRuleIndex() const {
  return GQLParser::RuleMinLength;
}


GQLParser::MinLengthContext* GQLParser::minLength() {
  MinLengthContext *_localctx = _tracker.createInstance<MinLengthContext>(_ctx, getState());
  enterRule(_localctx, 686, GQLParser::RuleMinLength);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3224);
    unsignedInteger();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MaxLengthContext ------------------------------------------------------------------

GQLParser::MaxLengthContext::MaxLengthContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnsignedIntegerContext* GQLParser::MaxLengthContext::unsignedInteger() {
  return getRuleContext<GQLParser::UnsignedIntegerContext>(0);
}


size_t GQLParser::MaxLengthContext::getRuleIndex() const {
  return GQLParser::RuleMaxLength;
}


GQLParser::MaxLengthContext* GQLParser::maxLength() {
  MaxLengthContext *_localctx = _tracker.createInstance<MaxLengthContext>(_ctx, getState());
  enterRule(_localctx, 688, GQLParser::RuleMaxLength);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3226);
    unsignedInteger();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FixedLengthContext ------------------------------------------------------------------

GQLParser::FixedLengthContext::FixedLengthContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnsignedIntegerContext* GQLParser::FixedLengthContext::unsignedInteger() {
  return getRuleContext<GQLParser::UnsignedIntegerContext>(0);
}


size_t GQLParser::FixedLengthContext::getRuleIndex() const {
  return GQLParser::RuleFixedLength;
}


GQLParser::FixedLengthContext* GQLParser::fixedLength() {
  FixedLengthContext *_localctx = _tracker.createInstance<FixedLengthContext>(_ctx, getState());
  enterRule(_localctx, 690, GQLParser::RuleFixedLength);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3228);
    unsignedInteger();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericTypeContext ------------------------------------------------------------------

GQLParser::NumericTypeContext::NumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ExactNumericTypeContext* GQLParser::NumericTypeContext::exactNumericType() {
  return getRuleContext<GQLParser::ExactNumericTypeContext>(0);
}

GQLParser::ApproximateNumericTypeContext* GQLParser::NumericTypeContext::approximateNumericType() {
  return getRuleContext<GQLParser::ApproximateNumericTypeContext>(0);
}


size_t GQLParser::NumericTypeContext::getRuleIndex() const {
  return GQLParser::RuleNumericType;
}


GQLParser::NumericTypeContext* GQLParser::numericType() {
  NumericTypeContext *_localctx = _tracker.createInstance<NumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 692, GQLParser::RuleNumericType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3232);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::DEC:
      case GQLParser::DECIMAL:
      case GQLParser::INT:
      case GQLParser::INTEGER:
      case GQLParser::INT8:
      case GQLParser::INTEGER8:
      case GQLParser::INT16:
      case GQLParser::INTEGER16:
      case GQLParser::INT32:
      case GQLParser::INTEGER32:
      case GQLParser::INT64:
      case GQLParser::INTEGER64:
      case GQLParser::INT128:
      case GQLParser::INTEGER128:
      case GQLParser::INT256:
      case GQLParser::INTEGER256:
      case GQLParser::SIGNED:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT:
      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT8:
      case GQLParser::UINT16:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT128:
      case GQLParser::UINT256:
      case GQLParser::UNSIGNED:
      case GQLParser::USMALLINT: {
        enterOuterAlt(_localctx, 1);
        setState(3230);
        exactNumericType();
        break;
      }

      case GQLParser::DOUBLE:
      case GQLParser::FLOAT:
      case GQLParser::FLOAT16:
      case GQLParser::FLOAT32:
      case GQLParser::FLOAT64:
      case GQLParser::FLOAT128:
      case GQLParser::FLOAT256:
      case GQLParser::REAL: {
        enterOuterAlt(_localctx, 2);
        setState(3231);
        approximateNumericType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExactNumericTypeContext ------------------------------------------------------------------

GQLParser::ExactNumericTypeContext::ExactNumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BinaryExactNumericTypeContext* GQLParser::ExactNumericTypeContext::binaryExactNumericType() {
  return getRuleContext<GQLParser::BinaryExactNumericTypeContext>(0);
}

GQLParser::DecimalExactNumericTypeContext* GQLParser::ExactNumericTypeContext::decimalExactNumericType() {
  return getRuleContext<GQLParser::DecimalExactNumericTypeContext>(0);
}


size_t GQLParser::ExactNumericTypeContext::getRuleIndex() const {
  return GQLParser::RuleExactNumericType;
}


GQLParser::ExactNumericTypeContext* GQLParser::exactNumericType() {
  ExactNumericTypeContext *_localctx = _tracker.createInstance<ExactNumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 694, GQLParser::RuleExactNumericType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3236);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::INT:
      case GQLParser::INTEGER:
      case GQLParser::INT8:
      case GQLParser::INTEGER8:
      case GQLParser::INT16:
      case GQLParser::INTEGER16:
      case GQLParser::INT32:
      case GQLParser::INTEGER32:
      case GQLParser::INT64:
      case GQLParser::INTEGER64:
      case GQLParser::INT128:
      case GQLParser::INTEGER128:
      case GQLParser::INT256:
      case GQLParser::INTEGER256:
      case GQLParser::SIGNED:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT:
      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT8:
      case GQLParser::UINT16:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT128:
      case GQLParser::UINT256:
      case GQLParser::UNSIGNED:
      case GQLParser::USMALLINT: {
        enterOuterAlt(_localctx, 1);
        setState(3234);
        binaryExactNumericType();
        break;
      }

      case GQLParser::DEC:
      case GQLParser::DECIMAL: {
        enterOuterAlt(_localctx, 2);
        setState(3235);
        decimalExactNumericType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BinaryExactNumericTypeContext ------------------------------------------------------------------

GQLParser::BinaryExactNumericTypeContext::BinaryExactNumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SignedBinaryExactNumericTypeContext* GQLParser::BinaryExactNumericTypeContext::signedBinaryExactNumericType() {
  return getRuleContext<GQLParser::SignedBinaryExactNumericTypeContext>(0);
}

GQLParser::UnsignedBinaryExactNumericTypeContext* GQLParser::BinaryExactNumericTypeContext::unsignedBinaryExactNumericType() {
  return getRuleContext<GQLParser::UnsignedBinaryExactNumericTypeContext>(0);
}


size_t GQLParser::BinaryExactNumericTypeContext::getRuleIndex() const {
  return GQLParser::RuleBinaryExactNumericType;
}


GQLParser::BinaryExactNumericTypeContext* GQLParser::binaryExactNumericType() {
  BinaryExactNumericTypeContext *_localctx = _tracker.createInstance<BinaryExactNumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 696, GQLParser::RuleBinaryExactNumericType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3240);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::BIG:
      case GQLParser::BIGINT:
      case GQLParser::INT:
      case GQLParser::INTEGER:
      case GQLParser::INT8:
      case GQLParser::INTEGER8:
      case GQLParser::INT16:
      case GQLParser::INTEGER16:
      case GQLParser::INT32:
      case GQLParser::INTEGER32:
      case GQLParser::INT64:
      case GQLParser::INTEGER64:
      case GQLParser::INT128:
      case GQLParser::INTEGER128:
      case GQLParser::INT256:
      case GQLParser::INTEGER256:
      case GQLParser::SIGNED:
      case GQLParser::SMALL:
      case GQLParser::SMALLINT: {
        enterOuterAlt(_localctx, 1);
        setState(3238);
        signedBinaryExactNumericType();
        break;
      }

      case GQLParser::UBIGINT:
      case GQLParser::UINT:
      case GQLParser::UINT8:
      case GQLParser::UINT16:
      case GQLParser::UINT32:
      case GQLParser::UINT64:
      case GQLParser::UINT128:
      case GQLParser::UINT256:
      case GQLParser::UNSIGNED:
      case GQLParser::USMALLINT: {
        enterOuterAlt(_localctx, 2);
        setState(3239);
        unsignedBinaryExactNumericType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SignedBinaryExactNumericTypeContext ------------------------------------------------------------------

GQLParser::SignedBinaryExactNumericTypeContext::SignedBinaryExactNumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::INT8() {
  return getToken(GQLParser::INT8, 0);
}

GQLParser::NotNullContext* GQLParser::SignedBinaryExactNumericTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::INT16() {
  return getToken(GQLParser::INT16, 0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::INT32() {
  return getToken(GQLParser::INT32, 0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::INT64() {
  return getToken(GQLParser::INT64, 0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::INT128() {
  return getToken(GQLParser::INT128, 0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::INT256() {
  return getToken(GQLParser::INT256, 0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::SMALLINT() {
  return getToken(GQLParser::SMALLINT, 0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::INT() {
  return getToken(GQLParser::INT, 0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::PrecisionContext* GQLParser::SignedBinaryExactNumericTypeContext::precision() {
  return getRuleContext<GQLParser::PrecisionContext>(0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::BIGINT() {
  return getToken(GQLParser::BIGINT, 0);
}

GQLParser::VerboseBinaryExactNumericTypeContext* GQLParser::SignedBinaryExactNumericTypeContext::verboseBinaryExactNumericType() {
  return getRuleContext<GQLParser::VerboseBinaryExactNumericTypeContext>(0);
}

tree::TerminalNode* GQLParser::SignedBinaryExactNumericTypeContext::SIGNED() {
  return getToken(GQLParser::SIGNED, 0);
}


size_t GQLParser::SignedBinaryExactNumericTypeContext::getRuleIndex() const {
  return GQLParser::RuleSignedBinaryExactNumericType;
}


GQLParser::SignedBinaryExactNumericTypeContext* GQLParser::signedBinaryExactNumericType() {
  SignedBinaryExactNumericTypeContext *_localctx = _tracker.createInstance<SignedBinaryExactNumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 698, GQLParser::RuleSignedBinaryExactNumericType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3288);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::INT8: {
        enterOuterAlt(_localctx, 1);
        setState(3242);
        match(GQLParser::INT8);
        setState(3244);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx)) {
        case 1: {
          setState(3243);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INT16: {
        enterOuterAlt(_localctx, 2);
        setState(3246);
        match(GQLParser::INT16);
        setState(3248);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 325, _ctx)) {
        case 1: {
          setState(3247);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INT32: {
        enterOuterAlt(_localctx, 3);
        setState(3250);
        match(GQLParser::INT32);
        setState(3252);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 326, _ctx)) {
        case 1: {
          setState(3251);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INT64: {
        enterOuterAlt(_localctx, 4);
        setState(3254);
        match(GQLParser::INT64);
        setState(3256);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx)) {
        case 1: {
          setState(3255);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INT128: {
        enterOuterAlt(_localctx, 5);
        setState(3258);
        match(GQLParser::INT128);
        setState(3260);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 328, _ctx)) {
        case 1: {
          setState(3259);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INT256: {
        enterOuterAlt(_localctx, 6);
        setState(3262);
        match(GQLParser::INT256);
        setState(3264);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 329, _ctx)) {
        case 1: {
          setState(3263);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::SMALLINT: {
        enterOuterAlt(_localctx, 7);
        setState(3266);
        match(GQLParser::SMALLINT);
        setState(3268);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 330, _ctx)) {
        case 1: {
          setState(3267);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INT: {
        enterOuterAlt(_localctx, 8);
        setState(3270);
        match(GQLParser::INT);
        setState(3275);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx)) {
        case 1: {
          setState(3271);
          match(GQLParser::LEFT_PAREN);
          setState(3272);
          precision();
          setState(3273);
          match(GQLParser::RIGHT_PAREN);
          break;
        }

        default:
          break;
        }
        setState(3278);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 332, _ctx)) {
        case 1: {
          setState(3277);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::BIGINT: {
        enterOuterAlt(_localctx, 9);
        setState(3280);
        match(GQLParser::BIGINT);
        setState(3282);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx)) {
        case 1: {
          setState(3281);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::BIG:
      case GQLParser::INTEGER:
      case GQLParser::INTEGER8:
      case GQLParser::INTEGER16:
      case GQLParser::INTEGER32:
      case GQLParser::INTEGER64:
      case GQLParser::INTEGER128:
      case GQLParser::INTEGER256:
      case GQLParser::SIGNED:
      case GQLParser::SMALL: {
        enterOuterAlt(_localctx, 10);
        setState(3285);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::SIGNED) {
          setState(3284);
          match(GQLParser::SIGNED);
        }
        setState(3287);
        verboseBinaryExactNumericType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnsignedBinaryExactNumericTypeContext ------------------------------------------------------------------

GQLParser::UnsignedBinaryExactNumericTypeContext::UnsignedBinaryExactNumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::UINT8() {
  return getToken(GQLParser::UINT8, 0);
}

GQLParser::NotNullContext* GQLParser::UnsignedBinaryExactNumericTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::UINT16() {
  return getToken(GQLParser::UINT16, 0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::UINT32() {
  return getToken(GQLParser::UINT32, 0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::UINT64() {
  return getToken(GQLParser::UINT64, 0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::UINT128() {
  return getToken(GQLParser::UINT128, 0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::UINT256() {
  return getToken(GQLParser::UINT256, 0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::USMALLINT() {
  return getToken(GQLParser::USMALLINT, 0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::UINT() {
  return getToken(GQLParser::UINT, 0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::PrecisionContext* GQLParser::UnsignedBinaryExactNumericTypeContext::precision() {
  return getRuleContext<GQLParser::PrecisionContext>(0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::UBIGINT() {
  return getToken(GQLParser::UBIGINT, 0);
}

tree::TerminalNode* GQLParser::UnsignedBinaryExactNumericTypeContext::UNSIGNED() {
  return getToken(GQLParser::UNSIGNED, 0);
}

GQLParser::VerboseBinaryExactNumericTypeContext* GQLParser::UnsignedBinaryExactNumericTypeContext::verboseBinaryExactNumericType() {
  return getRuleContext<GQLParser::VerboseBinaryExactNumericTypeContext>(0);
}


size_t GQLParser::UnsignedBinaryExactNumericTypeContext::getRuleIndex() const {
  return GQLParser::RuleUnsignedBinaryExactNumericType;
}


GQLParser::UnsignedBinaryExactNumericTypeContext* GQLParser::unsignedBinaryExactNumericType() {
  UnsignedBinaryExactNumericTypeContext *_localctx = _tracker.createInstance<UnsignedBinaryExactNumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 700, GQLParser::RuleUnsignedBinaryExactNumericType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3334);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::UINT8: {
        enterOuterAlt(_localctx, 1);
        setState(3290);
        match(GQLParser::UINT8);
        setState(3292);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx)) {
        case 1: {
          setState(3291);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::UINT16: {
        enterOuterAlt(_localctx, 2);
        setState(3294);
        match(GQLParser::UINT16);
        setState(3296);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 337, _ctx)) {
        case 1: {
          setState(3295);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::UINT32: {
        enterOuterAlt(_localctx, 3);
        setState(3298);
        match(GQLParser::UINT32);
        setState(3300);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 338, _ctx)) {
        case 1: {
          setState(3299);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::UINT64: {
        enterOuterAlt(_localctx, 4);
        setState(3302);
        match(GQLParser::UINT64);
        setState(3304);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx)) {
        case 1: {
          setState(3303);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::UINT128: {
        enterOuterAlt(_localctx, 5);
        setState(3306);
        match(GQLParser::UINT128);
        setState(3308);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 340, _ctx)) {
        case 1: {
          setState(3307);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::UINT256: {
        enterOuterAlt(_localctx, 6);
        setState(3310);
        match(GQLParser::UINT256);
        setState(3312);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 341, _ctx)) {
        case 1: {
          setState(3311);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::USMALLINT: {
        enterOuterAlt(_localctx, 7);
        setState(3314);
        match(GQLParser::USMALLINT);
        setState(3316);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 342, _ctx)) {
        case 1: {
          setState(3315);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::UINT: {
        enterOuterAlt(_localctx, 8);
        setState(3318);
        match(GQLParser::UINT);
        setState(3323);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 343, _ctx)) {
        case 1: {
          setState(3319);
          match(GQLParser::LEFT_PAREN);
          setState(3320);
          precision();
          setState(3321);
          match(GQLParser::RIGHT_PAREN);
          break;
        }

        default:
          break;
        }
        setState(3326);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 344, _ctx)) {
        case 1: {
          setState(3325);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::UBIGINT: {
        enterOuterAlt(_localctx, 9);
        setState(3328);
        match(GQLParser::UBIGINT);
        setState(3330);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 345, _ctx)) {
        case 1: {
          setState(3329);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::UNSIGNED: {
        enterOuterAlt(_localctx, 10);
        setState(3332);
        match(GQLParser::UNSIGNED);
        setState(3333);
        verboseBinaryExactNumericType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VerboseBinaryExactNumericTypeContext ------------------------------------------------------------------

GQLParser::VerboseBinaryExactNumericTypeContext::VerboseBinaryExactNumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::INTEGER8() {
  return getToken(GQLParser::INTEGER8, 0);
}

GQLParser::NotNullContext* GQLParser::VerboseBinaryExactNumericTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::INTEGER16() {
  return getToken(GQLParser::INTEGER16, 0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::INTEGER32() {
  return getToken(GQLParser::INTEGER32, 0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::INTEGER64() {
  return getToken(GQLParser::INTEGER64, 0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::INTEGER128() {
  return getToken(GQLParser::INTEGER128, 0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::INTEGER256() {
  return getToken(GQLParser::INTEGER256, 0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::SMALL() {
  return getToken(GQLParser::SMALL, 0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::INTEGER() {
  return getToken(GQLParser::INTEGER, 0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::PrecisionContext* GQLParser::VerboseBinaryExactNumericTypeContext::precision() {
  return getRuleContext<GQLParser::PrecisionContext>(0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::VerboseBinaryExactNumericTypeContext::BIG() {
  return getToken(GQLParser::BIG, 0);
}


size_t GQLParser::VerboseBinaryExactNumericTypeContext::getRuleIndex() const {
  return GQLParser::RuleVerboseBinaryExactNumericType;
}


GQLParser::VerboseBinaryExactNumericTypeContext* GQLParser::verboseBinaryExactNumericType() {
  VerboseBinaryExactNumericTypeContext *_localctx = _tracker.createInstance<VerboseBinaryExactNumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 702, GQLParser::RuleVerboseBinaryExactNumericType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3380);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::INTEGER8: {
        enterOuterAlt(_localctx, 1);
        setState(3336);
        match(GQLParser::INTEGER8);
        setState(3338);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 347, _ctx)) {
        case 1: {
          setState(3337);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INTEGER16: {
        enterOuterAlt(_localctx, 2);
        setState(3340);
        match(GQLParser::INTEGER16);
        setState(3342);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 348, _ctx)) {
        case 1: {
          setState(3341);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INTEGER32: {
        enterOuterAlt(_localctx, 3);
        setState(3344);
        match(GQLParser::INTEGER32);
        setState(3346);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 349, _ctx)) {
        case 1: {
          setState(3345);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INTEGER64: {
        enterOuterAlt(_localctx, 4);
        setState(3348);
        match(GQLParser::INTEGER64);
        setState(3350);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 350, _ctx)) {
        case 1: {
          setState(3349);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INTEGER128: {
        enterOuterAlt(_localctx, 5);
        setState(3352);
        match(GQLParser::INTEGER128);
        setState(3354);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 351, _ctx)) {
        case 1: {
          setState(3353);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INTEGER256: {
        enterOuterAlt(_localctx, 6);
        setState(3356);
        match(GQLParser::INTEGER256);
        setState(3358);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 352, _ctx)) {
        case 1: {
          setState(3357);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::SMALL: {
        enterOuterAlt(_localctx, 7);
        setState(3360);
        match(GQLParser::SMALL);
        setState(3361);
        match(GQLParser::INTEGER);
        setState(3363);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 353, _ctx)) {
        case 1: {
          setState(3362);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::INTEGER: {
        enterOuterAlt(_localctx, 8);
        setState(3365);
        match(GQLParser::INTEGER);
        setState(3370);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 354, _ctx)) {
        case 1: {
          setState(3366);
          match(GQLParser::LEFT_PAREN);
          setState(3367);
          precision();
          setState(3368);
          match(GQLParser::RIGHT_PAREN);
          break;
        }

        default:
          break;
        }
        setState(3373);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 355, _ctx)) {
        case 1: {
          setState(3372);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::BIG: {
        enterOuterAlt(_localctx, 9);
        setState(3375);
        match(GQLParser::BIG);
        setState(3376);
        match(GQLParser::INTEGER);
        setState(3378);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 356, _ctx)) {
        case 1: {
          setState(3377);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DecimalExactNumericTypeContext ------------------------------------------------------------------

GQLParser::DecimalExactNumericTypeContext::DecimalExactNumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DecimalExactNumericTypeContext::DECIMAL() {
  return getToken(GQLParser::DECIMAL, 0);
}

tree::TerminalNode* GQLParser::DecimalExactNumericTypeContext::DEC() {
  return getToken(GQLParser::DEC, 0);
}

tree::TerminalNode* GQLParser::DecimalExactNumericTypeContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::PrecisionContext* GQLParser::DecimalExactNumericTypeContext::precision() {
  return getRuleContext<GQLParser::PrecisionContext>(0);
}

tree::TerminalNode* GQLParser::DecimalExactNumericTypeContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::DecimalExactNumericTypeContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

GQLParser::ScaleContext* GQLParser::DecimalExactNumericTypeContext::scale() {
  return getRuleContext<GQLParser::ScaleContext>(0);
}

GQLParser::NotNullContext* GQLParser::DecimalExactNumericTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::DecimalExactNumericTypeContext::getRuleIndex() const {
  return GQLParser::RuleDecimalExactNumericType;
}


GQLParser::DecimalExactNumericTypeContext* GQLParser::decimalExactNumericType() {
  DecimalExactNumericTypeContext *_localctx = _tracker.createInstance<DecimalExactNumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 704, GQLParser::RuleDecimalExactNumericType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3382);
    _la = _input->LA(1);
    if (!(_la == GQLParser::DEC

    || _la == GQLParser::DECIMAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3393);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 360, _ctx)) {
    case 1: {
      setState(3383);
      match(GQLParser::LEFT_PAREN);
      setState(3384);
      precision();
      setState(3387);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::COMMA) {
        setState(3385);
        match(GQLParser::COMMA);
        setState(3386);
        scale();
      }
      setState(3389);
      match(GQLParser::RIGHT_PAREN);
      setState(3391);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 359, _ctx)) {
      case 1: {
        setState(3390);
        notNull();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrecisionContext ------------------------------------------------------------------

GQLParser::PrecisionContext::PrecisionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnsignedDecimalIntegerContext* GQLParser::PrecisionContext::unsignedDecimalInteger() {
  return getRuleContext<GQLParser::UnsignedDecimalIntegerContext>(0);
}


size_t GQLParser::PrecisionContext::getRuleIndex() const {
  return GQLParser::RulePrecision;
}


GQLParser::PrecisionContext* GQLParser::precision() {
  PrecisionContext *_localctx = _tracker.createInstance<PrecisionContext>(_ctx, getState());
  enterRule(_localctx, 706, GQLParser::RulePrecision);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3395);
    unsignedDecimalInteger();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScaleContext ------------------------------------------------------------------

GQLParser::ScaleContext::ScaleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnsignedDecimalIntegerContext* GQLParser::ScaleContext::unsignedDecimalInteger() {
  return getRuleContext<GQLParser::UnsignedDecimalIntegerContext>(0);
}


size_t GQLParser::ScaleContext::getRuleIndex() const {
  return GQLParser::RuleScale;
}


GQLParser::ScaleContext* GQLParser::scale() {
  ScaleContext *_localctx = _tracker.createInstance<ScaleContext>(_ctx, getState());
  enterRule(_localctx, 708, GQLParser::RuleScale);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3397);
    unsignedDecimalInteger();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ApproximateNumericTypeContext ------------------------------------------------------------------

GQLParser::ApproximateNumericTypeContext::ApproximateNumericTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::FLOAT16() {
  return getToken(GQLParser::FLOAT16, 0);
}

GQLParser::NotNullContext* GQLParser::ApproximateNumericTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::FLOAT32() {
  return getToken(GQLParser::FLOAT32, 0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::FLOAT64() {
  return getToken(GQLParser::FLOAT64, 0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::FLOAT128() {
  return getToken(GQLParser::FLOAT128, 0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::FLOAT256() {
  return getToken(GQLParser::FLOAT256, 0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::FLOAT() {
  return getToken(GQLParser::FLOAT, 0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::PrecisionContext* GQLParser::ApproximateNumericTypeContext::precision() {
  return getRuleContext<GQLParser::PrecisionContext>(0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

GQLParser::ScaleContext* GQLParser::ApproximateNumericTypeContext::scale() {
  return getRuleContext<GQLParser::ScaleContext>(0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::REAL() {
  return getToken(GQLParser::REAL, 0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::DOUBLE() {
  return getToken(GQLParser::DOUBLE, 0);
}

tree::TerminalNode* GQLParser::ApproximateNumericTypeContext::PRECISION() {
  return getToken(GQLParser::PRECISION, 0);
}


size_t GQLParser::ApproximateNumericTypeContext::getRuleIndex() const {
  return GQLParser::RuleApproximateNumericType;
}


GQLParser::ApproximateNumericTypeContext* GQLParser::approximateNumericType() {
  ApproximateNumericTypeContext *_localctx = _tracker.createInstance<ApproximateNumericTypeContext>(_ctx, getState());
  enterRule(_localctx, 710, GQLParser::RuleApproximateNumericType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3444);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::FLOAT16: {
        enterOuterAlt(_localctx, 1);
        setState(3399);
        match(GQLParser::FLOAT16);
        setState(3401);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 361, _ctx)) {
        case 1: {
          setState(3400);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::FLOAT32: {
        enterOuterAlt(_localctx, 2);
        setState(3403);
        match(GQLParser::FLOAT32);
        setState(3405);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 362, _ctx)) {
        case 1: {
          setState(3404);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::FLOAT64: {
        enterOuterAlt(_localctx, 3);
        setState(3407);
        match(GQLParser::FLOAT64);
        setState(3409);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 363, _ctx)) {
        case 1: {
          setState(3408);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::FLOAT128: {
        enterOuterAlt(_localctx, 4);
        setState(3411);
        match(GQLParser::FLOAT128);
        setState(3413);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 364, _ctx)) {
        case 1: {
          setState(3412);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::FLOAT256: {
        enterOuterAlt(_localctx, 5);
        setState(3415);
        match(GQLParser::FLOAT256);
        setState(3417);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 365, _ctx)) {
        case 1: {
          setState(3416);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::FLOAT: {
        enterOuterAlt(_localctx, 6);
        setState(3419);
        match(GQLParser::FLOAT);
        setState(3428);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 367, _ctx)) {
        case 1: {
          setState(3420);
          match(GQLParser::LEFT_PAREN);
          setState(3421);
          precision();
          setState(3424);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == GQLParser::COMMA) {
            setState(3422);
            match(GQLParser::COMMA);
            setState(3423);
            scale();
          }
          setState(3426);
          match(GQLParser::RIGHT_PAREN);
          break;
        }

        default:
          break;
        }
        setState(3431);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 368, _ctx)) {
        case 1: {
          setState(3430);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::REAL: {
        enterOuterAlt(_localctx, 7);
        setState(3433);
        match(GQLParser::REAL);
        setState(3435);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 369, _ctx)) {
        case 1: {
          setState(3434);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::DOUBLE: {
        enterOuterAlt(_localctx, 8);
        setState(3437);
        match(GQLParser::DOUBLE);
        setState(3439);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 370, _ctx)) {
        case 1: {
          setState(3438);
          match(GQLParser::PRECISION);
          break;
        }

        default:
          break;
        }
        setState(3442);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 371, _ctx)) {
        case 1: {
          setState(3441);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemporalTypeContext ------------------------------------------------------------------

GQLParser::TemporalTypeContext::TemporalTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::TemporalInstantTypeContext* GQLParser::TemporalTypeContext::temporalInstantType() {
  return getRuleContext<GQLParser::TemporalInstantTypeContext>(0);
}

GQLParser::TemporalDurationTypeContext* GQLParser::TemporalTypeContext::temporalDurationType() {
  return getRuleContext<GQLParser::TemporalDurationTypeContext>(0);
}


size_t GQLParser::TemporalTypeContext::getRuleIndex() const {
  return GQLParser::RuleTemporalType;
}


GQLParser::TemporalTypeContext* GQLParser::temporalType() {
  TemporalTypeContext *_localctx = _tracker.createInstance<TemporalTypeContext>(_ctx, getState());
  enterRule(_localctx, 712, GQLParser::RuleTemporalType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3448);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DATE:
      case GQLParser::LOCAL:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::ZONED: {
        enterOuterAlt(_localctx, 1);
        setState(3446);
        temporalInstantType();
        break;
      }

      case GQLParser::DURATION: {
        enterOuterAlt(_localctx, 2);
        setState(3447);
        temporalDurationType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemporalInstantTypeContext ------------------------------------------------------------------

GQLParser::TemporalInstantTypeContext::TemporalInstantTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DatetimeTypeContext* GQLParser::TemporalInstantTypeContext::datetimeType() {
  return getRuleContext<GQLParser::DatetimeTypeContext>(0);
}

GQLParser::LocaldatetimeTypeContext* GQLParser::TemporalInstantTypeContext::localdatetimeType() {
  return getRuleContext<GQLParser::LocaldatetimeTypeContext>(0);
}

GQLParser::DateTypeContext* GQLParser::TemporalInstantTypeContext::dateType() {
  return getRuleContext<GQLParser::DateTypeContext>(0);
}

GQLParser::TimeTypeContext* GQLParser::TemporalInstantTypeContext::timeType() {
  return getRuleContext<GQLParser::TimeTypeContext>(0);
}

GQLParser::LocaltimeTypeContext* GQLParser::TemporalInstantTypeContext::localtimeType() {
  return getRuleContext<GQLParser::LocaltimeTypeContext>(0);
}


size_t GQLParser::TemporalInstantTypeContext::getRuleIndex() const {
  return GQLParser::RuleTemporalInstantType;
}


GQLParser::TemporalInstantTypeContext* GQLParser::temporalInstantType() {
  TemporalInstantTypeContext *_localctx = _tracker.createInstance<TemporalInstantTypeContext>(_ctx, getState());
  enterRule(_localctx, 714, GQLParser::RuleTemporalInstantType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3455);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 374, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3450);
      datetimeType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3451);
      localdatetimeType();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3452);
      dateType();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3453);
      timeType();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3454);
      localtimeType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatetimeTypeContext ------------------------------------------------------------------

GQLParser::DatetimeTypeContext::DatetimeTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DatetimeTypeContext::ZONED() {
  return getToken(GQLParser::ZONED, 0);
}

tree::TerminalNode* GQLParser::DatetimeTypeContext::DATETIME() {
  return getToken(GQLParser::DATETIME, 0);
}

GQLParser::NotNullContext* GQLParser::DatetimeTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

tree::TerminalNode* GQLParser::DatetimeTypeContext::TIMESTAMP() {
  return getToken(GQLParser::TIMESTAMP, 0);
}

tree::TerminalNode* GQLParser::DatetimeTypeContext::WITH() {
  return getToken(GQLParser::WITH, 0);
}

tree::TerminalNode* GQLParser::DatetimeTypeContext::TIME() {
  return getToken(GQLParser::TIME, 0);
}

tree::TerminalNode* GQLParser::DatetimeTypeContext::ZONE() {
  return getToken(GQLParser::ZONE, 0);
}


size_t GQLParser::DatetimeTypeContext::getRuleIndex() const {
  return GQLParser::RuleDatetimeType;
}


GQLParser::DatetimeTypeContext* GQLParser::datetimeType() {
  DatetimeTypeContext *_localctx = _tracker.createInstance<DatetimeTypeContext>(_ctx, getState());
  enterRule(_localctx, 716, GQLParser::RuleDatetimeType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3469);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ZONED: {
        enterOuterAlt(_localctx, 1);
        setState(3457);
        match(GQLParser::ZONED);
        setState(3458);
        match(GQLParser::DATETIME);
        setState(3460);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 375, _ctx)) {
        case 1: {
          setState(3459);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::TIMESTAMP: {
        enterOuterAlt(_localctx, 2);
        setState(3462);
        match(GQLParser::TIMESTAMP);
        setState(3463);
        match(GQLParser::WITH);
        setState(3464);
        match(GQLParser::TIME);
        setState(3465);
        match(GQLParser::ZONE);
        setState(3467);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 376, _ctx)) {
        case 1: {
          setState(3466);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocaldatetimeTypeContext ------------------------------------------------------------------

GQLParser::LocaldatetimeTypeContext::LocaldatetimeTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::LocaldatetimeTypeContext::LOCAL() {
  return getToken(GQLParser::LOCAL, 0);
}

tree::TerminalNode* GQLParser::LocaldatetimeTypeContext::DATETIME() {
  return getToken(GQLParser::DATETIME, 0);
}

GQLParser::NotNullContext* GQLParser::LocaldatetimeTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

tree::TerminalNode* GQLParser::LocaldatetimeTypeContext::TIMESTAMP() {
  return getToken(GQLParser::TIMESTAMP, 0);
}

tree::TerminalNode* GQLParser::LocaldatetimeTypeContext::WITHOUT() {
  return getToken(GQLParser::WITHOUT, 0);
}

tree::TerminalNode* GQLParser::LocaldatetimeTypeContext::TIME() {
  return getToken(GQLParser::TIME, 0);
}

tree::TerminalNode* GQLParser::LocaldatetimeTypeContext::ZONE() {
  return getToken(GQLParser::ZONE, 0);
}


size_t GQLParser::LocaldatetimeTypeContext::getRuleIndex() const {
  return GQLParser::RuleLocaldatetimeType;
}


GQLParser::LocaldatetimeTypeContext* GQLParser::localdatetimeType() {
  LocaldatetimeTypeContext *_localctx = _tracker.createInstance<LocaldatetimeTypeContext>(_ctx, getState());
  enterRule(_localctx, 718, GQLParser::RuleLocaldatetimeType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3485);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LOCAL: {
        enterOuterAlt(_localctx, 1);
        setState(3471);
        match(GQLParser::LOCAL);
        setState(3472);
        match(GQLParser::DATETIME);
        setState(3474);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 378, _ctx)) {
        case 1: {
          setState(3473);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::TIMESTAMP: {
        enterOuterAlt(_localctx, 2);
        setState(3476);
        match(GQLParser::TIMESTAMP);
        setState(3480);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 379, _ctx)) {
        case 1: {
          setState(3477);
          match(GQLParser::WITHOUT);
          setState(3478);
          match(GQLParser::TIME);
          setState(3479);
          match(GQLParser::ZONE);
          break;
        }

        default:
          break;
        }
        setState(3483);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 380, _ctx)) {
        case 1: {
          setState(3482);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DateTypeContext ------------------------------------------------------------------

GQLParser::DateTypeContext::DateTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DateTypeContext::DATE() {
  return getToken(GQLParser::DATE, 0);
}

GQLParser::NotNullContext* GQLParser::DateTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::DateTypeContext::getRuleIndex() const {
  return GQLParser::RuleDateType;
}


GQLParser::DateTypeContext* GQLParser::dateType() {
  DateTypeContext *_localctx = _tracker.createInstance<DateTypeContext>(_ctx, getState());
  enterRule(_localctx, 720, GQLParser::RuleDateType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3487);
    match(GQLParser::DATE);
    setState(3489);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 382, _ctx)) {
    case 1: {
      setState(3488);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimeTypeContext ------------------------------------------------------------------

GQLParser::TimeTypeContext::TimeTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TimeTypeContext::ZONED() {
  return getToken(GQLParser::ZONED, 0);
}

std::vector<tree::TerminalNode *> GQLParser::TimeTypeContext::TIME() {
  return getTokens(GQLParser::TIME);
}

tree::TerminalNode* GQLParser::TimeTypeContext::TIME(size_t i) {
  return getToken(GQLParser::TIME, i);
}

GQLParser::NotNullContext* GQLParser::TimeTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

tree::TerminalNode* GQLParser::TimeTypeContext::WITH() {
  return getToken(GQLParser::WITH, 0);
}

tree::TerminalNode* GQLParser::TimeTypeContext::ZONE() {
  return getToken(GQLParser::ZONE, 0);
}


size_t GQLParser::TimeTypeContext::getRuleIndex() const {
  return GQLParser::RuleTimeType;
}


GQLParser::TimeTypeContext* GQLParser::timeType() {
  TimeTypeContext *_localctx = _tracker.createInstance<TimeTypeContext>(_ctx, getState());
  enterRule(_localctx, 722, GQLParser::RuleTimeType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3503);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ZONED: {
        enterOuterAlt(_localctx, 1);
        setState(3491);
        match(GQLParser::ZONED);
        setState(3492);
        match(GQLParser::TIME);
        setState(3494);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 383, _ctx)) {
        case 1: {
          setState(3493);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::TIME: {
        enterOuterAlt(_localctx, 2);
        setState(3496);
        match(GQLParser::TIME);
        setState(3497);
        match(GQLParser::WITH);
        setState(3498);
        match(GQLParser::TIME);
        setState(3499);
        match(GQLParser::ZONE);
        setState(3501);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 384, _ctx)) {
        case 1: {
          setState(3500);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocaltimeTypeContext ------------------------------------------------------------------

GQLParser::LocaltimeTypeContext::LocaltimeTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::LocaltimeTypeContext::LOCAL() {
  return getToken(GQLParser::LOCAL, 0);
}

std::vector<tree::TerminalNode *> GQLParser::LocaltimeTypeContext::TIME() {
  return getTokens(GQLParser::TIME);
}

tree::TerminalNode* GQLParser::LocaltimeTypeContext::TIME(size_t i) {
  return getToken(GQLParser::TIME, i);
}

GQLParser::NotNullContext* GQLParser::LocaltimeTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

tree::TerminalNode* GQLParser::LocaltimeTypeContext::WITHOUT() {
  return getToken(GQLParser::WITHOUT, 0);
}

tree::TerminalNode* GQLParser::LocaltimeTypeContext::ZONE() {
  return getToken(GQLParser::ZONE, 0);
}


size_t GQLParser::LocaltimeTypeContext::getRuleIndex() const {
  return GQLParser::RuleLocaltimeType;
}


GQLParser::LocaltimeTypeContext* GQLParser::localtimeType() {
  LocaltimeTypeContext *_localctx = _tracker.createInstance<LocaltimeTypeContext>(_ctx, getState());
  enterRule(_localctx, 724, GQLParser::RuleLocaltimeType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3517);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LOCAL: {
        enterOuterAlt(_localctx, 1);
        setState(3505);
        match(GQLParser::LOCAL);
        setState(3506);
        match(GQLParser::TIME);
        setState(3508);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 386, _ctx)) {
        case 1: {
          setState(3507);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

      case GQLParser::TIME: {
        enterOuterAlt(_localctx, 2);
        setState(3510);
        match(GQLParser::TIME);
        setState(3511);
        match(GQLParser::WITHOUT);
        setState(3512);
        match(GQLParser::TIME);
        setState(3513);
        match(GQLParser::ZONE);
        setState(3515);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 387, _ctx)) {
        case 1: {
          setState(3514);
          notNull();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemporalDurationTypeContext ------------------------------------------------------------------

GQLParser::TemporalDurationTypeContext::TemporalDurationTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TemporalDurationTypeContext::DURATION() {
  return getToken(GQLParser::DURATION, 0);
}

tree::TerminalNode* GQLParser::TemporalDurationTypeContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::TemporalDurationQualifierContext* GQLParser::TemporalDurationTypeContext::temporalDurationQualifier() {
  return getRuleContext<GQLParser::TemporalDurationQualifierContext>(0);
}

tree::TerminalNode* GQLParser::TemporalDurationTypeContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::NotNullContext* GQLParser::TemporalDurationTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::TemporalDurationTypeContext::getRuleIndex() const {
  return GQLParser::RuleTemporalDurationType;
}


GQLParser::TemporalDurationTypeContext* GQLParser::temporalDurationType() {
  TemporalDurationTypeContext *_localctx = _tracker.createInstance<TemporalDurationTypeContext>(_ctx, getState());
  enterRule(_localctx, 726, GQLParser::RuleTemporalDurationType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3519);
    match(GQLParser::DURATION);
    setState(3520);
    match(GQLParser::LEFT_PAREN);
    setState(3521);
    temporalDurationQualifier();
    setState(3522);
    match(GQLParser::RIGHT_PAREN);
    setState(3524);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 389, _ctx)) {
    case 1: {
      setState(3523);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemporalDurationQualifierContext ------------------------------------------------------------------

GQLParser::TemporalDurationQualifierContext::TemporalDurationQualifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TemporalDurationQualifierContext::YEAR() {
  return getToken(GQLParser::YEAR, 0);
}

tree::TerminalNode* GQLParser::TemporalDurationQualifierContext::TO() {
  return getToken(GQLParser::TO, 0);
}

tree::TerminalNode* GQLParser::TemporalDurationQualifierContext::MONTH() {
  return getToken(GQLParser::MONTH, 0);
}

tree::TerminalNode* GQLParser::TemporalDurationQualifierContext::DAY() {
  return getToken(GQLParser::DAY, 0);
}

tree::TerminalNode* GQLParser::TemporalDurationQualifierContext::SECOND() {
  return getToken(GQLParser::SECOND, 0);
}


size_t GQLParser::TemporalDurationQualifierContext::getRuleIndex() const {
  return GQLParser::RuleTemporalDurationQualifier;
}


GQLParser::TemporalDurationQualifierContext* GQLParser::temporalDurationQualifier() {
  TemporalDurationQualifierContext *_localctx = _tracker.createInstance<TemporalDurationQualifierContext>(_ctx, getState());
  enterRule(_localctx, 728, GQLParser::RuleTemporalDurationQualifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3532);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::YEAR: {
        enterOuterAlt(_localctx, 1);
        setState(3526);
        match(GQLParser::YEAR);
        setState(3527);
        match(GQLParser::TO);
        setState(3528);
        match(GQLParser::MONTH);
        break;
      }

      case GQLParser::DAY: {
        enterOuterAlt(_localctx, 2);
        setState(3529);
        match(GQLParser::DAY);
        setState(3530);
        match(GQLParser::TO);
        setState(3531);
        match(GQLParser::SECOND);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::ReferenceValueTypeContext::ReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::GraphReferenceValueTypeContext* GQLParser::ReferenceValueTypeContext::graphReferenceValueType() {
  return getRuleContext<GQLParser::GraphReferenceValueTypeContext>(0);
}

GQLParser::BindingTableReferenceValueTypeContext* GQLParser::ReferenceValueTypeContext::bindingTableReferenceValueType() {
  return getRuleContext<GQLParser::BindingTableReferenceValueTypeContext>(0);
}

GQLParser::NodeReferenceValueTypeContext* GQLParser::ReferenceValueTypeContext::nodeReferenceValueType() {
  return getRuleContext<GQLParser::NodeReferenceValueTypeContext>(0);
}

GQLParser::EdgeReferenceValueTypeContext* GQLParser::ReferenceValueTypeContext::edgeReferenceValueType() {
  return getRuleContext<GQLParser::EdgeReferenceValueTypeContext>(0);
}


size_t GQLParser::ReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleReferenceValueType;
}


GQLParser::ReferenceValueTypeContext* GQLParser::referenceValueType() {
  ReferenceValueTypeContext *_localctx = _tracker.createInstance<ReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 730, GQLParser::RuleReferenceValueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3538);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 391, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3534);
      graphReferenceValueType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3535);
      bindingTableReferenceValueType();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3536);
      nodeReferenceValueType();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3537);
      edgeReferenceValueType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImmaterialValueTypeContext ------------------------------------------------------------------

GQLParser::ImmaterialValueTypeContext::ImmaterialValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NullTypeContext* GQLParser::ImmaterialValueTypeContext::nullType() {
  return getRuleContext<GQLParser::NullTypeContext>(0);
}

GQLParser::EmptyTypeContext* GQLParser::ImmaterialValueTypeContext::emptyType() {
  return getRuleContext<GQLParser::EmptyTypeContext>(0);
}


size_t GQLParser::ImmaterialValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleImmaterialValueType;
}


GQLParser::ImmaterialValueTypeContext* GQLParser::immaterialValueType() {
  ImmaterialValueTypeContext *_localctx = _tracker.createInstance<ImmaterialValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 732, GQLParser::RuleImmaterialValueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3542);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 392, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3540);
      nullType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3541);
      emptyType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NullTypeContext ------------------------------------------------------------------

GQLParser::NullTypeContext::NullTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NullTypeContext::NULL_KW() {
  return getToken(GQLParser::NULL_KW, 0);
}


size_t GQLParser::NullTypeContext::getRuleIndex() const {
  return GQLParser::RuleNullType;
}


GQLParser::NullTypeContext* GQLParser::nullType() {
  NullTypeContext *_localctx = _tracker.createInstance<NullTypeContext>(_ctx, getState());
  enterRule(_localctx, 734, GQLParser::RuleNullType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3544);
    match(GQLParser::NULL_KW);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyTypeContext ------------------------------------------------------------------

GQLParser::EmptyTypeContext::EmptyTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::EmptyTypeContext::NULL_KW() {
  return getToken(GQLParser::NULL_KW, 0);
}

GQLParser::NotNullContext* GQLParser::EmptyTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

tree::TerminalNode* GQLParser::EmptyTypeContext::NOTHING() {
  return getToken(GQLParser::NOTHING, 0);
}


size_t GQLParser::EmptyTypeContext::getRuleIndex() const {
  return GQLParser::RuleEmptyType;
}


GQLParser::EmptyTypeContext* GQLParser::emptyType() {
  EmptyTypeContext *_localctx = _tracker.createInstance<EmptyTypeContext>(_ctx, getState());
  enterRule(_localctx, 736, GQLParser::RuleEmptyType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3549);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::NULL_KW: {
        enterOuterAlt(_localctx, 1);
        setState(3546);
        match(GQLParser::NULL_KW);
        setState(3547);
        notNull();
        break;
      }

      case GQLParser::NOTHING: {
        enterOuterAlt(_localctx, 2);
        setState(3548);
        match(GQLParser::NOTHING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::GraphReferenceValueTypeContext::GraphReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::OpenGraphReferenceValueTypeContext* GQLParser::GraphReferenceValueTypeContext::openGraphReferenceValueType() {
  return getRuleContext<GQLParser::OpenGraphReferenceValueTypeContext>(0);
}

GQLParser::ClosedGraphReferenceValueTypeContext* GQLParser::GraphReferenceValueTypeContext::closedGraphReferenceValueType() {
  return getRuleContext<GQLParser::ClosedGraphReferenceValueTypeContext>(0);
}


size_t GQLParser::GraphReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleGraphReferenceValueType;
}


GQLParser::GraphReferenceValueTypeContext* GQLParser::graphReferenceValueType() {
  GraphReferenceValueTypeContext *_localctx = _tracker.createInstance<GraphReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 738, GQLParser::RuleGraphReferenceValueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3553);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ANY: {
        enterOuterAlt(_localctx, 1);
        setState(3551);
        openGraphReferenceValueType();
        break;
      }

      case GQLParser::GRAPH:
      case GQLParser::PROPERTY: {
        enterOuterAlt(_localctx, 2);
        setState(3552);
        closedGraphReferenceValueType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClosedGraphReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::ClosedGraphReferenceValueTypeContext::ClosedGraphReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ClosedGraphReferenceValueTypeContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

GQLParser::NestedGraphTypeSpecificationContext* GQLParser::ClosedGraphReferenceValueTypeContext::nestedGraphTypeSpecification() {
  return getRuleContext<GQLParser::NestedGraphTypeSpecificationContext>(0);
}

tree::TerminalNode* GQLParser::ClosedGraphReferenceValueTypeContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

GQLParser::NotNullContext* GQLParser::ClosedGraphReferenceValueTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::ClosedGraphReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleClosedGraphReferenceValueType;
}


GQLParser::ClosedGraphReferenceValueTypeContext* GQLParser::closedGraphReferenceValueType() {
  ClosedGraphReferenceValueTypeContext *_localctx = _tracker.createInstance<ClosedGraphReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 740, GQLParser::RuleClosedGraphReferenceValueType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3556);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::PROPERTY) {
      setState(3555);
      match(GQLParser::PROPERTY);
    }
    setState(3558);
    match(GQLParser::GRAPH);
    setState(3559);
    nestedGraphTypeSpecification();
    setState(3561);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 396, _ctx)) {
    case 1: {
      setState(3560);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpenGraphReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::OpenGraphReferenceValueTypeContext::OpenGraphReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::OpenGraphReferenceValueTypeContext::ANY() {
  return getToken(GQLParser::ANY, 0);
}

tree::TerminalNode* GQLParser::OpenGraphReferenceValueTypeContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

tree::TerminalNode* GQLParser::OpenGraphReferenceValueTypeContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

GQLParser::NotNullContext* GQLParser::OpenGraphReferenceValueTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::OpenGraphReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleOpenGraphReferenceValueType;
}


GQLParser::OpenGraphReferenceValueTypeContext* GQLParser::openGraphReferenceValueType() {
  OpenGraphReferenceValueTypeContext *_localctx = _tracker.createInstance<OpenGraphReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 742, GQLParser::RuleOpenGraphReferenceValueType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3563);
    match(GQLParser::ANY);
    setState(3565);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::PROPERTY) {
      setState(3564);
      match(GQLParser::PROPERTY);
    }
    setState(3567);
    match(GQLParser::GRAPH);
    setState(3569);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 398, _ctx)) {
    case 1: {
      setState(3568);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingTableReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::BindingTableReferenceValueTypeContext::BindingTableReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingTableTypeContext* GQLParser::BindingTableReferenceValueTypeContext::bindingTableType() {
  return getRuleContext<GQLParser::BindingTableTypeContext>(0);
}

GQLParser::NotNullContext* GQLParser::BindingTableReferenceValueTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::BindingTableReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleBindingTableReferenceValueType;
}


GQLParser::BindingTableReferenceValueTypeContext* GQLParser::bindingTableReferenceValueType() {
  BindingTableReferenceValueTypeContext *_localctx = _tracker.createInstance<BindingTableReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 744, GQLParser::RuleBindingTableReferenceValueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3571);
    bindingTableType();
    setState(3573);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 399, _ctx)) {
    case 1: {
      setState(3572);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::NodeReferenceValueTypeContext::NodeReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::OpenNodeReferenceValueTypeContext* GQLParser::NodeReferenceValueTypeContext::openNodeReferenceValueType() {
  return getRuleContext<GQLParser::OpenNodeReferenceValueTypeContext>(0);
}

GQLParser::ClosedNodeReferenceValueTypeContext* GQLParser::NodeReferenceValueTypeContext::closedNodeReferenceValueType() {
  return getRuleContext<GQLParser::ClosedNodeReferenceValueTypeContext>(0);
}


size_t GQLParser::NodeReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleNodeReferenceValueType;
}


GQLParser::NodeReferenceValueTypeContext* GQLParser::nodeReferenceValueType() {
  NodeReferenceValueTypeContext *_localctx = _tracker.createInstance<NodeReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 746, GQLParser::RuleNodeReferenceValueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3577);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 400, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3575);
      openNodeReferenceValueType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3576);
      closedNodeReferenceValueType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClosedNodeReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::ClosedNodeReferenceValueTypeContext::ClosedNodeReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NodeTypeSpecificationContext* GQLParser::ClosedNodeReferenceValueTypeContext::nodeTypeSpecification() {
  return getRuleContext<GQLParser::NodeTypeSpecificationContext>(0);
}

GQLParser::NotNullContext* GQLParser::ClosedNodeReferenceValueTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::ClosedNodeReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleClosedNodeReferenceValueType;
}


GQLParser::ClosedNodeReferenceValueTypeContext* GQLParser::closedNodeReferenceValueType() {
  ClosedNodeReferenceValueTypeContext *_localctx = _tracker.createInstance<ClosedNodeReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 748, GQLParser::RuleClosedNodeReferenceValueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3579);
    nodeTypeSpecification();
    setState(3581);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 401, _ctx)) {
    case 1: {
      setState(3580);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpenNodeReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::OpenNodeReferenceValueTypeContext::OpenNodeReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NodeSynonymContext* GQLParser::OpenNodeReferenceValueTypeContext::nodeSynonym() {
  return getRuleContext<GQLParser::NodeSynonymContext>(0);
}

tree::TerminalNode* GQLParser::OpenNodeReferenceValueTypeContext::ANY() {
  return getToken(GQLParser::ANY, 0);
}

GQLParser::NotNullContext* GQLParser::OpenNodeReferenceValueTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::OpenNodeReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleOpenNodeReferenceValueType;
}


GQLParser::OpenNodeReferenceValueTypeContext* GQLParser::openNodeReferenceValueType() {
  OpenNodeReferenceValueTypeContext *_localctx = _tracker.createInstance<OpenNodeReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 750, GQLParser::RuleOpenNodeReferenceValueType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3584);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::ANY) {
      setState(3583);
      match(GQLParser::ANY);
    }
    setState(3586);
    nodeSynonym();
    setState(3588);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 403, _ctx)) {
    case 1: {
      setState(3587);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::EdgeReferenceValueTypeContext::EdgeReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::OpenEdgeReferenceValueTypeContext* GQLParser::EdgeReferenceValueTypeContext::openEdgeReferenceValueType() {
  return getRuleContext<GQLParser::OpenEdgeReferenceValueTypeContext>(0);
}

GQLParser::ClosedEdgeReferenceValueTypeContext* GQLParser::EdgeReferenceValueTypeContext::closedEdgeReferenceValueType() {
  return getRuleContext<GQLParser::ClosedEdgeReferenceValueTypeContext>(0);
}


size_t GQLParser::EdgeReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleEdgeReferenceValueType;
}


GQLParser::EdgeReferenceValueTypeContext* GQLParser::edgeReferenceValueType() {
  EdgeReferenceValueTypeContext *_localctx = _tracker.createInstance<EdgeReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 752, GQLParser::RuleEdgeReferenceValueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3592);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 404, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3590);
      openEdgeReferenceValueType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3591);
      closedEdgeReferenceValueType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClosedEdgeReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::ClosedEdgeReferenceValueTypeContext::ClosedEdgeReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::EdgeTypeSpecificationContext* GQLParser::ClosedEdgeReferenceValueTypeContext::edgeTypeSpecification() {
  return getRuleContext<GQLParser::EdgeTypeSpecificationContext>(0);
}

GQLParser::NotNullContext* GQLParser::ClosedEdgeReferenceValueTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::ClosedEdgeReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleClosedEdgeReferenceValueType;
}


GQLParser::ClosedEdgeReferenceValueTypeContext* GQLParser::closedEdgeReferenceValueType() {
  ClosedEdgeReferenceValueTypeContext *_localctx = _tracker.createInstance<ClosedEdgeReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 754, GQLParser::RuleClosedEdgeReferenceValueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3594);
    edgeTypeSpecification();
    setState(3596);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 405, _ctx)) {
    case 1: {
      setState(3595);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpenEdgeReferenceValueTypeContext ------------------------------------------------------------------

GQLParser::OpenEdgeReferenceValueTypeContext::OpenEdgeReferenceValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::EdgeSynonymContext* GQLParser::OpenEdgeReferenceValueTypeContext::edgeSynonym() {
  return getRuleContext<GQLParser::EdgeSynonymContext>(0);
}

tree::TerminalNode* GQLParser::OpenEdgeReferenceValueTypeContext::ANY() {
  return getToken(GQLParser::ANY, 0);
}

GQLParser::NotNullContext* GQLParser::OpenEdgeReferenceValueTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::OpenEdgeReferenceValueTypeContext::getRuleIndex() const {
  return GQLParser::RuleOpenEdgeReferenceValueType;
}


GQLParser::OpenEdgeReferenceValueTypeContext* GQLParser::openEdgeReferenceValueType() {
  OpenEdgeReferenceValueTypeContext *_localctx = _tracker.createInstance<OpenEdgeReferenceValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 756, GQLParser::RuleOpenEdgeReferenceValueType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3599);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::ANY) {
      setState(3598);
      match(GQLParser::ANY);
    }
    setState(3601);
    edgeSynonym();
    setState(3603);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 407, _ctx)) {
    case 1: {
      setState(3602);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathValueTypeContext ------------------------------------------------------------------

GQLParser::PathValueTypeContext::PathValueTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::PathValueTypeContext::PATH() {
  return getToken(GQLParser::PATH, 0);
}

GQLParser::NotNullContext* GQLParser::PathValueTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}


size_t GQLParser::PathValueTypeContext::getRuleIndex() const {
  return GQLParser::RulePathValueType;
}


GQLParser::PathValueTypeContext* GQLParser::pathValueType() {
  PathValueTypeContext *_localctx = _tracker.createInstance<PathValueTypeContext>(_ctx, getState());
  enterRule(_localctx, 758, GQLParser::RulePathValueType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3605);
    match(GQLParser::PATH);
    setState(3607);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 408, _ctx)) {
    case 1: {
      setState(3606);
      notNull();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListValueTypeNameContext ------------------------------------------------------------------

GQLParser::ListValueTypeNameContext::ListValueTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ListValueTypeNameSynonymContext* GQLParser::ListValueTypeNameContext::listValueTypeNameSynonym() {
  return getRuleContext<GQLParser::ListValueTypeNameSynonymContext>(0);
}


size_t GQLParser::ListValueTypeNameContext::getRuleIndex() const {
  return GQLParser::RuleListValueTypeName;
}


GQLParser::ListValueTypeNameContext* GQLParser::listValueTypeName() {
  ListValueTypeNameContext *_localctx = _tracker.createInstance<ListValueTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 760, GQLParser::RuleListValueTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3609);
    listValueTypeNameSynonym();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListValueTypeNameSynonymContext ------------------------------------------------------------------

GQLParser::ListValueTypeNameSynonymContext::ListValueTypeNameSynonymContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ListValueTypeNameSynonymContext::LIST() {
  return getToken(GQLParser::LIST, 0);
}

tree::TerminalNode* GQLParser::ListValueTypeNameSynonymContext::ARRAY() {
  return getToken(GQLParser::ARRAY, 0);
}


size_t GQLParser::ListValueTypeNameSynonymContext::getRuleIndex() const {
  return GQLParser::RuleListValueTypeNameSynonym;
}


GQLParser::ListValueTypeNameSynonymContext* GQLParser::listValueTypeNameSynonym() {
  ListValueTypeNameSynonymContext *_localctx = _tracker.createInstance<ListValueTypeNameSynonymContext>(_ctx, getState());
  enterRule(_localctx, 762, GQLParser::RuleListValueTypeNameSynonym);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3611);
    _la = _input->LA(1);
    if (!(_la == GQLParser::ARRAY || _la == GQLParser::LIST)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordTypeContext ------------------------------------------------------------------

GQLParser::RecordTypeContext::RecordTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::RecordTypeContext::RECORD() {
  return getToken(GQLParser::RECORD, 0);
}

tree::TerminalNode* GQLParser::RecordTypeContext::ANY() {
  return getToken(GQLParser::ANY, 0);
}

GQLParser::NotNullContext* GQLParser::RecordTypeContext::notNull() {
  return getRuleContext<GQLParser::NotNullContext>(0);
}

GQLParser::FieldTypesSpecificationContext* GQLParser::RecordTypeContext::fieldTypesSpecification() {
  return getRuleContext<GQLParser::FieldTypesSpecificationContext>(0);
}


size_t GQLParser::RecordTypeContext::getRuleIndex() const {
  return GQLParser::RuleRecordType;
}


GQLParser::RecordTypeContext* GQLParser::recordType() {
  RecordTypeContext *_localctx = _tracker.createInstance<RecordTypeContext>(_ctx, getState());
  enterRule(_localctx, 764, GQLParser::RuleRecordType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3627);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 413, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3614);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::ANY) {
        setState(3613);
        match(GQLParser::ANY);
      }
      setState(3616);
      match(GQLParser::RECORD);
      setState(3618);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 410, _ctx)) {
      case 1: {
        setState(3617);
        notNull();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3621);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::RECORD) {
        setState(3620);
        match(GQLParser::RECORD);
      }
      setState(3623);
      fieldTypesSpecification();
      setState(3625);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 412, _ctx)) {
      case 1: {
        setState(3624);
        notNull();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldTypesSpecificationContext ------------------------------------------------------------------

GQLParser::FieldTypesSpecificationContext::FieldTypesSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FieldTypesSpecificationContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

tree::TerminalNode* GQLParser::FieldTypesSpecificationContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}

GQLParser::FieldTypeListContext* GQLParser::FieldTypesSpecificationContext::fieldTypeList() {
  return getRuleContext<GQLParser::FieldTypeListContext>(0);
}


size_t GQLParser::FieldTypesSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleFieldTypesSpecification;
}


GQLParser::FieldTypesSpecificationContext* GQLParser::fieldTypesSpecification() {
  FieldTypesSpecificationContext *_localctx = _tracker.createInstance<FieldTypesSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 766, GQLParser::RuleFieldTypesSpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3629);
    match(GQLParser::LEFT_BRACE);
    setState(3631);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE

    || _la == GQLParser::ACCENT_QUOTED_CHARACTER_SEQUENCE || ((((_la - 277) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 277)) & 281474976710655) != 0)) {
      setState(3630);
      fieldTypeList();
    }
    setState(3633);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldTypeListContext ------------------------------------------------------------------

GQLParser::FieldTypeListContext::FieldTypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::FieldTypeContext *> GQLParser::FieldTypeListContext::fieldType() {
  return getRuleContexts<GQLParser::FieldTypeContext>();
}

GQLParser::FieldTypeContext* GQLParser::FieldTypeListContext::fieldType(size_t i) {
  return getRuleContext<GQLParser::FieldTypeContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::FieldTypeListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::FieldTypeListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::FieldTypeListContext::getRuleIndex() const {
  return GQLParser::RuleFieldTypeList;
}


GQLParser::FieldTypeListContext* GQLParser::fieldTypeList() {
  FieldTypeListContext *_localctx = _tracker.createInstance<FieldTypeListContext>(_ctx, getState());
  enterRule(_localctx, 768, GQLParser::RuleFieldTypeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3635);
    fieldType();
    setState(3640);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(3636);
      match(GQLParser::COMMA);
      setState(3637);
      fieldType();
      setState(3642);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NotNullContext ------------------------------------------------------------------

GQLParser::NotNullContext::NotNullContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NotNullContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}

tree::TerminalNode* GQLParser::NotNullContext::NULL_KW() {
  return getToken(GQLParser::NULL_KW, 0);
}


size_t GQLParser::NotNullContext::getRuleIndex() const {
  return GQLParser::RuleNotNull;
}


GQLParser::NotNullContext* GQLParser::notNull() {
  NotNullContext *_localctx = _tracker.createInstance<NotNullContext>(_ctx, getState());
  enterRule(_localctx, 770, GQLParser::RuleNotNull);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3643);
    match(GQLParser::NOT);
    setState(3644);
    match(GQLParser::NULL_KW);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldTypeContext ------------------------------------------------------------------

GQLParser::FieldTypeContext::FieldTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FieldNameContext* GQLParser::FieldTypeContext::fieldName() {
  return getRuleContext<GQLParser::FieldNameContext>(0);
}

GQLParser::ValueTypeContext* GQLParser::FieldTypeContext::valueType() {
  return getRuleContext<GQLParser::ValueTypeContext>(0);
}

GQLParser::TypedContext* GQLParser::FieldTypeContext::typed() {
  return getRuleContext<GQLParser::TypedContext>(0);
}


size_t GQLParser::FieldTypeContext::getRuleIndex() const {
  return GQLParser::RuleFieldType;
}


GQLParser::FieldTypeContext* GQLParser::fieldType() {
  FieldTypeContext *_localctx = _tracker.createInstance<FieldTypeContext>(_ctx, getState());
  enterRule(_localctx, 772, GQLParser::RuleFieldType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3646);
    fieldName();
    setState(3648);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::TYPED || _la == GQLParser::DOUBLE_COLON) {
      setState(3647);
      typed();
    }
    setState(3650);
    valueType(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SearchConditionContext ------------------------------------------------------------------

GQLParser::SearchConditionContext::SearchConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BooleanValueExpressionContext* GQLParser::SearchConditionContext::booleanValueExpression() {
  return getRuleContext<GQLParser::BooleanValueExpressionContext>(0);
}


size_t GQLParser::SearchConditionContext::getRuleIndex() const {
  return GQLParser::RuleSearchCondition;
}


GQLParser::SearchConditionContext* GQLParser::searchCondition() {
  SearchConditionContext *_localctx = _tracker.createInstance<SearchConditionContext>(_ctx, getState());
  enterRule(_localctx, 774, GQLParser::RuleSearchCondition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3652);
    booleanValueExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PredicateContext ------------------------------------------------------------------

GQLParser::PredicateContext::PredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ExistsPredicateContext* GQLParser::PredicateContext::existsPredicate() {
  return getRuleContext<GQLParser::ExistsPredicateContext>(0);
}

GQLParser::NullPredicateContext* GQLParser::PredicateContext::nullPredicate() {
  return getRuleContext<GQLParser::NullPredicateContext>(0);
}

GQLParser::ValueTypePredicateContext* GQLParser::PredicateContext::valueTypePredicate() {
  return getRuleContext<GQLParser::ValueTypePredicateContext>(0);
}

GQLParser::DirectedPredicateContext* GQLParser::PredicateContext::directedPredicate() {
  return getRuleContext<GQLParser::DirectedPredicateContext>(0);
}

GQLParser::LabeledPredicateContext* GQLParser::PredicateContext::labeledPredicate() {
  return getRuleContext<GQLParser::LabeledPredicateContext>(0);
}

GQLParser::SourceDestinationPredicateContext* GQLParser::PredicateContext::sourceDestinationPredicate() {
  return getRuleContext<GQLParser::SourceDestinationPredicateContext>(0);
}

GQLParser::All_differentPredicateContext* GQLParser::PredicateContext::all_differentPredicate() {
  return getRuleContext<GQLParser::All_differentPredicateContext>(0);
}

GQLParser::SamePredicateContext* GQLParser::PredicateContext::samePredicate() {
  return getRuleContext<GQLParser::SamePredicateContext>(0);
}

GQLParser::Property_existsPredicateContext* GQLParser::PredicateContext::property_existsPredicate() {
  return getRuleContext<GQLParser::Property_existsPredicateContext>(0);
}


size_t GQLParser::PredicateContext::getRuleIndex() const {
  return GQLParser::RulePredicate;
}


GQLParser::PredicateContext* GQLParser::predicate() {
  PredicateContext *_localctx = _tracker.createInstance<PredicateContext>(_ctx, getState());
  enterRule(_localctx, 776, GQLParser::RulePredicate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3663);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 417, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3654);
      existsPredicate();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3655);
      nullPredicate();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3656);
      valueTypePredicate();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3657);
      directedPredicate();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3658);
      labeledPredicate();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(3659);
      sourceDestinationPredicate();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(3660);
      all_differentPredicate();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(3661);
      samePredicate();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(3662);
      property_existsPredicate();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompOpContext ------------------------------------------------------------------

GQLParser::CompOpContext::CompOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CompOpContext::EQUALS_OPERATOR() {
  return getToken(GQLParser::EQUALS_OPERATOR, 0);
}

tree::TerminalNode* GQLParser::CompOpContext::NOT_EQUALS_OPERATOR() {
  return getToken(GQLParser::NOT_EQUALS_OPERATOR, 0);
}

tree::TerminalNode* GQLParser::CompOpContext::LEFT_ANGLE_BRACKET() {
  return getToken(GQLParser::LEFT_ANGLE_BRACKET, 0);
}

tree::TerminalNode* GQLParser::CompOpContext::RIGHT_ANGLE_BRACKET() {
  return getToken(GQLParser::RIGHT_ANGLE_BRACKET, 0);
}

tree::TerminalNode* GQLParser::CompOpContext::LESS_THAN_OR_EQUALS_OPERATOR() {
  return getToken(GQLParser::LESS_THAN_OR_EQUALS_OPERATOR, 0);
}

tree::TerminalNode* GQLParser::CompOpContext::GREATER_THAN_OR_EQUALS_OPERATOR() {
  return getToken(GQLParser::GREATER_THAN_OR_EQUALS_OPERATOR, 0);
}


size_t GQLParser::CompOpContext::getRuleIndex() const {
  return GQLParser::RuleCompOp;
}


GQLParser::CompOpContext* GQLParser::compOp() {
  CompOpContext *_localctx = _tracker.createInstance<CompOpContext>(_ctx, getState());
  enterRule(_localctx, 778, GQLParser::RuleCompOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3665);
    _la = _input->LA(1);
    if (!(((((_la - 334) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 334)) & 142807664897) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExistsPredicateContext ------------------------------------------------------------------

GQLParser::ExistsPredicateContext::ExistsPredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ExistsPredicateContext::EXISTS() {
  return getToken(GQLParser::EXISTS, 0);
}

tree::TerminalNode* GQLParser::ExistsPredicateContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

GQLParser::GraphPatternContext* GQLParser::ExistsPredicateContext::graphPattern() {
  return getRuleContext<GQLParser::GraphPatternContext>(0);
}

tree::TerminalNode* GQLParser::ExistsPredicateContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}

tree::TerminalNode* GQLParser::ExistsPredicateContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::ExistsPredicateContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::MatchStatementBlockContext* GQLParser::ExistsPredicateContext::matchStatementBlock() {
  return getRuleContext<GQLParser::MatchStatementBlockContext>(0);
}

GQLParser::NestedQuerySpecificationContext* GQLParser::ExistsPredicateContext::nestedQuerySpecification() {
  return getRuleContext<GQLParser::NestedQuerySpecificationContext>(0);
}


size_t GQLParser::ExistsPredicateContext::getRuleIndex() const {
  return GQLParser::RuleExistsPredicate;
}


GQLParser::ExistsPredicateContext* GQLParser::existsPredicate() {
  ExistsPredicateContext *_localctx = _tracker.createInstance<ExistsPredicateContext>(_ctx, getState());
  enterRule(_localctx, 780, GQLParser::RuleExistsPredicate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3667);
    match(GQLParser::EXISTS);
    setState(3685);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 418, _ctx)) {
    case 1: {
      setState(3668);
      match(GQLParser::LEFT_BRACE);
      setState(3669);
      graphPattern();
      setState(3670);
      match(GQLParser::RIGHT_BRACE);
      break;
    }

    case 2: {
      setState(3672);
      match(GQLParser::LEFT_PAREN);
      setState(3673);
      graphPattern();
      setState(3674);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    case 3: {
      setState(3676);
      match(GQLParser::LEFT_BRACE);
      setState(3677);
      matchStatementBlock();
      setState(3678);
      match(GQLParser::RIGHT_BRACE);
      break;
    }

    case 4: {
      setState(3680);
      match(GQLParser::LEFT_PAREN);
      setState(3681);
      matchStatementBlock();
      setState(3682);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    case 5: {
      setState(3684);
      nestedQuerySpecification();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NullPredicateContext ------------------------------------------------------------------

GQLParser::NullPredicateContext::NullPredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionPrimaryContext* GQLParser::NullPredicateContext::valueExpressionPrimary() {
  return getRuleContext<GQLParser::ValueExpressionPrimaryContext>(0);
}

GQLParser::NullPredicatePart2Context* GQLParser::NullPredicateContext::nullPredicatePart2() {
  return getRuleContext<GQLParser::NullPredicatePart2Context>(0);
}


size_t GQLParser::NullPredicateContext::getRuleIndex() const {
  return GQLParser::RuleNullPredicate;
}


GQLParser::NullPredicateContext* GQLParser::nullPredicate() {
  NullPredicateContext *_localctx = _tracker.createInstance<NullPredicateContext>(_ctx, getState());
  enterRule(_localctx, 782, GQLParser::RuleNullPredicate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3687);
    valueExpressionPrimary(0);
    setState(3688);
    nullPredicatePart2();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NullPredicatePart2Context ------------------------------------------------------------------

GQLParser::NullPredicatePart2Context::NullPredicatePart2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NullPredicatePart2Context::IS() {
  return getToken(GQLParser::IS, 0);
}

tree::TerminalNode* GQLParser::NullPredicatePart2Context::NULL_KW() {
  return getToken(GQLParser::NULL_KW, 0);
}

tree::TerminalNode* GQLParser::NullPredicatePart2Context::NOT() {
  return getToken(GQLParser::NOT, 0);
}


size_t GQLParser::NullPredicatePart2Context::getRuleIndex() const {
  return GQLParser::RuleNullPredicatePart2;
}


GQLParser::NullPredicatePart2Context* GQLParser::nullPredicatePart2() {
  NullPredicatePart2Context *_localctx = _tracker.createInstance<NullPredicatePart2Context>(_ctx, getState());
  enterRule(_localctx, 784, GQLParser::RuleNullPredicatePart2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3690);
    match(GQLParser::IS);
    setState(3692);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::NOT) {
      setState(3691);
      match(GQLParser::NOT);
    }
    setState(3694);
    match(GQLParser::NULL_KW);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueTypePredicateContext ------------------------------------------------------------------

GQLParser::ValueTypePredicateContext::ValueTypePredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionPrimaryContext* GQLParser::ValueTypePredicateContext::valueExpressionPrimary() {
  return getRuleContext<GQLParser::ValueExpressionPrimaryContext>(0);
}

GQLParser::ValueTypePredicatePart2Context* GQLParser::ValueTypePredicateContext::valueTypePredicatePart2() {
  return getRuleContext<GQLParser::ValueTypePredicatePart2Context>(0);
}


size_t GQLParser::ValueTypePredicateContext::getRuleIndex() const {
  return GQLParser::RuleValueTypePredicate;
}


GQLParser::ValueTypePredicateContext* GQLParser::valueTypePredicate() {
  ValueTypePredicateContext *_localctx = _tracker.createInstance<ValueTypePredicateContext>(_ctx, getState());
  enterRule(_localctx, 786, GQLParser::RuleValueTypePredicate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3696);
    valueExpressionPrimary(0);
    setState(3697);
    valueTypePredicatePart2();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueTypePredicatePart2Context ------------------------------------------------------------------

GQLParser::ValueTypePredicatePart2Context::ValueTypePredicatePart2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ValueTypePredicatePart2Context::IS() {
  return getToken(GQLParser::IS, 0);
}

GQLParser::TypedContext* GQLParser::ValueTypePredicatePart2Context::typed() {
  return getRuleContext<GQLParser::TypedContext>(0);
}

GQLParser::ValueTypeContext* GQLParser::ValueTypePredicatePart2Context::valueType() {
  return getRuleContext<GQLParser::ValueTypeContext>(0);
}

tree::TerminalNode* GQLParser::ValueTypePredicatePart2Context::NOT() {
  return getToken(GQLParser::NOT, 0);
}


size_t GQLParser::ValueTypePredicatePart2Context::getRuleIndex() const {
  return GQLParser::RuleValueTypePredicatePart2;
}


GQLParser::ValueTypePredicatePart2Context* GQLParser::valueTypePredicatePart2() {
  ValueTypePredicatePart2Context *_localctx = _tracker.createInstance<ValueTypePredicatePart2Context>(_ctx, getState());
  enterRule(_localctx, 788, GQLParser::RuleValueTypePredicatePart2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3699);
    match(GQLParser::IS);
    setState(3701);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::NOT) {
      setState(3700);
      match(GQLParser::NOT);
    }
    setState(3703);
    typed();
    setState(3704);
    valueType(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalizedPredicatePart2Context ------------------------------------------------------------------

GQLParser::NormalizedPredicatePart2Context::NormalizedPredicatePart2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NormalizedPredicatePart2Context::IS() {
  return getToken(GQLParser::IS, 0);
}

tree::TerminalNode* GQLParser::NormalizedPredicatePart2Context::NORMALIZED() {
  return getToken(GQLParser::NORMALIZED, 0);
}

tree::TerminalNode* GQLParser::NormalizedPredicatePart2Context::NOT() {
  return getToken(GQLParser::NOT, 0);
}

GQLParser::NormalFormContext* GQLParser::NormalizedPredicatePart2Context::normalForm() {
  return getRuleContext<GQLParser::NormalFormContext>(0);
}


size_t GQLParser::NormalizedPredicatePart2Context::getRuleIndex() const {
  return GQLParser::RuleNormalizedPredicatePart2;
}


GQLParser::NormalizedPredicatePart2Context* GQLParser::normalizedPredicatePart2() {
  NormalizedPredicatePart2Context *_localctx = _tracker.createInstance<NormalizedPredicatePart2Context>(_ctx, getState());
  enterRule(_localctx, 790, GQLParser::RuleNormalizedPredicatePart2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3706);
    match(GQLParser::IS);
    setState(3708);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::NOT) {
      setState(3707);
      match(GQLParser::NOT);
    }
    setState(3711);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 296) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 296)) & 15) != 0)) {
      setState(3710);
      normalForm();
    }
    setState(3713);
    match(GQLParser::NORMALIZED);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DirectedPredicateContext ------------------------------------------------------------------

GQLParser::DirectedPredicateContext::DirectedPredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementVariableReferenceContext* GQLParser::DirectedPredicateContext::elementVariableReference() {
  return getRuleContext<GQLParser::ElementVariableReferenceContext>(0);
}

GQLParser::DirectedPredicatePart2Context* GQLParser::DirectedPredicateContext::directedPredicatePart2() {
  return getRuleContext<GQLParser::DirectedPredicatePart2Context>(0);
}


size_t GQLParser::DirectedPredicateContext::getRuleIndex() const {
  return GQLParser::RuleDirectedPredicate;
}


GQLParser::DirectedPredicateContext* GQLParser::directedPredicate() {
  DirectedPredicateContext *_localctx = _tracker.createInstance<DirectedPredicateContext>(_ctx, getState());
  enterRule(_localctx, 792, GQLParser::RuleDirectedPredicate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3715);
    elementVariableReference();
    setState(3716);
    directedPredicatePart2();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DirectedPredicatePart2Context ------------------------------------------------------------------

GQLParser::DirectedPredicatePart2Context::DirectedPredicatePart2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DirectedPredicatePart2Context::IS() {
  return getToken(GQLParser::IS, 0);
}

tree::TerminalNode* GQLParser::DirectedPredicatePart2Context::DIRECTED() {
  return getToken(GQLParser::DIRECTED, 0);
}

tree::TerminalNode* GQLParser::DirectedPredicatePart2Context::NOT() {
  return getToken(GQLParser::NOT, 0);
}


size_t GQLParser::DirectedPredicatePart2Context::getRuleIndex() const {
  return GQLParser::RuleDirectedPredicatePart2;
}


GQLParser::DirectedPredicatePart2Context* GQLParser::directedPredicatePart2() {
  DirectedPredicatePart2Context *_localctx = _tracker.createInstance<DirectedPredicatePart2Context>(_ctx, getState());
  enterRule(_localctx, 794, GQLParser::RuleDirectedPredicatePart2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3718);
    match(GQLParser::IS);
    setState(3720);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::NOT) {
      setState(3719);
      match(GQLParser::NOT);
    }
    setState(3722);
    match(GQLParser::DIRECTED);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabeledPredicateContext ------------------------------------------------------------------

GQLParser::LabeledPredicateContext::LabeledPredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementVariableReferenceContext* GQLParser::LabeledPredicateContext::elementVariableReference() {
  return getRuleContext<GQLParser::ElementVariableReferenceContext>(0);
}

GQLParser::LabeledPredicatePart2Context* GQLParser::LabeledPredicateContext::labeledPredicatePart2() {
  return getRuleContext<GQLParser::LabeledPredicatePart2Context>(0);
}


size_t GQLParser::LabeledPredicateContext::getRuleIndex() const {
  return GQLParser::RuleLabeledPredicate;
}


GQLParser::LabeledPredicateContext* GQLParser::labeledPredicate() {
  LabeledPredicateContext *_localctx = _tracker.createInstance<LabeledPredicateContext>(_ctx, getState());
  enterRule(_localctx, 796, GQLParser::RuleLabeledPredicate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3724);
    elementVariableReference();
    setState(3725);
    labeledPredicatePart2();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabeledPredicatePart2Context ------------------------------------------------------------------

GQLParser::LabeledPredicatePart2Context::LabeledPredicatePart2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IsLabeledOrColonContext* GQLParser::LabeledPredicatePart2Context::isLabeledOrColon() {
  return getRuleContext<GQLParser::IsLabeledOrColonContext>(0);
}

GQLParser::LabelExpressionContext* GQLParser::LabeledPredicatePart2Context::labelExpression() {
  return getRuleContext<GQLParser::LabelExpressionContext>(0);
}


size_t GQLParser::LabeledPredicatePart2Context::getRuleIndex() const {
  return GQLParser::RuleLabeledPredicatePart2;
}


GQLParser::LabeledPredicatePart2Context* GQLParser::labeledPredicatePart2() {
  LabeledPredicatePart2Context *_localctx = _tracker.createInstance<LabeledPredicatePart2Context>(_ctx, getState());
  enterRule(_localctx, 798, GQLParser::RuleLabeledPredicatePart2);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3727);
    isLabeledOrColon();
    setState(3728);
    labelExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IsLabeledOrColonContext ------------------------------------------------------------------

GQLParser::IsLabeledOrColonContext::IsLabeledOrColonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::IsLabeledOrColonContext::IS() {
  return getToken(GQLParser::IS, 0);
}

tree::TerminalNode* GQLParser::IsLabeledOrColonContext::LABELED() {
  return getToken(GQLParser::LABELED, 0);
}

tree::TerminalNode* GQLParser::IsLabeledOrColonContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}

tree::TerminalNode* GQLParser::IsLabeledOrColonContext::COLON() {
  return getToken(GQLParser::COLON, 0);
}


size_t GQLParser::IsLabeledOrColonContext::getRuleIndex() const {
  return GQLParser::RuleIsLabeledOrColon;
}


GQLParser::IsLabeledOrColonContext* GQLParser::isLabeledOrColon() {
  IsLabeledOrColonContext *_localctx = _tracker.createInstance<IsLabeledOrColonContext>(_ctx, getState());
  enterRule(_localctx, 800, GQLParser::RuleIsLabeledOrColon);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3736);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::IS: {
        enterOuterAlt(_localctx, 1);
        setState(3730);
        match(GQLParser::IS);
        setState(3732);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::NOT) {
          setState(3731);
          match(GQLParser::NOT);
        }
        setState(3734);
        match(GQLParser::LABELED);
        break;
      }

      case GQLParser::COLON: {
        enterOuterAlt(_localctx, 2);
        setState(3735);
        match(GQLParser::COLON);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SourceDestinationPredicateContext ------------------------------------------------------------------

GQLParser::SourceDestinationPredicateContext::SourceDestinationPredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NodeReferenceContext* GQLParser::SourceDestinationPredicateContext::nodeReference() {
  return getRuleContext<GQLParser::NodeReferenceContext>(0);
}

GQLParser::SourcePredicatePart2Context* GQLParser::SourceDestinationPredicateContext::sourcePredicatePart2() {
  return getRuleContext<GQLParser::SourcePredicatePart2Context>(0);
}

GQLParser::DestinationPredicatePart2Context* GQLParser::SourceDestinationPredicateContext::destinationPredicatePart2() {
  return getRuleContext<GQLParser::DestinationPredicatePart2Context>(0);
}


size_t GQLParser::SourceDestinationPredicateContext::getRuleIndex() const {
  return GQLParser::RuleSourceDestinationPredicate;
}


GQLParser::SourceDestinationPredicateContext* GQLParser::sourceDestinationPredicate() {
  SourceDestinationPredicateContext *_localctx = _tracker.createInstance<SourceDestinationPredicateContext>(_ctx, getState());
  enterRule(_localctx, 802, GQLParser::RuleSourceDestinationPredicate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3744);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 426, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3738);
      nodeReference();
      setState(3739);
      sourcePredicatePart2();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3741);
      nodeReference();
      setState(3742);
      destinationPredicatePart2();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeReferenceContext ------------------------------------------------------------------

GQLParser::NodeReferenceContext::NodeReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementVariableReferenceContext* GQLParser::NodeReferenceContext::elementVariableReference() {
  return getRuleContext<GQLParser::ElementVariableReferenceContext>(0);
}


size_t GQLParser::NodeReferenceContext::getRuleIndex() const {
  return GQLParser::RuleNodeReference;
}


GQLParser::NodeReferenceContext* GQLParser::nodeReference() {
  NodeReferenceContext *_localctx = _tracker.createInstance<NodeReferenceContext>(_ctx, getState());
  enterRule(_localctx, 804, GQLParser::RuleNodeReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3746);
    elementVariableReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SourcePredicatePart2Context ------------------------------------------------------------------

GQLParser::SourcePredicatePart2Context::SourcePredicatePart2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SourcePredicatePart2Context::IS() {
  return getToken(GQLParser::IS, 0);
}

tree::TerminalNode* GQLParser::SourcePredicatePart2Context::SOURCE() {
  return getToken(GQLParser::SOURCE, 0);
}

tree::TerminalNode* GQLParser::SourcePredicatePart2Context::OF() {
  return getToken(GQLParser::OF, 0);
}

GQLParser::EdgeReferenceContext* GQLParser::SourcePredicatePart2Context::edgeReference() {
  return getRuleContext<GQLParser::EdgeReferenceContext>(0);
}

tree::TerminalNode* GQLParser::SourcePredicatePart2Context::NOT() {
  return getToken(GQLParser::NOT, 0);
}


size_t GQLParser::SourcePredicatePart2Context::getRuleIndex() const {
  return GQLParser::RuleSourcePredicatePart2;
}


GQLParser::SourcePredicatePart2Context* GQLParser::sourcePredicatePart2() {
  SourcePredicatePart2Context *_localctx = _tracker.createInstance<SourcePredicatePart2Context>(_ctx, getState());
  enterRule(_localctx, 806, GQLParser::RuleSourcePredicatePart2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3748);
    match(GQLParser::IS);
    setState(3750);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::NOT) {
      setState(3749);
      match(GQLParser::NOT);
    }
    setState(3752);
    match(GQLParser::SOURCE);
    setState(3753);
    match(GQLParser::OF);
    setState(3754);
    edgeReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DestinationPredicatePart2Context ------------------------------------------------------------------

GQLParser::DestinationPredicatePart2Context::DestinationPredicatePart2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DestinationPredicatePart2Context::IS() {
  return getToken(GQLParser::IS, 0);
}

tree::TerminalNode* GQLParser::DestinationPredicatePart2Context::DESTINATION() {
  return getToken(GQLParser::DESTINATION, 0);
}

tree::TerminalNode* GQLParser::DestinationPredicatePart2Context::OF() {
  return getToken(GQLParser::OF, 0);
}

GQLParser::EdgeReferenceContext* GQLParser::DestinationPredicatePart2Context::edgeReference() {
  return getRuleContext<GQLParser::EdgeReferenceContext>(0);
}

tree::TerminalNode* GQLParser::DestinationPredicatePart2Context::NOT() {
  return getToken(GQLParser::NOT, 0);
}


size_t GQLParser::DestinationPredicatePart2Context::getRuleIndex() const {
  return GQLParser::RuleDestinationPredicatePart2;
}


GQLParser::DestinationPredicatePart2Context* GQLParser::destinationPredicatePart2() {
  DestinationPredicatePart2Context *_localctx = _tracker.createInstance<DestinationPredicatePart2Context>(_ctx, getState());
  enterRule(_localctx, 808, GQLParser::RuleDestinationPredicatePart2);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3756);
    match(GQLParser::IS);
    setState(3758);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::NOT) {
      setState(3757);
      match(GQLParser::NOT);
    }
    setState(3760);
    match(GQLParser::DESTINATION);
    setState(3761);
    match(GQLParser::OF);
    setState(3762);
    edgeReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeReferenceContext ------------------------------------------------------------------

GQLParser::EdgeReferenceContext::EdgeReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ElementVariableReferenceContext* GQLParser::EdgeReferenceContext::elementVariableReference() {
  return getRuleContext<GQLParser::ElementVariableReferenceContext>(0);
}


size_t GQLParser::EdgeReferenceContext::getRuleIndex() const {
  return GQLParser::RuleEdgeReference;
}


GQLParser::EdgeReferenceContext* GQLParser::edgeReference() {
  EdgeReferenceContext *_localctx = _tracker.createInstance<EdgeReferenceContext>(_ctx, getState());
  enterRule(_localctx, 810, GQLParser::RuleEdgeReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3764);
    elementVariableReference();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- All_differentPredicateContext ------------------------------------------------------------------

GQLParser::All_differentPredicateContext::All_differentPredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::All_differentPredicateContext::ALL_DIFFERENT() {
  return getToken(GQLParser::ALL_DIFFERENT, 0);
}

tree::TerminalNode* GQLParser::All_differentPredicateContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

std::vector<GQLParser::ElementVariableReferenceContext *> GQLParser::All_differentPredicateContext::elementVariableReference() {
  return getRuleContexts<GQLParser::ElementVariableReferenceContext>();
}

GQLParser::ElementVariableReferenceContext* GQLParser::All_differentPredicateContext::elementVariableReference(size_t i) {
  return getRuleContext<GQLParser::ElementVariableReferenceContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::All_differentPredicateContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::All_differentPredicateContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}

tree::TerminalNode* GQLParser::All_differentPredicateContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::All_differentPredicateContext::getRuleIndex() const {
  return GQLParser::RuleAll_differentPredicate;
}


GQLParser::All_differentPredicateContext* GQLParser::all_differentPredicate() {
  All_differentPredicateContext *_localctx = _tracker.createInstance<All_differentPredicateContext>(_ctx, getState());
  enterRule(_localctx, 812, GQLParser::RuleAll_differentPredicate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3766);
    match(GQLParser::ALL_DIFFERENT);
    setState(3767);
    match(GQLParser::LEFT_PAREN);
    setState(3768);
    elementVariableReference();
    setState(3769);
    match(GQLParser::COMMA);
    setState(3770);
    elementVariableReference();
    setState(3775);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(3771);
      match(GQLParser::COMMA);
      setState(3772);
      elementVariableReference();
      setState(3777);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3778);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SamePredicateContext ------------------------------------------------------------------

GQLParser::SamePredicateContext::SamePredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SamePredicateContext::SAME() {
  return getToken(GQLParser::SAME, 0);
}

tree::TerminalNode* GQLParser::SamePredicateContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

std::vector<GQLParser::ElementVariableReferenceContext *> GQLParser::SamePredicateContext::elementVariableReference() {
  return getRuleContexts<GQLParser::ElementVariableReferenceContext>();
}

GQLParser::ElementVariableReferenceContext* GQLParser::SamePredicateContext::elementVariableReference(size_t i) {
  return getRuleContext<GQLParser::ElementVariableReferenceContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::SamePredicateContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::SamePredicateContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}

tree::TerminalNode* GQLParser::SamePredicateContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::SamePredicateContext::getRuleIndex() const {
  return GQLParser::RuleSamePredicate;
}


GQLParser::SamePredicateContext* GQLParser::samePredicate() {
  SamePredicateContext *_localctx = _tracker.createInstance<SamePredicateContext>(_ctx, getState());
  enterRule(_localctx, 814, GQLParser::RuleSamePredicate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3780);
    match(GQLParser::SAME);
    setState(3781);
    match(GQLParser::LEFT_PAREN);
    setState(3782);
    elementVariableReference();
    setState(3783);
    match(GQLParser::COMMA);
    setState(3784);
    elementVariableReference();
    setState(3789);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(3785);
      match(GQLParser::COMMA);
      setState(3786);
      elementVariableReference();
      setState(3791);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3792);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Property_existsPredicateContext ------------------------------------------------------------------

GQLParser::Property_existsPredicateContext::Property_existsPredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::Property_existsPredicateContext::PROPERTY_EXISTS() {
  return getToken(GQLParser::PROPERTY_EXISTS, 0);
}

tree::TerminalNode* GQLParser::Property_existsPredicateContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ElementVariableReferenceContext* GQLParser::Property_existsPredicateContext::elementVariableReference() {
  return getRuleContext<GQLParser::ElementVariableReferenceContext>(0);
}

tree::TerminalNode* GQLParser::Property_existsPredicateContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

GQLParser::PropertyNameContext* GQLParser::Property_existsPredicateContext::propertyName() {
  return getRuleContext<GQLParser::PropertyNameContext>(0);
}

tree::TerminalNode* GQLParser::Property_existsPredicateContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::Property_existsPredicateContext::getRuleIndex() const {
  return GQLParser::RuleProperty_existsPredicate;
}


GQLParser::Property_existsPredicateContext* GQLParser::property_existsPredicate() {
  Property_existsPredicateContext *_localctx = _tracker.createInstance<Property_existsPredicateContext>(_ctx, getState());
  enterRule(_localctx, 816, GQLParser::RuleProperty_existsPredicate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3794);
    match(GQLParser::PROPERTY_EXISTS);
    setState(3795);
    match(GQLParser::LEFT_PAREN);
    setState(3796);
    elementVariableReference();
    setState(3797);
    match(GQLParser::COMMA);
    setState(3798);
    propertyName();
    setState(3799);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueExpressionContext ------------------------------------------------------------------

GQLParser::ValueExpressionContext::ValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t GQLParser::ValueExpressionContext::getRuleIndex() const {
  return GQLParser::RuleValueExpression;
}

void GQLParser::ValueExpressionContext::copyFrom(ValueExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ConjunctiveExprAltContext ------------------------------------------------------------------

std::vector<GQLParser::ValueExpressionContext *> GQLParser::ConjunctiveExprAltContext::valueExpression() {
  return getRuleContexts<GQLParser::ValueExpressionContext>();
}

GQLParser::ValueExpressionContext* GQLParser::ConjunctiveExprAltContext::valueExpression(size_t i) {
  return getRuleContext<GQLParser::ValueExpressionContext>(i);
}

tree::TerminalNode* GQLParser::ConjunctiveExprAltContext::AND() {
  return getToken(GQLParser::AND, 0);
}

GQLParser::ConjunctiveExprAltContext::ConjunctiveExprAltContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


//----------------- PropertyGraphExprAltContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::PropertyGraphExprAltContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

GQLParser::GraphExpressionContext* GQLParser::PropertyGraphExprAltContext::graphExpression() {
  return getRuleContext<GQLParser::GraphExpressionContext>(0);
}

tree::TerminalNode* GQLParser::PropertyGraphExprAltContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

GQLParser::PropertyGraphExprAltContext::PropertyGraphExprAltContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


//----------------- MultDivExprAltContext ------------------------------------------------------------------

std::vector<GQLParser::ValueExpressionContext *> GQLParser::MultDivExprAltContext::valueExpression() {
  return getRuleContexts<GQLParser::ValueExpressionContext>();
}

GQLParser::ValueExpressionContext* GQLParser::MultDivExprAltContext::valueExpression(size_t i) {
  return getRuleContext<GQLParser::ValueExpressionContext>(i);
}

tree::TerminalNode* GQLParser::MultDivExprAltContext::ASTERISK() {
  return getToken(GQLParser::ASTERISK, 0);
}

tree::TerminalNode* GQLParser::MultDivExprAltContext::SOLIDUS() {
  return getToken(GQLParser::SOLIDUS, 0);
}

GQLParser::MultDivExprAltContext::MultDivExprAltContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


//----------------- BindingTableExprAltContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::BindingTableExprAltContext::TABLE() {
  return getToken(GQLParser::TABLE, 0);
}

GQLParser::BindingTableExpressionContext* GQLParser::BindingTableExprAltContext::bindingTableExpression() {
  return getRuleContext<GQLParser::BindingTableExpressionContext>(0);
}

tree::TerminalNode* GQLParser::BindingTableExprAltContext::BINDING() {
  return getToken(GQLParser::BINDING, 0);
}

GQLParser::BindingTableExprAltContext::BindingTableExprAltContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


//----------------- SignedExprAltContext ------------------------------------------------------------------

GQLParser::ValueExpressionContext* GQLParser::SignedExprAltContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::SignedExprAltContext::PLUS_SIGN() {
  return getToken(GQLParser::PLUS_SIGN, 0);
}

tree::TerminalNode* GQLParser::SignedExprAltContext::MINUS_SIGN() {
  return getToken(GQLParser::MINUS_SIGN, 0);
}

GQLParser::SignedExprAltContext::SignedExprAltContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


//----------------- IsNotExprAltContext ------------------------------------------------------------------

GQLParser::ValueExpressionContext* GQLParser::IsNotExprAltContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::IsNotExprAltContext::IS() {
  return getToken(GQLParser::IS, 0);
}

GQLParser::TruthValueContext* GQLParser::IsNotExprAltContext::truthValue() {
  return getRuleContext<GQLParser::TruthValueContext>(0);
}

tree::TerminalNode* GQLParser::IsNotExprAltContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}

GQLParser::IsNotExprAltContext::IsNotExprAltContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


//----------------- NormalizedPredicateExprAltContext ------------------------------------------------------------------

GQLParser::ValueExpressionContext* GQLParser::NormalizedPredicateExprAltContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}

GQLParser::NormalizedPredicatePart2Context* GQLParser::NormalizedPredicateExprAltContext::normalizedPredicatePart2() {
  return getRuleContext<GQLParser::NormalizedPredicatePart2Context>(0);
}

GQLParser::NormalizedPredicateExprAltContext::NormalizedPredicateExprAltContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


//----------------- NotExprAltContext ------------------------------------------------------------------

tree::TerminalNode* GQLParser::NotExprAltContext::NOT() {
  return getToken(GQLParser::NOT, 0);
}

GQLParser::ValueExpressionContext* GQLParser::NotExprAltContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}

GQLParser::NotExprAltContext::NotExprAltContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


//----------------- ValueFunctionExprAltContext ------------------------------------------------------------------

GQLParser::ValueFunctionContext* GQLParser::ValueFunctionExprAltContext::valueFunction() {
  return getRuleContext<GQLParser::ValueFunctionContext>(0);
}

GQLParser::ValueFunctionExprAltContext::ValueFunctionExprAltContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


//----------------- ConcatenationExprAltContext ------------------------------------------------------------------

std::vector<GQLParser::ValueExpressionContext *> GQLParser::ConcatenationExprAltContext::valueExpression() {
  return getRuleContexts<GQLParser::ValueExpressionContext>();
}

GQLParser::ValueExpressionContext* GQLParser::ConcatenationExprAltContext::valueExpression(size_t i) {
  return getRuleContext<GQLParser::ValueExpressionContext>(i);
}

tree::TerminalNode* GQLParser::ConcatenationExprAltContext::CONCATENATION_OPERATOR() {
  return getToken(GQLParser::CONCATENATION_OPERATOR, 0);
}

GQLParser::ConcatenationExprAltContext::ConcatenationExprAltContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


//----------------- DisjunctiveExprAltContext ------------------------------------------------------------------

std::vector<GQLParser::ValueExpressionContext *> GQLParser::DisjunctiveExprAltContext::valueExpression() {
  return getRuleContexts<GQLParser::ValueExpressionContext>();
}

GQLParser::ValueExpressionContext* GQLParser::DisjunctiveExprAltContext::valueExpression(size_t i) {
  return getRuleContext<GQLParser::ValueExpressionContext>(i);
}

tree::TerminalNode* GQLParser::DisjunctiveExprAltContext::OR() {
  return getToken(GQLParser::OR, 0);
}

tree::TerminalNode* GQLParser::DisjunctiveExprAltContext::XOR() {
  return getToken(GQLParser::XOR, 0);
}

GQLParser::DisjunctiveExprAltContext::DisjunctiveExprAltContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


//----------------- ComparisonExprAltContext ------------------------------------------------------------------

std::vector<GQLParser::ValueExpressionContext *> GQLParser::ComparisonExprAltContext::valueExpression() {
  return getRuleContexts<GQLParser::ValueExpressionContext>();
}

GQLParser::ValueExpressionContext* GQLParser::ComparisonExprAltContext::valueExpression(size_t i) {
  return getRuleContext<GQLParser::ValueExpressionContext>(i);
}

GQLParser::CompOpContext* GQLParser::ComparisonExprAltContext::compOp() {
  return getRuleContext<GQLParser::CompOpContext>(0);
}

GQLParser::ComparisonExprAltContext::ComparisonExprAltContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


//----------------- PrimaryExprAltContext ------------------------------------------------------------------

GQLParser::ValueExpressionPrimaryContext* GQLParser::PrimaryExprAltContext::valueExpressionPrimary() {
  return getRuleContext<GQLParser::ValueExpressionPrimaryContext>(0);
}

GQLParser::PrimaryExprAltContext::PrimaryExprAltContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


//----------------- AddSubtractExprAltContext ------------------------------------------------------------------

std::vector<GQLParser::ValueExpressionContext *> GQLParser::AddSubtractExprAltContext::valueExpression() {
  return getRuleContexts<GQLParser::ValueExpressionContext>();
}

GQLParser::ValueExpressionContext* GQLParser::AddSubtractExprAltContext::valueExpression(size_t i) {
  return getRuleContext<GQLParser::ValueExpressionContext>(i);
}

tree::TerminalNode* GQLParser::AddSubtractExprAltContext::PLUS_SIGN() {
  return getToken(GQLParser::PLUS_SIGN, 0);
}

tree::TerminalNode* GQLParser::AddSubtractExprAltContext::MINUS_SIGN() {
  return getToken(GQLParser::MINUS_SIGN, 0);
}

GQLParser::AddSubtractExprAltContext::AddSubtractExprAltContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


//----------------- PredicateExprAltContext ------------------------------------------------------------------

GQLParser::PredicateContext* GQLParser::PredicateExprAltContext::predicate() {
  return getRuleContext<GQLParser::PredicateContext>(0);
}

GQLParser::PredicateExprAltContext::PredicateExprAltContext(ValueExpressionContext *ctx) { copyFrom(ctx); }



GQLParser::ValueExpressionContext* GQLParser::valueExpression() {
   return valueExpression(0);
}

GQLParser::ValueExpressionContext* GQLParser::valueExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  GQLParser::ValueExpressionContext *_localctx = _tracker.createInstance<ValueExpressionContext>(_ctx, parentState);
  GQLParser::ValueExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 818;
  enterRecursionRule(_localctx, 818, GQLParser::RuleValueExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3819);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 433, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<SignedExprAltContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(3802);
      antlrcpp::downCast<SignedExprAltContext *>(_localctx)->sign = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == GQLParser::MINUS_SIGN

      || _la == GQLParser::PLUS_SIGN)) {
        antlrcpp::downCast<SignedExprAltContext *>(_localctx)->sign = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(3803);
      valueExpression(15);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<PredicateExprAltContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3804);
      predicate();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<NotExprAltContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3805);
      match(GQLParser::NOT);
      setState(3806);
      valueExpression(8);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<PropertyGraphExprAltContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3808);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::PROPERTY) {
        setState(3807);
        match(GQLParser::PROPERTY);
      }
      setState(3810);
      match(GQLParser::GRAPH);
      setState(3811);
      graphExpression();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<BindingTableExprAltContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3813);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::BINDING) {
        setState(3812);
        match(GQLParser::BINDING);
      }
      setState(3815);
      match(GQLParser::TABLE);
      setState(3816);
      bindingTableExpression();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<ValueFunctionExprAltContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3817);
      valueFunction();
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<PrimaryExprAltContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3818);
      valueExpressionPrimary(0);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(3850);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 436, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(3848);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 435, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<MultDivExprAltContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(3821);

          if (!(precpred(_ctx, 14))) throw FailedPredicateException(this, "precpred(_ctx, 14)");
          setState(3822);
          antlrcpp::downCast<MultDivExprAltContext *>(_localctx)->operator_ = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GQLParser::ASTERISK

          || _la == GQLParser::SOLIDUS)) {
            antlrcpp::downCast<MultDivExprAltContext *>(_localctx)->operator_ = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(3823);
          valueExpression(15);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<AddSubtractExprAltContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(3824);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
          setState(3825);
          antlrcpp::downCast<AddSubtractExprAltContext *>(_localctx)->operator_ = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GQLParser::MINUS_SIGN

          || _la == GQLParser::PLUS_SIGN)) {
            antlrcpp::downCast<AddSubtractExprAltContext *>(_localctx)->operator_ = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(3826);
          valueExpression(14);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<ConcatenationExprAltContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(3827);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(3828);
          match(GQLParser::CONCATENATION_OPERATOR);
          setState(3829);
          valueExpression(13);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<ComparisonExprAltContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(3830);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
          setState(3831);
          compOp();
          setState(3832);
          valueExpression(12);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<ConjunctiveExprAltContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(3834);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(3835);
          match(GQLParser::AND);
          setState(3836);
          valueExpression(7);
          break;
        }

        case 6: {
          auto newContext = _tracker.createInstance<DisjunctiveExprAltContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(3837);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(3838);
          antlrcpp::downCast<DisjunctiveExprAltContext *>(_localctx)->operator_ = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GQLParser::OR || _la == GQLParser::XOR)) {
            antlrcpp::downCast<DisjunctiveExprAltContext *>(_localctx)->operator_ = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(3839);
          valueExpression(6);
          break;
        }

        case 7: {
          auto newContext = _tracker.createInstance<NormalizedPredicateExprAltContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(3840);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(3841);
          normalizedPredicatePart2();
          break;
        }

        case 8: {
          auto newContext = _tracker.createInstance<IsNotExprAltContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(3842);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(3843);
          match(GQLParser::IS);
          setState(3845);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == GQLParser::NOT) {
            setState(3844);
            match(GQLParser::NOT);
          }
          setState(3847);
          truthValue();
          break;
        }

        default:
          break;
        } 
      }
      setState(3852);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 436, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ValueFunctionContext ------------------------------------------------------------------

GQLParser::ValueFunctionContext::ValueFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NumericValueFunctionContext* GQLParser::ValueFunctionContext::numericValueFunction() {
  return getRuleContext<GQLParser::NumericValueFunctionContext>(0);
}

GQLParser::DatetimeSubtractionContext* GQLParser::ValueFunctionContext::datetimeSubtraction() {
  return getRuleContext<GQLParser::DatetimeSubtractionContext>(0);
}

GQLParser::DatetimeValueFunctionContext* GQLParser::ValueFunctionContext::datetimeValueFunction() {
  return getRuleContext<GQLParser::DatetimeValueFunctionContext>(0);
}

GQLParser::DurationValueFunctionContext* GQLParser::ValueFunctionContext::durationValueFunction() {
  return getRuleContext<GQLParser::DurationValueFunctionContext>(0);
}

GQLParser::CharacterOrByteStringFunctionContext* GQLParser::ValueFunctionContext::characterOrByteStringFunction() {
  return getRuleContext<GQLParser::CharacterOrByteStringFunctionContext>(0);
}

GQLParser::ListValueFunctionContext* GQLParser::ValueFunctionContext::listValueFunction() {
  return getRuleContext<GQLParser::ListValueFunctionContext>(0);
}


size_t GQLParser::ValueFunctionContext::getRuleIndex() const {
  return GQLParser::RuleValueFunction;
}


GQLParser::ValueFunctionContext* GQLParser::valueFunction() {
  ValueFunctionContext *_localctx = _tracker.createInstance<ValueFunctionContext>(_ctx, getState());
  enterRule(_localctx, 820, GQLParser::RuleValueFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3859);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 437, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3853);
      numericValueFunction();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3854);
      datetimeSubtraction();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3855);
      datetimeValueFunction();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3856);
      durationValueFunction();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3857);
      characterOrByteStringFunction();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(3858);
      listValueFunction();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanValueExpressionContext ------------------------------------------------------------------

GQLParser::BooleanValueExpressionContext::BooleanValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionContext* GQLParser::BooleanValueExpressionContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::BooleanValueExpressionContext::getRuleIndex() const {
  return GQLParser::RuleBooleanValueExpression;
}


GQLParser::BooleanValueExpressionContext* GQLParser::booleanValueExpression() {
  BooleanValueExpressionContext *_localctx = _tracker.createInstance<BooleanValueExpressionContext>(_ctx, getState());
  enterRule(_localctx, 822, GQLParser::RuleBooleanValueExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3861);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharacterOrByteStringFunctionContext ------------------------------------------------------------------

GQLParser::CharacterOrByteStringFunctionContext::CharacterOrByteStringFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SubCharacterOrByteStringContext* GQLParser::CharacterOrByteStringFunctionContext::subCharacterOrByteString() {
  return getRuleContext<GQLParser::SubCharacterOrByteStringContext>(0);
}

GQLParser::TrimSingleCharacterOrByteStringContext* GQLParser::CharacterOrByteStringFunctionContext::trimSingleCharacterOrByteString() {
  return getRuleContext<GQLParser::TrimSingleCharacterOrByteStringContext>(0);
}

GQLParser::FoldCharacterStringContext* GQLParser::CharacterOrByteStringFunctionContext::foldCharacterString() {
  return getRuleContext<GQLParser::FoldCharacterStringContext>(0);
}

GQLParser::TrimMultiCharacterCharacterStringContext* GQLParser::CharacterOrByteStringFunctionContext::trimMultiCharacterCharacterString() {
  return getRuleContext<GQLParser::TrimMultiCharacterCharacterStringContext>(0);
}

GQLParser::NormalizeCharacterStringContext* GQLParser::CharacterOrByteStringFunctionContext::normalizeCharacterString() {
  return getRuleContext<GQLParser::NormalizeCharacterStringContext>(0);
}


size_t GQLParser::CharacterOrByteStringFunctionContext::getRuleIndex() const {
  return GQLParser::RuleCharacterOrByteStringFunction;
}


GQLParser::CharacterOrByteStringFunctionContext* GQLParser::characterOrByteStringFunction() {
  CharacterOrByteStringFunctionContext *_localctx = _tracker.createInstance<CharacterOrByteStringFunctionContext>(_ctx, getState());
  enterRule(_localctx, 824, GQLParser::RuleCharacterOrByteStringFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3868);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LEFT:
      case GQLParser::RIGHT: {
        enterOuterAlt(_localctx, 1);
        setState(3863);
        subCharacterOrByteString();
        break;
      }

      case GQLParser::TRIM: {
        enterOuterAlt(_localctx, 2);
        setState(3864);
        trimSingleCharacterOrByteString();
        break;
      }

      case GQLParser::LOWER:
      case GQLParser::UPPER: {
        enterOuterAlt(_localctx, 3);
        setState(3865);
        foldCharacterString();
        break;
      }

      case GQLParser::BTRIM:
      case GQLParser::LTRIM:
      case GQLParser::RTRIM: {
        enterOuterAlt(_localctx, 4);
        setState(3866);
        trimMultiCharacterCharacterString();
        break;
      }

      case GQLParser::NORMALIZE: {
        enterOuterAlt(_localctx, 5);
        setState(3867);
        normalizeCharacterString();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubCharacterOrByteStringContext ------------------------------------------------------------------

GQLParser::SubCharacterOrByteStringContext::SubCharacterOrByteStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SubCharacterOrByteStringContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ValueExpressionContext* GQLParser::SubCharacterOrByteStringContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::SubCharacterOrByteStringContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

GQLParser::StringLengthContext* GQLParser::SubCharacterOrByteStringContext::stringLength() {
  return getRuleContext<GQLParser::StringLengthContext>(0);
}

tree::TerminalNode* GQLParser::SubCharacterOrByteStringContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::SubCharacterOrByteStringContext::LEFT() {
  return getToken(GQLParser::LEFT, 0);
}

tree::TerminalNode* GQLParser::SubCharacterOrByteStringContext::RIGHT() {
  return getToken(GQLParser::RIGHT, 0);
}


size_t GQLParser::SubCharacterOrByteStringContext::getRuleIndex() const {
  return GQLParser::RuleSubCharacterOrByteString;
}


GQLParser::SubCharacterOrByteStringContext* GQLParser::subCharacterOrByteString() {
  SubCharacterOrByteStringContext *_localctx = _tracker.createInstance<SubCharacterOrByteStringContext>(_ctx, getState());
  enterRule(_localctx, 826, GQLParser::RuleSubCharacterOrByteString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3870);
    _la = _input->LA(1);
    if (!(_la == GQLParser::LEFT

    || _la == GQLParser::RIGHT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3871);
    match(GQLParser::LEFT_PAREN);
    setState(3872);
    valueExpression(0);
    setState(3873);
    match(GQLParser::COMMA);
    setState(3874);
    stringLength();
    setState(3875);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrimSingleCharacterOrByteStringContext ------------------------------------------------------------------

GQLParser::TrimSingleCharacterOrByteStringContext::TrimSingleCharacterOrByteStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TrimSingleCharacterOrByteStringContext::TRIM() {
  return getToken(GQLParser::TRIM, 0);
}

tree::TerminalNode* GQLParser::TrimSingleCharacterOrByteStringContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::TrimOperandsContext* GQLParser::TrimSingleCharacterOrByteStringContext::trimOperands() {
  return getRuleContext<GQLParser::TrimOperandsContext>(0);
}

tree::TerminalNode* GQLParser::TrimSingleCharacterOrByteStringContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::TrimSingleCharacterOrByteStringContext::getRuleIndex() const {
  return GQLParser::RuleTrimSingleCharacterOrByteString;
}


GQLParser::TrimSingleCharacterOrByteStringContext* GQLParser::trimSingleCharacterOrByteString() {
  TrimSingleCharacterOrByteStringContext *_localctx = _tracker.createInstance<TrimSingleCharacterOrByteStringContext>(_ctx, getState());
  enterRule(_localctx, 828, GQLParser::RuleTrimSingleCharacterOrByteString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3877);
    match(GQLParser::TRIM);
    setState(3878);
    match(GQLParser::LEFT_PAREN);
    setState(3879);
    trimOperands();
    setState(3880);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FoldCharacterStringContext ------------------------------------------------------------------

GQLParser::FoldCharacterStringContext::FoldCharacterStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FoldCharacterStringContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ValueExpressionContext* GQLParser::FoldCharacterStringContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::FoldCharacterStringContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::FoldCharacterStringContext::UPPER() {
  return getToken(GQLParser::UPPER, 0);
}

tree::TerminalNode* GQLParser::FoldCharacterStringContext::LOWER() {
  return getToken(GQLParser::LOWER, 0);
}


size_t GQLParser::FoldCharacterStringContext::getRuleIndex() const {
  return GQLParser::RuleFoldCharacterString;
}


GQLParser::FoldCharacterStringContext* GQLParser::foldCharacterString() {
  FoldCharacterStringContext *_localctx = _tracker.createInstance<FoldCharacterStringContext>(_ctx, getState());
  enterRule(_localctx, 830, GQLParser::RuleFoldCharacterString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3882);
    _la = _input->LA(1);
    if (!(_la == GQLParser::LOWER || _la == GQLParser::UPPER)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3883);
    match(GQLParser::LEFT_PAREN);
    setState(3884);
    valueExpression(0);
    setState(3885);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrimMultiCharacterCharacterStringContext ------------------------------------------------------------------

GQLParser::TrimMultiCharacterCharacterStringContext::TrimMultiCharacterCharacterStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TrimMultiCharacterCharacterStringContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

std::vector<GQLParser::ValueExpressionContext *> GQLParser::TrimMultiCharacterCharacterStringContext::valueExpression() {
  return getRuleContexts<GQLParser::ValueExpressionContext>();
}

GQLParser::ValueExpressionContext* GQLParser::TrimMultiCharacterCharacterStringContext::valueExpression(size_t i) {
  return getRuleContext<GQLParser::ValueExpressionContext>(i);
}

tree::TerminalNode* GQLParser::TrimMultiCharacterCharacterStringContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::TrimMultiCharacterCharacterStringContext::BTRIM() {
  return getToken(GQLParser::BTRIM, 0);
}

tree::TerminalNode* GQLParser::TrimMultiCharacterCharacterStringContext::LTRIM() {
  return getToken(GQLParser::LTRIM, 0);
}

tree::TerminalNode* GQLParser::TrimMultiCharacterCharacterStringContext::RTRIM() {
  return getToken(GQLParser::RTRIM, 0);
}

tree::TerminalNode* GQLParser::TrimMultiCharacterCharacterStringContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}


size_t GQLParser::TrimMultiCharacterCharacterStringContext::getRuleIndex() const {
  return GQLParser::RuleTrimMultiCharacterCharacterString;
}


GQLParser::TrimMultiCharacterCharacterStringContext* GQLParser::trimMultiCharacterCharacterString() {
  TrimMultiCharacterCharacterStringContext *_localctx = _tracker.createInstance<TrimMultiCharacterCharacterStringContext>(_ctx, getState());
  enterRule(_localctx, 832, GQLParser::RuleTrimMultiCharacterCharacterString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3887);
    _la = _input->LA(1);
    if (!(_la == GQLParser::BTRIM || _la == GQLParser::LTRIM

    || _la == GQLParser::RTRIM)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(3888);
    match(GQLParser::LEFT_PAREN);
    setState(3889);
    valueExpression(0);
    setState(3892);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::COMMA) {
      setState(3890);
      match(GQLParser::COMMA);
      setState(3891);
      valueExpression(0);
    }
    setState(3894);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalizeCharacterStringContext ------------------------------------------------------------------

GQLParser::NormalizeCharacterStringContext::NormalizeCharacterStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NormalizeCharacterStringContext::NORMALIZE() {
  return getToken(GQLParser::NORMALIZE, 0);
}

tree::TerminalNode* GQLParser::NormalizeCharacterStringContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ValueExpressionContext* GQLParser::NormalizeCharacterStringContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::NormalizeCharacterStringContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::NormalizeCharacterStringContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

GQLParser::NormalFormContext* GQLParser::NormalizeCharacterStringContext::normalForm() {
  return getRuleContext<GQLParser::NormalFormContext>(0);
}


size_t GQLParser::NormalizeCharacterStringContext::getRuleIndex() const {
  return GQLParser::RuleNormalizeCharacterString;
}


GQLParser::NormalizeCharacterStringContext* GQLParser::normalizeCharacterString() {
  NormalizeCharacterStringContext *_localctx = _tracker.createInstance<NormalizeCharacterStringContext>(_ctx, getState());
  enterRule(_localctx, 834, GQLParser::RuleNormalizeCharacterString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3896);
    match(GQLParser::NORMALIZE);
    setState(3897);
    match(GQLParser::LEFT_PAREN);
    setState(3898);
    valueExpression(0);
    setState(3901);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::COMMA) {
      setState(3899);
      match(GQLParser::COMMA);
      setState(3900);
      normalForm();
    }
    setState(3903);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeReferenceValueExpressionContext ------------------------------------------------------------------

GQLParser::NodeReferenceValueExpressionContext::NodeReferenceValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionPrimaryContext* GQLParser::NodeReferenceValueExpressionContext::valueExpressionPrimary() {
  return getRuleContext<GQLParser::ValueExpressionPrimaryContext>(0);
}


size_t GQLParser::NodeReferenceValueExpressionContext::getRuleIndex() const {
  return GQLParser::RuleNodeReferenceValueExpression;
}


GQLParser::NodeReferenceValueExpressionContext* GQLParser::nodeReferenceValueExpression() {
  NodeReferenceValueExpressionContext *_localctx = _tracker.createInstance<NodeReferenceValueExpressionContext>(_ctx, getState());
  enterRule(_localctx, 836, GQLParser::RuleNodeReferenceValueExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3905);
    valueExpressionPrimary(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeReferenceValueExpressionContext ------------------------------------------------------------------

GQLParser::EdgeReferenceValueExpressionContext::EdgeReferenceValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionPrimaryContext* GQLParser::EdgeReferenceValueExpressionContext::valueExpressionPrimary() {
  return getRuleContext<GQLParser::ValueExpressionPrimaryContext>(0);
}


size_t GQLParser::EdgeReferenceValueExpressionContext::getRuleIndex() const {
  return GQLParser::RuleEdgeReferenceValueExpression;
}


GQLParser::EdgeReferenceValueExpressionContext* GQLParser::edgeReferenceValueExpression() {
  EdgeReferenceValueExpressionContext *_localctx = _tracker.createInstance<EdgeReferenceValueExpressionContext>(_ctx, getState());
  enterRule(_localctx, 838, GQLParser::RuleEdgeReferenceValueExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3907);
    valueExpressionPrimary(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AggregatingValueExpressionContext ------------------------------------------------------------------

GQLParser::AggregatingValueExpressionContext::AggregatingValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionContext* GQLParser::AggregatingValueExpressionContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::AggregatingValueExpressionContext::getRuleIndex() const {
  return GQLParser::RuleAggregatingValueExpression;
}


GQLParser::AggregatingValueExpressionContext* GQLParser::aggregatingValueExpression() {
  AggregatingValueExpressionContext *_localctx = _tracker.createInstance<AggregatingValueExpressionContext>(_ctx, getState());
  enterRule(_localctx, 840, GQLParser::RuleAggregatingValueExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3909);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueExpressionPrimaryContext ------------------------------------------------------------------

GQLParser::ValueExpressionPrimaryContext::ValueExpressionPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ParenthesizedValueExpressionContext* GQLParser::ValueExpressionPrimaryContext::parenthesizedValueExpression() {
  return getRuleContext<GQLParser::ParenthesizedValueExpressionContext>(0);
}

GQLParser::AggregateFunctionContext* GQLParser::ValueExpressionPrimaryContext::aggregateFunction() {
  return getRuleContext<GQLParser::AggregateFunctionContext>(0);
}

GQLParser::UnsignedValueSpecificationContext* GQLParser::ValueExpressionPrimaryContext::unsignedValueSpecification() {
  return getRuleContext<GQLParser::UnsignedValueSpecificationContext>(0);
}

GQLParser::PathValueConstructorContext* GQLParser::ValueExpressionPrimaryContext::pathValueConstructor() {
  return getRuleContext<GQLParser::PathValueConstructorContext>(0);
}

GQLParser::ValueQueryExpressionContext* GQLParser::ValueExpressionPrimaryContext::valueQueryExpression() {
  return getRuleContext<GQLParser::ValueQueryExpressionContext>(0);
}

GQLParser::CaseExpressionContext* GQLParser::ValueExpressionPrimaryContext::caseExpression() {
  return getRuleContext<GQLParser::CaseExpressionContext>(0);
}

GQLParser::CastSpecificationContext* GQLParser::ValueExpressionPrimaryContext::castSpecification() {
  return getRuleContext<GQLParser::CastSpecificationContext>(0);
}

GQLParser::Element_idFunctionContext* GQLParser::ValueExpressionPrimaryContext::element_idFunction() {
  return getRuleContext<GQLParser::Element_idFunctionContext>(0);
}

GQLParser::LetValueExpressionContext* GQLParser::ValueExpressionPrimaryContext::letValueExpression() {
  return getRuleContext<GQLParser::LetValueExpressionContext>(0);
}

GQLParser::BindingVariableReferenceContext* GQLParser::ValueExpressionPrimaryContext::bindingVariableReference() {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(0);
}

GQLParser::ValueExpressionPrimaryContext* GQLParser::ValueExpressionPrimaryContext::valueExpressionPrimary() {
  return getRuleContext<GQLParser::ValueExpressionPrimaryContext>(0);
}

tree::TerminalNode* GQLParser::ValueExpressionPrimaryContext::PERIOD() {
  return getToken(GQLParser::PERIOD, 0);
}

GQLParser::PropertyNameContext* GQLParser::ValueExpressionPrimaryContext::propertyName() {
  return getRuleContext<GQLParser::PropertyNameContext>(0);
}


size_t GQLParser::ValueExpressionPrimaryContext::getRuleIndex() const {
  return GQLParser::RuleValueExpressionPrimary;
}



GQLParser::ValueExpressionPrimaryContext* GQLParser::valueExpressionPrimary() {
   return valueExpressionPrimary(0);
}

GQLParser::ValueExpressionPrimaryContext* GQLParser::valueExpressionPrimary(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  GQLParser::ValueExpressionPrimaryContext *_localctx = _tracker.createInstance<ValueExpressionPrimaryContext>(_ctx, parentState);
  GQLParser::ValueExpressionPrimaryContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 842;
  enterRecursionRule(_localctx, 842, GQLParser::RuleValueExpressionPrimary, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3922);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LEFT_PAREN: {
        setState(3912);
        parenthesizedValueExpression();
        break;
      }

      case GQLParser::AVG:
      case GQLParser::COLLECT_LIST:
      case GQLParser::COUNT:
      case GQLParser::MAX:
      case GQLParser::MIN:
      case GQLParser::PERCENTILE_CONT:
      case GQLParser::PERCENTILE_DISC:
      case GQLParser::STDDEV_POP:
      case GQLParser::STDDEV_SAMP:
      case GQLParser::SUM: {
        setState(3913);
        aggregateFunction();
        break;
      }

      case GQLParser::BOOLEAN_LITERAL:
      case GQLParser::SINGLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::BYTE_STRING_LITERAL:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER:
      case GQLParser::UNSIGNED_HEXADECIMAL_INTEGER:
      case GQLParser::UNSIGNED_OCTAL_INTEGER:
      case GQLParser::UNSIGNED_BINARY_INTEGER:
      case GQLParser::ARRAY:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DURATION:
      case GQLParser::LIST:
      case GQLParser::NULL_KW:
      case GQLParser::RECORD:
      case GQLParser::SESSION_USER:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::GENERAL_PARAMETER_REFERENCE:
      case GQLParser::LEFT_BRACE:
      case GQLParser::LEFT_BRACKET: {
        setState(3914);
        unsignedValueSpecification();
        break;
      }

      case GQLParser::PATH: {
        setState(3915);
        pathValueConstructor();
        break;
      }

      case GQLParser::VALUE: {
        setState(3916);
        valueQueryExpression();
        break;
      }

      case GQLParser::CASE:
      case GQLParser::COALESCE:
      case GQLParser::NULLIF: {
        setState(3917);
        caseExpression();
        break;
      }

      case GQLParser::CAST: {
        setState(3918);
        castSpecification();
        break;
      }

      case GQLParser::ELEMENT_ID: {
        setState(3919);
        element_idFunction();
        break;
      }

      case GQLParser::LET: {
        setState(3920);
        letValueExpression();
        break;
      }

      case GQLParser::ACYCLIC:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::CONNECTING:
      case GQLParser::DESTINATION:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::EDGE:
      case GQLParser::EDGES:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENTS:
      case GQLParser::FIRST:
      case GQLParser::GRAPH:
      case GQLParser::GROUPS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODE:
      case GQLParser::NORMALIZED:
      case GQLParser::ONLY:
      case GQLParser::ORDINALITY:
      case GQLParser::PROPERTY:
      case GQLParser::READ:
      case GQLParser::RELATIONSHIP:
      case GQLParser::RELATIONSHIPS:
      case GQLParser::REPEATABLE:
      case GQLParser::SHORTEST:
      case GQLParser::SIMPLE:
      case GQLParser::SOURCE:
      case GQLParser::TABLE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRANSACTION:
      case GQLParser::TYPE:
      case GQLParser::UNDIRECTED:
      case GQLParser::VERTEX:
      case GQLParser::WALK:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::ZONE:
      case GQLParser::REGULAR_IDENTIFIER: {
        setState(3921);
        bindingVariableReference();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(3929);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 442, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<ValueExpressionPrimaryContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleValueExpressionPrimary);
        setState(3924);

        if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
        setState(3925);
        match(GQLParser::PERIOD);
        setState(3926);
        propertyName(); 
      }
      setState(3931);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 442, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ParenthesizedValueExpressionContext ------------------------------------------------------------------

GQLParser::ParenthesizedValueExpressionContext::ParenthesizedValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ParenthesizedValueExpressionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ValueExpressionContext* GQLParser::ParenthesizedValueExpressionContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::ParenthesizedValueExpressionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::ParenthesizedValueExpressionContext::getRuleIndex() const {
  return GQLParser::RuleParenthesizedValueExpression;
}


GQLParser::ParenthesizedValueExpressionContext* GQLParser::parenthesizedValueExpression() {
  ParenthesizedValueExpressionContext *_localctx = _tracker.createInstance<ParenthesizedValueExpressionContext>(_ctx, getState());
  enterRule(_localctx, 844, GQLParser::RuleParenthesizedValueExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3932);
    match(GQLParser::LEFT_PAREN);
    setState(3933);
    valueExpression(0);
    setState(3934);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NonParenthesizedValueExpressionPrimaryContext ------------------------------------------------------------------

GQLParser::NonParenthesizedValueExpressionPrimaryContext::NonParenthesizedValueExpressionPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NonParenthesizedValueExpressionPrimarySpecialCaseContext* GQLParser::NonParenthesizedValueExpressionPrimaryContext::nonParenthesizedValueExpressionPrimarySpecialCase() {
  return getRuleContext<GQLParser::NonParenthesizedValueExpressionPrimarySpecialCaseContext>(0);
}

GQLParser::BindingVariableReferenceContext* GQLParser::NonParenthesizedValueExpressionPrimaryContext::bindingVariableReference() {
  return getRuleContext<GQLParser::BindingVariableReferenceContext>(0);
}


size_t GQLParser::NonParenthesizedValueExpressionPrimaryContext::getRuleIndex() const {
  return GQLParser::RuleNonParenthesizedValueExpressionPrimary;
}


GQLParser::NonParenthesizedValueExpressionPrimaryContext* GQLParser::nonParenthesizedValueExpressionPrimary() {
  NonParenthesizedValueExpressionPrimaryContext *_localctx = _tracker.createInstance<NonParenthesizedValueExpressionPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 846, GQLParser::RuleNonParenthesizedValueExpressionPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3938);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 443, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3936);
      nonParenthesizedValueExpressionPrimarySpecialCase();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3937);
      bindingVariableReference();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NonParenthesizedValueExpressionPrimarySpecialCaseContext ------------------------------------------------------------------

GQLParser::NonParenthesizedValueExpressionPrimarySpecialCaseContext::NonParenthesizedValueExpressionPrimarySpecialCaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::AggregateFunctionContext* GQLParser::NonParenthesizedValueExpressionPrimarySpecialCaseContext::aggregateFunction() {
  return getRuleContext<GQLParser::AggregateFunctionContext>(0);
}

GQLParser::UnsignedValueSpecificationContext* GQLParser::NonParenthesizedValueExpressionPrimarySpecialCaseContext::unsignedValueSpecification() {
  return getRuleContext<GQLParser::UnsignedValueSpecificationContext>(0);
}

GQLParser::PathValueConstructorContext* GQLParser::NonParenthesizedValueExpressionPrimarySpecialCaseContext::pathValueConstructor() {
  return getRuleContext<GQLParser::PathValueConstructorContext>(0);
}

GQLParser::ValueExpressionPrimaryContext* GQLParser::NonParenthesizedValueExpressionPrimarySpecialCaseContext::valueExpressionPrimary() {
  return getRuleContext<GQLParser::ValueExpressionPrimaryContext>(0);
}

tree::TerminalNode* GQLParser::NonParenthesizedValueExpressionPrimarySpecialCaseContext::PERIOD() {
  return getToken(GQLParser::PERIOD, 0);
}

GQLParser::PropertyNameContext* GQLParser::NonParenthesizedValueExpressionPrimarySpecialCaseContext::propertyName() {
  return getRuleContext<GQLParser::PropertyNameContext>(0);
}

GQLParser::ValueQueryExpressionContext* GQLParser::NonParenthesizedValueExpressionPrimarySpecialCaseContext::valueQueryExpression() {
  return getRuleContext<GQLParser::ValueQueryExpressionContext>(0);
}

GQLParser::CaseExpressionContext* GQLParser::NonParenthesizedValueExpressionPrimarySpecialCaseContext::caseExpression() {
  return getRuleContext<GQLParser::CaseExpressionContext>(0);
}

GQLParser::CastSpecificationContext* GQLParser::NonParenthesizedValueExpressionPrimarySpecialCaseContext::castSpecification() {
  return getRuleContext<GQLParser::CastSpecificationContext>(0);
}

GQLParser::Element_idFunctionContext* GQLParser::NonParenthesizedValueExpressionPrimarySpecialCaseContext::element_idFunction() {
  return getRuleContext<GQLParser::Element_idFunctionContext>(0);
}

GQLParser::LetValueExpressionContext* GQLParser::NonParenthesizedValueExpressionPrimarySpecialCaseContext::letValueExpression() {
  return getRuleContext<GQLParser::LetValueExpressionContext>(0);
}


size_t GQLParser::NonParenthesizedValueExpressionPrimarySpecialCaseContext::getRuleIndex() const {
  return GQLParser::RuleNonParenthesizedValueExpressionPrimarySpecialCase;
}


GQLParser::NonParenthesizedValueExpressionPrimarySpecialCaseContext* GQLParser::nonParenthesizedValueExpressionPrimarySpecialCase() {
  NonParenthesizedValueExpressionPrimarySpecialCaseContext *_localctx = _tracker.createInstance<NonParenthesizedValueExpressionPrimarySpecialCaseContext>(_ctx, getState());
  enterRule(_localctx, 848, GQLParser::RuleNonParenthesizedValueExpressionPrimarySpecialCase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3952);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 444, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3940);
      aggregateFunction();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3941);
      unsignedValueSpecification();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3942);
      pathValueConstructor();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3943);
      valueExpressionPrimary(0);
      setState(3944);
      match(GQLParser::PERIOD);
      setState(3945);
      propertyName();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3947);
      valueQueryExpression();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(3948);
      caseExpression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(3949);
      castSpecification();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(3950);
      element_idFunction();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(3951);
      letValueExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnsignedValueSpecificationContext ------------------------------------------------------------------

GQLParser::UnsignedValueSpecificationContext::UnsignedValueSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnsignedLiteralContext* GQLParser::UnsignedValueSpecificationContext::unsignedLiteral() {
  return getRuleContext<GQLParser::UnsignedLiteralContext>(0);
}

GQLParser::GeneralValueSpecificationContext* GQLParser::UnsignedValueSpecificationContext::generalValueSpecification() {
  return getRuleContext<GQLParser::GeneralValueSpecificationContext>(0);
}


size_t GQLParser::UnsignedValueSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleUnsignedValueSpecification;
}


GQLParser::UnsignedValueSpecificationContext* GQLParser::unsignedValueSpecification() {
  UnsignedValueSpecificationContext *_localctx = _tracker.createInstance<UnsignedValueSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 850, GQLParser::RuleUnsignedValueSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3956);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::BOOLEAN_LITERAL:
      case GQLParser::SINGLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::BYTE_STRING_LITERAL:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER:
      case GQLParser::UNSIGNED_HEXADECIMAL_INTEGER:
      case GQLParser::UNSIGNED_OCTAL_INTEGER:
      case GQLParser::UNSIGNED_BINARY_INTEGER:
      case GQLParser::ARRAY:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DURATION:
      case GQLParser::LIST:
      case GQLParser::NULL_KW:
      case GQLParser::RECORD:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::LEFT_BRACE:
      case GQLParser::LEFT_BRACKET: {
        enterOuterAlt(_localctx, 1);
        setState(3954);
        unsignedLiteral();
        break;
      }

      case GQLParser::SESSION_USER:
      case GQLParser::GENERAL_PARAMETER_REFERENCE: {
        enterOuterAlt(_localctx, 2);
        setState(3955);
        generalValueSpecification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NonNegativeIntegerSpecificationContext ------------------------------------------------------------------

GQLParser::NonNegativeIntegerSpecificationContext::NonNegativeIntegerSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnsignedIntegerContext* GQLParser::NonNegativeIntegerSpecificationContext::unsignedInteger() {
  return getRuleContext<GQLParser::UnsignedIntegerContext>(0);
}

GQLParser::DynamicParameterSpecificationContext* GQLParser::NonNegativeIntegerSpecificationContext::dynamicParameterSpecification() {
  return getRuleContext<GQLParser::DynamicParameterSpecificationContext>(0);
}


size_t GQLParser::NonNegativeIntegerSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleNonNegativeIntegerSpecification;
}


GQLParser::NonNegativeIntegerSpecificationContext* GQLParser::nonNegativeIntegerSpecification() {
  NonNegativeIntegerSpecificationContext *_localctx = _tracker.createInstance<NonNegativeIntegerSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 852, GQLParser::RuleNonNegativeIntegerSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3960);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::UNSIGNED_DECIMAL_INTEGER:
      case GQLParser::UNSIGNED_HEXADECIMAL_INTEGER:
      case GQLParser::UNSIGNED_OCTAL_INTEGER:
      case GQLParser::UNSIGNED_BINARY_INTEGER: {
        enterOuterAlt(_localctx, 1);
        setState(3958);
        unsignedInteger();
        break;
      }

      case GQLParser::GENERAL_PARAMETER_REFERENCE: {
        enterOuterAlt(_localctx, 2);
        setState(3959);
        dynamicParameterSpecification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GeneralValueSpecificationContext ------------------------------------------------------------------

GQLParser::GeneralValueSpecificationContext::GeneralValueSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DynamicParameterSpecificationContext* GQLParser::GeneralValueSpecificationContext::dynamicParameterSpecification() {
  return getRuleContext<GQLParser::DynamicParameterSpecificationContext>(0);
}

tree::TerminalNode* GQLParser::GeneralValueSpecificationContext::SESSION_USER() {
  return getToken(GQLParser::SESSION_USER, 0);
}


size_t GQLParser::GeneralValueSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleGeneralValueSpecification;
}


GQLParser::GeneralValueSpecificationContext* GQLParser::generalValueSpecification() {
  GeneralValueSpecificationContext *_localctx = _tracker.createInstance<GeneralValueSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 854, GQLParser::RuleGeneralValueSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3964);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::GENERAL_PARAMETER_REFERENCE: {
        enterOuterAlt(_localctx, 1);
        setState(3962);
        dynamicParameterSpecification();
        break;
      }

      case GQLParser::SESSION_USER: {
        enterOuterAlt(_localctx, 2);
        setState(3963);
        match(GQLParser::SESSION_USER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DynamicParameterSpecificationContext ------------------------------------------------------------------

GQLParser::DynamicParameterSpecificationContext::DynamicParameterSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DynamicParameterSpecificationContext::GENERAL_PARAMETER_REFERENCE() {
  return getToken(GQLParser::GENERAL_PARAMETER_REFERENCE, 0);
}


size_t GQLParser::DynamicParameterSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleDynamicParameterSpecification;
}


GQLParser::DynamicParameterSpecificationContext* GQLParser::dynamicParameterSpecification() {
  DynamicParameterSpecificationContext *_localctx = _tracker.createInstance<DynamicParameterSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 856, GQLParser::RuleDynamicParameterSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3966);
    match(GQLParser::GENERAL_PARAMETER_REFERENCE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LetValueExpressionContext ------------------------------------------------------------------

GQLParser::LetValueExpressionContext::LetValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::LetValueExpressionContext::LET() {
  return getToken(GQLParser::LET, 0);
}

GQLParser::LetVariableDefinitionListContext* GQLParser::LetValueExpressionContext::letVariableDefinitionList() {
  return getRuleContext<GQLParser::LetVariableDefinitionListContext>(0);
}

tree::TerminalNode* GQLParser::LetValueExpressionContext::IN() {
  return getToken(GQLParser::IN, 0);
}

GQLParser::ValueExpressionContext* GQLParser::LetValueExpressionContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::LetValueExpressionContext::END() {
  return getToken(GQLParser::END, 0);
}


size_t GQLParser::LetValueExpressionContext::getRuleIndex() const {
  return GQLParser::RuleLetValueExpression;
}


GQLParser::LetValueExpressionContext* GQLParser::letValueExpression() {
  LetValueExpressionContext *_localctx = _tracker.createInstance<LetValueExpressionContext>(_ctx, getState());
  enterRule(_localctx, 858, GQLParser::RuleLetValueExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3968);
    match(GQLParser::LET);
    setState(3969);
    letVariableDefinitionList();
    setState(3970);
    match(GQLParser::IN);
    setState(3971);
    valueExpression(0);
    setState(3972);
    match(GQLParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueQueryExpressionContext ------------------------------------------------------------------

GQLParser::ValueQueryExpressionContext::ValueQueryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ValueQueryExpressionContext::VALUE() {
  return getToken(GQLParser::VALUE, 0);
}

GQLParser::NestedQuerySpecificationContext* GQLParser::ValueQueryExpressionContext::nestedQuerySpecification() {
  return getRuleContext<GQLParser::NestedQuerySpecificationContext>(0);
}


size_t GQLParser::ValueQueryExpressionContext::getRuleIndex() const {
  return GQLParser::RuleValueQueryExpression;
}


GQLParser::ValueQueryExpressionContext* GQLParser::valueQueryExpression() {
  ValueQueryExpressionContext *_localctx = _tracker.createInstance<ValueQueryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 860, GQLParser::RuleValueQueryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3974);
    match(GQLParser::VALUE);
    setState(3975);
    nestedQuerySpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseExpressionContext ------------------------------------------------------------------

GQLParser::CaseExpressionContext::CaseExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CaseAbbreviationContext* GQLParser::CaseExpressionContext::caseAbbreviation() {
  return getRuleContext<GQLParser::CaseAbbreviationContext>(0);
}

GQLParser::CaseSpecificationContext* GQLParser::CaseExpressionContext::caseSpecification() {
  return getRuleContext<GQLParser::CaseSpecificationContext>(0);
}


size_t GQLParser::CaseExpressionContext::getRuleIndex() const {
  return GQLParser::RuleCaseExpression;
}


GQLParser::CaseExpressionContext* GQLParser::caseExpression() {
  CaseExpressionContext *_localctx = _tracker.createInstance<CaseExpressionContext>(_ctx, getState());
  enterRule(_localctx, 862, GQLParser::RuleCaseExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3979);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::COALESCE:
      case GQLParser::NULLIF: {
        enterOuterAlt(_localctx, 1);
        setState(3977);
        caseAbbreviation();
        break;
      }

      case GQLParser::CASE: {
        enterOuterAlt(_localctx, 2);
        setState(3978);
        caseSpecification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseAbbreviationContext ------------------------------------------------------------------

GQLParser::CaseAbbreviationContext::CaseAbbreviationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CaseAbbreviationContext::NULLIF() {
  return getToken(GQLParser::NULLIF, 0);
}

tree::TerminalNode* GQLParser::CaseAbbreviationContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

std::vector<GQLParser::ValueExpressionContext *> GQLParser::CaseAbbreviationContext::valueExpression() {
  return getRuleContexts<GQLParser::ValueExpressionContext>();
}

GQLParser::ValueExpressionContext* GQLParser::CaseAbbreviationContext::valueExpression(size_t i) {
  return getRuleContext<GQLParser::ValueExpressionContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::CaseAbbreviationContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::CaseAbbreviationContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}

tree::TerminalNode* GQLParser::CaseAbbreviationContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::CaseAbbreviationContext::COALESCE() {
  return getToken(GQLParser::COALESCE, 0);
}


size_t GQLParser::CaseAbbreviationContext::getRuleIndex() const {
  return GQLParser::RuleCaseAbbreviation;
}


GQLParser::CaseAbbreviationContext* GQLParser::caseAbbreviation() {
  CaseAbbreviationContext *_localctx = _tracker.createInstance<CaseAbbreviationContext>(_ctx, getState());
  enterRule(_localctx, 864, GQLParser::RuleCaseAbbreviation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3999);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::NULLIF: {
        enterOuterAlt(_localctx, 1);
        setState(3981);
        match(GQLParser::NULLIF);
        setState(3982);
        match(GQLParser::LEFT_PAREN);
        setState(3983);
        valueExpression(0);
        setState(3984);
        match(GQLParser::COMMA);
        setState(3985);
        valueExpression(0);
        setState(3986);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

      case GQLParser::COALESCE: {
        enterOuterAlt(_localctx, 2);
        setState(3988);
        match(GQLParser::COALESCE);
        setState(3989);
        match(GQLParser::LEFT_PAREN);
        setState(3990);
        valueExpression(0);
        setState(3993); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(3991);
          match(GQLParser::COMMA);
          setState(3992);
          valueExpression(0);
          setState(3995); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == GQLParser::COMMA);
        setState(3997);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseSpecificationContext ------------------------------------------------------------------

GQLParser::CaseSpecificationContext::CaseSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::SimpleCaseContext* GQLParser::CaseSpecificationContext::simpleCase() {
  return getRuleContext<GQLParser::SimpleCaseContext>(0);
}

GQLParser::SearchedCaseContext* GQLParser::CaseSpecificationContext::searchedCase() {
  return getRuleContext<GQLParser::SearchedCaseContext>(0);
}


size_t GQLParser::CaseSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleCaseSpecification;
}


GQLParser::CaseSpecificationContext* GQLParser::caseSpecification() {
  CaseSpecificationContext *_localctx = _tracker.createInstance<CaseSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 866, GQLParser::RuleCaseSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4003);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 451, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4001);
      simpleCase();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4002);
      searchedCase();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleCaseContext ------------------------------------------------------------------

GQLParser::SimpleCaseContext::SimpleCaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimpleCaseContext::CASE() {
  return getToken(GQLParser::CASE, 0);
}

GQLParser::CaseOperandContext* GQLParser::SimpleCaseContext::caseOperand() {
  return getRuleContext<GQLParser::CaseOperandContext>(0);
}

tree::TerminalNode* GQLParser::SimpleCaseContext::END() {
  return getToken(GQLParser::END, 0);
}

std::vector<GQLParser::SimpleWhenClauseContext *> GQLParser::SimpleCaseContext::simpleWhenClause() {
  return getRuleContexts<GQLParser::SimpleWhenClauseContext>();
}

GQLParser::SimpleWhenClauseContext* GQLParser::SimpleCaseContext::simpleWhenClause(size_t i) {
  return getRuleContext<GQLParser::SimpleWhenClauseContext>(i);
}

GQLParser::ElseClauseContext* GQLParser::SimpleCaseContext::elseClause() {
  return getRuleContext<GQLParser::ElseClauseContext>(0);
}


size_t GQLParser::SimpleCaseContext::getRuleIndex() const {
  return GQLParser::RuleSimpleCase;
}


GQLParser::SimpleCaseContext* GQLParser::simpleCase() {
  SimpleCaseContext *_localctx = _tracker.createInstance<SimpleCaseContext>(_ctx, getState());
  enterRule(_localctx, 868, GQLParser::RuleSimpleCase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4005);
    match(GQLParser::CASE);
    setState(4006);
    caseOperand();
    setState(4008); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4007);
      simpleWhenClause();
      setState(4010); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GQLParser::WHEN);
    setState(4013);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::ELSE) {
      setState(4012);
      elseClause();
    }
    setState(4015);
    match(GQLParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SearchedCaseContext ------------------------------------------------------------------

GQLParser::SearchedCaseContext::SearchedCaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SearchedCaseContext::CASE() {
  return getToken(GQLParser::CASE, 0);
}

tree::TerminalNode* GQLParser::SearchedCaseContext::END() {
  return getToken(GQLParser::END, 0);
}

std::vector<GQLParser::SearchedWhenClauseContext *> GQLParser::SearchedCaseContext::searchedWhenClause() {
  return getRuleContexts<GQLParser::SearchedWhenClauseContext>();
}

GQLParser::SearchedWhenClauseContext* GQLParser::SearchedCaseContext::searchedWhenClause(size_t i) {
  return getRuleContext<GQLParser::SearchedWhenClauseContext>(i);
}

GQLParser::ElseClauseContext* GQLParser::SearchedCaseContext::elseClause() {
  return getRuleContext<GQLParser::ElseClauseContext>(0);
}


size_t GQLParser::SearchedCaseContext::getRuleIndex() const {
  return GQLParser::RuleSearchedCase;
}


GQLParser::SearchedCaseContext* GQLParser::searchedCase() {
  SearchedCaseContext *_localctx = _tracker.createInstance<SearchedCaseContext>(_ctx, getState());
  enterRule(_localctx, 870, GQLParser::RuleSearchedCase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4017);
    match(GQLParser::CASE);
    setState(4019); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(4018);
      searchedWhenClause();
      setState(4021); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == GQLParser::WHEN);
    setState(4024);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::ELSE) {
      setState(4023);
      elseClause();
    }
    setState(4026);
    match(GQLParser::END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleWhenClauseContext ------------------------------------------------------------------

GQLParser::SimpleWhenClauseContext::SimpleWhenClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SimpleWhenClauseContext::WHEN() {
  return getToken(GQLParser::WHEN, 0);
}

GQLParser::WhenOperandListContext* GQLParser::SimpleWhenClauseContext::whenOperandList() {
  return getRuleContext<GQLParser::WhenOperandListContext>(0);
}

tree::TerminalNode* GQLParser::SimpleWhenClauseContext::THEN() {
  return getToken(GQLParser::THEN, 0);
}

GQLParser::ResultContext* GQLParser::SimpleWhenClauseContext::result() {
  return getRuleContext<GQLParser::ResultContext>(0);
}


size_t GQLParser::SimpleWhenClauseContext::getRuleIndex() const {
  return GQLParser::RuleSimpleWhenClause;
}


GQLParser::SimpleWhenClauseContext* GQLParser::simpleWhenClause() {
  SimpleWhenClauseContext *_localctx = _tracker.createInstance<SimpleWhenClauseContext>(_ctx, getState());
  enterRule(_localctx, 872, GQLParser::RuleSimpleWhenClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4028);
    match(GQLParser::WHEN);
    setState(4029);
    whenOperandList();
    setState(4030);
    match(GQLParser::THEN);
    setState(4031);
    result();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SearchedWhenClauseContext ------------------------------------------------------------------

GQLParser::SearchedWhenClauseContext::SearchedWhenClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SearchedWhenClauseContext::WHEN() {
  return getToken(GQLParser::WHEN, 0);
}

GQLParser::SearchConditionContext* GQLParser::SearchedWhenClauseContext::searchCondition() {
  return getRuleContext<GQLParser::SearchConditionContext>(0);
}

tree::TerminalNode* GQLParser::SearchedWhenClauseContext::THEN() {
  return getToken(GQLParser::THEN, 0);
}

GQLParser::ResultContext* GQLParser::SearchedWhenClauseContext::result() {
  return getRuleContext<GQLParser::ResultContext>(0);
}


size_t GQLParser::SearchedWhenClauseContext::getRuleIndex() const {
  return GQLParser::RuleSearchedWhenClause;
}


GQLParser::SearchedWhenClauseContext* GQLParser::searchedWhenClause() {
  SearchedWhenClauseContext *_localctx = _tracker.createInstance<SearchedWhenClauseContext>(_ctx, getState());
  enterRule(_localctx, 874, GQLParser::RuleSearchedWhenClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4033);
    match(GQLParser::WHEN);
    setState(4034);
    searchCondition();
    setState(4035);
    match(GQLParser::THEN);
    setState(4036);
    result();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElseClauseContext ------------------------------------------------------------------

GQLParser::ElseClauseContext::ElseClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ElseClauseContext::ELSE() {
  return getToken(GQLParser::ELSE, 0);
}

GQLParser::ResultContext* GQLParser::ElseClauseContext::result() {
  return getRuleContext<GQLParser::ResultContext>(0);
}


size_t GQLParser::ElseClauseContext::getRuleIndex() const {
  return GQLParser::RuleElseClause;
}


GQLParser::ElseClauseContext* GQLParser::elseClause() {
  ElseClauseContext *_localctx = _tracker.createInstance<ElseClauseContext>(_ctx, getState());
  enterRule(_localctx, 876, GQLParser::RuleElseClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4038);
    match(GQLParser::ELSE);
    setState(4039);
    result();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseOperandContext ------------------------------------------------------------------

GQLParser::CaseOperandContext::CaseOperandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NonParenthesizedValueExpressionPrimaryContext* GQLParser::CaseOperandContext::nonParenthesizedValueExpressionPrimary() {
  return getRuleContext<GQLParser::NonParenthesizedValueExpressionPrimaryContext>(0);
}

GQLParser::ElementVariableReferenceContext* GQLParser::CaseOperandContext::elementVariableReference() {
  return getRuleContext<GQLParser::ElementVariableReferenceContext>(0);
}


size_t GQLParser::CaseOperandContext::getRuleIndex() const {
  return GQLParser::RuleCaseOperand;
}


GQLParser::CaseOperandContext* GQLParser::caseOperand() {
  CaseOperandContext *_localctx = _tracker.createInstance<CaseOperandContext>(_ctx, getState());
  enterRule(_localctx, 878, GQLParser::RuleCaseOperand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4043);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 456, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4041);
      nonParenthesizedValueExpressionPrimary();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4042);
      elementVariableReference();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhenOperandListContext ------------------------------------------------------------------

GQLParser::WhenOperandListContext::WhenOperandListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::WhenOperandContext *> GQLParser::WhenOperandListContext::whenOperand() {
  return getRuleContexts<GQLParser::WhenOperandContext>();
}

GQLParser::WhenOperandContext* GQLParser::WhenOperandListContext::whenOperand(size_t i) {
  return getRuleContext<GQLParser::WhenOperandContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::WhenOperandListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::WhenOperandListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::WhenOperandListContext::getRuleIndex() const {
  return GQLParser::RuleWhenOperandList;
}


GQLParser::WhenOperandListContext* GQLParser::whenOperandList() {
  WhenOperandListContext *_localctx = _tracker.createInstance<WhenOperandListContext>(_ctx, getState());
  enterRule(_localctx, 880, GQLParser::RuleWhenOperandList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4045);
    whenOperand();
    setState(4050);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(4046);
      match(GQLParser::COMMA);
      setState(4047);
      whenOperand();
      setState(4052);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhenOperandContext ------------------------------------------------------------------

GQLParser::WhenOperandContext::WhenOperandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NonParenthesizedValueExpressionPrimaryContext* GQLParser::WhenOperandContext::nonParenthesizedValueExpressionPrimary() {
  return getRuleContext<GQLParser::NonParenthesizedValueExpressionPrimaryContext>(0);
}

GQLParser::CompOpContext* GQLParser::WhenOperandContext::compOp() {
  return getRuleContext<GQLParser::CompOpContext>(0);
}

GQLParser::ValueExpressionContext* GQLParser::WhenOperandContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}

GQLParser::NullPredicatePart2Context* GQLParser::WhenOperandContext::nullPredicatePart2() {
  return getRuleContext<GQLParser::NullPredicatePart2Context>(0);
}

GQLParser::ValueTypePredicatePart2Context* GQLParser::WhenOperandContext::valueTypePredicatePart2() {
  return getRuleContext<GQLParser::ValueTypePredicatePart2Context>(0);
}

GQLParser::NormalizedPredicatePart2Context* GQLParser::WhenOperandContext::normalizedPredicatePart2() {
  return getRuleContext<GQLParser::NormalizedPredicatePart2Context>(0);
}

GQLParser::DirectedPredicatePart2Context* GQLParser::WhenOperandContext::directedPredicatePart2() {
  return getRuleContext<GQLParser::DirectedPredicatePart2Context>(0);
}

GQLParser::LabeledPredicatePart2Context* GQLParser::WhenOperandContext::labeledPredicatePart2() {
  return getRuleContext<GQLParser::LabeledPredicatePart2Context>(0);
}

GQLParser::SourcePredicatePart2Context* GQLParser::WhenOperandContext::sourcePredicatePart2() {
  return getRuleContext<GQLParser::SourcePredicatePart2Context>(0);
}

GQLParser::DestinationPredicatePart2Context* GQLParser::WhenOperandContext::destinationPredicatePart2() {
  return getRuleContext<GQLParser::DestinationPredicatePart2Context>(0);
}


size_t GQLParser::WhenOperandContext::getRuleIndex() const {
  return GQLParser::RuleWhenOperand;
}


GQLParser::WhenOperandContext* GQLParser::whenOperand() {
  WhenOperandContext *_localctx = _tracker.createInstance<WhenOperandContext>(_ctx, getState());
  enterRule(_localctx, 882, GQLParser::RuleWhenOperand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4064);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 458, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4053);
      nonParenthesizedValueExpressionPrimary();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4054);
      compOp();
      setState(4055);
      valueExpression(0);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4057);
      nullPredicatePart2();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(4058);
      valueTypePredicatePart2();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(4059);
      normalizedPredicatePart2();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(4060);
      directedPredicatePart2();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(4061);
      labeledPredicatePart2();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(4062);
      sourcePredicatePart2();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(4063);
      destinationPredicatePart2();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResultContext ------------------------------------------------------------------

GQLParser::ResultContext::ResultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ResultExpressionContext* GQLParser::ResultContext::resultExpression() {
  return getRuleContext<GQLParser::ResultExpressionContext>(0);
}

GQLParser::NullLiteralContext* GQLParser::ResultContext::nullLiteral() {
  return getRuleContext<GQLParser::NullLiteralContext>(0);
}


size_t GQLParser::ResultContext::getRuleIndex() const {
  return GQLParser::RuleResult;
}


GQLParser::ResultContext* GQLParser::result() {
  ResultContext *_localctx = _tracker.createInstance<ResultContext>(_ctx, getState());
  enterRule(_localctx, 884, GQLParser::RuleResult);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4068);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 459, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4066);
      resultExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4067);
      nullLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResultExpressionContext ------------------------------------------------------------------

GQLParser::ResultExpressionContext::ResultExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionContext* GQLParser::ResultExpressionContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::ResultExpressionContext::getRuleIndex() const {
  return GQLParser::RuleResultExpression;
}


GQLParser::ResultExpressionContext* GQLParser::resultExpression() {
  ResultExpressionContext *_localctx = _tracker.createInstance<ResultExpressionContext>(_ctx, getState());
  enterRule(_localctx, 886, GQLParser::RuleResultExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4070);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CastSpecificationContext ------------------------------------------------------------------

GQLParser::CastSpecificationContext::CastSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CastSpecificationContext::CAST() {
  return getToken(GQLParser::CAST, 0);
}

tree::TerminalNode* GQLParser::CastSpecificationContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::CastOperandContext* GQLParser::CastSpecificationContext::castOperand() {
  return getRuleContext<GQLParser::CastOperandContext>(0);
}

tree::TerminalNode* GQLParser::CastSpecificationContext::AS() {
  return getToken(GQLParser::AS, 0);
}

GQLParser::CastTargetContext* GQLParser::CastSpecificationContext::castTarget() {
  return getRuleContext<GQLParser::CastTargetContext>(0);
}

tree::TerminalNode* GQLParser::CastSpecificationContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::CastSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleCastSpecification;
}


GQLParser::CastSpecificationContext* GQLParser::castSpecification() {
  CastSpecificationContext *_localctx = _tracker.createInstance<CastSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 888, GQLParser::RuleCastSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4072);
    match(GQLParser::CAST);
    setState(4073);
    match(GQLParser::LEFT_PAREN);
    setState(4074);
    castOperand();
    setState(4075);
    match(GQLParser::AS);
    setState(4076);
    castTarget();
    setState(4077);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CastOperandContext ------------------------------------------------------------------

GQLParser::CastOperandContext::CastOperandContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionContext* GQLParser::CastOperandContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}

GQLParser::NullLiteralContext* GQLParser::CastOperandContext::nullLiteral() {
  return getRuleContext<GQLParser::NullLiteralContext>(0);
}


size_t GQLParser::CastOperandContext::getRuleIndex() const {
  return GQLParser::RuleCastOperand;
}


GQLParser::CastOperandContext* GQLParser::castOperand() {
  CastOperandContext *_localctx = _tracker.createInstance<CastOperandContext>(_ctx, getState());
  enterRule(_localctx, 890, GQLParser::RuleCastOperand);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4081);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 460, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4079);
      valueExpression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4080);
      nullLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CastTargetContext ------------------------------------------------------------------

GQLParser::CastTargetContext::CastTargetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueTypeContext* GQLParser::CastTargetContext::valueType() {
  return getRuleContext<GQLParser::ValueTypeContext>(0);
}


size_t GQLParser::CastTargetContext::getRuleIndex() const {
  return GQLParser::RuleCastTarget;
}


GQLParser::CastTargetContext* GQLParser::castTarget() {
  CastTargetContext *_localctx = _tracker.createInstance<CastTargetContext>(_ctx, getState());
  enterRule(_localctx, 892, GQLParser::RuleCastTarget);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4083);
    valueType(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AggregateFunctionContext ------------------------------------------------------------------

GQLParser::AggregateFunctionContext::AggregateFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::AggregateFunctionContext::COUNT() {
  return getToken(GQLParser::COUNT, 0);
}

tree::TerminalNode* GQLParser::AggregateFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::AggregateFunctionContext::ASTERISK() {
  return getToken(GQLParser::ASTERISK, 0);
}

tree::TerminalNode* GQLParser::AggregateFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::GeneralSetFunctionContext* GQLParser::AggregateFunctionContext::generalSetFunction() {
  return getRuleContext<GQLParser::GeneralSetFunctionContext>(0);
}

GQLParser::BinarySetFunctionContext* GQLParser::AggregateFunctionContext::binarySetFunction() {
  return getRuleContext<GQLParser::BinarySetFunctionContext>(0);
}


size_t GQLParser::AggregateFunctionContext::getRuleIndex() const {
  return GQLParser::RuleAggregateFunction;
}


GQLParser::AggregateFunctionContext* GQLParser::aggregateFunction() {
  AggregateFunctionContext *_localctx = _tracker.createInstance<AggregateFunctionContext>(_ctx, getState());
  enterRule(_localctx, 894, GQLParser::RuleAggregateFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4091);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 461, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(4085);
      match(GQLParser::COUNT);
      setState(4086);
      match(GQLParser::LEFT_PAREN);
      setState(4087);
      match(GQLParser::ASTERISK);
      setState(4088);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(4089);
      generalSetFunction();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(4090);
      binarySetFunction();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GeneralSetFunctionContext ------------------------------------------------------------------

GQLParser::GeneralSetFunctionContext::GeneralSetFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::GeneralSetFunctionTypeContext* GQLParser::GeneralSetFunctionContext::generalSetFunctionType() {
  return getRuleContext<GQLParser::GeneralSetFunctionTypeContext>(0);
}

tree::TerminalNode* GQLParser::GeneralSetFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ValueExpressionContext* GQLParser::GeneralSetFunctionContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::GeneralSetFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::SetQuantifierContext* GQLParser::GeneralSetFunctionContext::setQuantifier() {
  return getRuleContext<GQLParser::SetQuantifierContext>(0);
}


size_t GQLParser::GeneralSetFunctionContext::getRuleIndex() const {
  return GQLParser::RuleGeneralSetFunction;
}


GQLParser::GeneralSetFunctionContext* GQLParser::generalSetFunction() {
  GeneralSetFunctionContext *_localctx = _tracker.createInstance<GeneralSetFunctionContext>(_ctx, getState());
  enterRule(_localctx, 896, GQLParser::RuleGeneralSetFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4093);
    generalSetFunctionType();
    setState(4094);
    match(GQLParser::LEFT_PAREN);
    setState(4096);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::ALL

    || _la == GQLParser::DISTINCT) {
      setState(4095);
      setQuantifier();
    }
    setState(4098);
    valueExpression(0);
    setState(4099);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BinarySetFunctionContext ------------------------------------------------------------------

GQLParser::BinarySetFunctionContext::BinarySetFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BinarySetFunctionTypeContext* GQLParser::BinarySetFunctionContext::binarySetFunctionType() {
  return getRuleContext<GQLParser::BinarySetFunctionTypeContext>(0);
}

tree::TerminalNode* GQLParser::BinarySetFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::DependentValueExpressionContext* GQLParser::BinarySetFunctionContext::dependentValueExpression() {
  return getRuleContext<GQLParser::DependentValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::BinarySetFunctionContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

GQLParser::IndependentValueExpressionContext* GQLParser::BinarySetFunctionContext::independentValueExpression() {
  return getRuleContext<GQLParser::IndependentValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::BinarySetFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::BinarySetFunctionContext::getRuleIndex() const {
  return GQLParser::RuleBinarySetFunction;
}


GQLParser::BinarySetFunctionContext* GQLParser::binarySetFunction() {
  BinarySetFunctionContext *_localctx = _tracker.createInstance<BinarySetFunctionContext>(_ctx, getState());
  enterRule(_localctx, 898, GQLParser::RuleBinarySetFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4101);
    binarySetFunctionType();
    setState(4102);
    match(GQLParser::LEFT_PAREN);
    setState(4103);
    dependentValueExpression();
    setState(4104);
    match(GQLParser::COMMA);
    setState(4105);
    independentValueExpression();
    setState(4106);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GeneralSetFunctionTypeContext ------------------------------------------------------------------

GQLParser::GeneralSetFunctionTypeContext::GeneralSetFunctionTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GeneralSetFunctionTypeContext::AVG() {
  return getToken(GQLParser::AVG, 0);
}

tree::TerminalNode* GQLParser::GeneralSetFunctionTypeContext::COUNT() {
  return getToken(GQLParser::COUNT, 0);
}

tree::TerminalNode* GQLParser::GeneralSetFunctionTypeContext::MAX() {
  return getToken(GQLParser::MAX, 0);
}

tree::TerminalNode* GQLParser::GeneralSetFunctionTypeContext::MIN() {
  return getToken(GQLParser::MIN, 0);
}

tree::TerminalNode* GQLParser::GeneralSetFunctionTypeContext::SUM() {
  return getToken(GQLParser::SUM, 0);
}

tree::TerminalNode* GQLParser::GeneralSetFunctionTypeContext::COLLECT_LIST() {
  return getToken(GQLParser::COLLECT_LIST, 0);
}

tree::TerminalNode* GQLParser::GeneralSetFunctionTypeContext::STDDEV_SAMP() {
  return getToken(GQLParser::STDDEV_SAMP, 0);
}

tree::TerminalNode* GQLParser::GeneralSetFunctionTypeContext::STDDEV_POP() {
  return getToken(GQLParser::STDDEV_POP, 0);
}


size_t GQLParser::GeneralSetFunctionTypeContext::getRuleIndex() const {
  return GQLParser::RuleGeneralSetFunctionType;
}


GQLParser::GeneralSetFunctionTypeContext* GQLParser::generalSetFunctionType() {
  GeneralSetFunctionTypeContext *_localctx = _tracker.createInstance<GeneralSetFunctionTypeContext>(_ctx, getState());
  enterRule(_localctx, 900, GQLParser::RuleGeneralSetFunctionType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4108);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 4683743621055250432) != 0) || ((((_la - 144) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 144)) & 792633534417207299) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetQuantifierContext ------------------------------------------------------------------

GQLParser::SetQuantifierContext::SetQuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SetQuantifierContext::DISTINCT() {
  return getToken(GQLParser::DISTINCT, 0);
}

tree::TerminalNode* GQLParser::SetQuantifierContext::ALL() {
  return getToken(GQLParser::ALL, 0);
}


size_t GQLParser::SetQuantifierContext::getRuleIndex() const {
  return GQLParser::RuleSetQuantifier;
}


GQLParser::SetQuantifierContext* GQLParser::setQuantifier() {
  SetQuantifierContext *_localctx = _tracker.createInstance<SetQuantifierContext>(_ctx, getState());
  enterRule(_localctx, 902, GQLParser::RuleSetQuantifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4110);
    _la = _input->LA(1);
    if (!(_la == GQLParser::ALL

    || _la == GQLParser::DISTINCT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BinarySetFunctionTypeContext ------------------------------------------------------------------

GQLParser::BinarySetFunctionTypeContext::BinarySetFunctionTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::BinarySetFunctionTypeContext::PERCENTILE_CONT() {
  return getToken(GQLParser::PERCENTILE_CONT, 0);
}

tree::TerminalNode* GQLParser::BinarySetFunctionTypeContext::PERCENTILE_DISC() {
  return getToken(GQLParser::PERCENTILE_DISC, 0);
}


size_t GQLParser::BinarySetFunctionTypeContext::getRuleIndex() const {
  return GQLParser::RuleBinarySetFunctionType;
}


GQLParser::BinarySetFunctionTypeContext* GQLParser::binarySetFunctionType() {
  BinarySetFunctionTypeContext *_localctx = _tracker.createInstance<BinarySetFunctionTypeContext>(_ctx, getState());
  enterRule(_localctx, 904, GQLParser::RuleBinarySetFunctionType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4112);
    _la = _input->LA(1);
    if (!(_la == GQLParser::PERCENTILE_CONT

    || _la == GQLParser::PERCENTILE_DISC)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DependentValueExpressionContext ------------------------------------------------------------------

GQLParser::DependentValueExpressionContext::DependentValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NumericValueExpressionContext* GQLParser::DependentValueExpressionContext::numericValueExpression() {
  return getRuleContext<GQLParser::NumericValueExpressionContext>(0);
}

GQLParser::SetQuantifierContext* GQLParser::DependentValueExpressionContext::setQuantifier() {
  return getRuleContext<GQLParser::SetQuantifierContext>(0);
}


size_t GQLParser::DependentValueExpressionContext::getRuleIndex() const {
  return GQLParser::RuleDependentValueExpression;
}


GQLParser::DependentValueExpressionContext* GQLParser::dependentValueExpression() {
  DependentValueExpressionContext *_localctx = _tracker.createInstance<DependentValueExpressionContext>(_ctx, getState());
  enterRule(_localctx, 906, GQLParser::RuleDependentValueExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4115);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::ALL

    || _la == GQLParser::DISTINCT) {
      setState(4114);
      setQuantifier();
    }
    setState(4117);
    numericValueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IndependentValueExpressionContext ------------------------------------------------------------------

GQLParser::IndependentValueExpressionContext::IndependentValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NumericValueExpressionContext* GQLParser::IndependentValueExpressionContext::numericValueExpression() {
  return getRuleContext<GQLParser::NumericValueExpressionContext>(0);
}


size_t GQLParser::IndependentValueExpressionContext::getRuleIndex() const {
  return GQLParser::RuleIndependentValueExpression;
}


GQLParser::IndependentValueExpressionContext* GQLParser::independentValueExpression() {
  IndependentValueExpressionContext *_localctx = _tracker.createInstance<IndependentValueExpressionContext>(_ctx, getState());
  enterRule(_localctx, 908, GQLParser::RuleIndependentValueExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4119);
    numericValueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Element_idFunctionContext ------------------------------------------------------------------

GQLParser::Element_idFunctionContext::Element_idFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::Element_idFunctionContext::ELEMENT_ID() {
  return getToken(GQLParser::ELEMENT_ID, 0);
}

tree::TerminalNode* GQLParser::Element_idFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ElementVariableReferenceContext* GQLParser::Element_idFunctionContext::elementVariableReference() {
  return getRuleContext<GQLParser::ElementVariableReferenceContext>(0);
}

tree::TerminalNode* GQLParser::Element_idFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::Element_idFunctionContext::getRuleIndex() const {
  return GQLParser::RuleElement_idFunction;
}


GQLParser::Element_idFunctionContext* GQLParser::element_idFunction() {
  Element_idFunctionContext *_localctx = _tracker.createInstance<Element_idFunctionContext>(_ctx, getState());
  enterRule(_localctx, 910, GQLParser::RuleElement_idFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4121);
    match(GQLParser::ELEMENT_ID);
    setState(4122);
    match(GQLParser::LEFT_PAREN);
    setState(4123);
    elementVariableReference();
    setState(4124);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingVariableReferenceContext ------------------------------------------------------------------

GQLParser::BindingVariableReferenceContext::BindingVariableReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableContext* GQLParser::BindingVariableReferenceContext::bindingVariable() {
  return getRuleContext<GQLParser::BindingVariableContext>(0);
}


size_t GQLParser::BindingVariableReferenceContext::getRuleIndex() const {
  return GQLParser::RuleBindingVariableReference;
}


GQLParser::BindingVariableReferenceContext* GQLParser::bindingVariableReference() {
  BindingVariableReferenceContext *_localctx = _tracker.createInstance<BindingVariableReferenceContext>(_ctx, getState());
  enterRule(_localctx, 912, GQLParser::RuleBindingVariableReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4126);
    bindingVariable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathValueExpressionContext ------------------------------------------------------------------

GQLParser::PathValueExpressionContext::PathValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionContext* GQLParser::PathValueExpressionContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::PathValueExpressionContext::getRuleIndex() const {
  return GQLParser::RulePathValueExpression;
}


GQLParser::PathValueExpressionContext* GQLParser::pathValueExpression() {
  PathValueExpressionContext *_localctx = _tracker.createInstance<PathValueExpressionContext>(_ctx, getState());
  enterRule(_localctx, 914, GQLParser::RulePathValueExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4128);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathValueConstructorContext ------------------------------------------------------------------

GQLParser::PathValueConstructorContext::PathValueConstructorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PathValueConstructorByEnumerationContext* GQLParser::PathValueConstructorContext::pathValueConstructorByEnumeration() {
  return getRuleContext<GQLParser::PathValueConstructorByEnumerationContext>(0);
}


size_t GQLParser::PathValueConstructorContext::getRuleIndex() const {
  return GQLParser::RulePathValueConstructor;
}


GQLParser::PathValueConstructorContext* GQLParser::pathValueConstructor() {
  PathValueConstructorContext *_localctx = _tracker.createInstance<PathValueConstructorContext>(_ctx, getState());
  enterRule(_localctx, 916, GQLParser::RulePathValueConstructor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4130);
    pathValueConstructorByEnumeration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathValueConstructorByEnumerationContext ------------------------------------------------------------------

GQLParser::PathValueConstructorByEnumerationContext::PathValueConstructorByEnumerationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::PathValueConstructorByEnumerationContext::PATH() {
  return getToken(GQLParser::PATH, 0);
}

tree::TerminalNode* GQLParser::PathValueConstructorByEnumerationContext::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

GQLParser::PathElementListContext* GQLParser::PathValueConstructorByEnumerationContext::pathElementList() {
  return getRuleContext<GQLParser::PathElementListContext>(0);
}

tree::TerminalNode* GQLParser::PathValueConstructorByEnumerationContext::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}


size_t GQLParser::PathValueConstructorByEnumerationContext::getRuleIndex() const {
  return GQLParser::RulePathValueConstructorByEnumeration;
}


GQLParser::PathValueConstructorByEnumerationContext* GQLParser::pathValueConstructorByEnumeration() {
  PathValueConstructorByEnumerationContext *_localctx = _tracker.createInstance<PathValueConstructorByEnumerationContext>(_ctx, getState());
  enterRule(_localctx, 918, GQLParser::RulePathValueConstructorByEnumeration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4132);
    match(GQLParser::PATH);
    setState(4133);
    match(GQLParser::LEFT_BRACKET);
    setState(4134);
    pathElementList();
    setState(4135);
    match(GQLParser::RIGHT_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathElementListContext ------------------------------------------------------------------

GQLParser::PathElementListContext::PathElementListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::PathElementListStartContext* GQLParser::PathElementListContext::pathElementListStart() {
  return getRuleContext<GQLParser::PathElementListStartContext>(0);
}

std::vector<GQLParser::PathElementListStepContext *> GQLParser::PathElementListContext::pathElementListStep() {
  return getRuleContexts<GQLParser::PathElementListStepContext>();
}

GQLParser::PathElementListStepContext* GQLParser::PathElementListContext::pathElementListStep(size_t i) {
  return getRuleContext<GQLParser::PathElementListStepContext>(i);
}


size_t GQLParser::PathElementListContext::getRuleIndex() const {
  return GQLParser::RulePathElementList;
}


GQLParser::PathElementListContext* GQLParser::pathElementList() {
  PathElementListContext *_localctx = _tracker.createInstance<PathElementListContext>(_ctx, getState());
  enterRule(_localctx, 920, GQLParser::RulePathElementList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4137);
    pathElementListStart();
    setState(4141);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(4138);
      pathElementListStep();
      setState(4143);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathElementListStartContext ------------------------------------------------------------------

GQLParser::PathElementListStartContext::PathElementListStartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NodeReferenceValueExpressionContext* GQLParser::PathElementListStartContext::nodeReferenceValueExpression() {
  return getRuleContext<GQLParser::NodeReferenceValueExpressionContext>(0);
}


size_t GQLParser::PathElementListStartContext::getRuleIndex() const {
  return GQLParser::RulePathElementListStart;
}


GQLParser::PathElementListStartContext* GQLParser::pathElementListStart() {
  PathElementListStartContext *_localctx = _tracker.createInstance<PathElementListStartContext>(_ctx, getState());
  enterRule(_localctx, 922, GQLParser::RulePathElementListStart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4144);
    nodeReferenceValueExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathElementListStepContext ------------------------------------------------------------------

GQLParser::PathElementListStepContext::PathElementListStepContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> GQLParser::PathElementListStepContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::PathElementListStepContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}

GQLParser::EdgeReferenceValueExpressionContext* GQLParser::PathElementListStepContext::edgeReferenceValueExpression() {
  return getRuleContext<GQLParser::EdgeReferenceValueExpressionContext>(0);
}

GQLParser::NodeReferenceValueExpressionContext* GQLParser::PathElementListStepContext::nodeReferenceValueExpression() {
  return getRuleContext<GQLParser::NodeReferenceValueExpressionContext>(0);
}


size_t GQLParser::PathElementListStepContext::getRuleIndex() const {
  return GQLParser::RulePathElementListStep;
}


GQLParser::PathElementListStepContext* GQLParser::pathElementListStep() {
  PathElementListStepContext *_localctx = _tracker.createInstance<PathElementListStepContext>(_ctx, getState());
  enterRule(_localctx, 924, GQLParser::RulePathElementListStep);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4146);
    match(GQLParser::COMMA);
    setState(4147);
    edgeReferenceValueExpression();
    setState(4148);
    match(GQLParser::COMMA);
    setState(4149);
    nodeReferenceValueExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListValueExpressionContext ------------------------------------------------------------------

GQLParser::ListValueExpressionContext::ListValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionContext* GQLParser::ListValueExpressionContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::ListValueExpressionContext::getRuleIndex() const {
  return GQLParser::RuleListValueExpression;
}


GQLParser::ListValueExpressionContext* GQLParser::listValueExpression() {
  ListValueExpressionContext *_localctx = _tracker.createInstance<ListValueExpressionContext>(_ctx, getState());
  enterRule(_localctx, 926, GQLParser::RuleListValueExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4151);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListValueFunctionContext ------------------------------------------------------------------

GQLParser::ListValueFunctionContext::ListValueFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::TrimListFunctionContext* GQLParser::ListValueFunctionContext::trimListFunction() {
  return getRuleContext<GQLParser::TrimListFunctionContext>(0);
}

GQLParser::ElementsFunctionContext* GQLParser::ListValueFunctionContext::elementsFunction() {
  return getRuleContext<GQLParser::ElementsFunctionContext>(0);
}


size_t GQLParser::ListValueFunctionContext::getRuleIndex() const {
  return GQLParser::RuleListValueFunction;
}


GQLParser::ListValueFunctionContext* GQLParser::listValueFunction() {
  ListValueFunctionContext *_localctx = _tracker.createInstance<ListValueFunctionContext>(_ctx, getState());
  enterRule(_localctx, 928, GQLParser::RuleListValueFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4155);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::TRIM: {
        enterOuterAlt(_localctx, 1);
        setState(4153);
        trimListFunction();
        break;
      }

      case GQLParser::ELEMENTS: {
        enterOuterAlt(_localctx, 2);
        setState(4154);
        elementsFunction();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrimListFunctionContext ------------------------------------------------------------------

GQLParser::TrimListFunctionContext::TrimListFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TrimListFunctionContext::TRIM() {
  return getToken(GQLParser::TRIM, 0);
}

tree::TerminalNode* GQLParser::TrimListFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ListValueExpressionContext* GQLParser::TrimListFunctionContext::listValueExpression() {
  return getRuleContext<GQLParser::ListValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::TrimListFunctionContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

GQLParser::NumericValueExpressionContext* GQLParser::TrimListFunctionContext::numericValueExpression() {
  return getRuleContext<GQLParser::NumericValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::TrimListFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::TrimListFunctionContext::getRuleIndex() const {
  return GQLParser::RuleTrimListFunction;
}


GQLParser::TrimListFunctionContext* GQLParser::trimListFunction() {
  TrimListFunctionContext *_localctx = _tracker.createInstance<TrimListFunctionContext>(_ctx, getState());
  enterRule(_localctx, 930, GQLParser::RuleTrimListFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4157);
    match(GQLParser::TRIM);
    setState(4158);
    match(GQLParser::LEFT_PAREN);
    setState(4159);
    listValueExpression();
    setState(4160);
    match(GQLParser::COMMA);
    setState(4161);
    numericValueExpression(0);
    setState(4162);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementsFunctionContext ------------------------------------------------------------------

GQLParser::ElementsFunctionContext::ElementsFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ElementsFunctionContext::ELEMENTS() {
  return getToken(GQLParser::ELEMENTS, 0);
}

tree::TerminalNode* GQLParser::ElementsFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::PathValueExpressionContext* GQLParser::ElementsFunctionContext::pathValueExpression() {
  return getRuleContext<GQLParser::PathValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::ElementsFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::ElementsFunctionContext::getRuleIndex() const {
  return GQLParser::RuleElementsFunction;
}


GQLParser::ElementsFunctionContext* GQLParser::elementsFunction() {
  ElementsFunctionContext *_localctx = _tracker.createInstance<ElementsFunctionContext>(_ctx, getState());
  enterRule(_localctx, 932, GQLParser::RuleElementsFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4164);
    match(GQLParser::ELEMENTS);
    setState(4165);
    match(GQLParser::LEFT_PAREN);
    setState(4166);
    pathValueExpression();
    setState(4167);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListValueConstructorContext ------------------------------------------------------------------

GQLParser::ListValueConstructorContext::ListValueConstructorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ListValueConstructorByEnumerationContext* GQLParser::ListValueConstructorContext::listValueConstructorByEnumeration() {
  return getRuleContext<GQLParser::ListValueConstructorByEnumerationContext>(0);
}


size_t GQLParser::ListValueConstructorContext::getRuleIndex() const {
  return GQLParser::RuleListValueConstructor;
}


GQLParser::ListValueConstructorContext* GQLParser::listValueConstructor() {
  ListValueConstructorContext *_localctx = _tracker.createInstance<ListValueConstructorContext>(_ctx, getState());
  enterRule(_localctx, 934, GQLParser::RuleListValueConstructor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4169);
    listValueConstructorByEnumeration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListValueConstructorByEnumerationContext ------------------------------------------------------------------

GQLParser::ListValueConstructorByEnumerationContext::ListValueConstructorByEnumerationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ListValueConstructorByEnumerationContext::LEFT_BRACKET() {
  return getToken(GQLParser::LEFT_BRACKET, 0);
}

tree::TerminalNode* GQLParser::ListValueConstructorByEnumerationContext::RIGHT_BRACKET() {
  return getToken(GQLParser::RIGHT_BRACKET, 0);
}

GQLParser::ListValueTypeNameContext* GQLParser::ListValueConstructorByEnumerationContext::listValueTypeName() {
  return getRuleContext<GQLParser::ListValueTypeNameContext>(0);
}

GQLParser::ListElementListContext* GQLParser::ListValueConstructorByEnumerationContext::listElementList() {
  return getRuleContext<GQLParser::ListElementListContext>(0);
}


size_t GQLParser::ListValueConstructorByEnumerationContext::getRuleIndex() const {
  return GQLParser::RuleListValueConstructorByEnumeration;
}


GQLParser::ListValueConstructorByEnumerationContext* GQLParser::listValueConstructorByEnumeration() {
  ListValueConstructorByEnumerationContext *_localctx = _tracker.createInstance<ListValueConstructorByEnumerationContext>(_ctx, getState());
  enterRule(_localctx, 936, GQLParser::RuleListValueConstructorByEnumeration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4172);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::ARRAY || _la == GQLParser::LIST) {
      setState(4171);
      listValueTypeName();
    }
    setState(4174);
    match(GQLParser::LEFT_BRACKET);
    setState(4176);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 8762849302180528028) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 34464073969) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 129)) & -8011702113698201677) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 193)) & 26393111092643) != 0) || ((((_la - 277) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 277)) & 844424930131967) != 0) || ((((_la - 368) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 368)) & 151) != 0)) {
      setState(4175);
      listElementList();
    }
    setState(4178);
    match(GQLParser::RIGHT_BRACKET);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListElementListContext ------------------------------------------------------------------

GQLParser::ListElementListContext::ListElementListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::ListElementContext *> GQLParser::ListElementListContext::listElement() {
  return getRuleContexts<GQLParser::ListElementContext>();
}

GQLParser::ListElementContext* GQLParser::ListElementListContext::listElement(size_t i) {
  return getRuleContext<GQLParser::ListElementContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::ListElementListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::ListElementListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::ListElementListContext::getRuleIndex() const {
  return GQLParser::RuleListElementList;
}


GQLParser::ListElementListContext* GQLParser::listElementList() {
  ListElementListContext *_localctx = _tracker.createInstance<ListElementListContext>(_ctx, getState());
  enterRule(_localctx, 938, GQLParser::RuleListElementList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4180);
    listElement();
    setState(4185);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(4181);
      match(GQLParser::COMMA);
      setState(4182);
      listElement();
      setState(4187);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListElementContext ------------------------------------------------------------------

GQLParser::ListElementContext::ListElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionContext* GQLParser::ListElementContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::ListElementContext::getRuleIndex() const {
  return GQLParser::RuleListElement;
}


GQLParser::ListElementContext* GQLParser::listElement() {
  ListElementContext *_localctx = _tracker.createInstance<ListElementContext>(_ctx, getState());
  enterRule(_localctx, 940, GQLParser::RuleListElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4188);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordConstructorContext ------------------------------------------------------------------

GQLParser::RecordConstructorContext::RecordConstructorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FieldsSpecificationContext* GQLParser::RecordConstructorContext::fieldsSpecification() {
  return getRuleContext<GQLParser::FieldsSpecificationContext>(0);
}

tree::TerminalNode* GQLParser::RecordConstructorContext::RECORD() {
  return getToken(GQLParser::RECORD, 0);
}


size_t GQLParser::RecordConstructorContext::getRuleIndex() const {
  return GQLParser::RuleRecordConstructor;
}


GQLParser::RecordConstructorContext* GQLParser::recordConstructor() {
  RecordConstructorContext *_localctx = _tracker.createInstance<RecordConstructorContext>(_ctx, getState());
  enterRule(_localctx, 942, GQLParser::RuleRecordConstructor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4191);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::RECORD) {
      setState(4190);
      match(GQLParser::RECORD);
    }
    setState(4193);
    fieldsSpecification();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldsSpecificationContext ------------------------------------------------------------------

GQLParser::FieldsSpecificationContext::FieldsSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FieldsSpecificationContext::LEFT_BRACE() {
  return getToken(GQLParser::LEFT_BRACE, 0);
}

tree::TerminalNode* GQLParser::FieldsSpecificationContext::RIGHT_BRACE() {
  return getToken(GQLParser::RIGHT_BRACE, 0);
}

GQLParser::FieldListContext* GQLParser::FieldsSpecificationContext::fieldList() {
  return getRuleContext<GQLParser::FieldListContext>(0);
}


size_t GQLParser::FieldsSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleFieldsSpecification;
}


GQLParser::FieldsSpecificationContext* GQLParser::fieldsSpecification() {
  FieldsSpecificationContext *_localctx = _tracker.createInstance<FieldsSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 944, GQLParser::RuleFieldsSpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4195);
    match(GQLParser::LEFT_BRACE);
    setState(4197);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE

    || _la == GQLParser::ACCENT_QUOTED_CHARACTER_SEQUENCE || ((((_la - 277) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 277)) & 281474976710655) != 0)) {
      setState(4196);
      fieldList();
    }
    setState(4199);
    match(GQLParser::RIGHT_BRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldListContext ------------------------------------------------------------------

GQLParser::FieldListContext::FieldListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::FieldContext *> GQLParser::FieldListContext::field() {
  return getRuleContexts<GQLParser::FieldContext>();
}

GQLParser::FieldContext* GQLParser::FieldListContext::field(size_t i) {
  return getRuleContext<GQLParser::FieldContext>(i);
}

std::vector<tree::TerminalNode *> GQLParser::FieldListContext::COMMA() {
  return getTokens(GQLParser::COMMA);
}

tree::TerminalNode* GQLParser::FieldListContext::COMMA(size_t i) {
  return getToken(GQLParser::COMMA, i);
}


size_t GQLParser::FieldListContext::getRuleIndex() const {
  return GQLParser::RuleFieldList;
}


GQLParser::FieldListContext* GQLParser::fieldList() {
  FieldListContext *_localctx = _tracker.createInstance<FieldListContext>(_ctx, getState());
  enterRule(_localctx, 946, GQLParser::RuleFieldList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4201);
    field();
    setState(4206);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == GQLParser::COMMA) {
      setState(4202);
      match(GQLParser::COMMA);
      setState(4203);
      field();
      setState(4208);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldContext ------------------------------------------------------------------

GQLParser::FieldContext::FieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::FieldNameContext* GQLParser::FieldContext::fieldName() {
  return getRuleContext<GQLParser::FieldNameContext>(0);
}

tree::TerminalNode* GQLParser::FieldContext::COLON() {
  return getToken(GQLParser::COLON, 0);
}

GQLParser::ValueExpressionContext* GQLParser::FieldContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::FieldContext::getRuleIndex() const {
  return GQLParser::RuleField;
}


GQLParser::FieldContext* GQLParser::field() {
  FieldContext *_localctx = _tracker.createInstance<FieldContext>(_ctx, getState());
  enterRule(_localctx, 948, GQLParser::RuleField);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4209);
    fieldName();
    setState(4210);
    match(GQLParser::COLON);
    setState(4211);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TruthValueContext ------------------------------------------------------------------

GQLParser::TruthValueContext::TruthValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TruthValueContext::BOOLEAN_LITERAL() {
  return getToken(GQLParser::BOOLEAN_LITERAL, 0);
}


size_t GQLParser::TruthValueContext::getRuleIndex() const {
  return GQLParser::RuleTruthValue;
}


GQLParser::TruthValueContext* GQLParser::truthValue() {
  TruthValueContext *_localctx = _tracker.createInstance<TruthValueContext>(_ctx, getState());
  enterRule(_localctx, 950, GQLParser::RuleTruthValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4213);
    match(GQLParser::BOOLEAN_LITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericValueExpressionContext ------------------------------------------------------------------

GQLParser::NumericValueExpressionContext::NumericValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<GQLParser::NumericValueExpressionContext *> GQLParser::NumericValueExpressionContext::numericValueExpression() {
  return getRuleContexts<GQLParser::NumericValueExpressionContext>();
}

GQLParser::NumericValueExpressionContext* GQLParser::NumericValueExpressionContext::numericValueExpression(size_t i) {
  return getRuleContext<GQLParser::NumericValueExpressionContext>(i);
}

tree::TerminalNode* GQLParser::NumericValueExpressionContext::PLUS_SIGN() {
  return getToken(GQLParser::PLUS_SIGN, 0);
}

tree::TerminalNode* GQLParser::NumericValueExpressionContext::MINUS_SIGN() {
  return getToken(GQLParser::MINUS_SIGN, 0);
}

GQLParser::ValueExpressionPrimaryContext* GQLParser::NumericValueExpressionContext::valueExpressionPrimary() {
  return getRuleContext<GQLParser::ValueExpressionPrimaryContext>(0);
}

GQLParser::NumericValueFunctionContext* GQLParser::NumericValueExpressionContext::numericValueFunction() {
  return getRuleContext<GQLParser::NumericValueFunctionContext>(0);
}

tree::TerminalNode* GQLParser::NumericValueExpressionContext::ASTERISK() {
  return getToken(GQLParser::ASTERISK, 0);
}

tree::TerminalNode* GQLParser::NumericValueExpressionContext::SOLIDUS() {
  return getToken(GQLParser::SOLIDUS, 0);
}


size_t GQLParser::NumericValueExpressionContext::getRuleIndex() const {
  return GQLParser::RuleNumericValueExpression;
}



GQLParser::NumericValueExpressionContext* GQLParser::numericValueExpression() {
   return numericValueExpression(0);
}

GQLParser::NumericValueExpressionContext* GQLParser::numericValueExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  GQLParser::NumericValueExpressionContext *_localctx = _tracker.createInstance<NumericValueExpressionContext>(_ctx, parentState);
  GQLParser::NumericValueExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 952;
  enterRecursionRule(_localctx, 952, GQLParser::RuleNumericValueExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(4220);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::MINUS_SIGN:
      case GQLParser::PLUS_SIGN: {
        setState(4216);
        antlrcpp::downCast<NumericValueExpressionContext *>(_localctx)->sign = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == GQLParser::MINUS_SIGN

        || _la == GQLParser::PLUS_SIGN)) {
          antlrcpp::downCast<NumericValueExpressionContext *>(_localctx)->sign = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(4217);
        numericValueExpression(5);
        break;
      }

      case GQLParser::BOOLEAN_LITERAL:
      case GQLParser::SINGLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::BYTE_STRING_LITERAL:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER:
      case GQLParser::UNSIGNED_HEXADECIMAL_INTEGER:
      case GQLParser::UNSIGNED_OCTAL_INTEGER:
      case GQLParser::UNSIGNED_BINARY_INTEGER:
      case GQLParser::ARRAY:
      case GQLParser::AVG:
      case GQLParser::CASE:
      case GQLParser::CAST:
      case GQLParser::COALESCE:
      case GQLParser::COLLECT_LIST:
      case GQLParser::COUNT:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DURATION:
      case GQLParser::ELEMENT_ID:
      case GQLParser::LET:
      case GQLParser::LIST:
      case GQLParser::MAX:
      case GQLParser::MIN:
      case GQLParser::NULL_KW:
      case GQLParser::NULLIF:
      case GQLParser::PATH:
      case GQLParser::PERCENTILE_CONT:
      case GQLParser::PERCENTILE_DISC:
      case GQLParser::RECORD:
      case GQLParser::SESSION_USER:
      case GQLParser::STDDEV_POP:
      case GQLParser::STDDEV_SAMP:
      case GQLParser::SUM:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::VALUE:
      case GQLParser::ACYCLIC:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::CONNECTING:
      case GQLParser::DESTINATION:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::EDGE:
      case GQLParser::EDGES:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENTS:
      case GQLParser::FIRST:
      case GQLParser::GRAPH:
      case GQLParser::GROUPS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODE:
      case GQLParser::NORMALIZED:
      case GQLParser::ONLY:
      case GQLParser::ORDINALITY:
      case GQLParser::PROPERTY:
      case GQLParser::READ:
      case GQLParser::RELATIONSHIP:
      case GQLParser::RELATIONSHIPS:
      case GQLParser::REPEATABLE:
      case GQLParser::SHORTEST:
      case GQLParser::SIMPLE:
      case GQLParser::SOURCE:
      case GQLParser::TABLE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRANSACTION:
      case GQLParser::TYPE:
      case GQLParser::UNDIRECTED:
      case GQLParser::VERTEX:
      case GQLParser::WALK:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::ZONE:
      case GQLParser::REGULAR_IDENTIFIER:
      case GQLParser::GENERAL_PARAMETER_REFERENCE:
      case GQLParser::LEFT_BRACE:
      case GQLParser::LEFT_BRACKET:
      case GQLParser::LEFT_PAREN: {
        setState(4218);
        valueExpressionPrimary(0);
        break;
      }

      case GQLParser::ABS:
      case GQLParser::ACOS:
      case GQLParser::ASIN:
      case GQLParser::ATAN:
      case GQLParser::BYTE_LENGTH:
      case GQLParser::CARDINALITY:
      case GQLParser::CEIL:
      case GQLParser::CEILING:
      case GQLParser::CHAR_LENGTH:
      case GQLParser::CHARACTER_LENGTH:
      case GQLParser::COS:
      case GQLParser::COSH:
      case GQLParser::COT:
      case GQLParser::DEGREES:
      case GQLParser::EXP:
      case GQLParser::FLOOR:
      case GQLParser::LN:
      case GQLParser::LOG_KW:
      case GQLParser::LOG10:
      case GQLParser::MOD:
      case GQLParser::OCTET_LENGTH:
      case GQLParser::PATH_LENGTH:
      case GQLParser::POWER:
      case GQLParser::RADIANS:
      case GQLParser::SIN:
      case GQLParser::SINH:
      case GQLParser::SIZE:
      case GQLParser::SQRT:
      case GQLParser::TAN:
      case GQLParser::TANH: {
        setState(4219);
        numericValueFunction();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(4230);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 474, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(4228);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 473, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<NumericValueExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleNumericValueExpression);
          setState(4222);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(4223);
          antlrcpp::downCast<NumericValueExpressionContext *>(_localctx)->operator_ = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GQLParser::ASTERISK

          || _la == GQLParser::SOLIDUS)) {
            antlrcpp::downCast<NumericValueExpressionContext *>(_localctx)->operator_ = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(4224);
          numericValueExpression(5);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<NumericValueExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleNumericValueExpression);
          setState(4225);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(4226);
          antlrcpp::downCast<NumericValueExpressionContext *>(_localctx)->operator_ = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == GQLParser::MINUS_SIGN

          || _la == GQLParser::PLUS_SIGN)) {
            antlrcpp::downCast<NumericValueExpressionContext *>(_localctx)->operator_ = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(4227);
          numericValueExpression(4);
          break;
        }

        default:
          break;
        } 
      }
      setState(4232);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 474, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- NumericValueFunctionContext ------------------------------------------------------------------

GQLParser::NumericValueFunctionContext::NumericValueFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::LengthExpressionContext* GQLParser::NumericValueFunctionContext::lengthExpression() {
  return getRuleContext<GQLParser::LengthExpressionContext>(0);
}

GQLParser::CardinalityExpressionContext* GQLParser::NumericValueFunctionContext::cardinalityExpression() {
  return getRuleContext<GQLParser::CardinalityExpressionContext>(0);
}

GQLParser::AbsoluteValueExpressionContext* GQLParser::NumericValueFunctionContext::absoluteValueExpression() {
  return getRuleContext<GQLParser::AbsoluteValueExpressionContext>(0);
}

GQLParser::ModulusExpressionContext* GQLParser::NumericValueFunctionContext::modulusExpression() {
  return getRuleContext<GQLParser::ModulusExpressionContext>(0);
}

GQLParser::TrigonometricFunctionContext* GQLParser::NumericValueFunctionContext::trigonometricFunction() {
  return getRuleContext<GQLParser::TrigonometricFunctionContext>(0);
}

GQLParser::GeneralLogarithmFunctionContext* GQLParser::NumericValueFunctionContext::generalLogarithmFunction() {
  return getRuleContext<GQLParser::GeneralLogarithmFunctionContext>(0);
}

GQLParser::CommonLogarithmContext* GQLParser::NumericValueFunctionContext::commonLogarithm() {
  return getRuleContext<GQLParser::CommonLogarithmContext>(0);
}

GQLParser::NaturalLogarithmContext* GQLParser::NumericValueFunctionContext::naturalLogarithm() {
  return getRuleContext<GQLParser::NaturalLogarithmContext>(0);
}

GQLParser::ExponentialFunctionContext* GQLParser::NumericValueFunctionContext::exponentialFunction() {
  return getRuleContext<GQLParser::ExponentialFunctionContext>(0);
}

GQLParser::PowerFunctionContext* GQLParser::NumericValueFunctionContext::powerFunction() {
  return getRuleContext<GQLParser::PowerFunctionContext>(0);
}

GQLParser::SquareRootContext* GQLParser::NumericValueFunctionContext::squareRoot() {
  return getRuleContext<GQLParser::SquareRootContext>(0);
}

GQLParser::FloorFunctionContext* GQLParser::NumericValueFunctionContext::floorFunction() {
  return getRuleContext<GQLParser::FloorFunctionContext>(0);
}

GQLParser::CeilingFunctionContext* GQLParser::NumericValueFunctionContext::ceilingFunction() {
  return getRuleContext<GQLParser::CeilingFunctionContext>(0);
}


size_t GQLParser::NumericValueFunctionContext::getRuleIndex() const {
  return GQLParser::RuleNumericValueFunction;
}


GQLParser::NumericValueFunctionContext* GQLParser::numericValueFunction() {
  NumericValueFunctionContext *_localctx = _tracker.createInstance<NumericValueFunctionContext>(_ctx, getState());
  enterRule(_localctx, 954, GQLParser::RuleNumericValueFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4246);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::BYTE_LENGTH:
      case GQLParser::CHAR_LENGTH:
      case GQLParser::CHARACTER_LENGTH:
      case GQLParser::OCTET_LENGTH:
      case GQLParser::PATH_LENGTH: {
        enterOuterAlt(_localctx, 1);
        setState(4233);
        lengthExpression();
        break;
      }

      case GQLParser::CARDINALITY:
      case GQLParser::SIZE: {
        enterOuterAlt(_localctx, 2);
        setState(4234);
        cardinalityExpression();
        break;
      }

      case GQLParser::ABS: {
        enterOuterAlt(_localctx, 3);
        setState(4235);
        absoluteValueExpression();
        break;
      }

      case GQLParser::MOD: {
        enterOuterAlt(_localctx, 4);
        setState(4236);
        modulusExpression();
        break;
      }

      case GQLParser::ACOS:
      case GQLParser::ASIN:
      case GQLParser::ATAN:
      case GQLParser::COS:
      case GQLParser::COSH:
      case GQLParser::COT:
      case GQLParser::DEGREES:
      case GQLParser::RADIANS:
      case GQLParser::SIN:
      case GQLParser::SINH:
      case GQLParser::TAN:
      case GQLParser::TANH: {
        enterOuterAlt(_localctx, 5);
        setState(4237);
        trigonometricFunction();
        break;
      }

      case GQLParser::LOG_KW: {
        enterOuterAlt(_localctx, 6);
        setState(4238);
        generalLogarithmFunction();
        break;
      }

      case GQLParser::LOG10: {
        enterOuterAlt(_localctx, 7);
        setState(4239);
        commonLogarithm();
        break;
      }

      case GQLParser::LN: {
        enterOuterAlt(_localctx, 8);
        setState(4240);
        naturalLogarithm();
        break;
      }

      case GQLParser::EXP: {
        enterOuterAlt(_localctx, 9);
        setState(4241);
        exponentialFunction();
        break;
      }

      case GQLParser::POWER: {
        enterOuterAlt(_localctx, 10);
        setState(4242);
        powerFunction();
        break;
      }

      case GQLParser::SQRT: {
        enterOuterAlt(_localctx, 11);
        setState(4243);
        squareRoot();
        break;
      }

      case GQLParser::FLOOR: {
        enterOuterAlt(_localctx, 12);
        setState(4244);
        floorFunction();
        break;
      }

      case GQLParser::CEIL:
      case GQLParser::CEILING: {
        enterOuterAlt(_localctx, 13);
        setState(4245);
        ceilingFunction();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LengthExpressionContext ------------------------------------------------------------------

GQLParser::LengthExpressionContext::LengthExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CharLengthExpressionContext* GQLParser::LengthExpressionContext::charLengthExpression() {
  return getRuleContext<GQLParser::CharLengthExpressionContext>(0);
}

GQLParser::ByteLengthExpressionContext* GQLParser::LengthExpressionContext::byteLengthExpression() {
  return getRuleContext<GQLParser::ByteLengthExpressionContext>(0);
}

GQLParser::PathLengthExpressionContext* GQLParser::LengthExpressionContext::pathLengthExpression() {
  return getRuleContext<GQLParser::PathLengthExpressionContext>(0);
}


size_t GQLParser::LengthExpressionContext::getRuleIndex() const {
  return GQLParser::RuleLengthExpression;
}


GQLParser::LengthExpressionContext* GQLParser::lengthExpression() {
  LengthExpressionContext *_localctx = _tracker.createInstance<LengthExpressionContext>(_ctx, getState());
  enterRule(_localctx, 956, GQLParser::RuleLengthExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4251);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::CHAR_LENGTH:
      case GQLParser::CHARACTER_LENGTH: {
        enterOuterAlt(_localctx, 1);
        setState(4248);
        charLengthExpression();
        break;
      }

      case GQLParser::BYTE_LENGTH:
      case GQLParser::OCTET_LENGTH: {
        enterOuterAlt(_localctx, 2);
        setState(4249);
        byteLengthExpression();
        break;
      }

      case GQLParser::PATH_LENGTH: {
        enterOuterAlt(_localctx, 3);
        setState(4250);
        pathLengthExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CardinalityExpressionContext ------------------------------------------------------------------

GQLParser::CardinalityExpressionContext::CardinalityExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CardinalityExpressionContext::CARDINALITY() {
  return getToken(GQLParser::CARDINALITY, 0);
}

tree::TerminalNode* GQLParser::CardinalityExpressionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::CardinalityExpressionArgumentContext* GQLParser::CardinalityExpressionContext::cardinalityExpressionArgument() {
  return getRuleContext<GQLParser::CardinalityExpressionArgumentContext>(0);
}

tree::TerminalNode* GQLParser::CardinalityExpressionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::CardinalityExpressionContext::SIZE() {
  return getToken(GQLParser::SIZE, 0);
}

GQLParser::ListValueExpressionContext* GQLParser::CardinalityExpressionContext::listValueExpression() {
  return getRuleContext<GQLParser::ListValueExpressionContext>(0);
}


size_t GQLParser::CardinalityExpressionContext::getRuleIndex() const {
  return GQLParser::RuleCardinalityExpression;
}


GQLParser::CardinalityExpressionContext* GQLParser::cardinalityExpression() {
  CardinalityExpressionContext *_localctx = _tracker.createInstance<CardinalityExpressionContext>(_ctx, getState());
  enterRule(_localctx, 958, GQLParser::RuleCardinalityExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4263);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::CARDINALITY: {
        enterOuterAlt(_localctx, 1);
        setState(4253);
        match(GQLParser::CARDINALITY);
        setState(4254);
        match(GQLParser::LEFT_PAREN);
        setState(4255);
        cardinalityExpressionArgument();
        setState(4256);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

      case GQLParser::SIZE: {
        enterOuterAlt(_localctx, 2);
        setState(4258);
        match(GQLParser::SIZE);
        setState(4259);
        match(GQLParser::LEFT_PAREN);
        setState(4260);
        listValueExpression();
        setState(4261);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CardinalityExpressionArgumentContext ------------------------------------------------------------------

GQLParser::CardinalityExpressionArgumentContext::CardinalityExpressionArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionContext* GQLParser::CardinalityExpressionArgumentContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::CardinalityExpressionArgumentContext::getRuleIndex() const {
  return GQLParser::RuleCardinalityExpressionArgument;
}


GQLParser::CardinalityExpressionArgumentContext* GQLParser::cardinalityExpressionArgument() {
  CardinalityExpressionArgumentContext *_localctx = _tracker.createInstance<CardinalityExpressionArgumentContext>(_ctx, getState());
  enterRule(_localctx, 960, GQLParser::RuleCardinalityExpressionArgument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4265);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharLengthExpressionContext ------------------------------------------------------------------

GQLParser::CharLengthExpressionContext::CharLengthExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CharLengthExpressionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::CharacterStringValueExpressionContext* GQLParser::CharLengthExpressionContext::characterStringValueExpression() {
  return getRuleContext<GQLParser::CharacterStringValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::CharLengthExpressionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::CharLengthExpressionContext::CHAR_LENGTH() {
  return getToken(GQLParser::CHAR_LENGTH, 0);
}

tree::TerminalNode* GQLParser::CharLengthExpressionContext::CHARACTER_LENGTH() {
  return getToken(GQLParser::CHARACTER_LENGTH, 0);
}


size_t GQLParser::CharLengthExpressionContext::getRuleIndex() const {
  return GQLParser::RuleCharLengthExpression;
}


GQLParser::CharLengthExpressionContext* GQLParser::charLengthExpression() {
  CharLengthExpressionContext *_localctx = _tracker.createInstance<CharLengthExpressionContext>(_ctx, getState());
  enterRule(_localctx, 962, GQLParser::RuleCharLengthExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4267);
    _la = _input->LA(1);
    if (!(_la == GQLParser::CHAR_LENGTH

    || _la == GQLParser::CHARACTER_LENGTH)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4268);
    match(GQLParser::LEFT_PAREN);
    setState(4269);
    characterStringValueExpression();
    setState(4270);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ByteLengthExpressionContext ------------------------------------------------------------------

GQLParser::ByteLengthExpressionContext::ByteLengthExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ByteLengthExpressionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ByteStringValueExpressionContext* GQLParser::ByteLengthExpressionContext::byteStringValueExpression() {
  return getRuleContext<GQLParser::ByteStringValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::ByteLengthExpressionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::ByteLengthExpressionContext::BYTE_LENGTH() {
  return getToken(GQLParser::BYTE_LENGTH, 0);
}

tree::TerminalNode* GQLParser::ByteLengthExpressionContext::OCTET_LENGTH() {
  return getToken(GQLParser::OCTET_LENGTH, 0);
}


size_t GQLParser::ByteLengthExpressionContext::getRuleIndex() const {
  return GQLParser::RuleByteLengthExpression;
}


GQLParser::ByteLengthExpressionContext* GQLParser::byteLengthExpression() {
  ByteLengthExpressionContext *_localctx = _tracker.createInstance<ByteLengthExpressionContext>(_ctx, getState());
  enterRule(_localctx, 964, GQLParser::RuleByteLengthExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4272);
    _la = _input->LA(1);
    if (!(_la == GQLParser::BYTE_LENGTH || _la == GQLParser::OCTET_LENGTH)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4273);
    match(GQLParser::LEFT_PAREN);
    setState(4274);
    byteStringValueExpression();
    setState(4275);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathLengthExpressionContext ------------------------------------------------------------------

GQLParser::PathLengthExpressionContext::PathLengthExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::PathLengthExpressionContext::PATH_LENGTH() {
  return getToken(GQLParser::PATH_LENGTH, 0);
}

tree::TerminalNode* GQLParser::PathLengthExpressionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::PathValueExpressionContext* GQLParser::PathLengthExpressionContext::pathValueExpression() {
  return getRuleContext<GQLParser::PathValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::PathLengthExpressionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::PathLengthExpressionContext::getRuleIndex() const {
  return GQLParser::RulePathLengthExpression;
}


GQLParser::PathLengthExpressionContext* GQLParser::pathLengthExpression() {
  PathLengthExpressionContext *_localctx = _tracker.createInstance<PathLengthExpressionContext>(_ctx, getState());
  enterRule(_localctx, 966, GQLParser::RulePathLengthExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4277);
    match(GQLParser::PATH_LENGTH);
    setState(4278);
    match(GQLParser::LEFT_PAREN);
    setState(4279);
    pathValueExpression();
    setState(4280);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AbsoluteValueExpressionContext ------------------------------------------------------------------

GQLParser::AbsoluteValueExpressionContext::AbsoluteValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::AbsoluteValueExpressionContext::ABS() {
  return getToken(GQLParser::ABS, 0);
}

tree::TerminalNode* GQLParser::AbsoluteValueExpressionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::ValueExpressionContext* GQLParser::AbsoluteValueExpressionContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::AbsoluteValueExpressionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::AbsoluteValueExpressionContext::getRuleIndex() const {
  return GQLParser::RuleAbsoluteValueExpression;
}


GQLParser::AbsoluteValueExpressionContext* GQLParser::absoluteValueExpression() {
  AbsoluteValueExpressionContext *_localctx = _tracker.createInstance<AbsoluteValueExpressionContext>(_ctx, getState());
  enterRule(_localctx, 968, GQLParser::RuleAbsoluteValueExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4282);
    match(GQLParser::ABS);
    setState(4283);
    match(GQLParser::LEFT_PAREN);
    setState(4284);
    valueExpression(0);
    setState(4285);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModulusExpressionContext ------------------------------------------------------------------

GQLParser::ModulusExpressionContext::ModulusExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ModulusExpressionContext::MOD() {
  return getToken(GQLParser::MOD, 0);
}

tree::TerminalNode* GQLParser::ModulusExpressionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::NumericValueExpressionDividendContext* GQLParser::ModulusExpressionContext::numericValueExpressionDividend() {
  return getRuleContext<GQLParser::NumericValueExpressionDividendContext>(0);
}

tree::TerminalNode* GQLParser::ModulusExpressionContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

GQLParser::NumericValueExpressionDivisorContext* GQLParser::ModulusExpressionContext::numericValueExpressionDivisor() {
  return getRuleContext<GQLParser::NumericValueExpressionDivisorContext>(0);
}

tree::TerminalNode* GQLParser::ModulusExpressionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::ModulusExpressionContext::getRuleIndex() const {
  return GQLParser::RuleModulusExpression;
}


GQLParser::ModulusExpressionContext* GQLParser::modulusExpression() {
  ModulusExpressionContext *_localctx = _tracker.createInstance<ModulusExpressionContext>(_ctx, getState());
  enterRule(_localctx, 970, GQLParser::RuleModulusExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4287);
    match(GQLParser::MOD);
    setState(4288);
    match(GQLParser::LEFT_PAREN);
    setState(4289);
    numericValueExpressionDividend();
    setState(4290);
    match(GQLParser::COMMA);
    setState(4291);
    numericValueExpressionDivisor();
    setState(4292);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericValueExpressionDividendContext ------------------------------------------------------------------

GQLParser::NumericValueExpressionDividendContext::NumericValueExpressionDividendContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NumericValueExpressionContext* GQLParser::NumericValueExpressionDividendContext::numericValueExpression() {
  return getRuleContext<GQLParser::NumericValueExpressionContext>(0);
}


size_t GQLParser::NumericValueExpressionDividendContext::getRuleIndex() const {
  return GQLParser::RuleNumericValueExpressionDividend;
}


GQLParser::NumericValueExpressionDividendContext* GQLParser::numericValueExpressionDividend() {
  NumericValueExpressionDividendContext *_localctx = _tracker.createInstance<NumericValueExpressionDividendContext>(_ctx, getState());
  enterRule(_localctx, 972, GQLParser::RuleNumericValueExpressionDividend);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4294);
    numericValueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericValueExpressionDivisorContext ------------------------------------------------------------------

GQLParser::NumericValueExpressionDivisorContext::NumericValueExpressionDivisorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NumericValueExpressionContext* GQLParser::NumericValueExpressionDivisorContext::numericValueExpression() {
  return getRuleContext<GQLParser::NumericValueExpressionContext>(0);
}


size_t GQLParser::NumericValueExpressionDivisorContext::getRuleIndex() const {
  return GQLParser::RuleNumericValueExpressionDivisor;
}


GQLParser::NumericValueExpressionDivisorContext* GQLParser::numericValueExpressionDivisor() {
  NumericValueExpressionDivisorContext *_localctx = _tracker.createInstance<NumericValueExpressionDivisorContext>(_ctx, getState());
  enterRule(_localctx, 974, GQLParser::RuleNumericValueExpressionDivisor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4296);
    numericValueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrigonometricFunctionContext ------------------------------------------------------------------

GQLParser::TrigonometricFunctionContext::TrigonometricFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::TrigonometricFunctionNameContext* GQLParser::TrigonometricFunctionContext::trigonometricFunctionName() {
  return getRuleContext<GQLParser::TrigonometricFunctionNameContext>(0);
}

tree::TerminalNode* GQLParser::TrigonometricFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::NumericValueExpressionContext* GQLParser::TrigonometricFunctionContext::numericValueExpression() {
  return getRuleContext<GQLParser::NumericValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::TrigonometricFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::TrigonometricFunctionContext::getRuleIndex() const {
  return GQLParser::RuleTrigonometricFunction;
}


GQLParser::TrigonometricFunctionContext* GQLParser::trigonometricFunction() {
  TrigonometricFunctionContext *_localctx = _tracker.createInstance<TrigonometricFunctionContext>(_ctx, getState());
  enterRule(_localctx, 976, GQLParser::RuleTrigonometricFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4298);
    trigonometricFunctionName();
    setState(4299);
    match(GQLParser::LEFT_PAREN);
    setState(4300);
    numericValueExpression(0);
    setState(4301);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrigonometricFunctionNameContext ------------------------------------------------------------------

GQLParser::TrigonometricFunctionNameContext::TrigonometricFunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TrigonometricFunctionNameContext::SIN() {
  return getToken(GQLParser::SIN, 0);
}

tree::TerminalNode* GQLParser::TrigonometricFunctionNameContext::COS() {
  return getToken(GQLParser::COS, 0);
}

tree::TerminalNode* GQLParser::TrigonometricFunctionNameContext::TAN() {
  return getToken(GQLParser::TAN, 0);
}

tree::TerminalNode* GQLParser::TrigonometricFunctionNameContext::COT() {
  return getToken(GQLParser::COT, 0);
}

tree::TerminalNode* GQLParser::TrigonometricFunctionNameContext::SINH() {
  return getToken(GQLParser::SINH, 0);
}

tree::TerminalNode* GQLParser::TrigonometricFunctionNameContext::COSH() {
  return getToken(GQLParser::COSH, 0);
}

tree::TerminalNode* GQLParser::TrigonometricFunctionNameContext::TANH() {
  return getToken(GQLParser::TANH, 0);
}

tree::TerminalNode* GQLParser::TrigonometricFunctionNameContext::ASIN() {
  return getToken(GQLParser::ASIN, 0);
}

tree::TerminalNode* GQLParser::TrigonometricFunctionNameContext::ACOS() {
  return getToken(GQLParser::ACOS, 0);
}

tree::TerminalNode* GQLParser::TrigonometricFunctionNameContext::ATAN() {
  return getToken(GQLParser::ATAN, 0);
}

tree::TerminalNode* GQLParser::TrigonometricFunctionNameContext::DEGREES() {
  return getToken(GQLParser::DEGREES, 0);
}

tree::TerminalNode* GQLParser::TrigonometricFunctionNameContext::RADIANS() {
  return getToken(GQLParser::RADIANS, 0);
}


size_t GQLParser::TrigonometricFunctionNameContext::getRuleIndex() const {
  return GQLParser::RuleTrigonometricFunctionName;
}


GQLParser::TrigonometricFunctionNameContext* GQLParser::trigonometricFunctionName() {
  TrigonometricFunctionNameContext *_localctx = _tracker.createInstance<TrigonometricFunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 978, GQLParser::RuleTrigonometricFunctionName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4303);
    _la = _input->LA(1);
    if (!(((((_la - 21) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 21)) & 18016322654833153) != 0) || ((((_la - 174) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 174)) & 3222011905) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GeneralLogarithmFunctionContext ------------------------------------------------------------------

GQLParser::GeneralLogarithmFunctionContext::GeneralLogarithmFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GeneralLogarithmFunctionContext::LOG_KW() {
  return getToken(GQLParser::LOG_KW, 0);
}

tree::TerminalNode* GQLParser::GeneralLogarithmFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::GeneralLogarithmBaseContext* GQLParser::GeneralLogarithmFunctionContext::generalLogarithmBase() {
  return getRuleContext<GQLParser::GeneralLogarithmBaseContext>(0);
}

tree::TerminalNode* GQLParser::GeneralLogarithmFunctionContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

GQLParser::GeneralLogarithmArgumentContext* GQLParser::GeneralLogarithmFunctionContext::generalLogarithmArgument() {
  return getRuleContext<GQLParser::GeneralLogarithmArgumentContext>(0);
}

tree::TerminalNode* GQLParser::GeneralLogarithmFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::GeneralLogarithmFunctionContext::getRuleIndex() const {
  return GQLParser::RuleGeneralLogarithmFunction;
}


GQLParser::GeneralLogarithmFunctionContext* GQLParser::generalLogarithmFunction() {
  GeneralLogarithmFunctionContext *_localctx = _tracker.createInstance<GeneralLogarithmFunctionContext>(_ctx, getState());
  enterRule(_localctx, 980, GQLParser::RuleGeneralLogarithmFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4305);
    match(GQLParser::LOG_KW);
    setState(4306);
    match(GQLParser::LEFT_PAREN);
    setState(4307);
    generalLogarithmBase();
    setState(4308);
    match(GQLParser::COMMA);
    setState(4309);
    generalLogarithmArgument();
    setState(4310);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GeneralLogarithmBaseContext ------------------------------------------------------------------

GQLParser::GeneralLogarithmBaseContext::GeneralLogarithmBaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NumericValueExpressionContext* GQLParser::GeneralLogarithmBaseContext::numericValueExpression() {
  return getRuleContext<GQLParser::NumericValueExpressionContext>(0);
}


size_t GQLParser::GeneralLogarithmBaseContext::getRuleIndex() const {
  return GQLParser::RuleGeneralLogarithmBase;
}


GQLParser::GeneralLogarithmBaseContext* GQLParser::generalLogarithmBase() {
  GeneralLogarithmBaseContext *_localctx = _tracker.createInstance<GeneralLogarithmBaseContext>(_ctx, getState());
  enterRule(_localctx, 982, GQLParser::RuleGeneralLogarithmBase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4312);
    numericValueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GeneralLogarithmArgumentContext ------------------------------------------------------------------

GQLParser::GeneralLogarithmArgumentContext::GeneralLogarithmArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NumericValueExpressionContext* GQLParser::GeneralLogarithmArgumentContext::numericValueExpression() {
  return getRuleContext<GQLParser::NumericValueExpressionContext>(0);
}


size_t GQLParser::GeneralLogarithmArgumentContext::getRuleIndex() const {
  return GQLParser::RuleGeneralLogarithmArgument;
}


GQLParser::GeneralLogarithmArgumentContext* GQLParser::generalLogarithmArgument() {
  GeneralLogarithmArgumentContext *_localctx = _tracker.createInstance<GeneralLogarithmArgumentContext>(_ctx, getState());
  enterRule(_localctx, 984, GQLParser::RuleGeneralLogarithmArgument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4314);
    numericValueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommonLogarithmContext ------------------------------------------------------------------

GQLParser::CommonLogarithmContext::CommonLogarithmContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CommonLogarithmContext::LOG10() {
  return getToken(GQLParser::LOG10, 0);
}

tree::TerminalNode* GQLParser::CommonLogarithmContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::NumericValueExpressionContext* GQLParser::CommonLogarithmContext::numericValueExpression() {
  return getRuleContext<GQLParser::NumericValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::CommonLogarithmContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::CommonLogarithmContext::getRuleIndex() const {
  return GQLParser::RuleCommonLogarithm;
}


GQLParser::CommonLogarithmContext* GQLParser::commonLogarithm() {
  CommonLogarithmContext *_localctx = _tracker.createInstance<CommonLogarithmContext>(_ctx, getState());
  enterRule(_localctx, 986, GQLParser::RuleCommonLogarithm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4316);
    match(GQLParser::LOG10);
    setState(4317);
    match(GQLParser::LEFT_PAREN);
    setState(4318);
    numericValueExpression(0);
    setState(4319);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NaturalLogarithmContext ------------------------------------------------------------------

GQLParser::NaturalLogarithmContext::NaturalLogarithmContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NaturalLogarithmContext::LN() {
  return getToken(GQLParser::LN, 0);
}

tree::TerminalNode* GQLParser::NaturalLogarithmContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::NumericValueExpressionContext* GQLParser::NaturalLogarithmContext::numericValueExpression() {
  return getRuleContext<GQLParser::NumericValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::NaturalLogarithmContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::NaturalLogarithmContext::getRuleIndex() const {
  return GQLParser::RuleNaturalLogarithm;
}


GQLParser::NaturalLogarithmContext* GQLParser::naturalLogarithm() {
  NaturalLogarithmContext *_localctx = _tracker.createInstance<NaturalLogarithmContext>(_ctx, getState());
  enterRule(_localctx, 988, GQLParser::RuleNaturalLogarithm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4321);
    match(GQLParser::LN);
    setState(4322);
    match(GQLParser::LEFT_PAREN);
    setState(4323);
    numericValueExpression(0);
    setState(4324);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExponentialFunctionContext ------------------------------------------------------------------

GQLParser::ExponentialFunctionContext::ExponentialFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ExponentialFunctionContext::EXP() {
  return getToken(GQLParser::EXP, 0);
}

tree::TerminalNode* GQLParser::ExponentialFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::NumericValueExpressionContext* GQLParser::ExponentialFunctionContext::numericValueExpression() {
  return getRuleContext<GQLParser::NumericValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::ExponentialFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::ExponentialFunctionContext::getRuleIndex() const {
  return GQLParser::RuleExponentialFunction;
}


GQLParser::ExponentialFunctionContext* GQLParser::exponentialFunction() {
  ExponentialFunctionContext *_localctx = _tracker.createInstance<ExponentialFunctionContext>(_ctx, getState());
  enterRule(_localctx, 990, GQLParser::RuleExponentialFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4326);
    match(GQLParser::EXP);
    setState(4327);
    match(GQLParser::LEFT_PAREN);
    setState(4328);
    numericValueExpression(0);
    setState(4329);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PowerFunctionContext ------------------------------------------------------------------

GQLParser::PowerFunctionContext::PowerFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::PowerFunctionContext::POWER() {
  return getToken(GQLParser::POWER, 0);
}

tree::TerminalNode* GQLParser::PowerFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::NumericValueExpressionBaseContext* GQLParser::PowerFunctionContext::numericValueExpressionBase() {
  return getRuleContext<GQLParser::NumericValueExpressionBaseContext>(0);
}

tree::TerminalNode* GQLParser::PowerFunctionContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

GQLParser::NumericValueExpressionExponentContext* GQLParser::PowerFunctionContext::numericValueExpressionExponent() {
  return getRuleContext<GQLParser::NumericValueExpressionExponentContext>(0);
}

tree::TerminalNode* GQLParser::PowerFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::PowerFunctionContext::getRuleIndex() const {
  return GQLParser::RulePowerFunction;
}


GQLParser::PowerFunctionContext* GQLParser::powerFunction() {
  PowerFunctionContext *_localctx = _tracker.createInstance<PowerFunctionContext>(_ctx, getState());
  enterRule(_localctx, 992, GQLParser::RulePowerFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4331);
    match(GQLParser::POWER);
    setState(4332);
    match(GQLParser::LEFT_PAREN);
    setState(4333);
    numericValueExpressionBase();
    setState(4334);
    match(GQLParser::COMMA);
    setState(4335);
    numericValueExpressionExponent();
    setState(4336);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericValueExpressionBaseContext ------------------------------------------------------------------

GQLParser::NumericValueExpressionBaseContext::NumericValueExpressionBaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NumericValueExpressionContext* GQLParser::NumericValueExpressionBaseContext::numericValueExpression() {
  return getRuleContext<GQLParser::NumericValueExpressionContext>(0);
}


size_t GQLParser::NumericValueExpressionBaseContext::getRuleIndex() const {
  return GQLParser::RuleNumericValueExpressionBase;
}


GQLParser::NumericValueExpressionBaseContext* GQLParser::numericValueExpressionBase() {
  NumericValueExpressionBaseContext *_localctx = _tracker.createInstance<NumericValueExpressionBaseContext>(_ctx, getState());
  enterRule(_localctx, 994, GQLParser::RuleNumericValueExpressionBase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4338);
    numericValueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumericValueExpressionExponentContext ------------------------------------------------------------------

GQLParser::NumericValueExpressionExponentContext::NumericValueExpressionExponentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NumericValueExpressionContext* GQLParser::NumericValueExpressionExponentContext::numericValueExpression() {
  return getRuleContext<GQLParser::NumericValueExpressionContext>(0);
}


size_t GQLParser::NumericValueExpressionExponentContext::getRuleIndex() const {
  return GQLParser::RuleNumericValueExpressionExponent;
}


GQLParser::NumericValueExpressionExponentContext* GQLParser::numericValueExpressionExponent() {
  NumericValueExpressionExponentContext *_localctx = _tracker.createInstance<NumericValueExpressionExponentContext>(_ctx, getState());
  enterRule(_localctx, 996, GQLParser::RuleNumericValueExpressionExponent);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4340);
    numericValueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SquareRootContext ------------------------------------------------------------------

GQLParser::SquareRootContext::SquareRootContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::SquareRootContext::SQRT() {
  return getToken(GQLParser::SQRT, 0);
}

tree::TerminalNode* GQLParser::SquareRootContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::NumericValueExpressionContext* GQLParser::SquareRootContext::numericValueExpression() {
  return getRuleContext<GQLParser::NumericValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::SquareRootContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::SquareRootContext::getRuleIndex() const {
  return GQLParser::RuleSquareRoot;
}


GQLParser::SquareRootContext* GQLParser::squareRoot() {
  SquareRootContext *_localctx = _tracker.createInstance<SquareRootContext>(_ctx, getState());
  enterRule(_localctx, 998, GQLParser::RuleSquareRoot);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4342);
    match(GQLParser::SQRT);
    setState(4343);
    match(GQLParser::LEFT_PAREN);
    setState(4344);
    numericValueExpression(0);
    setState(4345);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloorFunctionContext ------------------------------------------------------------------

GQLParser::FloorFunctionContext::FloorFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::FloorFunctionContext::FLOOR() {
  return getToken(GQLParser::FLOOR, 0);
}

tree::TerminalNode* GQLParser::FloorFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::NumericValueExpressionContext* GQLParser::FloorFunctionContext::numericValueExpression() {
  return getRuleContext<GQLParser::NumericValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::FloorFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::FloorFunctionContext::getRuleIndex() const {
  return GQLParser::RuleFloorFunction;
}


GQLParser::FloorFunctionContext* GQLParser::floorFunction() {
  FloorFunctionContext *_localctx = _tracker.createInstance<FloorFunctionContext>(_ctx, getState());
  enterRule(_localctx, 1000, GQLParser::RuleFloorFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4347);
    match(GQLParser::FLOOR);
    setState(4348);
    match(GQLParser::LEFT_PAREN);
    setState(4349);
    numericValueExpression(0);
    setState(4350);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CeilingFunctionContext ------------------------------------------------------------------

GQLParser::CeilingFunctionContext::CeilingFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CeilingFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::NumericValueExpressionContext* GQLParser::CeilingFunctionContext::numericValueExpression() {
  return getRuleContext<GQLParser::NumericValueExpressionContext>(0);
}

tree::TerminalNode* GQLParser::CeilingFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

tree::TerminalNode* GQLParser::CeilingFunctionContext::CEIL() {
  return getToken(GQLParser::CEIL, 0);
}

tree::TerminalNode* GQLParser::CeilingFunctionContext::CEILING() {
  return getToken(GQLParser::CEILING, 0);
}


size_t GQLParser::CeilingFunctionContext::getRuleIndex() const {
  return GQLParser::RuleCeilingFunction;
}


GQLParser::CeilingFunctionContext* GQLParser::ceilingFunction() {
  CeilingFunctionContext *_localctx = _tracker.createInstance<CeilingFunctionContext>(_ctx, getState());
  enterRule(_localctx, 1002, GQLParser::RuleCeilingFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4352);
    _la = _input->LA(1);
    if (!(_la == GQLParser::CEIL

    || _la == GQLParser::CEILING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4353);
    match(GQLParser::LEFT_PAREN);
    setState(4354);
    numericValueExpression(0);
    setState(4355);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharacterStringValueExpressionContext ------------------------------------------------------------------

GQLParser::CharacterStringValueExpressionContext::CharacterStringValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionContext* GQLParser::CharacterStringValueExpressionContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::CharacterStringValueExpressionContext::getRuleIndex() const {
  return GQLParser::RuleCharacterStringValueExpression;
}


GQLParser::CharacterStringValueExpressionContext* GQLParser::characterStringValueExpression() {
  CharacterStringValueExpressionContext *_localctx = _tracker.createInstance<CharacterStringValueExpressionContext>(_ctx, getState());
  enterRule(_localctx, 1004, GQLParser::RuleCharacterStringValueExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4357);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ByteStringValueExpressionContext ------------------------------------------------------------------

GQLParser::ByteStringValueExpressionContext::ByteStringValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionContext* GQLParser::ByteStringValueExpressionContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::ByteStringValueExpressionContext::getRuleIndex() const {
  return GQLParser::RuleByteStringValueExpression;
}


GQLParser::ByteStringValueExpressionContext* GQLParser::byteStringValueExpression() {
  ByteStringValueExpressionContext *_localctx = _tracker.createInstance<ByteStringValueExpressionContext>(_ctx, getState());
  enterRule(_localctx, 1006, GQLParser::RuleByteStringValueExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4359);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrimOperandsContext ------------------------------------------------------------------

GQLParser::TrimOperandsContext::TrimOperandsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::TrimCharacterOrByteStringSourceContext* GQLParser::TrimOperandsContext::trimCharacterOrByteStringSource() {
  return getRuleContext<GQLParser::TrimCharacterOrByteStringSourceContext>(0);
}

tree::TerminalNode* GQLParser::TrimOperandsContext::FROM() {
  return getToken(GQLParser::FROM, 0);
}

GQLParser::TrimSpecificationContext* GQLParser::TrimOperandsContext::trimSpecification() {
  return getRuleContext<GQLParser::TrimSpecificationContext>(0);
}

GQLParser::TrimCharacterOrByteStringContext* GQLParser::TrimOperandsContext::trimCharacterOrByteString() {
  return getRuleContext<GQLParser::TrimCharacterOrByteStringContext>(0);
}


size_t GQLParser::TrimOperandsContext::getRuleIndex() const {
  return GQLParser::RuleTrimOperands;
}


GQLParser::TrimOperandsContext* GQLParser::trimOperands() {
  TrimOperandsContext *_localctx = _tracker.createInstance<TrimOperandsContext>(_ctx, getState());
  enterRule(_localctx, 1008, GQLParser::RuleTrimOperands);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4368);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 480, _ctx)) {
    case 1: {
      setState(4362);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::BOTH || _la == GQLParser::LEADING || _la == GQLParser::TRAILING) {
        setState(4361);
        trimSpecification();
      }
      setState(4365);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 8762849302180528028) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 34464073969) != 0) || ((((_la - 129) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 129)) & -8011702113698201677) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 193)) & 26393111092643) != 0) || ((((_la - 277) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 277)) & 844424930131967) != 0) || ((((_la - 368) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 368)) & 151) != 0)) {
        setState(4364);
        trimCharacterOrByteString();
      }
      setState(4367);
      match(GQLParser::FROM);
      break;
    }

    default:
      break;
    }
    setState(4370);
    trimCharacterOrByteStringSource();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrimCharacterOrByteStringSourceContext ------------------------------------------------------------------

GQLParser::TrimCharacterOrByteStringSourceContext::TrimCharacterOrByteStringSourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionContext* GQLParser::TrimCharacterOrByteStringSourceContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::TrimCharacterOrByteStringSourceContext::getRuleIndex() const {
  return GQLParser::RuleTrimCharacterOrByteStringSource;
}


GQLParser::TrimCharacterOrByteStringSourceContext* GQLParser::trimCharacterOrByteStringSource() {
  TrimCharacterOrByteStringSourceContext *_localctx = _tracker.createInstance<TrimCharacterOrByteStringSourceContext>(_ctx, getState());
  enterRule(_localctx, 1010, GQLParser::RuleTrimCharacterOrByteStringSource);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4372);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrimSpecificationContext ------------------------------------------------------------------

GQLParser::TrimSpecificationContext::TrimSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TrimSpecificationContext::LEADING() {
  return getToken(GQLParser::LEADING, 0);
}

tree::TerminalNode* GQLParser::TrimSpecificationContext::TRAILING() {
  return getToken(GQLParser::TRAILING, 0);
}

tree::TerminalNode* GQLParser::TrimSpecificationContext::BOTH() {
  return getToken(GQLParser::BOTH, 0);
}


size_t GQLParser::TrimSpecificationContext::getRuleIndex() const {
  return GQLParser::RuleTrimSpecification;
}


GQLParser::TrimSpecificationContext* GQLParser::trimSpecification() {
  TrimSpecificationContext *_localctx = _tracker.createInstance<TrimSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 1012, GQLParser::RuleTrimSpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4374);
    _la = _input->LA(1);
    if (!(_la == GQLParser::BOTH || _la == GQLParser::LEADING || _la == GQLParser::TRAILING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrimCharacterOrByteStringContext ------------------------------------------------------------------

GQLParser::TrimCharacterOrByteStringContext::TrimCharacterOrByteStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionContext* GQLParser::TrimCharacterOrByteStringContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::TrimCharacterOrByteStringContext::getRuleIndex() const {
  return GQLParser::RuleTrimCharacterOrByteString;
}


GQLParser::TrimCharacterOrByteStringContext* GQLParser::trimCharacterOrByteString() {
  TrimCharacterOrByteStringContext *_localctx = _tracker.createInstance<TrimCharacterOrByteStringContext>(_ctx, getState());
  enterRule(_localctx, 1014, GQLParser::RuleTrimCharacterOrByteString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4376);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalFormContext ------------------------------------------------------------------

GQLParser::NormalFormContext::NormalFormContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NormalFormContext::NFC() {
  return getToken(GQLParser::NFC, 0);
}

tree::TerminalNode* GQLParser::NormalFormContext::NFD() {
  return getToken(GQLParser::NFD, 0);
}

tree::TerminalNode* GQLParser::NormalFormContext::NFKC() {
  return getToken(GQLParser::NFKC, 0);
}

tree::TerminalNode* GQLParser::NormalFormContext::NFKD() {
  return getToken(GQLParser::NFKD, 0);
}


size_t GQLParser::NormalFormContext::getRuleIndex() const {
  return GQLParser::RuleNormalForm;
}


GQLParser::NormalFormContext* GQLParser::normalForm() {
  NormalFormContext *_localctx = _tracker.createInstance<NormalFormContext>(_ctx, getState());
  enterRule(_localctx, 1016, GQLParser::RuleNormalForm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4378);
    _la = _input->LA(1);
    if (!(((((_la - 296) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 296)) & 15) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringLengthContext ------------------------------------------------------------------

GQLParser::StringLengthContext::StringLengthContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::NumericValueExpressionContext* GQLParser::StringLengthContext::numericValueExpression() {
  return getRuleContext<GQLParser::NumericValueExpressionContext>(0);
}


size_t GQLParser::StringLengthContext::getRuleIndex() const {
  return GQLParser::RuleStringLength;
}


GQLParser::StringLengthContext* GQLParser::stringLength() {
  StringLengthContext *_localctx = _tracker.createInstance<StringLengthContext>(_ctx, getState());
  enterRule(_localctx, 1018, GQLParser::RuleStringLength);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4380);
    numericValueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatetimeValueExpressionContext ------------------------------------------------------------------

GQLParser::DatetimeValueExpressionContext::DatetimeValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionContext* GQLParser::DatetimeValueExpressionContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::DatetimeValueExpressionContext::getRuleIndex() const {
  return GQLParser::RuleDatetimeValueExpression;
}


GQLParser::DatetimeValueExpressionContext* GQLParser::datetimeValueExpression() {
  DatetimeValueExpressionContext *_localctx = _tracker.createInstance<DatetimeValueExpressionContext>(_ctx, getState());
  enterRule(_localctx, 1020, GQLParser::RuleDatetimeValueExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4382);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatetimeValueFunctionContext ------------------------------------------------------------------

GQLParser::DatetimeValueFunctionContext::DatetimeValueFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DateFunctionContext* GQLParser::DatetimeValueFunctionContext::dateFunction() {
  return getRuleContext<GQLParser::DateFunctionContext>(0);
}

GQLParser::TimeFunctionContext* GQLParser::DatetimeValueFunctionContext::timeFunction() {
  return getRuleContext<GQLParser::TimeFunctionContext>(0);
}

GQLParser::DatetimeFunctionContext* GQLParser::DatetimeValueFunctionContext::datetimeFunction() {
  return getRuleContext<GQLParser::DatetimeFunctionContext>(0);
}

GQLParser::LocaltimeFunctionContext* GQLParser::DatetimeValueFunctionContext::localtimeFunction() {
  return getRuleContext<GQLParser::LocaltimeFunctionContext>(0);
}

GQLParser::LocaldatetimeFunctionContext* GQLParser::DatetimeValueFunctionContext::localdatetimeFunction() {
  return getRuleContext<GQLParser::LocaldatetimeFunctionContext>(0);
}


size_t GQLParser::DatetimeValueFunctionContext::getRuleIndex() const {
  return GQLParser::RuleDatetimeValueFunction;
}


GQLParser::DatetimeValueFunctionContext* GQLParser::datetimeValueFunction() {
  DatetimeValueFunctionContext *_localctx = _tracker.createInstance<DatetimeValueFunctionContext>(_ctx, getState());
  enterRule(_localctx, 1022, GQLParser::RuleDatetimeValueFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4389);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::CURRENT_DATE:
      case GQLParser::DATE: {
        enterOuterAlt(_localctx, 1);
        setState(4384);
        dateFunction();
        break;
      }

      case GQLParser::CURRENT_TIME:
      case GQLParser::ZONED_TIME: {
        enterOuterAlt(_localctx, 2);
        setState(4385);
        timeFunction();
        break;
      }

      case GQLParser::CURRENT_TIMESTAMP:
      case GQLParser::ZONED_DATETIME: {
        enterOuterAlt(_localctx, 3);
        setState(4386);
        datetimeFunction();
        break;
      }

      case GQLParser::LOCAL_TIME: {
        enterOuterAlt(_localctx, 4);
        setState(4387);
        localtimeFunction();
        break;
      }

      case GQLParser::LOCAL_DATETIME:
      case GQLParser::LOCAL_TIMESTAMP: {
        enterOuterAlt(_localctx, 5);
        setState(4388);
        localdatetimeFunction();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DateFunctionContext ------------------------------------------------------------------

GQLParser::DateFunctionContext::DateFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DateFunctionContext::CURRENT_DATE() {
  return getToken(GQLParser::CURRENT_DATE, 0);
}

tree::TerminalNode* GQLParser::DateFunctionContext::DATE() {
  return getToken(GQLParser::DATE, 0);
}

tree::TerminalNode* GQLParser::DateFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::DateFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::DateFunctionParametersContext* GQLParser::DateFunctionContext::dateFunctionParameters() {
  return getRuleContext<GQLParser::DateFunctionParametersContext>(0);
}


size_t GQLParser::DateFunctionContext::getRuleIndex() const {
  return GQLParser::RuleDateFunction;
}


GQLParser::DateFunctionContext* GQLParser::dateFunction() {
  DateFunctionContext *_localctx = _tracker.createInstance<DateFunctionContext>(_ctx, getState());
  enterRule(_localctx, 1024, GQLParser::RuleDateFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4398);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::CURRENT_DATE: {
        enterOuterAlt(_localctx, 1);
        setState(4391);
        match(GQLParser::CURRENT_DATE);
        break;
      }

      case GQLParser::DATE: {
        enterOuterAlt(_localctx, 2);
        setState(4392);
        match(GQLParser::DATE);
        setState(4393);
        match(GQLParser::LEFT_PAREN);
        setState(4395);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::SINGLE_QUOTED_CHARACTER_SEQUENCE

        || _la == GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE || _la == GQLParser::RECORD || _la == GQLParser::LEFT_BRACE) {
          setState(4394);
          dateFunctionParameters();
        }
        setState(4397);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimeFunctionContext ------------------------------------------------------------------

GQLParser::TimeFunctionContext::TimeFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TimeFunctionContext::CURRENT_TIME() {
  return getToken(GQLParser::CURRENT_TIME, 0);
}

tree::TerminalNode* GQLParser::TimeFunctionContext::ZONED_TIME() {
  return getToken(GQLParser::ZONED_TIME, 0);
}

tree::TerminalNode* GQLParser::TimeFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::TimeFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::TimeFunctionParametersContext* GQLParser::TimeFunctionContext::timeFunctionParameters() {
  return getRuleContext<GQLParser::TimeFunctionParametersContext>(0);
}


size_t GQLParser::TimeFunctionContext::getRuleIndex() const {
  return GQLParser::RuleTimeFunction;
}


GQLParser::TimeFunctionContext* GQLParser::timeFunction() {
  TimeFunctionContext *_localctx = _tracker.createInstance<TimeFunctionContext>(_ctx, getState());
  enterRule(_localctx, 1026, GQLParser::RuleTimeFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4407);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::CURRENT_TIME: {
        enterOuterAlt(_localctx, 1);
        setState(4400);
        match(GQLParser::CURRENT_TIME);
        break;
      }

      case GQLParser::ZONED_TIME: {
        enterOuterAlt(_localctx, 2);
        setState(4401);
        match(GQLParser::ZONED_TIME);
        setState(4402);
        match(GQLParser::LEFT_PAREN);
        setState(4404);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::SINGLE_QUOTED_CHARACTER_SEQUENCE

        || _la == GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE || _la == GQLParser::RECORD || _la == GQLParser::LEFT_BRACE) {
          setState(4403);
          timeFunctionParameters();
        }
        setState(4406);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocaltimeFunctionContext ------------------------------------------------------------------

GQLParser::LocaltimeFunctionContext::LocaltimeFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::LocaltimeFunctionContext::LOCAL_TIME() {
  return getToken(GQLParser::LOCAL_TIME, 0);
}

tree::TerminalNode* GQLParser::LocaltimeFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::LocaltimeFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::TimeFunctionParametersContext* GQLParser::LocaltimeFunctionContext::timeFunctionParameters() {
  return getRuleContext<GQLParser::TimeFunctionParametersContext>(0);
}


size_t GQLParser::LocaltimeFunctionContext::getRuleIndex() const {
  return GQLParser::RuleLocaltimeFunction;
}


GQLParser::LocaltimeFunctionContext* GQLParser::localtimeFunction() {
  LocaltimeFunctionContext *_localctx = _tracker.createInstance<LocaltimeFunctionContext>(_ctx, getState());
  enterRule(_localctx, 1028, GQLParser::RuleLocaltimeFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4409);
    match(GQLParser::LOCAL_TIME);
    setState(4415);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 487, _ctx)) {
    case 1: {
      setState(4410);
      match(GQLParser::LEFT_PAREN);
      setState(4412);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == GQLParser::SINGLE_QUOTED_CHARACTER_SEQUENCE

      || _la == GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE || _la == GQLParser::RECORD || _la == GQLParser::LEFT_BRACE) {
        setState(4411);
        timeFunctionParameters();
      }
      setState(4414);
      match(GQLParser::RIGHT_PAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatetimeFunctionContext ------------------------------------------------------------------

GQLParser::DatetimeFunctionContext::DatetimeFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DatetimeFunctionContext::CURRENT_TIMESTAMP() {
  return getToken(GQLParser::CURRENT_TIMESTAMP, 0);
}

tree::TerminalNode* GQLParser::DatetimeFunctionContext::ZONED_DATETIME() {
  return getToken(GQLParser::ZONED_DATETIME, 0);
}

tree::TerminalNode* GQLParser::DatetimeFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::DatetimeFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::DatetimeFunctionParametersContext* GQLParser::DatetimeFunctionContext::datetimeFunctionParameters() {
  return getRuleContext<GQLParser::DatetimeFunctionParametersContext>(0);
}


size_t GQLParser::DatetimeFunctionContext::getRuleIndex() const {
  return GQLParser::RuleDatetimeFunction;
}


GQLParser::DatetimeFunctionContext* GQLParser::datetimeFunction() {
  DatetimeFunctionContext *_localctx = _tracker.createInstance<DatetimeFunctionContext>(_ctx, getState());
  enterRule(_localctx, 1030, GQLParser::RuleDatetimeFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4424);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::CURRENT_TIMESTAMP: {
        enterOuterAlt(_localctx, 1);
        setState(4417);
        match(GQLParser::CURRENT_TIMESTAMP);
        break;
      }

      case GQLParser::ZONED_DATETIME: {
        enterOuterAlt(_localctx, 2);
        setState(4418);
        match(GQLParser::ZONED_DATETIME);
        setState(4419);
        match(GQLParser::LEFT_PAREN);
        setState(4421);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::SINGLE_QUOTED_CHARACTER_SEQUENCE

        || _la == GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE || _la == GQLParser::RECORD || _la == GQLParser::LEFT_BRACE) {
          setState(4420);
          datetimeFunctionParameters();
        }
        setState(4423);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocaldatetimeFunctionContext ------------------------------------------------------------------

GQLParser::LocaldatetimeFunctionContext::LocaldatetimeFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::LocaldatetimeFunctionContext::LOCAL_TIMESTAMP() {
  return getToken(GQLParser::LOCAL_TIMESTAMP, 0);
}

tree::TerminalNode* GQLParser::LocaldatetimeFunctionContext::LOCAL_DATETIME() {
  return getToken(GQLParser::LOCAL_DATETIME, 0);
}

tree::TerminalNode* GQLParser::LocaldatetimeFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

tree::TerminalNode* GQLParser::LocaldatetimeFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::DatetimeFunctionParametersContext* GQLParser::LocaldatetimeFunctionContext::datetimeFunctionParameters() {
  return getRuleContext<GQLParser::DatetimeFunctionParametersContext>(0);
}


size_t GQLParser::LocaldatetimeFunctionContext::getRuleIndex() const {
  return GQLParser::RuleLocaldatetimeFunction;
}


GQLParser::LocaldatetimeFunctionContext* GQLParser::localdatetimeFunction() {
  LocaldatetimeFunctionContext *_localctx = _tracker.createInstance<LocaldatetimeFunctionContext>(_ctx, getState());
  enterRule(_localctx, 1032, GQLParser::RuleLocaldatetimeFunction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4433);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::LOCAL_TIMESTAMP: {
        enterOuterAlt(_localctx, 1);
        setState(4426);
        match(GQLParser::LOCAL_TIMESTAMP);
        break;
      }

      case GQLParser::LOCAL_DATETIME: {
        enterOuterAlt(_localctx, 2);
        setState(4427);
        match(GQLParser::LOCAL_DATETIME);
        setState(4428);
        match(GQLParser::LEFT_PAREN);
        setState(4430);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == GQLParser::SINGLE_QUOTED_CHARACTER_SEQUENCE

        || _la == GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE || _la == GQLParser::RECORD || _la == GQLParser::LEFT_BRACE) {
          setState(4429);
          datetimeFunctionParameters();
        }
        setState(4432);
        match(GQLParser::RIGHT_PAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DateFunctionParametersContext ------------------------------------------------------------------

GQLParser::DateFunctionParametersContext::DateFunctionParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DateStringContext* GQLParser::DateFunctionParametersContext::dateString() {
  return getRuleContext<GQLParser::DateStringContext>(0);
}

GQLParser::RecordConstructorContext* GQLParser::DateFunctionParametersContext::recordConstructor() {
  return getRuleContext<GQLParser::RecordConstructorContext>(0);
}


size_t GQLParser::DateFunctionParametersContext::getRuleIndex() const {
  return GQLParser::RuleDateFunctionParameters;
}


GQLParser::DateFunctionParametersContext* GQLParser::dateFunctionParameters() {
  DateFunctionParametersContext *_localctx = _tracker.createInstance<DateFunctionParametersContext>(_ctx, getState());
  enterRule(_localctx, 1034, GQLParser::RuleDateFunctionParameters);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4437);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::SINGLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE: {
        enterOuterAlt(_localctx, 1);
        setState(4435);
        dateString();
        break;
      }

      case GQLParser::RECORD:
      case GQLParser::LEFT_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(4436);
        recordConstructor();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimeFunctionParametersContext ------------------------------------------------------------------

GQLParser::TimeFunctionParametersContext::TimeFunctionParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::TimeStringContext* GQLParser::TimeFunctionParametersContext::timeString() {
  return getRuleContext<GQLParser::TimeStringContext>(0);
}

GQLParser::RecordConstructorContext* GQLParser::TimeFunctionParametersContext::recordConstructor() {
  return getRuleContext<GQLParser::RecordConstructorContext>(0);
}


size_t GQLParser::TimeFunctionParametersContext::getRuleIndex() const {
  return GQLParser::RuleTimeFunctionParameters;
}


GQLParser::TimeFunctionParametersContext* GQLParser::timeFunctionParameters() {
  TimeFunctionParametersContext *_localctx = _tracker.createInstance<TimeFunctionParametersContext>(_ctx, getState());
  enterRule(_localctx, 1036, GQLParser::RuleTimeFunctionParameters);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4441);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::SINGLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE: {
        enterOuterAlt(_localctx, 1);
        setState(4439);
        timeString();
        break;
      }

      case GQLParser::RECORD:
      case GQLParser::LEFT_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(4440);
        recordConstructor();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatetimeFunctionParametersContext ------------------------------------------------------------------

GQLParser::DatetimeFunctionParametersContext::DatetimeFunctionParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DatetimeStringContext* GQLParser::DatetimeFunctionParametersContext::datetimeString() {
  return getRuleContext<GQLParser::DatetimeStringContext>(0);
}

GQLParser::RecordConstructorContext* GQLParser::DatetimeFunctionParametersContext::recordConstructor() {
  return getRuleContext<GQLParser::RecordConstructorContext>(0);
}


size_t GQLParser::DatetimeFunctionParametersContext::getRuleIndex() const {
  return GQLParser::RuleDatetimeFunctionParameters;
}


GQLParser::DatetimeFunctionParametersContext* GQLParser::datetimeFunctionParameters() {
  DatetimeFunctionParametersContext *_localctx = _tracker.createInstance<DatetimeFunctionParametersContext>(_ctx, getState());
  enterRule(_localctx, 1038, GQLParser::RuleDatetimeFunctionParameters);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4445);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::SINGLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE: {
        enterOuterAlt(_localctx, 1);
        setState(4443);
        datetimeString();
        break;
      }

      case GQLParser::RECORD:
      case GQLParser::LEFT_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(4444);
        recordConstructor();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DurationValueExpressionContext ------------------------------------------------------------------

GQLParser::DurationValueExpressionContext::DurationValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ValueExpressionContext* GQLParser::DurationValueExpressionContext::valueExpression() {
  return getRuleContext<GQLParser::ValueExpressionContext>(0);
}


size_t GQLParser::DurationValueExpressionContext::getRuleIndex() const {
  return GQLParser::RuleDurationValueExpression;
}


GQLParser::DurationValueExpressionContext* GQLParser::durationValueExpression() {
  DurationValueExpressionContext *_localctx = _tracker.createInstance<DurationValueExpressionContext>(_ctx, getState());
  enterRule(_localctx, 1040, GQLParser::RuleDurationValueExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4447);
    valueExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatetimeSubtractionContext ------------------------------------------------------------------

GQLParser::DatetimeSubtractionContext::DatetimeSubtractionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DatetimeSubtractionContext::DURATION_BETWEEN() {
  return getToken(GQLParser::DURATION_BETWEEN, 0);
}

tree::TerminalNode* GQLParser::DatetimeSubtractionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::DatetimeSubtractionParametersContext* GQLParser::DatetimeSubtractionContext::datetimeSubtractionParameters() {
  return getRuleContext<GQLParser::DatetimeSubtractionParametersContext>(0);
}

tree::TerminalNode* GQLParser::DatetimeSubtractionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}

GQLParser::TemporalDurationQualifierContext* GQLParser::DatetimeSubtractionContext::temporalDurationQualifier() {
  return getRuleContext<GQLParser::TemporalDurationQualifierContext>(0);
}


size_t GQLParser::DatetimeSubtractionContext::getRuleIndex() const {
  return GQLParser::RuleDatetimeSubtraction;
}


GQLParser::DatetimeSubtractionContext* GQLParser::datetimeSubtraction() {
  DatetimeSubtractionContext *_localctx = _tracker.createInstance<DatetimeSubtractionContext>(_ctx, getState());
  enterRule(_localctx, 1042, GQLParser::RuleDatetimeSubtraction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4449);
    match(GQLParser::DURATION_BETWEEN);
    setState(4450);
    match(GQLParser::LEFT_PAREN);
    setState(4451);
    datetimeSubtractionParameters();
    setState(4452);
    match(GQLParser::RIGHT_PAREN);
    setState(4454);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 495, _ctx)) {
    case 1: {
      setState(4453);
      temporalDurationQualifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatetimeSubtractionParametersContext ------------------------------------------------------------------

GQLParser::DatetimeSubtractionParametersContext::DatetimeSubtractionParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DatetimeValueExpression1Context* GQLParser::DatetimeSubtractionParametersContext::datetimeValueExpression1() {
  return getRuleContext<GQLParser::DatetimeValueExpression1Context>(0);
}

tree::TerminalNode* GQLParser::DatetimeSubtractionParametersContext::COMMA() {
  return getToken(GQLParser::COMMA, 0);
}

GQLParser::DatetimeValueExpression2Context* GQLParser::DatetimeSubtractionParametersContext::datetimeValueExpression2() {
  return getRuleContext<GQLParser::DatetimeValueExpression2Context>(0);
}


size_t GQLParser::DatetimeSubtractionParametersContext::getRuleIndex() const {
  return GQLParser::RuleDatetimeSubtractionParameters;
}


GQLParser::DatetimeSubtractionParametersContext* GQLParser::datetimeSubtractionParameters() {
  DatetimeSubtractionParametersContext *_localctx = _tracker.createInstance<DatetimeSubtractionParametersContext>(_ctx, getState());
  enterRule(_localctx, 1044, GQLParser::RuleDatetimeSubtractionParameters);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4456);
    datetimeValueExpression1();
    setState(4457);
    match(GQLParser::COMMA);
    setState(4458);
    datetimeValueExpression2();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatetimeValueExpression1Context ------------------------------------------------------------------

GQLParser::DatetimeValueExpression1Context::DatetimeValueExpression1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DatetimeValueExpressionContext* GQLParser::DatetimeValueExpression1Context::datetimeValueExpression() {
  return getRuleContext<GQLParser::DatetimeValueExpressionContext>(0);
}


size_t GQLParser::DatetimeValueExpression1Context::getRuleIndex() const {
  return GQLParser::RuleDatetimeValueExpression1;
}


GQLParser::DatetimeValueExpression1Context* GQLParser::datetimeValueExpression1() {
  DatetimeValueExpression1Context *_localctx = _tracker.createInstance<DatetimeValueExpression1Context>(_ctx, getState());
  enterRule(_localctx, 1046, GQLParser::RuleDatetimeValueExpression1);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4460);
    datetimeValueExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatetimeValueExpression2Context ------------------------------------------------------------------

GQLParser::DatetimeValueExpression2Context::DatetimeValueExpression2Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DatetimeValueExpressionContext* GQLParser::DatetimeValueExpression2Context::datetimeValueExpression() {
  return getRuleContext<GQLParser::DatetimeValueExpressionContext>(0);
}


size_t GQLParser::DatetimeValueExpression2Context::getRuleIndex() const {
  return GQLParser::RuleDatetimeValueExpression2;
}


GQLParser::DatetimeValueExpression2Context* GQLParser::datetimeValueExpression2() {
  DatetimeValueExpression2Context *_localctx = _tracker.createInstance<DatetimeValueExpression2Context>(_ctx, getState());
  enterRule(_localctx, 1048, GQLParser::RuleDatetimeValueExpression2);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4462);
    datetimeValueExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DurationValueFunctionContext ------------------------------------------------------------------

GQLParser::DurationValueFunctionContext::DurationValueFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DurationFunctionContext* GQLParser::DurationValueFunctionContext::durationFunction() {
  return getRuleContext<GQLParser::DurationFunctionContext>(0);
}

GQLParser::AbsoluteValueExpressionContext* GQLParser::DurationValueFunctionContext::absoluteValueExpression() {
  return getRuleContext<GQLParser::AbsoluteValueExpressionContext>(0);
}


size_t GQLParser::DurationValueFunctionContext::getRuleIndex() const {
  return GQLParser::RuleDurationValueFunction;
}


GQLParser::DurationValueFunctionContext* GQLParser::durationValueFunction() {
  DurationValueFunctionContext *_localctx = _tracker.createInstance<DurationValueFunctionContext>(_ctx, getState());
  enterRule(_localctx, 1050, GQLParser::RuleDurationValueFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4466);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DURATION: {
        enterOuterAlt(_localctx, 1);
        setState(4464);
        durationFunction();
        break;
      }

      case GQLParser::ABS: {
        enterOuterAlt(_localctx, 2);
        setState(4465);
        absoluteValueExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DurationFunctionContext ------------------------------------------------------------------

GQLParser::DurationFunctionContext::DurationFunctionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DurationFunctionContext::DURATION() {
  return getToken(GQLParser::DURATION, 0);
}

tree::TerminalNode* GQLParser::DurationFunctionContext::LEFT_PAREN() {
  return getToken(GQLParser::LEFT_PAREN, 0);
}

GQLParser::DurationFunctionParametersContext* GQLParser::DurationFunctionContext::durationFunctionParameters() {
  return getRuleContext<GQLParser::DurationFunctionParametersContext>(0);
}

tree::TerminalNode* GQLParser::DurationFunctionContext::RIGHT_PAREN() {
  return getToken(GQLParser::RIGHT_PAREN, 0);
}


size_t GQLParser::DurationFunctionContext::getRuleIndex() const {
  return GQLParser::RuleDurationFunction;
}


GQLParser::DurationFunctionContext* GQLParser::durationFunction() {
  DurationFunctionContext *_localctx = _tracker.createInstance<DurationFunctionContext>(_ctx, getState());
  enterRule(_localctx, 1052, GQLParser::RuleDurationFunction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4468);
    match(GQLParser::DURATION);
    setState(4469);
    match(GQLParser::LEFT_PAREN);
    setState(4470);
    durationFunctionParameters();
    setState(4471);
    match(GQLParser::RIGHT_PAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DurationFunctionParametersContext ------------------------------------------------------------------

GQLParser::DurationFunctionParametersContext::DurationFunctionParametersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DurationStringContext* GQLParser::DurationFunctionParametersContext::durationString() {
  return getRuleContext<GQLParser::DurationStringContext>(0);
}

GQLParser::RecordConstructorContext* GQLParser::DurationFunctionParametersContext::recordConstructor() {
  return getRuleContext<GQLParser::RecordConstructorContext>(0);
}


size_t GQLParser::DurationFunctionParametersContext::getRuleIndex() const {
  return GQLParser::RuleDurationFunctionParameters;
}


GQLParser::DurationFunctionParametersContext* GQLParser::durationFunctionParameters() {
  DurationFunctionParametersContext *_localctx = _tracker.createInstance<DurationFunctionParametersContext>(_ctx, getState());
  enterRule(_localctx, 1054, GQLParser::RuleDurationFunctionParameters);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4475);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::SINGLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE: {
        enterOuterAlt(_localctx, 1);
        setState(4473);
        durationString();
        break;
      }

      case GQLParser::RECORD:
      case GQLParser::LEFT_BRACE: {
        enterOuterAlt(_localctx, 2);
        setState(4474);
        recordConstructor();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectNameContext ------------------------------------------------------------------

GQLParser::ObjectNameContext::ObjectNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::ObjectNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::ObjectNameContext::getRuleIndex() const {
  return GQLParser::RuleObjectName;
}


GQLParser::ObjectNameContext* GQLParser::objectName() {
  ObjectNameContext *_localctx = _tracker.createInstance<ObjectNameContext>(_ctx, getState());
  enterRule(_localctx, 1056, GQLParser::RuleObjectName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4477);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectNameOrBindingVariableContext ------------------------------------------------------------------

GQLParser::ObjectNameOrBindingVariableContext::ObjectNameOrBindingVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::RegularIdentifierContext* GQLParser::ObjectNameOrBindingVariableContext::regularIdentifier() {
  return getRuleContext<GQLParser::RegularIdentifierContext>(0);
}


size_t GQLParser::ObjectNameOrBindingVariableContext::getRuleIndex() const {
  return GQLParser::RuleObjectNameOrBindingVariable;
}


GQLParser::ObjectNameOrBindingVariableContext* GQLParser::objectNameOrBindingVariable() {
  ObjectNameOrBindingVariableContext *_localctx = _tracker.createInstance<ObjectNameOrBindingVariableContext>(_ctx, getState());
  enterRule(_localctx, 1058, GQLParser::RuleObjectNameOrBindingVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4479);
    regularIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DirectoryNameContext ------------------------------------------------------------------

GQLParser::DirectoryNameContext::DirectoryNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::DirectoryNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::DirectoryNameContext::getRuleIndex() const {
  return GQLParser::RuleDirectoryName;
}


GQLParser::DirectoryNameContext* GQLParser::directoryName() {
  DirectoryNameContext *_localctx = _tracker.createInstance<DirectoryNameContext>(_ctx, getState());
  enterRule(_localctx, 1060, GQLParser::RuleDirectoryName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4481);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SchemaNameContext ------------------------------------------------------------------

GQLParser::SchemaNameContext::SchemaNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::SchemaNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::SchemaNameContext::getRuleIndex() const {
  return GQLParser::RuleSchemaName;
}


GQLParser::SchemaNameContext* GQLParser::schemaName() {
  SchemaNameContext *_localctx = _tracker.createInstance<SchemaNameContext>(_ctx, getState());
  enterRule(_localctx, 1062, GQLParser::RuleSchemaName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4483);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphNameContext ------------------------------------------------------------------

GQLParser::GraphNameContext::GraphNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::RegularIdentifierContext* GQLParser::GraphNameContext::regularIdentifier() {
  return getRuleContext<GQLParser::RegularIdentifierContext>(0);
}

GQLParser::DelimitedGraphNameContext* GQLParser::GraphNameContext::delimitedGraphName() {
  return getRuleContext<GQLParser::DelimitedGraphNameContext>(0);
}


size_t GQLParser::GraphNameContext::getRuleIndex() const {
  return GQLParser::RuleGraphName;
}


GQLParser::GraphNameContext* GQLParser::graphName() {
  GraphNameContext *_localctx = _tracker.createInstance<GraphNameContext>(_ctx, getState());
  enterRule(_localctx, 1064, GQLParser::RuleGraphName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4487);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ACYCLIC:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::CONNECTING:
      case GQLParser::DESTINATION:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::EDGE:
      case GQLParser::EDGES:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENTS:
      case GQLParser::FIRST:
      case GQLParser::GRAPH:
      case GQLParser::GROUPS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODE:
      case GQLParser::NORMALIZED:
      case GQLParser::ONLY:
      case GQLParser::ORDINALITY:
      case GQLParser::PROPERTY:
      case GQLParser::READ:
      case GQLParser::RELATIONSHIP:
      case GQLParser::RELATIONSHIPS:
      case GQLParser::REPEATABLE:
      case GQLParser::SHORTEST:
      case GQLParser::SIMPLE:
      case GQLParser::SOURCE:
      case GQLParser::TABLE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRANSACTION:
      case GQLParser::TYPE:
      case GQLParser::UNDIRECTED:
      case GQLParser::VERTEX:
      case GQLParser::WALK:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::ZONE:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(4485);
        regularIdentifier();
        break;
      }

      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::ACCENT_QUOTED_CHARACTER_SEQUENCE: {
        enterOuterAlt(_localctx, 2);
        setState(4486);
        delimitedGraphName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DelimitedGraphNameContext ------------------------------------------------------------------

GQLParser::DelimitedGraphNameContext::DelimitedGraphNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DelimitedGraphNameContext::DOUBLE_QUOTED_CHARACTER_SEQUENCE() {
  return getToken(GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0);
}

tree::TerminalNode* GQLParser::DelimitedGraphNameContext::ACCENT_QUOTED_CHARACTER_SEQUENCE() {
  return getToken(GQLParser::ACCENT_QUOTED_CHARACTER_SEQUENCE, 0);
}


size_t GQLParser::DelimitedGraphNameContext::getRuleIndex() const {
  return GQLParser::RuleDelimitedGraphName;
}


GQLParser::DelimitedGraphNameContext* GQLParser::delimitedGraphName() {
  DelimitedGraphNameContext *_localctx = _tracker.createInstance<DelimitedGraphNameContext>(_ctx, getState());
  enterRule(_localctx, 1066, GQLParser::RuleDelimitedGraphName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4489);
    _la = _input->LA(1);
    if (!(_la == GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE

    || _la == GQLParser::ACCENT_QUOTED_CHARACTER_SEQUENCE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GraphTypeNameContext ------------------------------------------------------------------

GQLParser::GraphTypeNameContext::GraphTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::GraphTypeNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::GraphTypeNameContext::getRuleIndex() const {
  return GQLParser::RuleGraphTypeName;
}


GQLParser::GraphTypeNameContext* GQLParser::graphTypeName() {
  GraphTypeNameContext *_localctx = _tracker.createInstance<GraphTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 1068, GQLParser::RuleGraphTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4491);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeTypeNameContext ------------------------------------------------------------------

GQLParser::NodeTypeNameContext::NodeTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::NodeTypeNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::NodeTypeNameContext::getRuleIndex() const {
  return GQLParser::RuleNodeTypeName;
}


GQLParser::NodeTypeNameContext* GQLParser::nodeTypeName() {
  NodeTypeNameContext *_localctx = _tracker.createInstance<NodeTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 1070, GQLParser::RuleNodeTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4493);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeTypeNameContext ------------------------------------------------------------------

GQLParser::EdgeTypeNameContext::EdgeTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::EdgeTypeNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::EdgeTypeNameContext::getRuleIndex() const {
  return GQLParser::RuleEdgeTypeName;
}


GQLParser::EdgeTypeNameContext* GQLParser::edgeTypeName() {
  EdgeTypeNameContext *_localctx = _tracker.createInstance<EdgeTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 1072, GQLParser::RuleEdgeTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4495);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingTableNameContext ------------------------------------------------------------------

GQLParser::BindingTableNameContext::BindingTableNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::RegularIdentifierContext* GQLParser::BindingTableNameContext::regularIdentifier() {
  return getRuleContext<GQLParser::RegularIdentifierContext>(0);
}

GQLParser::DelimitedBindingTableNameContext* GQLParser::BindingTableNameContext::delimitedBindingTableName() {
  return getRuleContext<GQLParser::DelimitedBindingTableNameContext>(0);
}


size_t GQLParser::BindingTableNameContext::getRuleIndex() const {
  return GQLParser::RuleBindingTableName;
}


GQLParser::BindingTableNameContext* GQLParser::bindingTableName() {
  BindingTableNameContext *_localctx = _tracker.createInstance<BindingTableNameContext>(_ctx, getState());
  enterRule(_localctx, 1074, GQLParser::RuleBindingTableName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4499);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ACYCLIC:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::CONNECTING:
      case GQLParser::DESTINATION:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::EDGE:
      case GQLParser::EDGES:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENTS:
      case GQLParser::FIRST:
      case GQLParser::GRAPH:
      case GQLParser::GROUPS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODE:
      case GQLParser::NORMALIZED:
      case GQLParser::ONLY:
      case GQLParser::ORDINALITY:
      case GQLParser::PROPERTY:
      case GQLParser::READ:
      case GQLParser::RELATIONSHIP:
      case GQLParser::RELATIONSHIPS:
      case GQLParser::REPEATABLE:
      case GQLParser::SHORTEST:
      case GQLParser::SIMPLE:
      case GQLParser::SOURCE:
      case GQLParser::TABLE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRANSACTION:
      case GQLParser::TYPE:
      case GQLParser::UNDIRECTED:
      case GQLParser::VERTEX:
      case GQLParser::WALK:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::ZONE:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(4497);
        regularIdentifier();
        break;
      }

      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::ACCENT_QUOTED_CHARACTER_SEQUENCE: {
        enterOuterAlt(_localctx, 2);
        setState(4498);
        delimitedBindingTableName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DelimitedBindingTableNameContext ------------------------------------------------------------------

GQLParser::DelimitedBindingTableNameContext::DelimitedBindingTableNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DelimitedBindingTableNameContext::DOUBLE_QUOTED_CHARACTER_SEQUENCE() {
  return getToken(GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0);
}

tree::TerminalNode* GQLParser::DelimitedBindingTableNameContext::ACCENT_QUOTED_CHARACTER_SEQUENCE() {
  return getToken(GQLParser::ACCENT_QUOTED_CHARACTER_SEQUENCE, 0);
}


size_t GQLParser::DelimitedBindingTableNameContext::getRuleIndex() const {
  return GQLParser::RuleDelimitedBindingTableName;
}


GQLParser::DelimitedBindingTableNameContext* GQLParser::delimitedBindingTableName() {
  DelimitedBindingTableNameContext *_localctx = _tracker.createInstance<DelimitedBindingTableNameContext>(_ctx, getState());
  enterRule(_localctx, 1076, GQLParser::RuleDelimitedBindingTableName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4501);
    _la = _input->LA(1);
    if (!(_la == GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE

    || _la == GQLParser::ACCENT_QUOTED_CHARACTER_SEQUENCE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureNameContext ------------------------------------------------------------------

GQLParser::ProcedureNameContext::ProcedureNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::ProcedureNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::ProcedureNameContext::getRuleIndex() const {
  return GQLParser::RuleProcedureName;
}


GQLParser::ProcedureNameContext* GQLParser::procedureName() {
  ProcedureNameContext *_localctx = _tracker.createInstance<ProcedureNameContext>(_ctx, getState());
  enterRule(_localctx, 1078, GQLParser::RuleProcedureName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4503);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabelNameContext ------------------------------------------------------------------

GQLParser::LabelNameContext::LabelNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::LabelNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::LabelNameContext::getRuleIndex() const {
  return GQLParser::RuleLabelName;
}


GQLParser::LabelNameContext* GQLParser::labelName() {
  LabelNameContext *_localctx = _tracker.createInstance<LabelNameContext>(_ctx, getState());
  enterRule(_localctx, 1080, GQLParser::RuleLabelName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4505);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyNameContext ------------------------------------------------------------------

GQLParser::PropertyNameContext::PropertyNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::PropertyNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::PropertyNameContext::getRuleIndex() const {
  return GQLParser::RulePropertyName;
}


GQLParser::PropertyNameContext* GQLParser::propertyName() {
  PropertyNameContext *_localctx = _tracker.createInstance<PropertyNameContext>(_ctx, getState());
  enterRule(_localctx, 1082, GQLParser::RulePropertyName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4507);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FieldNameContext ------------------------------------------------------------------

GQLParser::FieldNameContext::FieldNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::IdentifierContext* GQLParser::FieldNameContext::identifier() {
  return getRuleContext<GQLParser::IdentifierContext>(0);
}


size_t GQLParser::FieldNameContext::getRuleIndex() const {
  return GQLParser::RuleFieldName;
}


GQLParser::FieldNameContext* GQLParser::fieldName() {
  FieldNameContext *_localctx = _tracker.createInstance<FieldNameContext>(_ctx, getState());
  enterRule(_localctx, 1084, GQLParser::RuleFieldName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4509);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElementVariableContext ------------------------------------------------------------------

GQLParser::ElementVariableContext::ElementVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableContext* GQLParser::ElementVariableContext::bindingVariable() {
  return getRuleContext<GQLParser::BindingVariableContext>(0);
}


size_t GQLParser::ElementVariableContext::getRuleIndex() const {
  return GQLParser::RuleElementVariable;
}


GQLParser::ElementVariableContext* GQLParser::elementVariable() {
  ElementVariableContext *_localctx = _tracker.createInstance<ElementVariableContext>(_ctx, getState());
  enterRule(_localctx, 1086, GQLParser::RuleElementVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4511);
    bindingVariable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PathVariableContext ------------------------------------------------------------------

GQLParser::PathVariableContext::PathVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::BindingVariableContext* GQLParser::PathVariableContext::bindingVariable() {
  return getRuleContext<GQLParser::BindingVariableContext>(0);
}


size_t GQLParser::PathVariableContext::getRuleIndex() const {
  return GQLParser::RulePathVariable;
}


GQLParser::PathVariableContext* GQLParser::pathVariable() {
  PathVariableContext *_localctx = _tracker.createInstance<PathVariableContext>(_ctx, getState());
  enterRule(_localctx, 1088, GQLParser::RulePathVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4513);
    bindingVariable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubpathVariableContext ------------------------------------------------------------------

GQLParser::SubpathVariableContext::SubpathVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::RegularIdentifierContext* GQLParser::SubpathVariableContext::regularIdentifier() {
  return getRuleContext<GQLParser::RegularIdentifierContext>(0);
}


size_t GQLParser::SubpathVariableContext::getRuleIndex() const {
  return GQLParser::RuleSubpathVariable;
}


GQLParser::SubpathVariableContext* GQLParser::subpathVariable() {
  SubpathVariableContext *_localctx = _tracker.createInstance<SubpathVariableContext>(_ctx, getState());
  enterRule(_localctx, 1090, GQLParser::RuleSubpathVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4515);
    regularIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BindingVariableContext ------------------------------------------------------------------

GQLParser::BindingVariableContext::BindingVariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::RegularIdentifierContext* GQLParser::BindingVariableContext::regularIdentifier() {
  return getRuleContext<GQLParser::RegularIdentifierContext>(0);
}


size_t GQLParser::BindingVariableContext::getRuleIndex() const {
  return GQLParser::RuleBindingVariable;
}


GQLParser::BindingVariableContext* GQLParser::bindingVariable() {
  BindingVariableContext *_localctx = _tracker.createInstance<BindingVariableContext>(_ctx, getState());
  enterRule(_localctx, 1092, GQLParser::RuleBindingVariable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4517);
    regularIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnsignedLiteralContext ------------------------------------------------------------------

GQLParser::UnsignedLiteralContext::UnsignedLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::UnsignedNumericLiteralContext* GQLParser::UnsignedLiteralContext::unsignedNumericLiteral() {
  return getRuleContext<GQLParser::UnsignedNumericLiteralContext>(0);
}

GQLParser::GeneralLiteralContext* GQLParser::UnsignedLiteralContext::generalLiteral() {
  return getRuleContext<GQLParser::GeneralLiteralContext>(0);
}


size_t GQLParser::UnsignedLiteralContext::getRuleIndex() const {
  return GQLParser::RuleUnsignedLiteral;
}


GQLParser::UnsignedLiteralContext* GQLParser::unsignedLiteral() {
  UnsignedLiteralContext *_localctx = _tracker.createInstance<UnsignedLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1094, GQLParser::RuleUnsignedLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4521);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER:
      case GQLParser::UNSIGNED_HEXADECIMAL_INTEGER:
      case GQLParser::UNSIGNED_OCTAL_INTEGER:
      case GQLParser::UNSIGNED_BINARY_INTEGER: {
        enterOuterAlt(_localctx, 1);
        setState(4519);
        unsignedNumericLiteral();
        break;
      }

      case GQLParser::BOOLEAN_LITERAL:
      case GQLParser::SINGLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::BYTE_STRING_LITERAL:
      case GQLParser::ARRAY:
      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::DURATION:
      case GQLParser::LIST:
      case GQLParser::NULL_KW:
      case GQLParser::RECORD:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP:
      case GQLParser::LEFT_BRACE:
      case GQLParser::LEFT_BRACKET: {
        enterOuterAlt(_localctx, 2);
        setState(4520);
        generalLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GeneralLiteralContext ------------------------------------------------------------------

GQLParser::GeneralLiteralContext::GeneralLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::GeneralLiteralContext::BOOLEAN_LITERAL() {
  return getToken(GQLParser::BOOLEAN_LITERAL, 0);
}

GQLParser::CharacterStringLiteralContext* GQLParser::GeneralLiteralContext::characterStringLiteral() {
  return getRuleContext<GQLParser::CharacterStringLiteralContext>(0);
}

tree::TerminalNode* GQLParser::GeneralLiteralContext::BYTE_STRING_LITERAL() {
  return getToken(GQLParser::BYTE_STRING_LITERAL, 0);
}

GQLParser::TemporalLiteralContext* GQLParser::GeneralLiteralContext::temporalLiteral() {
  return getRuleContext<GQLParser::TemporalLiteralContext>(0);
}

GQLParser::DurationLiteralContext* GQLParser::GeneralLiteralContext::durationLiteral() {
  return getRuleContext<GQLParser::DurationLiteralContext>(0);
}

GQLParser::NullLiteralContext* GQLParser::GeneralLiteralContext::nullLiteral() {
  return getRuleContext<GQLParser::NullLiteralContext>(0);
}

GQLParser::ListLiteralContext* GQLParser::GeneralLiteralContext::listLiteral() {
  return getRuleContext<GQLParser::ListLiteralContext>(0);
}

GQLParser::RecordLiteralContext* GQLParser::GeneralLiteralContext::recordLiteral() {
  return getRuleContext<GQLParser::RecordLiteralContext>(0);
}


size_t GQLParser::GeneralLiteralContext::getRuleIndex() const {
  return GQLParser::RuleGeneralLiteral;
}


GQLParser::GeneralLiteralContext* GQLParser::generalLiteral() {
  GeneralLiteralContext *_localctx = _tracker.createInstance<GeneralLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1096, GQLParser::RuleGeneralLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4531);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::BOOLEAN_LITERAL: {
        enterOuterAlt(_localctx, 1);
        setState(4523);
        match(GQLParser::BOOLEAN_LITERAL);
        break;
      }

      case GQLParser::SINGLE_QUOTED_CHARACTER_SEQUENCE:
      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE: {
        enterOuterAlt(_localctx, 2);
        setState(4524);
        characterStringLiteral();
        break;
      }

      case GQLParser::BYTE_STRING_LITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(4525);
        match(GQLParser::BYTE_STRING_LITERAL);
        break;
      }

      case GQLParser::DATE:
      case GQLParser::DATETIME:
      case GQLParser::TIME:
      case GQLParser::TIMESTAMP: {
        enterOuterAlt(_localctx, 4);
        setState(4526);
        temporalLiteral();
        break;
      }

      case GQLParser::DURATION: {
        enterOuterAlt(_localctx, 5);
        setState(4527);
        durationLiteral();
        break;
      }

      case GQLParser::NULL_KW: {
        enterOuterAlt(_localctx, 6);
        setState(4528);
        nullLiteral();
        break;
      }

      case GQLParser::ARRAY:
      case GQLParser::LIST:
      case GQLParser::LEFT_BRACKET: {
        enterOuterAlt(_localctx, 7);
        setState(4529);
        listLiteral();
        break;
      }

      case GQLParser::RECORD:
      case GQLParser::LEFT_BRACE: {
        enterOuterAlt(_localctx, 8);
        setState(4530);
        recordLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemporalLiteralContext ------------------------------------------------------------------

GQLParser::TemporalLiteralContext::TemporalLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DateLiteralContext* GQLParser::TemporalLiteralContext::dateLiteral() {
  return getRuleContext<GQLParser::DateLiteralContext>(0);
}

GQLParser::TimeLiteralContext* GQLParser::TemporalLiteralContext::timeLiteral() {
  return getRuleContext<GQLParser::TimeLiteralContext>(0);
}

GQLParser::DatetimeLiteralContext* GQLParser::TemporalLiteralContext::datetimeLiteral() {
  return getRuleContext<GQLParser::DatetimeLiteralContext>(0);
}


size_t GQLParser::TemporalLiteralContext::getRuleIndex() const {
  return GQLParser::RuleTemporalLiteral;
}


GQLParser::TemporalLiteralContext* GQLParser::temporalLiteral() {
  TemporalLiteralContext *_localctx = _tracker.createInstance<TemporalLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1098, GQLParser::RuleTemporalLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4536);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::DATE: {
        enterOuterAlt(_localctx, 1);
        setState(4533);
        dateLiteral();
        break;
      }

      case GQLParser::TIME: {
        enterOuterAlt(_localctx, 2);
        setState(4534);
        timeLiteral();
        break;
      }

      case GQLParser::DATETIME:
      case GQLParser::TIMESTAMP: {
        enterOuterAlt(_localctx, 3);
        setState(4535);
        datetimeLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DateLiteralContext ------------------------------------------------------------------

GQLParser::DateLiteralContext::DateLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DateLiteralContext::DATE() {
  return getToken(GQLParser::DATE, 0);
}

GQLParser::DateStringContext* GQLParser::DateLiteralContext::dateString() {
  return getRuleContext<GQLParser::DateStringContext>(0);
}


size_t GQLParser::DateLiteralContext::getRuleIndex() const {
  return GQLParser::RuleDateLiteral;
}


GQLParser::DateLiteralContext* GQLParser::dateLiteral() {
  DateLiteralContext *_localctx = _tracker.createInstance<DateLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1100, GQLParser::RuleDateLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4538);
    match(GQLParser::DATE);
    setState(4539);
    dateString();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimeLiteralContext ------------------------------------------------------------------

GQLParser::TimeLiteralContext::TimeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::TimeLiteralContext::TIME() {
  return getToken(GQLParser::TIME, 0);
}

GQLParser::TimeStringContext* GQLParser::TimeLiteralContext::timeString() {
  return getRuleContext<GQLParser::TimeStringContext>(0);
}


size_t GQLParser::TimeLiteralContext::getRuleIndex() const {
  return GQLParser::RuleTimeLiteral;
}


GQLParser::TimeLiteralContext* GQLParser::timeLiteral() {
  TimeLiteralContext *_localctx = _tracker.createInstance<TimeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1102, GQLParser::RuleTimeLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4541);
    match(GQLParser::TIME);
    setState(4542);
    timeString();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatetimeLiteralContext ------------------------------------------------------------------

GQLParser::DatetimeLiteralContext::DatetimeLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::DatetimeStringContext* GQLParser::DatetimeLiteralContext::datetimeString() {
  return getRuleContext<GQLParser::DatetimeStringContext>(0);
}

tree::TerminalNode* GQLParser::DatetimeLiteralContext::DATETIME() {
  return getToken(GQLParser::DATETIME, 0);
}

tree::TerminalNode* GQLParser::DatetimeLiteralContext::TIMESTAMP() {
  return getToken(GQLParser::TIMESTAMP, 0);
}


size_t GQLParser::DatetimeLiteralContext::getRuleIndex() const {
  return GQLParser::RuleDatetimeLiteral;
}


GQLParser::DatetimeLiteralContext* GQLParser::datetimeLiteral() {
  DatetimeLiteralContext *_localctx = _tracker.createInstance<DatetimeLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1104, GQLParser::RuleDatetimeLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4544);
    _la = _input->LA(1);
    if (!(_la == GQLParser::DATETIME || _la == GQLParser::TIMESTAMP)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(4545);
    datetimeString();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ListLiteralContext ------------------------------------------------------------------

GQLParser::ListLiteralContext::ListLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ListValueConstructorByEnumerationContext* GQLParser::ListLiteralContext::listValueConstructorByEnumeration() {
  return getRuleContext<GQLParser::ListValueConstructorByEnumerationContext>(0);
}


size_t GQLParser::ListLiteralContext::getRuleIndex() const {
  return GQLParser::RuleListLiteral;
}


GQLParser::ListLiteralContext* GQLParser::listLiteral() {
  ListLiteralContext *_localctx = _tracker.createInstance<ListLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1106, GQLParser::RuleListLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4547);
    listValueConstructorByEnumeration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RecordLiteralContext ------------------------------------------------------------------

GQLParser::RecordLiteralContext::RecordLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::RecordConstructorContext* GQLParser::RecordLiteralContext::recordConstructor() {
  return getRuleContext<GQLParser::RecordConstructorContext>(0);
}


size_t GQLParser::RecordLiteralContext::getRuleIndex() const {
  return GQLParser::RuleRecordLiteral;
}


GQLParser::RecordLiteralContext* GQLParser::recordLiteral() {
  RecordLiteralContext *_localctx = _tracker.createInstance<RecordLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1108, GQLParser::RuleRecordLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4549);
    recordConstructor();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

GQLParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::RegularIdentifierContext* GQLParser::IdentifierContext::regularIdentifier() {
  return getRuleContext<GQLParser::RegularIdentifierContext>(0);
}

tree::TerminalNode* GQLParser::IdentifierContext::DOUBLE_QUOTED_CHARACTER_SEQUENCE() {
  return getToken(GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0);
}

tree::TerminalNode* GQLParser::IdentifierContext::ACCENT_QUOTED_CHARACTER_SEQUENCE() {
  return getToken(GQLParser::ACCENT_QUOTED_CHARACTER_SEQUENCE, 0);
}


size_t GQLParser::IdentifierContext::getRuleIndex() const {
  return GQLParser::RuleIdentifier;
}


GQLParser::IdentifierContext* GQLParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 1110, GQLParser::RuleIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4554);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::ACYCLIC:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::CONNECTING:
      case GQLParser::DESTINATION:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::EDGE:
      case GQLParser::EDGES:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENTS:
      case GQLParser::FIRST:
      case GQLParser::GRAPH:
      case GQLParser::GROUPS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODE:
      case GQLParser::NORMALIZED:
      case GQLParser::ONLY:
      case GQLParser::ORDINALITY:
      case GQLParser::PROPERTY:
      case GQLParser::READ:
      case GQLParser::RELATIONSHIP:
      case GQLParser::RELATIONSHIPS:
      case GQLParser::REPEATABLE:
      case GQLParser::SHORTEST:
      case GQLParser::SIMPLE:
      case GQLParser::SOURCE:
      case GQLParser::TABLE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRANSACTION:
      case GQLParser::TYPE:
      case GQLParser::UNDIRECTED:
      case GQLParser::VERTEX:
      case GQLParser::WALK:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::ZONE:
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(4551);
        regularIdentifier();
        break;
      }

      case GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE: {
        enterOuterAlt(_localctx, 2);
        setState(4552);
        match(GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE);
        break;
      }

      case GQLParser::ACCENT_QUOTED_CHARACTER_SEQUENCE: {
        enterOuterAlt(_localctx, 3);
        setState(4553);
        match(GQLParser::ACCENT_QUOTED_CHARACTER_SEQUENCE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RegularIdentifierContext ------------------------------------------------------------------

GQLParser::RegularIdentifierContext::RegularIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::RegularIdentifierContext::REGULAR_IDENTIFIER() {
  return getToken(GQLParser::REGULAR_IDENTIFIER, 0);
}

GQLParser::NonReservedWordsContext* GQLParser::RegularIdentifierContext::nonReservedWords() {
  return getRuleContext<GQLParser::NonReservedWordsContext>(0);
}


size_t GQLParser::RegularIdentifierContext::getRuleIndex() const {
  return GQLParser::RuleRegularIdentifier;
}


GQLParser::RegularIdentifierContext* GQLParser::regularIdentifier() {
  RegularIdentifierContext *_localctx = _tracker.createInstance<RegularIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 1112, GQLParser::RuleRegularIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4558);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::REGULAR_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(4556);
        match(GQLParser::REGULAR_IDENTIFIER);
        break;
      }

      case GQLParser::ACYCLIC:
      case GQLParser::BINDING:
      case GQLParser::BINDINGS:
      case GQLParser::CONNECTING:
      case GQLParser::DESTINATION:
      case GQLParser::DIFFERENT:
      case GQLParser::DIRECTED:
      case GQLParser::EDGE:
      case GQLParser::EDGES:
      case GQLParser::ELEMENT:
      case GQLParser::ELEMENTS:
      case GQLParser::FIRST:
      case GQLParser::GRAPH:
      case GQLParser::GROUPS:
      case GQLParser::KEEP:
      case GQLParser::LABEL:
      case GQLParser::LABELED:
      case GQLParser::LABELS:
      case GQLParser::LAST:
      case GQLParser::NFC:
      case GQLParser::NFD:
      case GQLParser::NFKC:
      case GQLParser::NFKD:
      case GQLParser::NO:
      case GQLParser::NODE:
      case GQLParser::NORMALIZED:
      case GQLParser::ONLY:
      case GQLParser::ORDINALITY:
      case GQLParser::PROPERTY:
      case GQLParser::READ:
      case GQLParser::RELATIONSHIP:
      case GQLParser::RELATIONSHIPS:
      case GQLParser::REPEATABLE:
      case GQLParser::SHORTEST:
      case GQLParser::SIMPLE:
      case GQLParser::SOURCE:
      case GQLParser::TABLE:
      case GQLParser::TO:
      case GQLParser::TRAIL:
      case GQLParser::TRANSACTION:
      case GQLParser::TYPE:
      case GQLParser::UNDIRECTED:
      case GQLParser::VERTEX:
      case GQLParser::WALK:
      case GQLParser::WITHOUT:
      case GQLParser::WRITE:
      case GQLParser::ZONE: {
        enterOuterAlt(_localctx, 2);
        setState(4557);
        nonReservedWords();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimeZoneStringContext ------------------------------------------------------------------

GQLParser::TimeZoneStringContext::TimeZoneStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CharacterStringLiteralContext* GQLParser::TimeZoneStringContext::characterStringLiteral() {
  return getRuleContext<GQLParser::CharacterStringLiteralContext>(0);
}


size_t GQLParser::TimeZoneStringContext::getRuleIndex() const {
  return GQLParser::RuleTimeZoneString;
}


GQLParser::TimeZoneStringContext* GQLParser::timeZoneString() {
  TimeZoneStringContext *_localctx = _tracker.createInstance<TimeZoneStringContext>(_ctx, getState());
  enterRule(_localctx, 1114, GQLParser::RuleTimeZoneString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4560);
    characterStringLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CharacterStringLiteralContext ------------------------------------------------------------------

GQLParser::CharacterStringLiteralContext::CharacterStringLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::CharacterStringLiteralContext::SINGLE_QUOTED_CHARACTER_SEQUENCE() {
  return getToken(GQLParser::SINGLE_QUOTED_CHARACTER_SEQUENCE, 0);
}

tree::TerminalNode* GQLParser::CharacterStringLiteralContext::DOUBLE_QUOTED_CHARACTER_SEQUENCE() {
  return getToken(GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE, 0);
}


size_t GQLParser::CharacterStringLiteralContext::getRuleIndex() const {
  return GQLParser::RuleCharacterStringLiteral;
}


GQLParser::CharacterStringLiteralContext* GQLParser::characterStringLiteral() {
  CharacterStringLiteralContext *_localctx = _tracker.createInstance<CharacterStringLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1116, GQLParser::RuleCharacterStringLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4562);
    _la = _input->LA(1);
    if (!(_la == GQLParser::SINGLE_QUOTED_CHARACTER_SEQUENCE

    || _la == GQLParser::DOUBLE_QUOTED_CHARACTER_SEQUENCE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnsignedNumericLiteralContext ------------------------------------------------------------------

GQLParser::UnsignedNumericLiteralContext::UnsignedNumericLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::ExactNumericLiteralContext* GQLParser::UnsignedNumericLiteralContext::exactNumericLiteral() {
  return getRuleContext<GQLParser::ExactNumericLiteralContext>(0);
}

GQLParser::ApproximateNumericLiteralContext* GQLParser::UnsignedNumericLiteralContext::approximateNumericLiteral() {
  return getRuleContext<GQLParser::ApproximateNumericLiteralContext>(0);
}


size_t GQLParser::UnsignedNumericLiteralContext::getRuleIndex() const {
  return GQLParser::RuleUnsignedNumericLiteral;
}


GQLParser::UnsignedNumericLiteralContext* GQLParser::unsignedNumericLiteral() {
  UnsignedNumericLiteralContext *_localctx = _tracker.createInstance<UnsignedNumericLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1118, GQLParser::RuleUnsignedNumericLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4566);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER:
      case GQLParser::UNSIGNED_HEXADECIMAL_INTEGER:
      case GQLParser::UNSIGNED_OCTAL_INTEGER:
      case GQLParser::UNSIGNED_BINARY_INTEGER: {
        enterOuterAlt(_localctx, 1);
        setState(4564);
        exactNumericLiteral();
        break;
      }

      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX:
      case GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX: {
        enterOuterAlt(_localctx, 2);
        setState(4565);
        approximateNumericLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExactNumericLiteralContext ------------------------------------------------------------------

GQLParser::ExactNumericLiteralContext::ExactNumericLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ExactNumericLiteralContext::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX, 0);
}

tree::TerminalNode* GQLParser::ExactNumericLiteralContext::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX, 0);
}

tree::TerminalNode* GQLParser::ExactNumericLiteralContext::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX, 0);
}

tree::TerminalNode* GQLParser::ExactNumericLiteralContext::UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX, 0);
}

GQLParser::UnsignedIntegerContext* GQLParser::ExactNumericLiteralContext::unsignedInteger() {
  return getRuleContext<GQLParser::UnsignedIntegerContext>(0);
}


size_t GQLParser::ExactNumericLiteralContext::getRuleIndex() const {
  return GQLParser::RuleExactNumericLiteral;
}


GQLParser::ExactNumericLiteralContext* GQLParser::exactNumericLiteral() {
  ExactNumericLiteralContext *_localctx = _tracker.createInstance<ExactNumericLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1120, GQLParser::RuleExactNumericLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(4573);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX: {
        enterOuterAlt(_localctx, 1);
        setState(4568);
        match(GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_EXACT_NUMBER_SUFFIX);
        break;
      }

      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX: {
        enterOuterAlt(_localctx, 2);
        setState(4569);
        match(GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_EXACT_NUMBER_SUFFIX);
        break;
      }

      case GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX: {
        enterOuterAlt(_localctx, 3);
        setState(4570);
        match(GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITHOUT_SUFFIX);
        break;
      }

      case GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX: {
        enterOuterAlt(_localctx, 4);
        setState(4571);
        match(GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_EXACT_NUMBER_SUFFIX);
        break;
      }

      case GQLParser::UNSIGNED_DECIMAL_INTEGER:
      case GQLParser::UNSIGNED_HEXADECIMAL_INTEGER:
      case GQLParser::UNSIGNED_OCTAL_INTEGER:
      case GQLParser::UNSIGNED_BINARY_INTEGER: {
        enterOuterAlt(_localctx, 5);
        setState(4572);
        unsignedInteger();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ApproximateNumericLiteralContext ------------------------------------------------------------------

GQLParser::ApproximateNumericLiteralContext::ApproximateNumericLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::ApproximateNumericLiteralContext::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX, 0);
}

tree::TerminalNode* GQLParser::ApproximateNumericLiteralContext::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION_WITHOUT_SUFFIX, 0);
}

tree::TerminalNode* GQLParser::ApproximateNumericLiteralContext::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_IN_COMMON_NOTATION_WITH_APPROXIMATE_NUMBER_SUFFIX, 0);
}

tree::TerminalNode* GQLParser::ApproximateNumericLiteralContext::UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_INTEGER_WITH_APPROXIMATE_NUMBER_SUFFIX, 0);
}


size_t GQLParser::ApproximateNumericLiteralContext::getRuleIndex() const {
  return GQLParser::RuleApproximateNumericLiteral;
}


GQLParser::ApproximateNumericLiteralContext* GQLParser::approximateNumericLiteral() {
  ApproximateNumericLiteralContext *_localctx = _tracker.createInstance<ApproximateNumericLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1122, GQLParser::RuleApproximateNumericLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4575);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 42496) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnsignedIntegerContext ------------------------------------------------------------------

GQLParser::UnsignedIntegerContext::UnsignedIntegerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::UnsignedIntegerContext::UNSIGNED_DECIMAL_INTEGER() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_INTEGER, 0);
}

tree::TerminalNode* GQLParser::UnsignedIntegerContext::UNSIGNED_HEXADECIMAL_INTEGER() {
  return getToken(GQLParser::UNSIGNED_HEXADECIMAL_INTEGER, 0);
}

tree::TerminalNode* GQLParser::UnsignedIntegerContext::UNSIGNED_OCTAL_INTEGER() {
  return getToken(GQLParser::UNSIGNED_OCTAL_INTEGER, 0);
}

tree::TerminalNode* GQLParser::UnsignedIntegerContext::UNSIGNED_BINARY_INTEGER() {
  return getToken(GQLParser::UNSIGNED_BINARY_INTEGER, 0);
}


size_t GQLParser::UnsignedIntegerContext::getRuleIndex() const {
  return GQLParser::RuleUnsignedInteger;
}


GQLParser::UnsignedIntegerContext* GQLParser::unsignedInteger() {
  UnsignedIntegerContext *_localctx = _tracker.createInstance<UnsignedIntegerContext>(_ctx, getState());
  enterRule(_localctx, 1124, GQLParser::RuleUnsignedInteger);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4577);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 983040) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnsignedDecimalIntegerContext ------------------------------------------------------------------

GQLParser::UnsignedDecimalIntegerContext::UnsignedDecimalIntegerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::UnsignedDecimalIntegerContext::UNSIGNED_DECIMAL_INTEGER() {
  return getToken(GQLParser::UNSIGNED_DECIMAL_INTEGER, 0);
}


size_t GQLParser::UnsignedDecimalIntegerContext::getRuleIndex() const {
  return GQLParser::RuleUnsignedDecimalInteger;
}


GQLParser::UnsignedDecimalIntegerContext* GQLParser::unsignedDecimalInteger() {
  UnsignedDecimalIntegerContext *_localctx = _tracker.createInstance<UnsignedDecimalIntegerContext>(_ctx, getState());
  enterRule(_localctx, 1126, GQLParser::RuleUnsignedDecimalInteger);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4579);
    match(GQLParser::UNSIGNED_DECIMAL_INTEGER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NullLiteralContext ------------------------------------------------------------------

GQLParser::NullLiteralContext::NullLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NullLiteralContext::NULL_KW() {
  return getToken(GQLParser::NULL_KW, 0);
}


size_t GQLParser::NullLiteralContext::getRuleIndex() const {
  return GQLParser::RuleNullLiteral;
}


GQLParser::NullLiteralContext* GQLParser::nullLiteral() {
  NullLiteralContext *_localctx = _tracker.createInstance<NullLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1128, GQLParser::RuleNullLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4581);
    match(GQLParser::NULL_KW);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DateStringContext ------------------------------------------------------------------

GQLParser::DateStringContext::DateStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CharacterStringLiteralContext* GQLParser::DateStringContext::characterStringLiteral() {
  return getRuleContext<GQLParser::CharacterStringLiteralContext>(0);
}


size_t GQLParser::DateStringContext::getRuleIndex() const {
  return GQLParser::RuleDateString;
}


GQLParser::DateStringContext* GQLParser::dateString() {
  DateStringContext *_localctx = _tracker.createInstance<DateStringContext>(_ctx, getState());
  enterRule(_localctx, 1130, GQLParser::RuleDateString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4583);
    characterStringLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TimeStringContext ------------------------------------------------------------------

GQLParser::TimeStringContext::TimeStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CharacterStringLiteralContext* GQLParser::TimeStringContext::characterStringLiteral() {
  return getRuleContext<GQLParser::CharacterStringLiteralContext>(0);
}


size_t GQLParser::TimeStringContext::getRuleIndex() const {
  return GQLParser::RuleTimeString;
}


GQLParser::TimeStringContext* GQLParser::timeString() {
  TimeStringContext *_localctx = _tracker.createInstance<TimeStringContext>(_ctx, getState());
  enterRule(_localctx, 1132, GQLParser::RuleTimeString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4585);
    characterStringLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DatetimeStringContext ------------------------------------------------------------------

GQLParser::DatetimeStringContext::DatetimeStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CharacterStringLiteralContext* GQLParser::DatetimeStringContext::characterStringLiteral() {
  return getRuleContext<GQLParser::CharacterStringLiteralContext>(0);
}


size_t GQLParser::DatetimeStringContext::getRuleIndex() const {
  return GQLParser::RuleDatetimeString;
}


GQLParser::DatetimeStringContext* GQLParser::datetimeString() {
  DatetimeStringContext *_localctx = _tracker.createInstance<DatetimeStringContext>(_ctx, getState());
  enterRule(_localctx, 1134, GQLParser::RuleDatetimeString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4587);
    characterStringLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DurationLiteralContext ------------------------------------------------------------------

GQLParser::DurationLiteralContext::DurationLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::DurationLiteralContext::DURATION() {
  return getToken(GQLParser::DURATION, 0);
}

GQLParser::DurationStringContext* GQLParser::DurationLiteralContext::durationString() {
  return getRuleContext<GQLParser::DurationStringContext>(0);
}


size_t GQLParser::DurationLiteralContext::getRuleIndex() const {
  return GQLParser::RuleDurationLiteral;
}


GQLParser::DurationLiteralContext* GQLParser::durationLiteral() {
  DurationLiteralContext *_localctx = _tracker.createInstance<DurationLiteralContext>(_ctx, getState());
  enterRule(_localctx, 1136, GQLParser::RuleDurationLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4589);
    match(GQLParser::DURATION);
    setState(4590);
    durationString();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DurationStringContext ------------------------------------------------------------------

GQLParser::DurationStringContext::DurationStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

GQLParser::CharacterStringLiteralContext* GQLParser::DurationStringContext::characterStringLiteral() {
  return getRuleContext<GQLParser::CharacterStringLiteralContext>(0);
}


size_t GQLParser::DurationStringContext::getRuleIndex() const {
  return GQLParser::RuleDurationString;
}


GQLParser::DurationStringContext* GQLParser::durationString() {
  DurationStringContext *_localctx = _tracker.createInstance<DurationStringContext>(_ctx, getState());
  enterRule(_localctx, 1138, GQLParser::RuleDurationString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4592);
    characterStringLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NodeSynonymContext ------------------------------------------------------------------

GQLParser::NodeSynonymContext::NodeSynonymContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NodeSynonymContext::NODE() {
  return getToken(GQLParser::NODE, 0);
}

tree::TerminalNode* GQLParser::NodeSynonymContext::VERTEX() {
  return getToken(GQLParser::VERTEX, 0);
}


size_t GQLParser::NodeSynonymContext::getRuleIndex() const {
  return GQLParser::RuleNodeSynonym;
}


GQLParser::NodeSynonymContext* GQLParser::nodeSynonym() {
  NodeSynonymContext *_localctx = _tracker.createInstance<NodeSynonymContext>(_ctx, getState());
  enterRule(_localctx, 1140, GQLParser::RuleNodeSynonym);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4594);
    _la = _input->LA(1);
    if (!(_la == GQLParser::NODE

    || _la == GQLParser::VERTEX)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgesSynonymContext ------------------------------------------------------------------

GQLParser::EdgesSynonymContext::EdgesSynonymContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::EdgesSynonymContext::EDGES() {
  return getToken(GQLParser::EDGES, 0);
}

tree::TerminalNode* GQLParser::EdgesSynonymContext::RELATIONSHIPS() {
  return getToken(GQLParser::RELATIONSHIPS, 0);
}


size_t GQLParser::EdgesSynonymContext::getRuleIndex() const {
  return GQLParser::RuleEdgesSynonym;
}


GQLParser::EdgesSynonymContext* GQLParser::edgesSynonym() {
  EdgesSynonymContext *_localctx = _tracker.createInstance<EdgesSynonymContext>(_ctx, getState());
  enterRule(_localctx, 1142, GQLParser::RuleEdgesSynonym);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4596);
    _la = _input->LA(1);
    if (!(_la == GQLParser::EDGES

    || _la == GQLParser::RELATIONSHIPS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EdgeSynonymContext ------------------------------------------------------------------

GQLParser::EdgeSynonymContext::EdgeSynonymContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::EdgeSynonymContext::EDGE() {
  return getToken(GQLParser::EDGE, 0);
}

tree::TerminalNode* GQLParser::EdgeSynonymContext::RELATIONSHIP() {
  return getToken(GQLParser::RELATIONSHIP, 0);
}


size_t GQLParser::EdgeSynonymContext::getRuleIndex() const {
  return GQLParser::RuleEdgeSynonym;
}


GQLParser::EdgeSynonymContext* GQLParser::edgeSynonym() {
  EdgeSynonymContext *_localctx = _tracker.createInstance<EdgeSynonymContext>(_ctx, getState());
  enterRule(_localctx, 1144, GQLParser::RuleEdgeSynonym);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4598);
    _la = _input->LA(1);
    if (!(_la == GQLParser::EDGE

    || _la == GQLParser::RELATIONSHIP)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NonReservedWordsContext ------------------------------------------------------------------

GQLParser::NonReservedWordsContext::NonReservedWordsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::ACYCLIC() {
  return getToken(GQLParser::ACYCLIC, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::BINDING() {
  return getToken(GQLParser::BINDING, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::BINDINGS() {
  return getToken(GQLParser::BINDINGS, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::CONNECTING() {
  return getToken(GQLParser::CONNECTING, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::DESTINATION() {
  return getToken(GQLParser::DESTINATION, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::DIFFERENT() {
  return getToken(GQLParser::DIFFERENT, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::DIRECTED() {
  return getToken(GQLParser::DIRECTED, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::EDGE() {
  return getToken(GQLParser::EDGE, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::EDGES() {
  return getToken(GQLParser::EDGES, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::ELEMENT() {
  return getToken(GQLParser::ELEMENT, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::ELEMENTS() {
  return getToken(GQLParser::ELEMENTS, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::FIRST() {
  return getToken(GQLParser::FIRST, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::GRAPH() {
  return getToken(GQLParser::GRAPH, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::GROUPS() {
  return getToken(GQLParser::GROUPS, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::KEEP() {
  return getToken(GQLParser::KEEP, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::LABEL() {
  return getToken(GQLParser::LABEL, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::LABELED() {
  return getToken(GQLParser::LABELED, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::LABELS() {
  return getToken(GQLParser::LABELS, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::LAST() {
  return getToken(GQLParser::LAST, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::NFC() {
  return getToken(GQLParser::NFC, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::NFD() {
  return getToken(GQLParser::NFD, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::NFKC() {
  return getToken(GQLParser::NFKC, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::NFKD() {
  return getToken(GQLParser::NFKD, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::NO() {
  return getToken(GQLParser::NO, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::NODE() {
  return getToken(GQLParser::NODE, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::NORMALIZED() {
  return getToken(GQLParser::NORMALIZED, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::ONLY() {
  return getToken(GQLParser::ONLY, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::ORDINALITY() {
  return getToken(GQLParser::ORDINALITY, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::PROPERTY() {
  return getToken(GQLParser::PROPERTY, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::READ() {
  return getToken(GQLParser::READ, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::RELATIONSHIP() {
  return getToken(GQLParser::RELATIONSHIP, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::RELATIONSHIPS() {
  return getToken(GQLParser::RELATIONSHIPS, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::REPEATABLE() {
  return getToken(GQLParser::REPEATABLE, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::SHORTEST() {
  return getToken(GQLParser::SHORTEST, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::SIMPLE() {
  return getToken(GQLParser::SIMPLE, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::SOURCE() {
  return getToken(GQLParser::SOURCE, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::TABLE() {
  return getToken(GQLParser::TABLE, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::TO() {
  return getToken(GQLParser::TO, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::TRAIL() {
  return getToken(GQLParser::TRAIL, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::TRANSACTION() {
  return getToken(GQLParser::TRANSACTION, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::TYPE() {
  return getToken(GQLParser::TYPE, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::UNDIRECTED() {
  return getToken(GQLParser::UNDIRECTED, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::VERTEX() {
  return getToken(GQLParser::VERTEX, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::WALK() {
  return getToken(GQLParser::WALK, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::WITHOUT() {
  return getToken(GQLParser::WITHOUT, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::WRITE() {
  return getToken(GQLParser::WRITE, 0);
}

tree::TerminalNode* GQLParser::NonReservedWordsContext::ZONE() {
  return getToken(GQLParser::ZONE, 0);
}


size_t GQLParser::NonReservedWordsContext::getRuleIndex() const {
  return GQLParser::RuleNonReservedWords;
}


GQLParser::NonReservedWordsContext* GQLParser::nonReservedWords() {
  NonReservedWordsContext *_localctx = _tracker.createInstance<NonReservedWordsContext>(_ctx, getState());
  enterRule(_localctx, 1146, GQLParser::RuleNonReservedWords);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(4600);
    _la = _input->LA(1);
    if (!(((((_la - 277) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 277)) & 140737488355327) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool GQLParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 92: return compositeQueryExpressionSempred(antlrcpp::downCast<CompositeQueryExpressionContext *>(context), predicateIndex);
    case 214: return labelExpressionSempred(antlrcpp::downCast<LabelExpressionContext *>(context), predicateIndex);
    case 233: return simplifiedTermSempred(antlrcpp::downCast<SimplifiedTermContext *>(context), predicateIndex);
    case 234: return simplifiedFactorLowSempred(antlrcpp::downCast<SimplifiedFactorLowContext *>(context), predicateIndex);
    case 337: return valueTypeSempred(antlrcpp::downCast<ValueTypeContext *>(context), predicateIndex);
    case 409: return valueExpressionSempred(antlrcpp::downCast<ValueExpressionContext *>(context), predicateIndex);
    case 421: return valueExpressionPrimarySempred(antlrcpp::downCast<ValueExpressionPrimaryContext *>(context), predicateIndex);
    case 476: return numericValueExpressionSempred(antlrcpp::downCast<NumericValueExpressionContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool GQLParser::compositeQueryExpressionSempred(CompositeQueryExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool GQLParser::labelExpressionSempred(LabelExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 5);
    case 2: return precpred(_ctx, 4);

  default:
    break;
  }
  return true;
}

bool GQLParser::simplifiedTermSempred(SimplifiedTermContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 3: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool GQLParser::simplifiedFactorLowSempred(SimplifiedFactorLowContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 4: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool GQLParser::valueTypeSempred(ValueTypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 5: return precpred(_ctx, 1);
    case 6: return precpred(_ctx, 7);

  default:
    break;
  }
  return true;
}

bool GQLParser::valueExpressionSempred(ValueExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 7: return precpred(_ctx, 14);
    case 8: return precpred(_ctx, 13);
    case 9: return precpred(_ctx, 12);
    case 10: return precpred(_ctx, 11);
    case 11: return precpred(_ctx, 6);
    case 12: return precpred(_ctx, 5);
    case 13: return precpred(_ctx, 9);
    case 14: return precpred(_ctx, 7);

  default:
    break;
  }
  return true;
}

bool GQLParser::valueExpressionPrimarySempred(ValueExpressionPrimaryContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 15: return precpred(_ctx, 7);

  default:
    break;
  }
  return true;
}

bool GQLParser::numericValueExpressionSempred(NumericValueExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 16: return precpred(_ctx, 4);
    case 17: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

void GQLParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  gqlParserInitialize();
#else
  ::antlr4::internal::call_once(gqlParserOnceFlag, gqlParserInitialize);
#endif
}
